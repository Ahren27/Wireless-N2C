
Wireless_N2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cf4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08009e84  08009e84  0000ae84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a078  0800a078  0000c068  2**0
                  CONTENTS
  4 .ARM          00000000  0800a078  0800a078  0000c068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a078  0800a078  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a078  0800a078  0000b078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a07c  0800a07c  0000b07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800a080  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  20000068  0800a0e8  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00001e00  20001c58  0800a0e8  0000cc58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020827  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000516a  00000000  00000000  0002c8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f70  00000000  00000000  00031a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f0  00000000  00000000  000339a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ece  00000000  00000000  00035190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220e3  00000000  00000000  0003c05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109891  00000000  00000000  0005e141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001679d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008598  00000000  00000000  00167a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e6c 	.word	0x08009e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08009e6c 	.word	0x08009e6c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a32      	ldr	r2, [pc, #200]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a2c      	ldr	r2, [pc, #176]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a26      	ldr	r2, [pc, #152]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a14:	f003 ff08 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2140      	movs	r1, #64	@ 0x40
 8000a1c:	481d      	ldr	r0, [pc, #116]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a1e:	f003 ff03 	bl	8004828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a26:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <MX_GPIO_Init+0xec>)
 8000a38:	f003 fd4c 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a58:	f003 fd3c 	bl	80044d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000a5c:	2340      	movs	r3, #64	@ 0x40
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a74:	f003 fd2e 	bl	80044d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	2017      	movs	r0, #23
 8000a7e:	f003 fcf1 	bl	8004464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a82:	2017      	movs	r0, #23
 8000a84:	f003 fd0a 	bl	800449c <HAL_NVIC_EnableIRQ>

}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000400 	.word	0x48000400
 8000a98:	48000800 	.word	0x48000800

08000a9c <I2C_GPIO_Init1>:
#include "FreeRTOS.h"                   // ARM.FreeRTOS::RTOS:Core
#include "task.h"                       // ARM.FreeRTOS::RTOS:Core
#include "event_groups.h"               // ARM.FreeRTOS::RTOS:Event Groups
#include "semphr.h"                     // ARM.FreeRTOS::RTOS:Core

void I2C_GPIO_Init1(void) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <I2C_GPIO_Init1+0x88>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b24 <I2C_GPIO_Init1+0x88>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C1EN);
 8000aac:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <I2C_GPIO_Init1+0x88>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <I2C_GPIO_Init1+0x88>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab6:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 8 and 9 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000abe:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000ac2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1);
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000aca:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000ace:	6013      	str	r3, [r2, #0]

	// Set Pins 8 and 9 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ada:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a11      	ldr	r2, [pc, #68]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ae2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000ae6:	6053      	str	r3, [r2, #4]

	// Set pints 8 and 9 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED9);
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	4a0e      	ldr	r2, [pc, #56]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000aee:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000af2:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED8_1 | GPIO_OSPEEDR_OSPEED9_1);
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000afa:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000afe:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL8 | GPIO_AFRH_AFSEL9);
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b04:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000b06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000b0a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= ((4 << GPIO_AFRH_AFSEL8_Pos) | 4 << GPIO_AFRH_AFSEL9_Pos);
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b10:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000b12:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000b16:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400

08000b2c <I2C_GPIO_Init2>:

void I2C_GPIO_Init2(void) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	// Configure GPIOC for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);
 8000b30:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <I2C_GPIO_Init2+0x88>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb4 <I2C_GPIO_Init2+0x88>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C3EN);
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <I2C_GPIO_Init2+0x88>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b40:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <I2C_GPIO_Init2+0x88>)
 8000b42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b46:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 0 and 1 to AF mode
	GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b4e:	f023 030f 	bic.w	r3, r3, #15
 8000b52:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1);
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b5a:	f043 030a 	orr.w	r3, r3, #10
 8000b5e:	6013      	str	r3, [r2, #0]

	// Set Pins 0 and 1 to open drain
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b66:	f023 0303 	bic.w	r3, r3, #3
 8000b6a:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER |= (GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b72:	f043 0303 	orr.w	r3, r3, #3
 8000b76:	6053      	str	r3, [r2, #4]

	// Set pints 0 and 1 to high speed
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1);
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b7e:	f023 030f 	bic.w	r3, r3, #15
 8000b82:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER |= (GPIO_OSPEEDR_OSPEED0_1 | GPIO_OSPEEDR_OSPEED1_1);
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b8a:	f043 030a 	orr.w	r3, r3, #10
 8000b8e:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOC->AFR[0] &= ~(GPIO_AFRL_AFSEL0 | GPIO_AFRL_AFSEL1);
 8000b90:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000b9a:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |=
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000ba2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000ba6:	6213      	str	r3, [r2, #32]
			((4 << GPIO_AFRL_AFSEL0_Pos) | 4 << GPIO_AFRL_AFSEL1_Pos);
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000800 	.word	0x48000800

08000bbc <I2C_init1>:

void I2C_init1() {
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <I2C_init1+0x44>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <I2C_init1+0x44>)
 8000bc6:	f023 0301 	bic.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <I2C_init1+0x44>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <I2C_init1+0x44>)
 8000bd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bd6:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <I2C_init1+0x44>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <I2C_init1+0x44>)
 8000bde:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000be2:	6013      	str	r3, [r2, #0]

	I2C1->TIMINGR = 0x10909CEC;
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <I2C_init1+0x44>)
 8000be6:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <I2C_init1+0x48>)
 8000be8:	611a      	str	r2, [r3, #16]

	I2C1->CR1 |= I2C_CR1_PE;
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <I2C_init1+0x44>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <I2C_init1+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40005400 	.word	0x40005400
 8000c04:	10909cec 	.word	0x10909cec

08000c08 <I2C_init2>:

void I2C_init2() {
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	I2C3->CR1 &= ~I2C_CR1_PE;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <I2C_init2+0x44>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0e      	ldr	r2, [pc, #56]	@ (8000c4c <I2C_init2+0x44>)
 8000c12:	f023 0301 	bic.w	r3, r3, #1
 8000c16:	6013      	str	r3, [r2, #0]

	I2C3->CR1 &= ~I2C_CR1_ANFOFF;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <I2C_init2+0x44>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <I2C_init2+0x44>)
 8000c1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c22:	6013      	str	r3, [r2, #0]
	I2C3->CR1 &= ~I2C_CR1_NOSTRETCH;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <I2C_init2+0x44>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <I2C_init2+0x44>)
 8000c2a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000c2e:	6013      	str	r3, [r2, #0]

	I2C3->TIMINGR = 0x10909CEC;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <I2C_init2+0x44>)
 8000c32:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <I2C_init2+0x48>)
 8000c34:	611a      	str	r2, [r3, #16]

	I2C3->CR1 |= I2C_CR1_PE;
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <I2C_init2+0x44>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <I2C_init2+0x44>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40005c00 	.word	0x40005c00
 8000c50:	10909cec 	.word	0x10909cec

08000c54 <N2C_Config1>:

/******************************* NUNCHUCK #1 ********************************/

void N2C_Config1() {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	71bb      	strb	r3, [r7, #6]
 8000c6a:	e060      	b.n	8000d2e <N2C_Config1+0xda>
		I2C_init1();
 8000c6c:	f7ff ffa6 	bl	8000bbc <I2C_init1>

		/* Clear and then set AUTOEND bit to 1 */
		I2C1->CR2 &= ~(I2C_CR2_AUTOEND);
 8000c70:	4b33      	ldr	r3, [pc, #204]	@ (8000d40 <N2C_Config1+0xec>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4a32      	ldr	r2, [pc, #200]	@ (8000d40 <N2C_Config1+0xec>)
 8000c76:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000c7a:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (I2C_CR2_AUTOEND);
 8000c7c:	4b30      	ldr	r3, [pc, #192]	@ (8000d40 <N2C_Config1+0xec>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	4a2f      	ldr	r2, [pc, #188]	@ (8000d40 <N2C_Config1+0xec>)
 8000c82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c86:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000c88:	4b2d      	ldr	r3, [pc, #180]	@ (8000d40 <N2C_Config1+0xec>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000d40 <N2C_Config1+0xec>)
 8000c8e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c96:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000c98:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <N2C_Config1+0xec>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <N2C_Config1+0xec>)
 8000c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca2:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 8000ca4:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <N2C_Config1+0xec>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4a25      	ldr	r2, [pc, #148]	@ (8000d40 <N2C_Config1+0xec>)
 8000caa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000cae:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C1->CR2 |= (N2C_ADDR << 1);
 8000cb0:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <N2C_Config1+0xec>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a22      	ldr	r2, [pc, #136]	@ (8000d40 <N2C_Config1+0xec>)
 8000cb6:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000cba:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C1->CR2 |= I2C_CR2_START;
 8000cbc:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <N2C_Config1+0xec>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d40 <N2C_Config1+0xec>)
 8000cc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cc6:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000cc8:	bf00      	nop
 8000cca:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <N2C_Config1+0xec>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f9      	beq.n	8000cca <N2C_Config1+0x76>
			;

		/* Get Data */
		data = N2C_data(step);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f9e3 	bl	80010a4 <N2C_data>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 8000ce2:	4a17      	ldr	r2, [pc, #92]	@ (8000d40 <N2C_Config1+0xec>)
 8000ce4:	797b      	ldrb	r3, [r7, #5]
 8000ce6:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000ce8:	bf00      	nop
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <N2C_Config1+0xec>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f9      	beq.n	8000cea <N2C_Config1+0x96>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f9d0 	bl	80010a4 <N2C_data>
 8000d04:	4603      	mov	r3, r0
 8000d06:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <N2C_Config1+0xec>)
 8000d0a:	797b      	ldrb	r3, [r7, #5]
 8000d0c:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C1->ISR & I2C_ISR_STOPF))
 8000d0e:	bf00      	nop
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <N2C_Config1+0xec>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f9      	beq.n	8000d10 <N2C_Config1+0xbc>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]

		/* Delay for 1ms */
		vTaskDelay(pdMS_TO_TICKS(10));
 8000d22:	200a      	movs	r0, #10
 8000d24:	f006 ffcc 	bl	8007cc0 <vTaskDelay>
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d99b      	bls.n	8000c6c <N2C_Config1+0x18>
	}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40005400 	.word	0x40005400

08000d44 <N2C_Read1>:

void N2C_Read1(uint8_t *measurments) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C_init1();
 8000d54:	f7ff ff32 	bl	8000bbc <I2C_init1>

	I2C1->CR2 = 0;
 8000d58:	4b47      	ldr	r3, [pc, #284]	@ (8000e78 <N2C_Read1+0x134>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C1->CR2 |= I2C_CR2_AUTOEND;
 8000d5e:	4b46      	ldr	r3, [pc, #280]	@ (8000e78 <N2C_Read1+0x134>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a45      	ldr	r2, [pc, #276]	@ (8000e78 <N2C_Read1+0x134>)
 8000d64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d68:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000d6a:	4b43      	ldr	r3, [pc, #268]	@ (8000e78 <N2C_Read1+0x134>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a42      	ldr	r2, [pc, #264]	@ (8000e78 <N2C_Read1+0x134>)
 8000d70:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d78:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8000d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e78 <N2C_Read1+0x134>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e78 <N2C_Read1+0x134>)
 8000d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d84:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 8000d86:	4b3c      	ldr	r3, [pc, #240]	@ (8000e78 <N2C_Read1+0x134>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000e78 <N2C_Read1+0x134>)
 8000d8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d90:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 8000d92:	4b39      	ldr	r3, [pc, #228]	@ (8000e78 <N2C_Read1+0x134>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4a38      	ldr	r2, [pc, #224]	@ (8000e78 <N2C_Read1+0x134>)
 8000d98:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000d9c:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8000d9e:	4b36      	ldr	r3, [pc, #216]	@ (8000e78 <N2C_Read1+0x134>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	4a35      	ldr	r2, [pc, #212]	@ (8000e78 <N2C_Read1+0x134>)
 8000da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000da8:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000daa:	bf00      	nop
 8000dac:	4b32      	ldr	r3, [pc, #200]	@ (8000e78 <N2C_Read1+0x134>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f9      	beq.n	8000dac <N2C_Read1+0x68>
		;

	/* Get Data */
	data = N2C_data(step);
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f972 	bl	80010a4 <N2C_data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C1->TXDR |= data;
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e78 <N2C_Read1+0x134>)
 8000dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	492b      	ldr	r1, [pc, #172]	@ (8000e78 <N2C_Read1+0x134>)
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C1->ISR & I2C_ISR_STOPF))
 8000dd0:	bf00      	nop
 8000dd2:	4b29      	ldr	r3, [pc, #164]	@ (8000e78 <N2C_Read1+0x134>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 0320 	and.w	r3, r3, #32
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f9      	beq.n	8000dd2 <N2C_Read1+0x8e>
		;

	/* Delay for 1ms */
	vTaskDelay(pdMS_TO_TICKS(10));
 8000dde:	200a      	movs	r0, #10
 8000de0:	f006 ff6e 	bl	8007cc0 <vTaskDelay>

	///// Read Measurements /////

	I2C1->CR2 &= ~I2C_CR2_AUTOEND;
 8000de4:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <N2C_Read1+0x134>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <N2C_Read1+0x134>)
 8000dea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000dee:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C1 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000df0:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <N2C_Read1+0x134>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <N2C_Read1+0x134>)
 8000df6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000dfe:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C1->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <N2C_Read1+0x134>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	4a1c      	ldr	r2, [pc, #112]	@ (8000e78 <N2C_Read1+0x134>)
 8000e06:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8000e0a:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C1->CR2 |= I2C_CR2_RD_WRN;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <N2C_Read1+0x134>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <N2C_Read1+0x134>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e16:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 8000e18:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <N2C_Read1+0x134>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a16      	ldr	r2, [pc, #88]	@ (8000e78 <N2C_Read1+0x134>)
 8000e1e:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000e22:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <N2C_Read1+0x134>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	4a13      	ldr	r2, [pc, #76]	@ (8000e78 <N2C_Read1+0x134>)
 8000e2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e2e:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e010      	b.n	8000e58 <N2C_Read1+0x114>
		/* Wait until byte is received */
		while (!(I2C1->ISR & I2C_ISR_RXNE))
 8000e36:	bf00      	nop
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <N2C_Read1+0x134>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f9      	beq.n	8000e38 <N2C_Read1+0xf4>
			;

		/* Receive byte */
		measurments[i] = I2C1->RXDR;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <N2C_Read1+0x134>)
 8000e46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d9eb      	bls.n	8000e36 <N2C_Read1+0xf2>
	}

	I2C1->CR2 |= (I2C_CR2_STOP);
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <N2C_Read1+0x134>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <N2C_Read1+0x134>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e68:	6053      	str	r3, [r2, #4]

	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f006 ff28 	bl	8007cc0 <vTaskDelay>
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40005400 	.word	0x40005400

08000e7c <N2C_Config2>:

/******************************* NUNCHUCK #2 ********************************/

void N2C_Config2() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	e060      	b.n	8000f56 <N2C_Config2+0xda>
		I2C_init2();
 8000e94:	f7ff feb8 	bl	8000c08 <I2C_init2>

		/* Clear and then set AUTOEND bit to 1 */
		I2C3->CR2 &= ~(I2C_CR2_AUTOEND);
 8000e98:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <N2C_Config2+0xec>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	4a32      	ldr	r2, [pc, #200]	@ (8000f68 <N2C_Config2+0xec>)
 8000e9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000ea2:	6053      	str	r3, [r2, #4]
		I2C3->CR2 |= (I2C_CR2_AUTOEND);
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <N2C_Config2+0xec>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8000f68 <N2C_Config2+0xec>)
 8000eaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eae:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <N2C_Config2+0xec>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f68 <N2C_Config2+0xec>)
 8000eb6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ebe:	6053      	str	r3, [r2, #4]
		I2C3->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000ec0:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <N2C_Config2+0xec>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4a28      	ldr	r2, [pc, #160]	@ (8000f68 <N2C_Config2+0xec>)
 8000ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eca:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C3->CR2 &= ~I2C_CR2_RD_WRN;
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <N2C_Config2+0xec>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	4a25      	ldr	r2, [pc, #148]	@ (8000f68 <N2C_Config2+0xec>)
 8000ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ed6:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C3->CR2 |= (N2C_ADDR << 1);
 8000ed8:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <N2C_Config2+0xec>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4a22      	ldr	r2, [pc, #136]	@ (8000f68 <N2C_Config2+0xec>)
 8000ede:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000ee2:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C3->CR2 |= I2C_CR2_START;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <N2C_Config2+0xec>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f68 <N2C_Config2+0xec>)
 8000eea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eee:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C3->ISR & I2C_ISR_TXIS))
 8000ef0:	bf00      	nop
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <N2C_Config2+0xec>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f9      	beq.n	8000ef2 <N2C_Config2+0x76>
			;

		/* Get Data */
		data = N2C_data(step);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f8cf 	bl	80010a4 <N2C_data>
 8000f06:	4603      	mov	r3, r0
 8000f08:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C3->TXDR = data;
 8000f0a:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <N2C_Config2+0xec>)
 8000f0c:	797b      	ldrb	r3, [r7, #5]
 8000f0e:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C3->ISR & I2C_ISR_TXIS))
 8000f10:	bf00      	nop
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <N2C_Config2+0xec>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f9      	beq.n	8000f12 <N2C_Config2+0x96>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	3301      	adds	r3, #1
 8000f22:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f8bc 	bl	80010a4 <N2C_data>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C3->TXDR = data;
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <N2C_Config2+0xec>)
 8000f32:	797b      	ldrb	r3, [r7, #5]
 8000f34:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C3->ISR & I2C_ISR_STOPF))
 8000f36:	bf00      	nop
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <N2C_Config2+0xec>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f9      	beq.n	8000f38 <N2C_Config2+0xbc>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	3301      	adds	r3, #1
 8000f48:	71fb      	strb	r3, [r7, #7]

		/* Delay for 1ms */
		//HAL_Delay(1);
		vTaskDelay(pdMS_TO_TICKS(10));
 8000f4a:	200a      	movs	r0, #10
 8000f4c:	f006 feb8 	bl	8007cc0 <vTaskDelay>
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	3301      	adds	r3, #1
 8000f54:	71bb      	strb	r3, [r7, #6]
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d99b      	bls.n	8000e94 <N2C_Config2+0x18>
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40005c00 	.word	0x40005c00

08000f6c <N2C_Read2>:

void N2C_Read2(uint8_t *measurments) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8000f74:	2305      	movs	r3, #5
 8000f76:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C_init2();
 8000f7c:	f7ff fe44 	bl	8000c08 <I2C_init2>

	I2C3->CR2 = 0;
 8000f80:	4b47      	ldr	r3, [pc, #284]	@ (80010a0 <N2C_Read2+0x134>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C3->CR2 |= I2C_CR2_AUTOEND;
 8000f86:	4b46      	ldr	r3, [pc, #280]	@ (80010a0 <N2C_Read2+0x134>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a45      	ldr	r2, [pc, #276]	@ (80010a0 <N2C_Read2+0x134>)
 8000f8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f90:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000f92:	4b43      	ldr	r3, [pc, #268]	@ (80010a0 <N2C_Read2+0x134>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a42      	ldr	r2, [pc, #264]	@ (80010a0 <N2C_Read2+0x134>)
 8000f98:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000fa0:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C3->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8000fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80010a0 <N2C_Read2+0x134>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80010a0 <N2C_Read2+0x134>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fac:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C3->CR2 &= ~I2C_CR2_RD_WRN;
 8000fae:	4b3c      	ldr	r3, [pc, #240]	@ (80010a0 <N2C_Read2+0x134>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80010a0 <N2C_Read2+0x134>)
 8000fb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fb8:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C3->CR2 |= (N2C_ADDR << 1);
 8000fba:	4b39      	ldr	r3, [pc, #228]	@ (80010a0 <N2C_Read2+0x134>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	4a38      	ldr	r2, [pc, #224]	@ (80010a0 <N2C_Read2+0x134>)
 8000fc0:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000fc4:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C3->CR2 |= I2C_CR2_START;
 8000fc6:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <N2C_Read2+0x134>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a35      	ldr	r2, [pc, #212]	@ (80010a0 <N2C_Read2+0x134>)
 8000fcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fd0:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C3->ISR & I2C_ISR_TXIS))
 8000fd2:	bf00      	nop
 8000fd4:	4b32      	ldr	r3, [pc, #200]	@ (80010a0 <N2C_Read2+0x134>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f9      	beq.n	8000fd4 <N2C_Read2+0x68>
		;

	/* Get Data */
	data = N2C_data(step);
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f85e 	bl	80010a4 <N2C_data>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C3->TXDR |= data;
 8000fec:	4b2c      	ldr	r3, [pc, #176]	@ (80010a0 <N2C_Read2+0x134>)
 8000fee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ff0:	7b7b      	ldrb	r3, [r7, #13]
 8000ff2:	492b      	ldr	r1, [pc, #172]	@ (80010a0 <N2C_Read2+0x134>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C3->ISR & I2C_ISR_STOPF))
 8000ff8:	bf00      	nop
 8000ffa:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <N2C_Read2+0x134>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f9      	beq.n	8000ffa <N2C_Read2+0x8e>
		;

	/* Delay for 1ms */
	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8001006:	200a      	movs	r0, #10
 8001008:	f006 fe5a 	bl	8007cc0 <vTaskDelay>

	///// Read Measurements /////

	I2C3->CR2 &= ~I2C_CR2_AUTOEND;
 800100c:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <N2C_Read2+0x134>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a23      	ldr	r2, [pc, #140]	@ (80010a0 <N2C_Read2+0x134>)
 8001012:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001016:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C3 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <N2C_Read2+0x134>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a20      	ldr	r2, [pc, #128]	@ (80010a0 <N2C_Read2+0x134>)
 800101e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001026:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C3->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 8001028:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <N2C_Read2+0x134>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <N2C_Read2+0x134>)
 800102e:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8001032:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C3->CR2 |= I2C_CR2_RD_WRN;
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <N2C_Read2+0x134>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <N2C_Read2+0x134>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103e:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C3->CR2 |= (N2C_ADDR << 1);
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <N2C_Read2+0x134>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <N2C_Read2+0x134>)
 8001046:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 800104a:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C3->CR2 |= I2C_CR2_START;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <N2C_Read2+0x134>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	4a13      	ldr	r2, [pc, #76]	@ (80010a0 <N2C_Read2+0x134>)
 8001052:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001056:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e010      	b.n	8001080 <N2C_Read2+0x114>
		/* Wait until byte is received */
		while (!(I2C3->ISR & I2C_ISR_RXNE))
 800105e:	bf00      	nop
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <N2C_Read2+0x134>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f9      	beq.n	8001060 <N2C_Read2+0xf4>
			;

		/* Receive byte */
		measurments[i] = I2C3->RXDR;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <N2C_Read2+0x134>)
 800106e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d9eb      	bls.n	800105e <N2C_Read2+0xf2>
	}

	I2C3->CR2 |= (I2C_CR2_STOP);
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <N2C_Read2+0x134>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <N2C_Read2+0x134>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001090:	6053      	str	r3, [r2, #4]

	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8001092:	200a      	movs	r0, #10
 8001094:	f006 fe14 	bl	8007cc0 <vTaskDelay>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40005c00 	.word	0x40005c00

080010a4 <N2C_data>:

/* Returns the appropriate byte to be sent over I2C */
uint8_t N2C_data(uint8_t step) {
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (step) {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d818      	bhi.n	80010e8 <N2C_data+0x44>
 80010b6:	a201      	add	r2, pc, #4	@ (adr r2, 80010bc <N2C_data+0x18>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	080010d1 	.word	0x080010d1
 80010c0:	080010d7 	.word	0x080010d7
 80010c4:	080010dd 	.word	0x080010dd
 80010c8:	080010e3 	.word	0x080010e3
 80010cc:	080010e3 	.word	0x080010e3
	case 1:
		data = 0xF0;
 80010d0:	23f0      	movs	r3, #240	@ 0xf0
 80010d2:	73fb      	strb	r3, [r7, #15]
		break;
 80010d4:	e008      	b.n	80010e8 <N2C_data+0x44>
	case 2:
		data = 0x55;
 80010d6:	2355      	movs	r3, #85	@ 0x55
 80010d8:	73fb      	strb	r3, [r7, #15]
		break;
 80010da:	e005      	b.n	80010e8 <N2C_data+0x44>
	case 3:
		data = 0xFB;
 80010dc:	23fb      	movs	r3, #251	@ 0xfb
 80010de:	73fb      	strb	r3, [r7, #15]
		break;
 80010e0:	e002      	b.n	80010e8 <N2C_data+0x44>
	case 4:
	case 5:
		data = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
		break;
 80010e6:	bf00      	nop
	}

	return data;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010fe:	f003 f89d 	bl	800423c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001102:	f000 f941 	bl	8001388 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001106:	f7ff fc51 	bl	80009ac <MX_GPIO_Init>
	MX_SPI1_Init();
 800110a:	f000 f9a7 	bl	800145c <MX_SPI1_Init>

	/* Set up Spirit */
	SPSGRF_Init();
 800110e:	f000 fa43 	bl	8001598 <SPSGRF_Init>

	/* Set up RTOS */

	/* Create the tasks */
	retVal = xTaskCreate(Task1, "Set Up Program", configMINIMAL_STACK_SIZE,
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <main+0x7c>)
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	2328      	movs	r3, #40	@ 0x28
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	4916      	ldr	r1, [pc, #88]	@ (8001178 <main+0x80>)
 8001120:	4816      	ldr	r0, [pc, #88]	@ (800117c <main+0x84>)
 8001122:	f006 fbfb 	bl	800791c <xTaskCreate>
 8001126:	4603      	mov	r3, r0
 8001128:	4a15      	ldr	r2, [pc, #84]	@ (8001180 <main+0x88>)
 800112a:	6013      	str	r3, [r2, #0]
	NULL, osPriorityHigh, &task1Handler);
	if (retVal != pdPASS) {
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <main+0x88>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d001      	beq.n	8001138 <main+0x40>
		while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <main+0x3c>
			;
	} // check if task creation failed

	sendDataSema = xSemaphoreCreateBinary();
 8001138:	2203      	movs	r2, #3
 800113a:	2100      	movs	r1, #0
 800113c:	2001      	movs	r0, #1
 800113e:	f005 fde4 	bl	8006d0a <xQueueGenericCreate>
 8001142:	4603      	mov	r3, r0
 8001144:	4a0f      	ldr	r2, [pc, #60]	@ (8001184 <main+0x8c>)
 8001146:	6013      	str	r3, [r2, #0]
	if (sendDataSema == NULL) {
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <main+0x8c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <main+0x5c>
		while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <main+0x58>
			;
	} // check if binary semaphore creation failed

	radioMutex = xSemaphoreCreateMutex();
 8001154:	2001      	movs	r0, #1
 8001156:	f005 fe50 	bl	8006dfa <xQueueCreateMutex>
 800115a:	4603      	mov	r3, r0
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <main+0x90>)
 800115e:	6013      	str	r3, [r2, #0]
	if (radioMutex == NULL) {
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <main+0x90>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <main+0x74>
		while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <main+0x70>
			;
	} // check if mutex creation failed

	/* Start scheduler */
	vTaskStartScheduler();
 800116c:	f006 fdde 	bl	8007d2c <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <main+0x78>
 8001174:	20000084 	.word	0x20000084
 8001178:	08009e84 	.word	0x08009e84
 800117c:	0800118d 	.word	0x0800118d
 8001180:	20000098 	.word	0x20000098
 8001184:	20000090 	.word	0x20000090
 8001188:	20000094 	.word	0x20000094

0800118c <Task1>:
}

/* Define Tasks --------------------------------------------------------------*/

/* Configure Device */
void Task1(void *argument) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Configure Peripherals
		UART_Init();
 8001194:	f000 fbe4 	bl	8001960 <UART_Init>
		I2C_GPIO_Init1();
 8001198:	f7ff fc80 	bl	8000a9c <I2C_GPIO_Init1>
		I2C_GPIO_Init2();
 800119c:	f7ff fcc6 	bl	8000b2c <I2C_GPIO_Init2>
		N2C_Config1();
 80011a0:	f7ff fd58 	bl	8000c54 <N2C_Config1>
		N2C_Config2();
 80011a4:	f7ff fe6a 	bl	8000e7c <N2C_Config2>

		retVal = xTaskCreate(Task2, "Read and Decode Data",
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <Task1+0x70>)
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2318      	movs	r3, #24
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	2280      	movs	r2, #128	@ 0x80
 80011b4:	4912      	ldr	r1, [pc, #72]	@ (8001200 <Task1+0x74>)
 80011b6:	4813      	ldr	r0, [pc, #76]	@ (8001204 <Task1+0x78>)
 80011b8:	f006 fbb0 	bl	800791c <xTaskCreate>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <Task1+0x7c>)
 80011c0:	6013      	str	r3, [r2, #0]
		configMINIMAL_STACK_SIZE,
		NULL, osPriorityNormal, &task2Handler);
		if (retVal != pdPASS) {
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <Task1+0x7c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <Task1+0x42>
			while (1)
 80011ca:	bf00      	nop
 80011cc:	e7fd      	b.n	80011ca <Task1+0x3e>
				;
		} // check if task creation failed

		retVal = xTaskCreate(Task3, "Transmit Data",
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <Task1+0x80>)
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2318      	movs	r3, #24
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	2280      	movs	r2, #128	@ 0x80
 80011da:	490d      	ldr	r1, [pc, #52]	@ (8001210 <Task1+0x84>)
 80011dc:	480d      	ldr	r0, [pc, #52]	@ (8001214 <Task1+0x88>)
 80011de:	f006 fb9d 	bl	800791c <xTaskCreate>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <Task1+0x7c>)
 80011e6:	6013      	str	r3, [r2, #0]
		configMINIMAL_STACK_SIZE,
		NULL, osPriorityNormal, &task3Handler);
		if (retVal != pdPASS) {
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <Task1+0x7c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d001      	beq.n	80011f4 <Task1+0x68>
			while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Task1+0x64>
				;
		} // check if task creation failed

		// Task not needed for rest of program duration, so delete it
		vTaskDelete(NULL);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f006 fcef 	bl	8007bd8 <vTaskDelete>
		UART_Init();
 80011fa:	e7cb      	b.n	8001194 <Task1+0x8>
 80011fc:	20000088 	.word	0x20000088
 8001200:	08009e94 	.word	0x08009e94
 8001204:	08001219 	.word	0x08001219
 8001208:	20000098 	.word	0x20000098
 800120c:	2000008c 	.word	0x2000008c
 8001210:	08009eac 	.word	0x08009eac
 8001214:	08001265 	.word	0x08001265

08001218 <Task2>:
	}
}

/* Read and Decode Data */
void Task2(void *argument) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Take the mutex before starting the transmission
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <Task2+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	4618      	mov	r0, r3
 800122a:	f006 f881 	bl	8007330 <xQueueSemaphoreTake>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d10c      	bne.n	800124e <Task2+0x36>
			// Get measurements for Nunchuck #1
			N2C_Read1(measurments1);
 8001234:	4809      	ldr	r0, [pc, #36]	@ (800125c <Task2+0x44>)
 8001236:	f7ff fd85 	bl	8000d44 <N2C_Read1>

			// Get measurements for Nunchuck #2
			N2C_Read2(measurments2);
 800123a:	4809      	ldr	r0, [pc, #36]	@ (8001260 <Task2+0x48>)
 800123c:	f7ff fe96 	bl	8000f6c <N2C_Read2>

			// Release the mutex after transmission
			xSemaphoreGive(radioMutex);
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <Task2+0x40>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	f005 fdef 	bl	8006e2c <xQueueGenericSend>

		// Uploads data to serial port
		// print_data();

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 800124e:	2005      	movs	r0, #5
 8001250:	f006 fd36 	bl	8007cc0 <vTaskDelay>
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001254:	e7e4      	b.n	8001220 <Task2+0x8>
 8001256:	bf00      	nop
 8001258:	20000094 	.word	0x20000094
 800125c:	2000009c 	.word	0x2000009c
 8001260:	200000a4 	.word	0x200000a4

08001264 <Task3>:
	}
}

/* Transmit Data */
void Task3(void *argument) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b09a      	sub	sp, #104	@ 0x68
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	// Create payload
	uint8_t payload[MAX_PAYLOAD_SIZE] = { 0 };
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	225c      	movs	r2, #92	@ 0x5c
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f008 fcc9 	bl	8009c10 <memset>

	// Infinite Loop
	for (;;) {
		// Reset Tx flag
		xTxDoneFlag = S_RESET;
 800127e:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <Task3+0xa0>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]

		// Clear payload
		memset(payload, 0, sizeof(payload));
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	2260      	movs	r2, #96	@ 0x60
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f008 fcbf 	bl	8009c10 <memset>

		// Take the mutex before starting the transmission
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <Task3+0xa4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f04f 31ff 	mov.w	r1, #4294967295
 800129a:	4618      	mov	r0, r3
 800129c:	f006 f848 	bl	8007330 <xQueueSemaphoreTake>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d12a      	bne.n	80012fc <Task3+0x98>
			// Pack the raw measurements data into the payload
			memcpy(payload, measurments1, sizeof(measurments1));
 80012a6:	4a19      	ldr	r2, [pc, #100]	@ (800130c <Task3+0xa8>)
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b0:	6018      	str	r0, [r3, #0]
 80012b2:	3304      	adds	r3, #4
 80012b4:	8019      	strh	r1, [r3, #0]
			memcpy(payload + sizeof(measurments1), measurments2,
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	3306      	adds	r3, #6
 80012bc:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <Task3+0xac>)
 80012be:	6810      	ldr	r0, [r2, #0]
 80012c0:	6018      	str	r0, [r3, #0]
 80012c2:	8892      	ldrh	r2, [r2, #4]
 80012c4:	809a      	strh	r2, [r3, #4]
					sizeof(measurments2));

			// Force the Spirit to go into a ready state
			SpiritGotoReadyState();
 80012c6:	f000 fa23 	bl	8001710 <SpiritGotoReadyState>

			// Set source and destination addresses
			SpiritPktStackSetMyAddress(NODE_ADDRESS);
 80012ca:	2077      	movs	r0, #119	@ 0x77
 80012cc:	f001 f880 	bl	80023d0 <SpiritPktCommonSetMyAddress>
			SpiritPktStackSetDestinationAddress(TARGET_ADDRESS);
 80012d0:	2078      	movs	r0, #120	@ 0x78
 80012d2:	f001 f863 	bl	800239c <SpiritPktCommonSetDestinationAddress>

			SPSGRF_StartTx(payload, sizeof(payload));
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	2160      	movs	r1, #96	@ 0x60
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fa45 	bl	800176c <SPSGRF_StartTx>
			while (!xTxDoneFlag)
 80012e2:	bf00      	nop
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <Task3+0xa0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0fa      	beq.n	80012e4 <Task3+0x80>
				;

			// Release the mutex after transmission
			xSemaphoreGive(radioMutex);
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <Task3+0xa4>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	f005 fd98 	bl	8006e2c <xQueueGenericSend>
		}

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 80012fc:	2005      	movs	r0, #5
 80012fe:	f006 fcdf 	bl	8007cc0 <vTaskDelay>
		xTxDoneFlag = S_RESET;
 8001302:	e7bc      	b.n	800127e <Task3+0x1a>
 8001304:	200000aa 	.word	0x200000aa
 8001308:	20000094 	.word	0x20000094
 800130c:	2000009c 	.word	0x2000009c
 8001310:	200000a4 	.word	0x200000a4

08001314 <HAL_GPIO_EXTI_Callback>:
	}
}

/* Callback to handle external interrupts */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin) {
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	2b80      	cmp	r3, #128	@ 0x80
 8001322:	d128      	bne.n	8001376 <HAL_GPIO_EXTI_Callback+0x62>
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fd49 	bl	8001dc0 <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT) {
 800132e:	7b3b      	ldrb	r3, [r7, #12]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <HAL_GPIO_EXTI_Callback+0x2c>
		xTxDoneFlag = S_SET;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <HAL_GPIO_EXTI_Callback+0x6c>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY) {
 8001340:	7b3b      	ldrb	r3, [r7, #12]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <HAL_GPIO_EXTI_Callback+0x3e>
		xRxDoneFlag = S_SET;
 800134c:	4b0d      	ldr	r3, [pc, #52]	@ (8001384 <HAL_GPIO_EXTI_Callback+0x70>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC || xIrqStatus.IRQ_RX_TIMEOUT) {
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d105      	bne.n	800136a <HAL_GPIO_EXTI_Callback+0x56>
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	f003 0320 	and.w	r3, r3, #32
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_GPIO_EXTI_Callback+0x64>
		SpiritCmdStrobeRx();
 800136a:	f000 ff6d 	bl	8002248 <SpiritManagementWaCmdStrobeRx>
 800136e:	2061      	movs	r0, #97	@ 0x61
 8001370:	f000 fc58 	bl	8001c24 <SpiritCmdStrobeCommand>
 8001374:	e000      	b.n	8001378 <HAL_GPIO_EXTI_Callback+0x64>
		return;
 8001376:	bf00      	nop
	}
}
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000aa 	.word	0x200000aa
 8001384:	200000ab 	.word	0x200000ab

08001388 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b096      	sub	sp, #88	@ 0x58
 800138c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2244      	movs	r2, #68	@ 0x44
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f008 fc3a 	bl	8009c10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800139c:	463b      	mov	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80013aa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013ae:	f003 fa79 	bl	80048a4 <HAL_PWREx_ControlVoltageScaling>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80013b8:	f000 f84a 	bl	8001450 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013bc:	2302      	movs	r3, #2
 80013be:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c6:	2310      	movs	r3, #16
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ca:	2302      	movs	r3, #2
 80013cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ce:	2302      	movs	r3, #2
 80013d0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80013d6:	230a      	movs	r3, #10
 80013d8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013da:	2307      	movs	r3, #7
 80013dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013de:	2302      	movs	r3, #2
 80013e0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fab0 	bl	8004950 <HAL_RCC_OscConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x72>
		Error_Handler();
 80013f6:	f000 f82b 	bl	8001450 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013fa:	230f      	movs	r3, #15
 80013fc:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fe:	2303      	movs	r3, #3
 8001400:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800140e:	463b      	mov	r3, r7
 8001410:	2104      	movs	r1, #4
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fe78 	bl	8005108 <HAL_RCC_ClockConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x9a>
		Error_Handler();
 800141e:	f000 f817 	bl	8001450 <Error_Handler>
	}
}
 8001422:	bf00      	nop
 8001424:	3758      	adds	r7, #88	@ 0x58
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800143e:	f002 ff15 	bl	800426c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40014800 	.word	0x40014800

08001450 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <MX_SPI1_Init+0x74>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <MX_SPI1_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_SPI1_Init+0x74>)
 8001468:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800146c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <MX_SPI1_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001474:	4b16      	ldr	r3, [pc, #88]	@ (80014d0 <MX_SPI1_Init+0x74>)
 8001476:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800147a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147c:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <MX_SPI1_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001482:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <MX_SPI1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_SPI1_Init+0x74>)
 800148a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800148e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <MX_SPI1_Init+0x74>)
 8001492:	2210      	movs	r2, #16
 8001494:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <MX_SPI1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <MX_SPI1_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <MX_SPI1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <MX_SPI1_Init+0x74>)
 80014aa:	2207      	movs	r2, #7
 80014ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	@ (80014d0 <MX_SPI1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <MX_SPI1_Init+0x74>)
 80014b6:	2208      	movs	r2, #8
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_SPI1_Init+0x74>)
 80014bc:	f004 f864 	bl	8005588 <HAL_SPI_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f7ff ffc3 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200000ac 	.word	0x200000ac
 80014d4:	40013000 	.word	0x40013000

080014d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a25      	ldr	r2, [pc, #148]	@ (800158c <HAL_SPI_MspInit+0xb4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d144      	bne.n	8001584 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014fa:	4b25      	ldr	r3, [pc, #148]	@ (8001590 <HAL_SPI_MspInit+0xb8>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fe:	4a24      	ldr	r2, [pc, #144]	@ (8001590 <HAL_SPI_MspInit+0xb8>)
 8001500:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001504:	6613      	str	r3, [r2, #96]	@ 0x60
 8001506:	4b22      	ldr	r3, [pc, #136]	@ (8001590 <HAL_SPI_MspInit+0xb8>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b1f      	ldr	r3, [pc, #124]	@ (8001590 <HAL_SPI_MspInit+0xb8>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001516:	4a1e      	ldr	r2, [pc, #120]	@ (8001590 <HAL_SPI_MspInit+0xb8>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800151e:	4b1c      	ldr	r3, [pc, #112]	@ (8001590 <HAL_SPI_MspInit+0xb8>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <HAL_SPI_MspInit+0xb8>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152e:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <HAL_SPI_MspInit+0xb8>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <HAL_SPI_MspInit+0xb8>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001542:	23c0      	movs	r3, #192	@ 0xc0
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001552:	2305      	movs	r3, #5
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001560:	f002 ffb8 	bl	80044d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001564:	2308      	movs	r3, #8
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001574:	2305      	movs	r3, #5
 8001576:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	4805      	ldr	r0, [pc, #20]	@ (8001594 <HAL_SPI_MspInit+0xbc>)
 8001580:	f002 ffa8 	bl	80044d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	@ 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40013000 	.word	0x40013000
 8001590:	40021000 	.word	0x40021000
 8001594:	48000400 	.word	0x48000400

08001598 <SPSGRF_Init>:
/**
 * @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
 * @param  None
 * @retval None
 */
void SPSGRF_Init(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b090      	sub	sp, #64	@ 0x40
 800159c:	af00      	add	r7, sp, #0
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlpInit;
	SGpioInit xGpioInit;

	SpiritSpiInit();
 800159e:	f002 fcf9 	bl	8003f94 <RadioSpiInit>

	// restart the radio
	SpiritEnterShutdown();
 80015a2:	f002 fe27 	bl	80041f4 <RadioEnterShutdown>
	SpiritExitShutdown();
 80015a6:	f002 fe30 	bl	800420a <RadioExitShutdown>
	SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 80015aa:	f000 fe7d 	bl	80022a8 <SpiritManagementWaExtraCurrent>

	// wait for the radio to enter the ready state
	do {
		for (volatile uint8_t i = 0; i != 0xFF; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	70fb      	strb	r3, [r7, #3]
 80015b2:	e004      	b.n	80015be <SPSGRF_Init+0x26>
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	3301      	adds	r3, #1
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	70fb      	strb	r3, [r7, #3]
 80015be:	78fb      	ldrb	r3, [r7, #3]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2bff      	cmp	r3, #255	@ 0xff
 80015c4:	d1f6      	bne.n	80015b4 <SPSGRF_Init+0x1c>
			; // delay for state transition
		SpiritRefreshStatus(); // reads the MC_STATUS register
 80015c6:	f002 fcc3 	bl	8003f50 <SpiritRefreshStatus>
	} while (g_xStatus.MC_STATE != MC_STATE_READY);
 80015ca:	4b4b      	ldr	r3, [pc, #300]	@ (80016f8 <SPSGRF_Init+0x160>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d1ea      	bne.n	80015ae <SPSGRF_Init+0x16>

	// Initialize radio RF parameters
	xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 80015d8:	2300      	movs	r3, #0
 80015da:	84bb      	strh	r3, [r7, #36]	@ 0x24
	xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 80015dc:	4b47      	ldr	r3, [pc, #284]	@ (80016fc <SPSGRF_Init+0x164>)
 80015de:	62bb      	str	r3, [r7, #40]	@ 0x28
	xRadioInit.nChannelSpace = CHANNEL_SPACE;
 80015e0:	4b47      	ldr	r3, [pc, #284]	@ (8001700 <SPSGRF_Init+0x168>)
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	xRadioInit.xModulationSelect = MODULATION_SELECT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	xRadioInit.lDatarate = DATARATE;
 80015f0:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 80015f4:	637b      	str	r3, [r7, #52]	@ 0x34
	xRadioInit.lFreqDev = FREQ_DEVIATION;
 80015f6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015fa:	63bb      	str	r3, [r7, #56]	@ 0x38
	xRadioInit.lBandwidth = BANDWIDTH;
 80015fc:	4b40      	ldr	r3, [pc, #256]	@ (8001700 <SPSGRF_Init+0x168>)
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8001600:	4840      	ldr	r0, [pc, #256]	@ (8001704 <SPSGRF_Init+0x16c>)
 8001602:	f002 faf3 	bl	8003bec <SpiritRadioSetXtalFrequency>
	SpiritRadioInit(&xRadioInit);
 8001606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160a:	4618      	mov	r0, r3
 800160c:	f001 f942 	bl	8002894 <SpiritRadioInit>

	// Set the transmitter power level
	SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001610:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001708 <SPSGRF_Init+0x170>
 8001614:	2007      	movs	r0, #7
 8001616:	f002 f985 	bl	8003924 <SpiritRadioSetPALeveldBm>
	SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 800161a:	2007      	movs	r0, #7
 800161c:	f002 f9d8 	bl	80039d0 <SpiritRadioSetPALevelMaxIndex>

	// Configure packet handler to use the Basic packet format
	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
 8001620:	2318      	movs	r3, #24
 8001622:	753b      	strb	r3, [r7, #20]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001624:	2306      	movs	r3, #6
 8001626:	757b      	strb	r3, [r7, #21]
	xSTackInit.lSyncWords = SYNC_WORD;
 8001628:	f04f 3388 	mov.w	r3, #2290649224	@ 0x88888888
 800162c:	61bb      	str	r3, [r7, #24]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 800162e:	2301      	movs	r3, #1
 8001630:	773b      	strb	r3, [r7, #28]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001632:	2307      	movs	r3, #7
 8001634:	777b      	strb	r3, [r7, #29]
	xSTackInit.xCrcMode = CRC_MODE;
 8001636:	2320      	movs	r3, #32
 8001638:	77bb      	strb	r3, [r7, #30]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 800163a:	2300      	movs	r3, #0
 800163c:	77fb      	strb	r3, [r7, #31]
	// xSTackInit.xAddressField = EN_ADDRESS;
	xSTackInit.xFec = EN_FEC;
 800163e:	2300      	movs	r3, #0
 8001640:	f887 3020 	strb.w	r3, [r7, #32]
	xSTackInit.xDataWhitening = EN_WHITENING;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	SpiritPktStackInit(&xSTackInit);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fed8 	bl	8002404 <SpiritPktStackInit>

	// Configure destination address criteria for automatic packet filtering
	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001654:	2301      	movs	r3, #1
 8001656:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 8001658:	2377      	movs	r3, #119	@ 0x77
 800165a:	737b      	strb	r3, [r7, #13]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 800165c:	2301      	movs	r3, #1
 800165e:	73bb      	strb	r3, [r7, #14]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001660:	23ee      	movs	r3, #238	@ 0xee
 8001662:	73fb      	strb	r3, [r7, #15]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001664:	2301      	movs	r3, #1
 8001666:	743b      	strb	r3, [r7, #16]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001668:	23ff      	movs	r3, #255	@ 0xff
 800166a:	747b      	strb	r3, [r7, #17]
	SpiritPktStackAddressesInit(&xSTackAddress);
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4618      	mov	r0, r3
 8001672:	f000 ff97 	bl	80025a4 <SpiritPktStackAddressesInit>

	// Configure the spirit LLP registers
	xSTackLlpInit.xAutoAck = S_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	723b      	strb	r3, [r7, #8]
	xSTackLlpInit.xNMaxRetx = S_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	72bb      	strb	r3, [r7, #10]
	xSTackLlpInit.xPiggybacking = PKT_DISABLE_RETX;
 800167e:	2300      	movs	r3, #0
 8001680:	727b      	strb	r3, [r7, #9]
	SpiritPktStackLlpInit(&xSTackLlpInit);
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fffa 	bl	8002680 <SpiritPktStackLlpInit>

	// Configure GPIO3 as interrupt request pin (active low)
	xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 800168c:	2302      	movs	r3, #2
 800168e:	713b      	strb	r3, [r7, #4]
	xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001690:	2302      	movs	r3, #2
 8001692:	717b      	strb	r3, [r7, #5]
	xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 8001694:	2300      	movs	r3, #0
 8001696:	71bb      	strb	r3, [r7, #6]
	SpiritGpioInit(&xGpioInit);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fada 	bl	8001c54 <SpiritGpioInit>

	// Generate an interrupt request for the following IRQs
	SpiritIrqDeInit(NULL);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f000 fafb 	bl	8001c9c <SpiritIrqDeInit>
	SpiritIrq(TX_DATA_SENT, S_ENABLE);
 80016a6:	2101      	movs	r1, #1
 80016a8:	2004      	movs	r0, #4
 80016aa:	f000 fb23 	bl	8001cf4 <SpiritIrq>
	SpiritIrq(RX_DATA_READY, S_ENABLE);
 80016ae:	2101      	movs	r1, #1
 80016b0:	2001      	movs	r0, #1
 80016b2:	f000 fb1f 	bl	8001cf4 <SpiritIrq>
	SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80016b6:	2101      	movs	r1, #1
 80016b8:	2002      	movs	r0, #2
 80016ba:	f000 fb1b 	bl	8001cf4 <SpiritIrq>
	SpiritIrq(RX_TIMEOUT, S_ENABLE);
 80016be:	2101      	movs	r1, #1
 80016c0:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 80016c4:	f000 fb16 	bl	8001cf4 <SpiritIrq>
	SpiritIrqClearStatus();
 80016c8:	f000 fbac 	bl	8001e24 <SpiritIrqClearStatus>

	// Enable the synchronization quality indicator check (perfect match required)
	// NOTE: 9.10.4: "It is recommended to always enable the SQI check."
	SpiritQiSetSqiThreshold(SQI_TH_0);
 80016cc:	2000      	movs	r0, #0
 80016ce:	f001 f88d 	bl	80027ec <SpiritQiSetSqiThreshold>
	SpiritQiSqiCheck(S_ENABLE);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f001 f852 	bl	800277c <SpiritQiSqiCheck>

	// Set the RSSI Threshold for Carrier Sense (9.10.2)
	// NOTE: CS_MODE = 0 at reset
	SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80016d8:	f06f 0077 	mvn.w	r0, #119	@ 0x77
 80016dc:	f001 f8ba 	bl	8002854 <SpiritQiSetRssiThresholddBm>

	// Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
	SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 80016e0:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800170c <SPSGRF_Init+0x174>
 80016e4:	f002 fa92 	bl	8003c0c <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
	SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 80016e8:	2002      	movs	r0, #2
 80016ea:	f002 fbe9 	bl	8003ec0 <SpiritTimerSetRxTimeoutStopCondition>
}
 80016ee:	bf00      	nop
 80016f0:	3740      	adds	r7, #64	@ 0x40
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000168 	.word	0x20000168
 80016fc:	3689cac0 	.word	0x3689cac0
 8001700:	000186a0 	.word	0x000186a0
 8001704:	02faf080 	.word	0x02faf080
 8001708:	4139999a 	.word	0x4139999a
 800170c:	42480000 	.word	0x42480000

08001710 <SpiritGotoReadyState>:

void SpiritGotoReadyState(void) {
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

	/* Wait for the radio to enter the ready state */
	do {

		/* Go to the ready state */
		if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <SpiritGotoReadyState+0x54>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b0f      	cmp	r3, #15
 8001720:	d103      	bne.n	800172a <SpiritGotoReadyState+0x1a>
			SpiritCmdStrobeReady();
 8001722:	2062      	movs	r0, #98	@ 0x62
 8001724:	f000 fa7e 	bl	8001c24 <SpiritCmdStrobeCommand>
 8001728:	e002      	b.n	8001730 <SpiritGotoReadyState+0x20>
		} else {
			SpiritCmdStrobeSabort();
 800172a:	2067      	movs	r0, #103	@ 0x67
 800172c:	f000 fa7a 	bl	8001c24 <SpiritCmdStrobeCommand>
		}

		/* Delay for state transition */
		for (i = 0; i != 0xFF; i++)
 8001730:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <SpiritGotoReadyState+0x58>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	e004      	b.n	8001742 <SpiritGotoReadyState+0x32>
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <SpiritGotoReadyState+0x58>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3301      	adds	r3, #1
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <SpiritGotoReadyState+0x58>)
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <SpiritGotoReadyState+0x58>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2bff      	cmp	r3, #255	@ 0xff
 8001748:	d1f6      	bne.n	8001738 <SpiritGotoReadyState+0x28>
			;

		/* Update the global status register variable */
		SpiritRefreshStatus();
 800174a:	f002 fc01 	bl	8003f50 <SpiritRefreshStatus>

	} while (g_xStatus.MC_STATE != MC_STATE_READY);
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <SpiritGotoReadyState+0x54>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b03      	cmp	r3, #3
 800175a:	d1db      	bne.n	8001714 <SpiritGotoReadyState+0x4>
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000168 	.word	0x20000168
 8001768:	20000110 	.word	0x20000110

0800176c <SPSGRF_StartTx>:
 *         sent, setting the payload length, and strobing the TX command.
 * @param  txBuff: pointer to the data to transmit
 * @param  txLen: number of bytes to transmit
 * @retval None
 */
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
	SpiritGotoReadyState();
 8001778:	f7ff ffca 	bl	8001710 <SpiritGotoReadyState>
	// flush the TX FIFO
	SpiritCmdStrobeFlushTxFifo();
 800177c:	2072      	movs	r0, #114	@ 0x72
 800177e:	f000 fa51 	bl	8001c24 <SpiritCmdStrobeCommand>

	// Avoid TX FIFO overflow
	txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	2b60      	cmp	r3, #96	@ 0x60
 8001786:	bf28      	it	cs
 8001788:	2360      	movcs	r3, #96	@ 0x60
 800178a:	70fb      	strb	r3, [r7, #3]

	// start TX operation
	SpiritSpiWriteLinearFifo(txLen, txBuff);
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	f002 fce7 	bl	8004164 <RadioSpiWriteFifo>
	SpiritPktStackSetPayloadLength(txLen);
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	b29b      	uxth	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f000 ffc2 	bl	8002724 <SpiritPktStackSetPayloadLength>
	SpiritCmdStrobeTx();
 80017a0:	f000 fd1a 	bl	80021d8 <SpiritManagementWaCmdStrobeTx>
 80017a4:	2060      	movs	r0, #96	@ 0x60
 80017a6:	f000 fa3d 	bl	8001c24 <SpiritCmdStrobeCommand>

	SpiritRefreshStatus();
 80017aa:	f002 fbd1 	bl	8003f50 <SpiritRefreshStatus>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <HAL_MspInit+0x4c>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c2:	4a10      	ldr	r2, [pc, #64]	@ (8001804 <HAL_MspInit+0x4c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <HAL_MspInit+0x4c>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001804 <HAL_MspInit+0x4c>)
 80017d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <HAL_MspInit+0x4c>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e2:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <HAL_MspInit+0x4c>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	210f      	movs	r1, #15
 80017f2:	f06f 0001 	mvn.w	r0, #1
 80017f6:	f002 fe35 	bl	8004464 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001816:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <HAL_InitTick+0xc8>)
 8001818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181a:	4a2d      	ldr	r2, [pc, #180]	@ (80018d0 <HAL_InitTick+0xc8>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	6613      	str	r3, [r2, #96]	@ 0x60
 8001822:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <HAL_InitTick+0xc8>)
 8001824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800182e:	f107 020c 	add.w	r2, r7, #12
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f003 fe13 	bl	8005464 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800183e:	f003 fdfb 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 8001842:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001846:	4a23      	ldr	r2, [pc, #140]	@ (80018d4 <HAL_InitTick+0xcc>)
 8001848:	fba2 2303 	umull	r2, r3, r2, r3
 800184c:	0c9b      	lsrs	r3, r3, #18
 800184e:	3b01      	subs	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001852:	4b21      	ldr	r3, [pc, #132]	@ (80018d8 <HAL_InitTick+0xd0>)
 8001854:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <HAL_InitTick+0xd4>)
 8001856:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001858:	4b1f      	ldr	r3, [pc, #124]	@ (80018d8 <HAL_InitTick+0xd0>)
 800185a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800185e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001860:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <HAL_InitTick+0xd0>)
 8001862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001864:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001866:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <HAL_InitTick+0xd0>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <HAL_InitTick+0xd0>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_InitTick+0xd0>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001878:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <HAL_InitTick+0xd0>)
 800187a:	f004 fdb3 	bl	80063e4 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001888:	2b00      	cmp	r3, #0
 800188a:	d11b      	bne.n	80018c4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800188c:	4812      	ldr	r0, [pc, #72]	@ (80018d8 <HAL_InitTick+0xd0>)
 800188e:	f004 fe0b 	bl	80064a8 <HAL_TIM_Base_Start_IT>
 8001892:	4603      	mov	r3, r0
 8001894:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001898:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800189c:	2b00      	cmp	r3, #0
 800189e:	d111      	bne.n	80018c4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80018a0:	201a      	movs	r0, #26
 80018a2:	f002 fdfb 	bl	800449c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d808      	bhi.n	80018be <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	201a      	movs	r0, #26
 80018b2:	f002 fdd7 	bl	8004464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <HAL_InitTick+0xd8>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e002      	b.n	80018c4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3730      	adds	r7, #48	@ 0x30
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	431bde83 	.word	0x431bde83
 80018d8:	20000114 	.word	0x20000114
 80018dc:	40014800 	.word	0x40014800
 80018e0:	2000000c 	.word	0x2000000c

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <NMI_Handler+0x4>

080018ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <MemManage_Handler+0x4>

080018fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <UsageFault_Handler+0x4>

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 800191e:	2080      	movs	r0, #128	@ 0x80
 8001920:	f002 ff9a 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800192e:	f004 fe2b 	bl	8006588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000114 	.word	0x20000114

0800193c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <SystemInit+0x20>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001946:	4a05      	ldr	r2, [pc, #20]	@ (800195c <SystemInit+0x20>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <UART_Init>:
 */

#include "main.h"
#include "uart.h"

void UART_Init(void) {
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	// Configure GPIOA for USART2
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <UART_Init+0x98>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001968:	4a23      	ldr	r2, [pc, #140]	@ (80019f8 <UART_Init+0x98>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN);
 8001970:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <UART_Init+0x98>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	4a20      	ldr	r2, [pc, #128]	@ (80019f8 <UART_Init+0x98>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800197a:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 2 and 3 to AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 800197c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800198a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 800198c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001996:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800199a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 800199c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019a6:	f423 43ee 	bic.w	r3, r3, #30464	@ 0x7700
 80019aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 80019ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80019b6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80019ba:	6213      	str	r3, [r2, #32]
	 * TE		1
	 * RE		1
	 * USEM		0
	 * UE		1
	 */
	USART2->CR1 |= (0b000100000);
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <UART_Init+0x9c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <UART_Init+0x9c>)
 80019c2:	f043 0320 	orr.w	r3, r3, #32
 80019c6:	6013      	str	r3, [r2, #0]

	// Configure BR
	USART2->BRR = (694);
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <UART_Init+0x9c>)
 80019ca:	f240 22b6 	movw	r2, #694	@ 0x2b6
 80019ce:	60da      	str	r2, [r3, #12]

	// Enable  bits
	USART2->CR1 |= (0b1101);
 80019d0:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <UART_Init+0x9c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a09      	ldr	r2, [pc, #36]	@ (80019fc <UART_Init+0x9c>)
 80019d6:	f043 030d 	orr.w	r3, r3, #13
 80019da:	6013      	str	r3, [r2, #0]

	// Enable interupts
	NVIC->ISER[1] |= (1 << (USART2_IRQn & 0X1F));
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <UART_Init+0xa0>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4a07      	ldr	r2, [pc, #28]	@ (8001a00 <UART_Init+0xa0>)
 80019e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019e6:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80019e8:	b662      	cpsie	i
}
 80019ea:	bf00      	nop
	__enable_irq();

}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40004400 	.word	0x40004400
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a08:	f7ff ff98 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a0c:	480c      	ldr	r0, [pc, #48]	@ (8001a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0e:	490d      	ldr	r1, [pc, #52]	@ (8001a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a10:	4a0d      	ldr	r2, [pc, #52]	@ (8001a48 <LoopForever+0xe>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a14:	e002      	b.n	8001a1c <LoopCopyDataInit>

08001a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1a:	3304      	adds	r3, #4

08001a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a20:	d3f9      	bcc.n	8001a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a22:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a24:	4c0a      	ldr	r4, [pc, #40]	@ (8001a50 <LoopForever+0x16>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a28:	e001      	b.n	8001a2e <LoopFillZerobss>

08001a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a2c:	3204      	adds	r2, #4

08001a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a30:	d3fb      	bcc.n	8001a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a32:	f008 f94b 	bl	8009ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a36:	f7ff fb5f 	bl	80010f8 <main>

08001a3a <LoopForever>:

LoopForever:
    b LoopForever
 8001a3a:	e7fe      	b.n	8001a3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a48:	0800a080 	.word	0x0800a080
  ldr r2, =_sbss
 8001a4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a50:	20001c58 	.word	0x20001c58

08001a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC1_2_IRQHandler>
	...

08001a58 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001a62:	f107 030f 	add.w	r3, r7, #15
 8001a66:	461a      	mov	r2, r3
 8001a68:	2101      	movs	r1, #1
 8001a6a:	2050      	movs	r0, #80	@ 0x50
 8001a6c:	f002 faee 	bl	800404c <RadioSpiReadRegisters>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <SpiritCalibrationVco+0x6c>)
 8001a74:	b212      	sxth	r2, r2
 8001a76:	4611      	mov	r1, r2
 8001a78:	7019      	strb	r1, [r3, #0]
 8001a7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001a7e:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d105      	bne.n	8001a92 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e004      	b.n	8001a9c <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	f023 0302 	bic.w	r3, r3, #2
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001a9c:	f107 030f 	add.w	r3, r7, #15
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	2050      	movs	r0, #80	@ 0x50
 8001aa6:	f002 fa85 	bl	8003fb4 <RadioSpiWriteRegisters>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <SpiritCalibrationVco+0x6c>)
 8001aae:	b212      	sxth	r2, r2
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	7019      	strb	r1, [r3, #0]
 8001ab4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ab8:	705a      	strb	r2, [r3, #1]

}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000168 	.word	0x20000168

08001ac8 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001ace:	1dfb      	adds	r3, r7, #7
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	20e5      	movs	r0, #229	@ 0xe5
 8001ad6:	f002 fab9 	bl	800404c <RadioSpiReadRegisters>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <SpiritCalibrationGetVcoCalData+0x34>)
 8001ade:	b212      	sxth	r2, r2
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	7019      	strb	r1, [r3, #0]
 8001ae4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ae8:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001af0:	b2db      	uxtb	r3, r3

}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000168 	.word	0x20000168

08001b00 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001b0a:	f107 030f 	add.w	r3, r7, #15
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2101      	movs	r1, #1
 8001b12:	206e      	movs	r0, #110	@ 0x6e
 8001b14:	f002 fa9a 	bl	800404c <RadioSpiReadRegisters>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001b1c:	b212      	sxth	r2, r2
 8001b1e:	4611      	mov	r1, r2
 8001b20:	7019      	strb	r1, [r3, #0]
 8001b22:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b26:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001b3c:	f107 030f 	add.w	r3, r7, #15
 8001b40:	461a      	mov	r2, r3
 8001b42:	2101      	movs	r1, #1
 8001b44:	206e      	movs	r0, #110	@ 0x6e
 8001b46:	f002 fa35 	bl	8003fb4 <RadioSpiWriteRegisters>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001b4e:	b212      	sxth	r2, r2
 8001b50:	4611      	mov	r1, r2
 8001b52:	7019      	strb	r1, [r3, #0]
 8001b54:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b58:	705a      	strb	r2, [r3, #1]

}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000168 	.word	0x20000168

08001b68 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001b72:	f107 030f 	add.w	r3, r7, #15
 8001b76:	461a      	mov	r2, r3
 8001b78:	2101      	movs	r1, #1
 8001b7a:	206f      	movs	r0, #111	@ 0x6f
 8001b7c:	f002 fa66 	bl	800404c <RadioSpiReadRegisters>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001b84:	b212      	sxth	r2, r2
 8001b86:	4611      	mov	r1, r2
 8001b88:	7019      	strb	r1, [r3, #0]
 8001b8a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b8e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001b9a:	7bfa      	ldrb	r2, [r7, #15]
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001ba4:	f107 030f 	add.w	r3, r7, #15
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2101      	movs	r1, #1
 8001bac:	206f      	movs	r0, #111	@ 0x6f
 8001bae:	f002 fa01 	bl	8003fb4 <RadioSpiWriteRegisters>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001bb6:	b212      	sxth	r2, r2
 8001bb8:	4611      	mov	r1, r2
 8001bba:	7019      	strb	r1, [r3, #0]
 8001bbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001bc0:	705a      	strb	r2, [r3, #1]

}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000168 	.word	0x20000168

08001bd0 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001bda:	f107 030f 	add.w	r3, r7, #15
 8001bde:	461a      	mov	r2, r3
 8001be0:	2101      	movs	r1, #1
 8001be2:	209e      	movs	r0, #158	@ 0x9e
 8001be4:	f002 fa32 	bl	800404c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	f023 0306 	bic.w	r3, r3, #6
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e004      	b.n	8001c0e <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001c0e:	f107 030f 	add.w	r3, r7, #15
 8001c12:	461a      	mov	r2, r3
 8001c14:	2101      	movs	r1, #1
 8001c16:	209e      	movs	r0, #158	@ 0x9e
 8001c18:	f002 f9cc 	bl	8003fb4 <RadioSpiWriteRegisters>
  
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f002 fa57 	bl	80040e4 <RadioSpiCommandStrobes>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b05      	ldr	r3, [pc, #20]	@ (8001c50 <SpiritCmdStrobeCommand+0x2c>)
 8001c3a:	b212      	sxth	r2, r2
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	7019      	strb	r1, [r3, #0]
 8001c40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c44:	705a      	strb	r2, [r3, #1]
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000168 	.word	0x20000168

08001c54 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	785a      	ldrb	r2, [r3, #1]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	789b      	ldrb	r3, [r3, #2]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	f107 020f 	add.w	r2, r7, #15
 8001c76:	2101      	movs	r1, #1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 f99b 	bl	8003fb4 <RadioSpiWriteRegisters>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <SpiritGpioInit+0x44>)
 8001c82:	b212      	sxth	r2, r2
 8001c84:	4611      	mov	r1, r2
 8001c86:	7019      	strb	r1, [r3, #0]
 8001c88:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c8c:	705a      	strb	r2, [r3, #1]

}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000168 	.word	0x20000168

08001c9c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00c      	beq.n	8001cc8 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f007 ffaa 	bl	8009c10 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2104      	movs	r1, #4
 8001cd0:	2090      	movs	r0, #144	@ 0x90
 8001cd2:	f002 f96f 	bl	8003fb4 <RadioSpiWriteRegisters>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <SpiritIrqDeInit+0x54>)
 8001cda:	b212      	sxth	r2, r2
 8001cdc:	4611      	mov	r1, r2
 8001cde:	7019      	strb	r1, [r3, #0]
 8001ce0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ce4:	705a      	strb	r2, [r3, #1]
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000168 	.word	0x20000168

08001cf4 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	461a      	mov	r2, r3
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	2090      	movs	r0, #144	@ 0x90
 8001d0e:	f002 f99d 	bl	800404c <RadioSpiReadRegisters>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b29      	ldr	r3, [pc, #164]	@ (8001dbc <SpiritIrq+0xc8>)
 8001d16:	b212      	sxth	r2, r2
 8001d18:	4611      	mov	r1, r2
 8001d1a:	7019      	strb	r1, [r3, #0]
 8001d1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d20:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	74fb      	strb	r3, [r7, #19]
 8001d26:	e011      	b.n	8001d4c <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001d28:	7cfb      	ldrb	r3, [r7, #19]
 8001d2a:	3318      	adds	r3, #24
 8001d2c:	443b      	add	r3, r7
 8001d2e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001d32:	461a      	mov	r2, r3
 8001d34:	7cfb      	ldrb	r3, [r7, #19]
 8001d36:	f1c3 0303 	rsb	r3, r3, #3
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4413      	add	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001d46:	7cfb      	ldrb	r3, [r7, #19]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	74fb      	strb	r3, [r7, #19]
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9ea      	bls.n	8001d28 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d105      	bne.n	8001d64 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e003      	b.n	8001d6c <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	74bb      	strb	r3, [r7, #18]
 8001d70:	e00e      	b.n	8001d90 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001d72:	7cbb      	ldrb	r3, [r7, #18]
 8001d74:	f1c3 0303 	rsb	r3, r3, #3
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	40da      	lsrs	r2, r3
 8001d7e:	7cbb      	ldrb	r3, [r7, #18]
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	3318      	adds	r3, #24
 8001d84:	443b      	add	r3, r7
 8001d86:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001d8a:	7cbb      	ldrb	r3, [r7, #18]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	74bb      	strb	r3, [r7, #18]
 8001d90:	7cbb      	ldrb	r3, [r7, #18]
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d9ed      	bls.n	8001d72 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	2090      	movs	r0, #144	@ 0x90
 8001da0:	f002 f908 	bl	8003fb4 <RadioSpiWriteRegisters>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <SpiritIrq+0xc8>)
 8001da8:	b212      	sxth	r2, r2
 8001daa:	4611      	mov	r1, r2
 8001dac:	7019      	strb	r1, [r3, #0]
 8001dae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001db2:	705a      	strb	r2, [r3, #1]

}
 8001db4:	bf00      	nop
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000168 	.word	0x20000168

08001dc0 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	20fa      	movs	r0, #250	@ 0xfa
 8001dd6:	f002 f939 	bl	800404c <RadioSpiReadRegisters>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <SpiritIrqGetStatus+0x60>)
 8001dde:	b212      	sxth	r2, r2
 8001de0:	4611      	mov	r1, r2
 8001de2:	7019      	strb	r1, [r3, #0]
 8001de4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001de8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	74fb      	strb	r3, [r7, #19]
 8001dee:	e00e      	b.n	8001e0e <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	f1c3 0303 	rsb	r3, r3, #3
 8001df6:	3318      	adds	r3, #24
 8001df8:	443b      	add	r3, r7
 8001dfa:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	3301      	adds	r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001e08:	7cfb      	ldrb	r3, [r7, #19]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	74fb      	strb	r3, [r7, #19]
 8001e0e:	7cfb      	ldrb	r3, [r7, #19]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d9ed      	bls.n	8001df0 <SpiritIrqGetStatus+0x30>
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000168 	.word	0x20000168

08001e24 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2104      	movs	r1, #4
 8001e30:	20fa      	movs	r0, #250	@ 0xfa
 8001e32:	f002 f90b 	bl	800404c <RadioSpiReadRegisters>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <SpiritIrqClearStatus+0x2c>)
 8001e3a:	b212      	sxth	r2, r2
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	7019      	strb	r1, [r3, #0]
 8001e40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e44:	705a      	strb	r2, [r3, #1]

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000168 	.word	0x20000168

08001e54 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8001e54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e58:	b08a      	sub	sp, #40	@ 0x28
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a70      	ldr	r2, [pc, #448]	@ (8002024 <SpiritManagementSetFrequencyBase+0x1d0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d307      	bcc.n	8001e76 <SpiritManagementSetFrequencyBase+0x22>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a6f      	ldr	r2, [pc, #444]	@ (8002028 <SpiritManagementSetFrequencyBase+0x1d4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d803      	bhi.n	8001e76 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e74:	e01a      	b.n	8001eac <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a6c      	ldr	r2, [pc, #432]	@ (800202c <SpiritManagementSetFrequencyBase+0x1d8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d907      	bls.n	8001e8e <SpiritManagementSetFrequencyBase+0x3a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a6b      	ldr	r2, [pc, #428]	@ (8002030 <SpiritManagementSetFrequencyBase+0x1dc>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d803      	bhi.n	8001e8e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e8c:	e00e      	b.n	8001eac <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a68      	ldr	r2, [pc, #416]	@ (8002034 <SpiritManagementSetFrequencyBase+0x1e0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d907      	bls.n	8001ea6 <SpiritManagementSetFrequencyBase+0x52>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a67      	ldr	r2, [pc, #412]	@ (8002038 <SpiritManagementSetFrequencyBase+0x1e4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d803      	bhi.n	8001ea6 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001ea4:	e002      	b.n	8001eac <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8001eac:	f001 f830 	bl	8002f10 <SpiritRadioGetFrequencyOffset>
 8001eb0:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8001eb2:	f001 f80d 	bl	8002ed0 <SpiritRadioGetChannelSpace>
 8001eb6:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8001eb8:	f000 fff2 	bl	8002ea0 <SpiritRadioGetChannel>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8001ec0:	6a3a      	ldr	r2, [r7, #32]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	7efb      	ldrb	r3, [r7, #27]
 8001ec8:	69f9      	ldr	r1, [r7, #28]
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8001ed2:	f001 fe0b 	bl	8003aec <SpiritRadioGetRefDiv>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	3301      	adds	r3, #1
 8001eda:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8001edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d83a      	bhi.n	8001f5a <SpiritManagementSetFrequencyBase+0x106>
 8001ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8001eec <SpiritManagementSetFrequencyBase+0x98>)
 8001ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eea:	bf00      	nop
 8001eec:	08001f45 	.word	0x08001f45
 8001ef0:	08001f2d 	.word	0x08001f2d
 8001ef4:	08001f15 	.word	0x08001f15
 8001ef8:	08001efd 	.word	0x08001efd
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	4a4f      	ldr	r2, [pc, #316]	@ (800203c <SpiritManagementSetFrequencyBase+0x1e8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d803      	bhi.n	8001f0c <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff fe63 	bl	8001bd0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001f0a:	e026      	b.n	8001f5a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff fe5f 	bl	8001bd0 <SpiritCalibrationSelectVco>
    break;
 8001f12:	e022      	b.n	8001f5a <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	4a4a      	ldr	r2, [pc, #296]	@ (8002040 <SpiritManagementSetFrequencyBase+0x1ec>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d803      	bhi.n	8001f24 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff fe57 	bl	8001bd0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001f22:	e01a      	b.n	8001f5a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff fe53 	bl	8001bd0 <SpiritCalibrationSelectVco>
    break;
 8001f2a:	e016      	b.n	8001f5a <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4a45      	ldr	r2, [pc, #276]	@ (8002044 <SpiritManagementSetFrequencyBase+0x1f0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d803      	bhi.n	8001f3c <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff fe4b 	bl	8001bd0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001f3a:	e00e      	b.n	8001f5a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7ff fe47 	bl	8001bd0 <SpiritCalibrationSelectVco>
    break;
 8001f42:	e00a      	b.n	8001f5a <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	4a40      	ldr	r2, [pc, #256]	@ (8002048 <SpiritManagementSetFrequencyBase+0x1f4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d803      	bhi.n	8001f54 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff fe3f 	bl	8001bd0 <SpiritCalibrationSelectVco>
 8001f52:	e002      	b.n	8001f5a <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f7ff fe3b 	bl	8001bd0 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f000 feb8 	bl	8002cd0 <SpiritRadioSearchWCP>
 8001f60:	4603      	mov	r3, r0
 8001f62:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7fe fa75 	bl	8000454 <__aeabi_ui2d>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	460d      	mov	r5, r1
 8001f6e:	7cfb      	ldrb	r3, [r7, #19]
 8001f70:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001f74:	4935      	ldr	r1, [pc, #212]	@ (800204c <SpiritManagementSetFrequencyBase+0x1f8>)
 8001f76:	5c8a      	ldrb	r2, [r1, r2]
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	049b      	lsls	r3, r3, #18
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe fa78 	bl	8000474 <__aeabi_i2d>
 8001f84:	4680      	mov	r8, r0
 8001f86:	4689      	mov	r9, r1
 8001f88:	f001 fe24 	bl	8003bd4 <SpiritRadioGetXtalFrequency>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fa60 	bl	8000454 <__aeabi_ui2d>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4640      	mov	r0, r8
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	f7fe fbfe 	bl	800079c <__aeabi_ddiv>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	f7fe face 	bl	8000548 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f7fe fcda 	bl	800096c <__aeabi_d2uiz>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	0d5b      	lsrs	r3, r3, #21
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	7cbb      	ldrb	r3, [r7, #18]
 8001fca:	015b      	lsls	r3, r3, #5
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	0b5b      	lsrs	r3, r3, #13
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ff0:	4917      	ldr	r1, [pc, #92]	@ (8002050 <SpiritManagementSetFrequencyBase+0x1fc>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	461a      	mov	r2, r3
 8002000:	2104      	movs	r1, #4
 8002002:	2008      	movs	r0, #8
 8002004:	f001 ffd6 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002008:	4602      	mov	r2, r0
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <SpiritManagementSetFrequencyBase+0x200>)
 800200c:	b212      	sxth	r2, r2
 800200e:	4611      	mov	r1, r2
 8002010:	7019      	strb	r1, [r3, #0]
 8002012:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002016:	705a      	strb	r2, [r3, #1]
}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	@ 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002022:	bf00      	nop
 8002024:	2e5f5680 	.word	0x2e5f5680
 8002028:	390c2fe0 	.word	0x390c2fe0
 800202c:	1701e47f 	.word	0x1701e47f
 8002030:	1c146a60 	.word	0x1c146a60
 8002034:	11d260bf 	.word	0x11d260bf
 8002038:	14ced7e0 	.word	0x14ced7e0
 800203c:	099cf4e1 	.word	0x099cf4e1
 8002040:	1339e9c3 	.word	0x1339e9c3
 8002044:	19a28d05 	.word	0x19a28d05
 8002048:	33451a0a 	.word	0x33451a0a
 800204c:	08009f20 	.word	0x08009f20
 8002050:	08009f1c 	.word	0x08009f1c
 8002054:	20000168 	.word	0x20000168

08002058 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002066:	f001 fdb5 	bl	8003bd4 <SpiritRadioGetXtalFrequency>
 800206a:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 800206c:	2300      	movs	r3, #0
 800206e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4a57      	ldr	r2, [pc, #348]	@ (80021d0 <SpiritManagementWaVcoCalibration+0x178>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d90f      	bls.n	8002098 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002078:	f001 fd38 	bl	8003aec <SpiritRadioGetRefDiv>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10a      	bne.n	8002098 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002086:	f001 f8a3 	bl	80031d0 <SpiritRadioGetFrequencyBase>
 800208a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800208c:	2001      	movs	r0, #1
 800208e:	f001 fcfd 	bl	8003a8c <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff fede 	bl	8001e54 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002098:	f001 f89a 	bl	80031d0 <SpiritRadioGetFrequencyBase>
 800209c:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800209e:	2325      	movs	r3, #37	@ 0x25
 80020a0:	707b      	strb	r3, [r7, #1]
 80020a2:	1c7b      	adds	r3, r7, #1
 80020a4:	461a      	mov	r2, r3
 80020a6:	2101      	movs	r1, #1
 80020a8:	20a1      	movs	r0, #161	@ 0xa1
 80020aa:	f001 ff83 	bl	8003fb4 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 80020ae:	2001      	movs	r0, #1
 80020b0:	f7ff fcd2 	bl	8001a58 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 80020b4:	f001 ff4c 	bl	8003f50 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 80020b8:	4b46      	ldr	r3, [pc, #280]	@ (80021d4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b40      	cmp	r3, #64	@ 0x40
 80020c4:	d10d      	bne.n	80020e2 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80020ca:	2062      	movs	r0, #98	@ 0x62
 80020cc:	f7ff fdaa 	bl	8001c24 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80020d0:	f001 ff3e 	bl	8003f50 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80020d4:	4b3f      	ldr	r3, [pc, #252]	@ (80021d4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d1f6      	bne.n	80020d0 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80020e2:	2066      	movs	r0, #102	@ 0x66
 80020e4:	f7ff fd9e 	bl	8001c24 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80020ec:	f001 ff30 	bl	8003f50 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80020f0:	4b38      	ldr	r3, [pc, #224]	@ (80021d4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b13      	cmp	r3, #19
 80020fc:	d106      	bne.n	800210c <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80020fe:	7b7b      	ldrb	r3, [r7, #13]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	737a      	strb	r2, [r7, #13]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d101      	bne.n	800210c <SpiritManagementWaVcoCalibration+0xb4>
 8002108:	2301      	movs	r3, #1
 800210a:	e05d      	b.n	80021c8 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 800210c:	4b31      	ldr	r3, [pc, #196]	@ (80021d4 <SpiritManagementWaVcoCalibration+0x17c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b0f      	cmp	r3, #15
 8002118:	d1e8      	bne.n	80020ec <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 800211a:	f7ff fcd5 	bl	8001ac8 <SpiritCalibrationGetVcoCalData>
 800211e:	4603      	mov	r3, r0
 8002120:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8002122:	2062      	movs	r0, #98	@ 0x62
 8002124:	f7ff fd7e 	bl	8001c24 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002128:	f001 ff12 	bl	8003f50 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800212c:	4b29      	ldr	r3, [pc, #164]	@ (80021d4 <SpiritManagementWaVcoCalibration+0x17c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b03      	cmp	r3, #3
 8002138:	d1f6      	bne.n	8002128 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800213a:	2065      	movs	r0, #101	@ 0x65
 800213c:	f7ff fd72 	bl	8001c24 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002140:	2300      	movs	r3, #0
 8002142:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002144:	f001 ff04 	bl	8003f50 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002148:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <SpiritManagementWaVcoCalibration+0x17c>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b13      	cmp	r3, #19
 8002154:	d106      	bne.n	8002164 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002156:	7b7b      	ldrb	r3, [r7, #13]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	737a      	strb	r2, [r7, #13]
 800215c:	2b05      	cmp	r3, #5
 800215e:	d101      	bne.n	8002164 <SpiritManagementWaVcoCalibration+0x10c>
 8002160:	2301      	movs	r3, #1
 8002162:	e031      	b.n	80021c8 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002164:	4b1b      	ldr	r3, [pc, #108]	@ (80021d4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b0f      	cmp	r3, #15
 8002170:	d1e8      	bne.n	8002144 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002172:	f7ff fca9 	bl	8001ac8 <SpiritCalibrationGetVcoCalData>
 8002176:	4603      	mov	r3, r0
 8002178:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800217a:	2062      	movs	r0, #98	@ 0x62
 800217c:	f7ff fd52 	bl	8001c24 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002180:	f001 fee6 	bl	8003f50 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002184:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b03      	cmp	r3, #3
 8002190:	d1f6      	bne.n	8002180 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002192:	7bbb      	ldrb	r3, [r7, #14]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d102      	bne.n	800219e <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002198:	2063      	movs	r0, #99	@ 0x63
 800219a:	f7ff fd43 	bl	8001c24 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800219e:	2000      	movs	r0, #0
 80021a0:	f7ff fc5a 	bl	8001a58 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 80021aa:	2000      	movs	r0, #0
 80021ac:	f001 fc6e 	bl	8003a8c <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fe4f 	bl	8001e54 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 80021b6:	78fb      	ldrb	r3, [r7, #3]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fca1 	bl	8001b00 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 80021be:	78bb      	ldrb	r3, [r7, #2]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fcd1 	bl	8001b68 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	01c9c380 	.word	0x01c9c380
 80021d4:	20000168 	.word	0x20000168

080021d8 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80021de:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <SpiritManagementWaCmdStrobeTx+0x60>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d023      	beq.n	8002230 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <SpiritManagementWaCmdStrobeTx+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a14      	ldr	r2, [pc, #80]	@ (8002240 <SpiritManagementWaCmdStrobeTx+0x68>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d908      	bls.n	8002204 <SpiritManagementWaCmdStrobeTx+0x2c>
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <SpiritManagementWaCmdStrobeTx+0x64>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a13      	ldr	r2, [pc, #76]	@ (8002244 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d803      	bhi.n	8002204 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80021fc:	20c0      	movs	r0, #192	@ 0xc0
 80021fe:	f001 fbbb 	bl	8003978 <SpiritRadioSetPACwc>
 8002202:	e002      	b.n	800220a <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8002204:	2000      	movs	r0, #0
 8002206:	f001 fbb7 	bl	8003978 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 800220a:	2311      	movs	r3, #17
 800220c:	71fb      	strb	r3, [r7, #7]
 800220e:	1dfb      	adds	r3, r7, #7
 8002210:	461a      	mov	r2, r3
 8002212:	2101      	movs	r1, #1
 8002214:	20a9      	movs	r0, #169	@ 0xa9
 8002216:	f001 fecd 	bl	8003fb4 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 800221a:	2320      	movs	r3, #32
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	461a      	mov	r2, r3
 8002222:	2101      	movs	r1, #1
 8002224:	20a5      	movs	r0, #165	@ 0xa5
 8002226:	f001 fec5 	bl	8003fb4 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 800222a:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <SpiritManagementWaCmdStrobeTx+0x60>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
  }
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000004 	.word	0x20000004
 800223c:	20000160 	.word	0x20000160
 8002240:	08f0d17f 	.word	0x08f0d17f
 8002244:	1c03a180 	.word	0x1c03a180

08002248 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b01      	cmp	r3, #1
 8002256:	d00d      	beq.n	8002274 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002258:	2398      	movs	r3, #152	@ 0x98
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	461a      	mov	r2, r3
 8002260:	2101      	movs	r1, #1
 8002262:	20a5      	movs	r0, #165	@ 0xa5
 8002264:	f001 fea6 	bl	8003fb4 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002268:	2000      	movs	r0, #0
 800226a:	f001 fb85 	bl	8003978 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800226e:	4b03      	ldr	r3, [pc, #12]	@ (800227c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
  }
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20000004 	.word	0x20000004

08002280 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <SpiritManagementWaTRxFcMem+0x20>)
 800228a:	2202      	movs	r2, #2
 800228c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 800228e:	4a05      	ldr	r2, [pc, #20]	@ (80022a4 <SpiritManagementWaTRxFcMem+0x24>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6013      	str	r3, [r2, #0]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	20000004 	.word	0x20000004
 80022a4:	20000160 	.word	0x20000160

080022a8 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 80022ae:	23ca      	movs	r3, #202	@ 0xca
 80022b0:	71fb      	strb	r3, [r7, #7]
 80022b2:	1dfb      	adds	r3, r7, #7
 80022b4:	461a      	mov	r2, r3
 80022b6:	2101      	movs	r1, #1
 80022b8:	20b2      	movs	r0, #178	@ 0xb2
 80022ba:	f001 fe7b 	bl	8003fb4 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80022be:	2304      	movs	r3, #4
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	1dfb      	adds	r3, r7, #7
 80022c4:	461a      	mov	r2, r3
 80022c6:	2101      	movs	r1, #1
 80022c8:	20a8      	movs	r0, #168	@ 0xa8
 80022ca:	f001 fe73 	bl	8003fb4 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80022ce:	1dfb      	adds	r3, r7, #7
 80022d0:	461a      	mov	r2, r3
 80022d2:	2101      	movs	r1, #1
 80022d4:	20a8      	movs	r0, #168	@ 0xa8
 80022d6:	f001 feb9 	bl	800404c <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80022da:	2300      	movs	r3, #0
 80022dc:	71fb      	strb	r3, [r7, #7]
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	461a      	mov	r2, r3
 80022e2:	2101      	movs	r1, #1
 80022e4:	20a8      	movs	r0, #168	@ 0xa8
 80022e6:	f001 fe65 	bl	8003fb4 <RadioSpiWriteRegisters>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	461a      	mov	r2, r3
 80022fe:	2101      	movs	r1, #1
 8002300:	2030      	movs	r0, #48	@ 0x30
 8002302:	f001 fea3 	bl	800404c <RadioSpiReadRegisters>
 8002306:	4602      	mov	r2, r0
 8002308:	4b07      	ldr	r3, [pc, #28]	@ (8002328 <SpiritPktCommonGetControlLength+0x34>)
 800230a:	b212      	sxth	r2, r2
 800230c:	4611      	mov	r1, r2
 800230e:	7019      	strb	r1, [r3, #0]
 8002310:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002314:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	b2db      	uxtb	r3, r3

}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000168 	.word	0x20000168

0800232c <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002336:	f107 030f 	add.w	r3, r7, #15
 800233a:	461a      	mov	r2, r3
 800233c:	2101      	movs	r1, #1
 800233e:	204f      	movs	r0, #79	@ 0x4f
 8002340:	f001 fe84 	bl	800404c <RadioSpiReadRegisters>
 8002344:	4602      	mov	r2, r0
 8002346:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002348:	b212      	sxth	r2, r2
 800234a:	4611      	mov	r1, r2
 800234c:	7019      	strb	r1, [r3, #0]
 800234e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002352:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e004      	b.n	8002370 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002370:	f107 030f 	add.w	r3, r7, #15
 8002374:	461a      	mov	r2, r3
 8002376:	2101      	movs	r1, #1
 8002378:	204f      	movs	r0, #79	@ 0x4f
 800237a:	f001 fe1b 	bl	8003fb4 <RadioSpiWriteRegisters>
 800237e:	4602      	mov	r2, r0
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002382:	b212      	sxth	r2, r2
 8002384:	4611      	mov	r1, r2
 8002386:	7019      	strb	r1, [r3, #0]
 8002388:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800238c:	705a      	strb	r2, [r3, #1]

}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000168 	.word	0x20000168

0800239c <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	461a      	mov	r2, r3
 80023aa:	2101      	movs	r1, #1
 80023ac:	204b      	movs	r0, #75	@ 0x4b
 80023ae:	f001 fe01 	bl	8003fb4 <RadioSpiWriteRegisters>
 80023b2:	4602      	mov	r2, r0
 80023b4:	4b05      	ldr	r3, [pc, #20]	@ (80023cc <SpiritPktCommonSetDestinationAddress+0x30>)
 80023b6:	b212      	sxth	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	7019      	strb	r1, [r3, #0]
 80023bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023c0:	705a      	strb	r2, [r3, #1]

}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000168 	.word	0x20000168

080023d0 <SpiritPktCommonSetMyAddress>:
 * @param  cAddress Address of the present node.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetMyAddress(uint8_t cAddress)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  /* Writes value on the PCKT_FLT_GOALS_TX_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_TX_ADDR_BASE, 1, &cAddress);
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	461a      	mov	r2, r3
 80023de:	2101      	movs	r1, #1
 80023e0:	204e      	movs	r0, #78	@ 0x4e
 80023e2:	f001 fde7 	bl	8003fb4 <RadioSpiWriteRegisters>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <SpiritPktCommonSetMyAddress+0x30>)
 80023ea:	b212      	sxth	r2, r2
 80023ec:	4611      	mov	r1, r2
 80023ee:	7019      	strb	r1, [r3, #0]
 80023f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023f4:	705a      	strb	r2, [r3, #1]

}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000168 	.word	0x20000168

08002404 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800240c:	f107 0308 	add.w	r3, r7, #8
 8002410:	461a      	mov	r2, r3
 8002412:	2101      	movs	r1, #1
 8002414:	2051      	movs	r0, #81	@ 0x51
 8002416:	f001 fe19 	bl	800404c <RadioSpiReadRegisters>
 800241a:	4602      	mov	r2, r0
 800241c:	4b60      	ldr	r3, [pc, #384]	@ (80025a0 <SpiritPktStackInit+0x19c>)
 800241e:	b212      	sxth	r2, r2
 8002420:	4611      	mov	r1, r2
 8002422:	7019      	strb	r1, [r3, #0]
 8002424:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002428:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 800242a:	7a3b      	ldrb	r3, [r7, #8]
 800242c:	f023 0320 	bic.w	r3, r3, #32
 8002430:	b2db      	uxtb	r3, r3
 8002432:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002434:	7a3b      	ldrb	r3, [r7, #8]
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	461a      	mov	r2, r3
 8002444:	2101      	movs	r1, #1
 8002446:	2051      	movs	r0, #81	@ 0x51
 8002448:	f001 fdb4 	bl	8003fb4 <RadioSpiWriteRegisters>
 800244c:	4602      	mov	r2, r0
 800244e:	4b54      	ldr	r3, [pc, #336]	@ (80025a0 <SpiritPktStackInit+0x19c>)
 8002450:	b212      	sxth	r2, r2
 8002452:	4611      	mov	r1, r2
 8002454:	7019      	strb	r1, [r3, #0]
 8002456:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800245a:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800245c:	f107 0308 	add.w	r3, r7, #8
 8002460:	461a      	mov	r2, r3
 8002462:	2101      	movs	r1, #1
 8002464:	204f      	movs	r0, #79	@ 0x4f
 8002466:	f001 fdf1 	bl	800404c <RadioSpiReadRegisters>
 800246a:	4602      	mov	r2, r0
 800246c:	4b4c      	ldr	r3, [pc, #304]	@ (80025a0 <SpiritPktStackInit+0x19c>)
 800246e:	b212      	sxth	r2, r2
 8002470:	4611      	mov	r1, r2
 8002472:	7019      	strb	r1, [r3, #0]
 8002474:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002478:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 800247a:	7a3b      	ldrb	r3, [r7, #8]
 800247c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002480:	b2db      	uxtb	r3, r3
 8002482:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002484:	f107 0308 	add.w	r3, r7, #8
 8002488:	461a      	mov	r2, r3
 800248a:	2101      	movs	r1, #1
 800248c:	204f      	movs	r0, #79	@ 0x4f
 800248e:	f001 fd91 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002492:	4602      	mov	r2, r0
 8002494:	4b42      	ldr	r3, [pc, #264]	@ (80025a0 <SpiritPktStackInit+0x19c>)
 8002496:	b212      	sxth	r2, r2
 8002498:	4611      	mov	r1, r2
 800249a:	7019      	strb	r1, [r3, #0]
 800249c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024a0:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7adb      	ldrb	r3, [r3, #11]
 80024a6:	f043 0310 	orr.w	r3, r3, #16
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	7a5b      	ldrb	r3, [r3, #9]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <SpiritPktStackInit+0xb8>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7a5b      	ldrb	r3, [r3, #9]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80024dc:	4313      	orrs	r3, r2
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7a9b      	ldrb	r3, [r3, #10]
 80024e6:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7b5b      	ldrb	r3, [r3, #13]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d104      	bne.n	80024fa <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	f043 0310 	orr.w	r3, r3, #16
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7b1b      	ldrb	r3, [r3, #12]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d104      	bne.n	800250c <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002502:	7afb      	ldrb	r3, [r7, #11]
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 800250c:	f107 0308 	add.w	r3, r7, #8
 8002510:	461a      	mov	r2, r3
 8002512:	2104      	movs	r1, #4
 8002514:	2030      	movs	r0, #48	@ 0x30
 8002516:	f001 fd4d 	bl	8003fb4 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e01d      	b.n	800255c <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	785b      	ldrb	r3, [r3, #1]
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f1c3 0303 	rsb	r3, r3, #3
 800252e:	429a      	cmp	r2, r3
 8002530:	da06      	bge.n	8002540 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	3310      	adds	r3, #16
 8002536:	443b      	add	r3, r7
 8002538:	2200      	movs	r2, #0
 800253a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800253e:	e00a      	b.n	8002556 <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	40da      	lsrs	r2, r3
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	3310      	adds	r3, #16
 8002550:	443b      	add	r3, r7
 8002552:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	3301      	adds	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d9de      	bls.n	8002520 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7a9b      	ldrb	r3, [r3, #10]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 800256a:	2000      	movs	r0, #0
 800256c:	f7ff fede 	bl	800232c <SpiritPktCommonFilterOnCrc>
 8002570:	e002      	b.n	8002578 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002572:	2001      	movs	r0, #1
 8002574:	f7ff feda 	bl	800232c <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	461a      	mov	r2, r3
 800257e:	2104      	movs	r1, #4
 8002580:	2036      	movs	r0, #54	@ 0x36
 8002582:	f001 fd17 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002586:	4602      	mov	r2, r0
 8002588:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <SpiritPktStackInit+0x19c>)
 800258a:	b212      	sxth	r2, r2
 800258c:	4611      	mov	r1, r2
 800258e:	7019      	strb	r1, [r3, #0]
 8002590:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002594:	705a      	strb	r2, [r3, #1]

}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000168 	.word	0x20000168

080025a4 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	461a      	mov	r2, r3
 80025b2:	2101      	movs	r1, #1
 80025b4:	204f      	movs	r0, #79	@ 0x4f
 80025b6:	f001 fd49 	bl	800404c <RadioSpiReadRegisters>
 80025ba:	4602      	mov	r2, r0
 80025bc:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <SpiritPktStackAddressesInit+0xd8>)
 80025be:	b212      	sxth	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	7019      	strb	r1, [r3, #0]
 80025c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025c8:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d105      	bne.n	80025de <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80025d2:	7b3b      	ldrb	r3, [r7, #12]
 80025d4:	f043 0308 	orr.w	r3, r3, #8
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	733b      	strb	r3, [r7, #12]
 80025dc:	e004      	b.n	80025e8 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80025de:	7b3b      	ldrb	r3, [r7, #12]
 80025e0:	f023 0308 	bic.w	r3, r3, #8
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	789b      	ldrb	r3, [r3, #2]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d105      	bne.n	80025fc <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80025f0:	7b3b      	ldrb	r3, [r7, #12]
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	733b      	strb	r3, [r7, #12]
 80025fa:	e004      	b.n	8002606 <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80025fc:	7b3b      	ldrb	r3, [r7, #12]
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	b2db      	uxtb	r3, r3
 8002604:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d105      	bne.n	800261a <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800260e:	7b3b      	ldrb	r3, [r7, #12]
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	b2db      	uxtb	r3, r3
 8002616:	733b      	strb	r3, [r7, #12]
 8002618:	e004      	b.n	8002624 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800261a:	7b3b      	ldrb	r3, [r7, #12]
 800261c:	f023 0302 	bic.w	r3, r3, #2
 8002620:	b2db      	uxtb	r3, r3
 8002622:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	461a      	mov	r2, r3
 800262a:	2101      	movs	r1, #1
 800262c:	204f      	movs	r0, #79	@ 0x4f
 800262e:	f001 fcc1 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002632:	4602      	mov	r2, r0
 8002634:	4b11      	ldr	r3, [pc, #68]	@ (800267c <SpiritPktStackAddressesInit+0xd8>)
 8002636:	b212      	sxth	r2, r2
 8002638:	4611      	mov	r1, r2
 800263a:	7019      	strb	r1, [r3, #0]
 800263c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002640:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	795b      	ldrb	r3, [r3, #5]
 8002646:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	78db      	ldrb	r3, [r3, #3]
 800264c:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	785b      	ldrb	r3, [r3, #1]
 8002652:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	461a      	mov	r2, r3
 800265a:	2103      	movs	r1, #3
 800265c:	204c      	movs	r0, #76	@ 0x4c
 800265e:	f001 fca9 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002662:	4602      	mov	r2, r0
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <SpiritPktStackAddressesInit+0xd8>)
 8002666:	b212      	sxth	r2, r2
 8002668:	4611      	mov	r1, r2
 800266a:	7019      	strb	r1, [r3, #0]
 800266c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002670:	705a      	strb	r2, [r3, #1]
  
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000168 	.word	0x20000168

08002680 <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002688:	f107 030c 	add.w	r3, r7, #12
 800268c:	461a      	mov	r2, r3
 800268e:	2102      	movs	r1, #2
 8002690:	2051      	movs	r0, #81	@ 0x51
 8002692:	f001 fcdb 	bl	800404c <RadioSpiReadRegisters>
 8002696:	4602      	mov	r2, r0
 8002698:	4b21      	ldr	r3, [pc, #132]	@ (8002720 <SpiritPktStackLlpInit+0xa0>)
 800269a:	b212      	sxth	r2, r2
 800269c:	4611      	mov	r1, r2
 800269e:	7019      	strb	r1, [r3, #0]
 80026a0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026a4:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d105      	bne.n	80026ba <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 80026ae:	7b3b      	ldrb	r3, [r7, #12]
 80026b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	733b      	strb	r3, [r7, #12]
 80026b8:	e004      	b.n	80026c4 <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 80026ba:	7b3b      	ldrb	r3, [r7, #12]
 80026bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 80026cc:	7b7b      	ldrb	r3, [r7, #13]
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	737b      	strb	r3, [r7, #13]
 80026d6:	e004      	b.n	80026e2 <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 80026d8:	7b7b      	ldrb	r3, [r7, #13]
 80026da:	f023 0304 	bic.w	r3, r3, #4
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 80026e2:	7b7b      	ldrb	r3, [r7, #13]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 80026ec:	7b7a      	ldrb	r2, [r7, #13]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	789b      	ldrb	r3, [r3, #2]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 80026f8:	f107 030c 	add.w	r3, r7, #12
 80026fc:	461a      	mov	r2, r3
 80026fe:	2102      	movs	r1, #2
 8002700:	2051      	movs	r0, #81	@ 0x51
 8002702:	f001 fc57 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002706:	4602      	mov	r2, r0
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <SpiritPktStackLlpInit+0xa0>)
 800270a:	b212      	sxth	r2, r2
 800270c:	4611      	mov	r1, r2
 800270e:	7019      	strb	r1, [r3, #0]
 8002710:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002714:	705a      	strb	r2, [r3, #1]

}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000168 	.word	0x20000168

08002724 <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 800272e:	f7ff fde1 	bl	80022f4 <SpiritPktCommonGetControlLength>
 8002732:	4603      	mov	r3, r0
 8002734:	3302      	adds	r3, #2
 8002736:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	89fb      	ldrh	r3, [r7, #14]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	4413      	add	r3, r2
 8002742:	b2db      	uxtb	r3, r3
 8002744:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	89fb      	ldrh	r3, [r7, #14]
 800274a:	4413      	add	r3, r2
 800274c:	121b      	asrs	r3, r3, #8
 800274e:	b2db      	uxtb	r3, r3
 8002750:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	461a      	mov	r2, r3
 8002758:	2102      	movs	r1, #2
 800275a:	2034      	movs	r0, #52	@ 0x34
 800275c:	f001 fc2a 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <SpiritPktStackSetPayloadLength+0x54>)
 8002764:	b212      	sxth	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	7019      	strb	r1, [r3, #0]
 800276a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800276e:	705a      	strb	r2, [r3, #1]

}
 8002770:	bf00      	nop
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000168 	.word	0x20000168

0800277c <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002786:	f107 030f 	add.w	r3, r7, #15
 800278a:	461a      	mov	r2, r3
 800278c:	2101      	movs	r1, #1
 800278e:	203a      	movs	r0, #58	@ 0x3a
 8002790:	f001 fc5c 	bl	800404c <RadioSpiReadRegisters>
 8002794:	4602      	mov	r2, r0
 8002796:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <SpiritQiSqiCheck+0x6c>)
 8002798:	b212      	sxth	r2, r2
 800279a:	4611      	mov	r1, r2
 800279c:	7019      	strb	r1, [r3, #0]
 800279e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027a2:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d105      	bne.n	80027b6 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e004      	b.n	80027c0 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 80027b6:	7bfb      	ldrb	r3, [r7, #15]
 80027b8:	f023 0302 	bic.w	r3, r3, #2
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80027c0:	f107 030f 	add.w	r3, r7, #15
 80027c4:	461a      	mov	r2, r3
 80027c6:	2101      	movs	r1, #1
 80027c8:	203a      	movs	r0, #58	@ 0x3a
 80027ca:	f001 fbf3 	bl	8003fb4 <RadioSpiWriteRegisters>
 80027ce:	4602      	mov	r2, r0
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <SpiritQiSqiCheck+0x6c>)
 80027d2:	b212      	sxth	r2, r2
 80027d4:	4611      	mov	r1, r2
 80027d6:	7019      	strb	r1, [r3, #0]
 80027d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027dc:	705a      	strb	r2, [r3, #1]

}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000168 	.word	0x20000168

080027ec <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80027f6:	f107 030f 	add.w	r3, r7, #15
 80027fa:	461a      	mov	r2, r3
 80027fc:	2101      	movs	r1, #1
 80027fe:	203a      	movs	r0, #58	@ 0x3a
 8002800:	f001 fc24 	bl	800404c <RadioSpiReadRegisters>
 8002804:	4602      	mov	r2, r0
 8002806:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <SpiritQiSetSqiThreshold+0x64>)
 8002808:	b212      	sxth	r2, r2
 800280a:	4611      	mov	r1, r2
 800280c:	7019      	strb	r1, [r3, #0]
 800280e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002812:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800281a:	b2db      	uxtb	r3, r3
 800281c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	4313      	orrs	r3, r2
 8002824:	b2db      	uxtb	r3, r3
 8002826:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002828:	f107 030f 	add.w	r3, r7, #15
 800282c:	461a      	mov	r2, r3
 800282e:	2101      	movs	r1, #1
 8002830:	203a      	movs	r0, #58	@ 0x3a
 8002832:	f001 fbbf 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002836:	4602      	mov	r2, r0
 8002838:	4b05      	ldr	r3, [pc, #20]	@ (8002850 <SpiritQiSetSqiThreshold+0x64>)
 800283a:	b212      	sxth	r2, r2
 800283c:	4611      	mov	r1, r2
 800283e:	7019      	strb	r1, [r3, #0]
 8002840:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002844:	705a      	strb	r2, [r3, #1]

}
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000168 	.word	0x20000168

08002854 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3382      	adds	r3, #130	@ 0x82
 8002860:	b2db      	uxtb	r3, r3
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002868:	f107 030f 	add.w	r3, r7, #15
 800286c:	461a      	mov	r2, r3
 800286e:	2101      	movs	r1, #1
 8002870:	2022      	movs	r0, #34	@ 0x22
 8002872:	f001 fb9f 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002876:	4602      	mov	r2, r0
 8002878:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <SpiritQiSetRssiThresholddBm+0x3c>)
 800287a:	b212      	sxth	r2, r2
 800287c:	4611      	mov	r1, r2
 800287e:	7019      	strb	r1, [r3, #0]
 8002880:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002884:	705a      	strb	r2, [r3, #1]

}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000168 	.word	0x20000168

08002894 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	@ 0x30
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 800289c:	23a0      	movs	r3, #160	@ 0xa0
 800289e:	747b      	strb	r3, [r7, #17]
 80028a0:	f107 0311 	add.w	r3, r7, #17
 80028a4:	461a      	mov	r2, r3
 80028a6:	2101      	movs	r1, #1
 80028a8:	209f      	movs	r0, #159	@ 0x9f
 80028aa:	f001 fb83 	bl	8003fb4 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028cc:	eddf 6aae 	vldr	s13, [pc, #696]	@ 8002b88 <SpiritRadioInit+0x2f4>
 80028d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d8:	ee17 3a90 	vmov	r3, s15
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 80028de:	2063      	movs	r0, #99	@ 0x63
 80028e0:	f001 fc00 	bl	80040e4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80028e4:	2300      	movs	r3, #0
 80028e6:	73bb      	strb	r3, [r7, #14]
 80028e8:	e004      	b.n	80028f4 <SpiritRadioInit+0x60>
 80028ea:	7bbb      	ldrb	r3, [r7, #14]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	73bb      	strb	r3, [r7, #14]
 80028f4:	7bbb      	ldrb	r3, [r7, #14]
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2bff      	cmp	r3, #255	@ 0xff
 80028fa:	d1f6      	bne.n	80028ea <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80028fc:	f001 fb28 	bl	8003f50 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002900:	4ba2      	ldr	r3, [pc, #648]	@ (8002b8c <SpiritRadioInit+0x2f8>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b40      	cmp	r3, #64	@ 0x40
 800290c:	d1ea      	bne.n	80028e4 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 800290e:	4ba0      	ldr	r3, [pc, #640]	@ (8002b90 <SpiritRadioInit+0x2fc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4aa0      	ldr	r2, [pc, #640]	@ (8002b94 <SpiritRadioInit+0x300>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d803      	bhi.n	8002920 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002918:	2000      	movs	r0, #0
 800291a:	f001 f909 	bl	8003b30 <SpiritRadioSetDigDiv>
 800291e:	e002      	b.n	8002926 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002920:	2001      	movs	r0, #1
 8002922:	f001 f905 	bl	8003b30 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002926:	2062      	movs	r0, #98	@ 0x62
 8002928:	f001 fbdc 	bl	80040e4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 800292c:	2300      	movs	r3, #0
 800292e:	737b      	strb	r3, [r7, #13]
 8002930:	e004      	b.n	800293c <SpiritRadioInit+0xa8>
 8002932:	7b7b      	ldrb	r3, [r7, #13]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3301      	adds	r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	737b      	strb	r3, [r7, #13]
 800293c:	7b7b      	ldrb	r3, [r7, #13]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2bff      	cmp	r3, #255	@ 0xff
 8002942:	d1f6      	bne.n	8002932 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002944:	f001 fb04 	bl	8003f50 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002948:	4b90      	ldr	r3, [pc, #576]	@ (8002b8c <SpiritRadioInit+0x2f8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b03      	cmp	r3, #3
 8002954:	d1ea      	bne.n	800292c <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002958:	ee07 3a90 	vmov	s15, r3
 800295c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002960:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8002b98 <SpiritRadioInit+0x304>
 8002964:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002968:	4b89      	ldr	r3, [pc, #548]	@ (8002b90 <SpiritRadioInit+0x2fc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800297c:	ee17 3a90 	vmov	r3, s15
 8002980:	857b      	strh	r3, [r7, #42]	@ 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002982:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	b29b      	uxth	r3, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	b2db      	uxtb	r3, r3
 8002990:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002992:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002994:	b2db      	uxtb	r3, r3
 8002996:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	025a      	lsls	r2, r3, #9
 800299e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b90 <SpiritRadioInit+0x2fc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	099b      	lsrs	r3, r3, #6
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fc63 	bl	8002280 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 80029ba:	f107 0310 	add.w	r3, r7, #16
 80029be:	461a      	mov	r2, r3
 80029c0:	2101      	movs	r1, #1
 80029c2:	20a3      	movs	r0, #163	@ 0xa3
 80029c4:	f001 fb42 	bl	800404c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 80029c8:	7c3b      	ldrb	r3, [r7, #16]
 80029ca:	f023 0302 	bic.w	r3, r3, #2
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	743b      	strb	r3, [r7, #16]
 80029d2:	f107 0310 	add.w	r3, r7, #16
 80029d6:	461a      	mov	r2, r3
 80029d8:	2101      	movs	r1, #1
 80029da:	20a3      	movs	r0, #163	@ 0xa3
 80029dc:	f001 faea 	bl	8003fb4 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	f107 0216 	add.w	r2, r7, #22
 80029e8:	f107 0117 	add.w	r1, r7, #23
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fc3b 	bl	8003268 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 80029f2:	7dfb      	ldrb	r3, [r7, #23]
 80029f4:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7b5a      	ldrb	r2, [r3, #13]
 80029fa:	7dbb      	ldrb	r3, [r7, #22]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	461a      	mov	r2, r3
 8002a08:	2101      	movs	r1, #1
 8002a0a:	201c      	movs	r0, #28
 8002a0c:	f001 fb1e 	bl	800404c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f107 0214 	add.w	r2, r7, #20
 8002a18:	f107 0115 	add.w	r1, r7, #21
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fdbb 	bl	8003598 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002a22:	7d3b      	ldrb	r3, [r7, #20]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	b25a      	sxtb	r2, r3
 8002a28:	7c3b      	ldrb	r3, [r7, #16]
 8002a2a:	b25b      	sxtb	r3, r3
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	b25b      	sxtb	r3, r3
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b25a      	sxtb	r2, r3
 8002a36:	7d7b      	ldrb	r3, [r7, #21]
 8002a38:	b25b      	sxtb	r3, r3
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f107 0212 	add.w	r2, r7, #18
 8002a4a:	f107 0113 	add.w	r1, r7, #19
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fcbc 	bl	80033cc <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	b25a      	sxtb	r2, r3
 8002a5a:	7cbb      	ldrb	r3, [r7, #18]
 8002a5c:	b25b      	sxtb	r3, r3
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	b25b      	sxtb	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002a66:	4b4a      	ldr	r3, [pc, #296]	@ (8002b90 <SpiritRadioInit+0x2fc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0b1b      	lsrs	r3, r3, #12
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a74:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b9c <SpiritRadioInit+0x308>
 8002a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a7c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002ba0 <SpiritRadioInit+0x30c>
 8002a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a84:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002a88:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a94:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002aa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa8:	dd09      	ble.n	8002abe <SpiritRadioInit+0x22a>
 8002aaa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab2:	edc7 7a00 	vstr	s15, [r7]
 8002ab6:	783b      	ldrb	r3, [r7, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	e006      	b.n	8002acc <SpiritRadioInit+0x238>
 8002abe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ac2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac6:	edc7 7a00 	vstr	s15, [r7]
 8002aca:	783b      	ldrb	r3, [r7, #0]
 8002acc:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002ace:	4b30      	ldr	r3, [pc, #192]	@ (8002b90 <SpiritRadioInit+0x2fc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a30      	ldr	r2, [pc, #192]	@ (8002b94 <SpiritRadioInit+0x300>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d802      	bhi.n	8002ade <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	777b      	strb	r3, [r7, #29]
 8002adc:	e033      	b.n	8002b46 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002ade:	4b2c      	ldr	r3, [pc, #176]	@ (8002b90 <SpiritRadioInit+0x2fc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	0b5b      	lsrs	r3, r3, #13
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aec:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002b9c <SpiritRadioInit+0x308>
 8002af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002af4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002ba0 <SpiritRadioInit+0x30c>
 8002af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002afc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002b00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b14:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	dd09      	ble.n	8002b36 <SpiritRadioInit+0x2a2>
 8002b22:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b2a:	edc7 7a00 	vstr	s15, [r7]
 8002b2e:	783b      	ldrb	r3, [r7, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	e006      	b.n	8002b44 <SpiritRadioInit+0x2b0>
 8002b36:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b3e:	edc7 7a00 	vstr	s15, [r7]
 8002b42:	783b      	ldrb	r3, [r7, #0]
 8002b44:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002b46:	f107 030f 	add.w	r3, r7, #15
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2007      	movs	r0, #7
 8002b50:	f001 fa30 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <SpiritRadioInit+0x2f8>)
 8002b58:	b212      	sxth	r2, r2
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	7019      	strb	r1, [r3, #0]
 8002b5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b62:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002b64:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <SpiritRadioInit+0x2fc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba4 <SpiritRadioInit+0x310>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d91e      	bls.n	8002bac <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002b6e:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <SpiritRadioInit+0x2fc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a0d      	ldr	r2, [pc, #52]	@ (8002ba8 <SpiritRadioInit+0x314>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	bf8c      	ite	hi
 8002b78:	2301      	movhi	r3, #1
 8002b7a:	2300      	movls	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f86c 	bl	8002c5c <SpiritRadioSetXtalFlag>
 8002b84:	e01d      	b.n	8002bc2 <SpiritRadioInit+0x32e>
 8002b86:	bf00      	nop
 8002b88:	49742400 	.word	0x49742400
 8002b8c:	20000168 	.word	0x20000168
 8002b90:	20000164 	.word	0x20000164
 8002b94:	01c9c37f 	.word	0x01c9c37f
 8002b98:	48800000 	.word	0x48800000
 8002b9c:	49afd520 	.word	0x49afd520
 8002ba0:	42800000 	.word	0x42800000
 8002ba4:	01c9c380 	.word	0x01c9c380
 8002ba8:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002bac:	4b28      	ldr	r3, [pc, #160]	@ (8002c50 <SpiritRadioInit+0x3bc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a28      	ldr	r2, [pc, #160]	@ (8002c54 <SpiritRadioInit+0x3c0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	bf8c      	ite	hi
 8002bb6:	2301      	movhi	r3, #1
 8002bb8:	2300      	movls	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 f84d 	bl	8002c5c <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	2101      	movs	r1, #1
 8002bca:	206c      	movs	r0, #108	@ 0x6c
 8002bcc:	f001 f9f2 	bl	8003fb4 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002bd0:	f107 031c 	add.w	r3, r7, #28
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	2104      	movs	r1, #4
 8002bd8:	200c      	movs	r0, #12
 8002bda:	f001 f9eb 	bl	8003fb4 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002bde:	f107 0318 	add.w	r3, r7, #24
 8002be2:	461a      	mov	r2, r3
 8002be4:	2104      	movs	r1, #4
 8002be6:	201a      	movs	r0, #26
 8002be8:	f001 f9e4 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <SpiritRadioInit+0x3c4>)
 8002bf0:	b212      	sxth	r2, r2
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	7019      	strb	r1, [r3, #0]
 8002bf6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bfa:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	f000 ff13 	bl	8003a28 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002c02:	2380      	movs	r3, #128	@ 0x80
 8002c04:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002c06:	23e3      	movs	r3, #227	@ 0xe3
 8002c08:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002c0a:	f107 031c 	add.w	r3, r7, #28
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2102      	movs	r1, #2
 8002c12:	2099      	movs	r0, #153	@ 0x99
 8002c14:	f001 f9ce 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c58 <SpiritRadioInit+0x3c4>)
 8002c1c:	b212      	sxth	r2, r2
 8002c1e:	4611      	mov	r1, r2
 8002c20:	7019      	strb	r1, [r3, #0]
 8002c22:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c26:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002c28:	2322      	movs	r3, #34	@ 0x22
 8002c2a:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	461a      	mov	r2, r3
 8002c32:	2101      	movs	r1, #1
 8002c34:	20bc      	movs	r0, #188	@ 0xbc
 8002c36:	f001 f9bd 	bl	8003fb4 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f9a8 	bl	8002f94 <SpiritRadioSetFrequencyBase>
 8002c44:	4603      	mov	r3, r0
  
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3730      	adds	r7, #48	@ 0x30
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000164 	.word	0x20000164
 8002c54:	017d783f 	.word	0x017d783f
 8002c58:	20000168 	.word	0x20000168

08002c5c <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002c6a:	f107 030f 	add.w	r3, r7, #15
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2101      	movs	r1, #1
 8002c72:	2001      	movs	r0, #1
 8002c74:	f001 f9ea 	bl	800404c <RadioSpiReadRegisters>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <SpiritRadioSetXtalFlag+0x70>)
 8002c7c:	b212      	sxth	r2, r2
 8002c7e:	4611      	mov	r1, r2
 8002c80:	7019      	strb	r1, [r3, #0]
 8002c82:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c86:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d105      	bne.n	8002c9a <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e004      	b.n	8002ca4 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002c9a:	7bfb      	ldrb	r3, [r7, #15]
 8002c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002ca4:	f107 030f 	add.w	r3, r7, #15
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2101      	movs	r1, #1
 8002cac:	2001      	movs	r0, #1
 8002cae:	f001 f981 	bl	8003fb4 <RadioSpiWriteRegisters>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <SpiritRadioSetXtalFlag+0x70>)
 8002cb6:	b212      	sxth	r2, r2
 8002cb8:	4611      	mov	r1, r2
 8002cba:	7019      	strb	r1, [r3, #0]
 8002cbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cc0:	705a      	strb	r2, [r3, #1]
  
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000168 	.word	0x20000168

08002cd0 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3a      	ldr	r2, [pc, #232]	@ (8002dd0 <SpiritRadioSearchWCP+0x100>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d306      	bcc.n	8002cfa <SpiritRadioSearchWCP+0x2a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a39      	ldr	r2, [pc, #228]	@ (8002dd4 <SpiritRadioSearchWCP+0x104>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d802      	bhi.n	8002cfa <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002cf4:	2306      	movs	r3, #6
 8002cf6:	73bb      	strb	r3, [r7, #14]
 8002cf8:	e01f      	b.n	8002d3a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a36      	ldr	r2, [pc, #216]	@ (8002dd8 <SpiritRadioSearchWCP+0x108>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d906      	bls.n	8002d10 <SpiritRadioSearchWCP+0x40>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a35      	ldr	r2, [pc, #212]	@ (8002ddc <SpiritRadioSearchWCP+0x10c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d802      	bhi.n	8002d10 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	73bb      	strb	r3, [r7, #14]
 8002d0e:	e014      	b.n	8002d3a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a33      	ldr	r2, [pc, #204]	@ (8002de0 <SpiritRadioSearchWCP+0x110>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d906      	bls.n	8002d26 <SpiritRadioSearchWCP+0x56>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a32      	ldr	r2, [pc, #200]	@ (8002de4 <SpiritRadioSearchWCP+0x114>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d802      	bhi.n	8002d26 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002d20:	2310      	movs	r3, #16
 8002d22:	73bb      	strb	r3, [r7, #14]
 8002d24:	e009      	b.n	8002d3a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	@ (8002de8 <SpiritRadioSearchWCP+0x118>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d905      	bls.n	8002d3a <SpiritRadioSearchWCP+0x6a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <SpiritRadioSearchWCP+0x11c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d801      	bhi.n	8002d3a <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002d36:	2320      	movs	r3, #32
 8002d38:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002df0 <SpiritRadioSearchWCP+0x120>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	7bba      	ldrb	r2, [r7, #14]
 8002d46:	fb02 f303 	mul.w	r3, r2, r3
 8002d4a:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002d4c:	f241 631f 	movw	r3, #5663	@ 0x161f
 8002d50:	461a      	mov	r2, r3
 8002d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d302      	bcc.n	8002d66 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002d60:	230f      	movs	r3, #15
 8002d62:	73fb      	strb	r3, [r7, #15]
 8002d64:	e023      	b.n	8002dae <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
 8002d6a:	e005      	b.n	8002d78 <SpiritRadioSearchWCP+0xa8>
 8002d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7c:	2b0e      	cmp	r3, #14
 8002d7e:	dc0c      	bgt.n	8002d9a <SpiritRadioSearchWCP+0xca>
 8002d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d84:	4a1b      	ldr	r2, [pc, #108]	@ (8002df4 <SpiritRadioSearchWCP+0x124>)
 8002d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d90:	fb02 f303 	mul.w	r3, r2, r3
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d8e8      	bhi.n	8002d6c <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <SpiritRadioSearchWCP+0xde>
      i--;
 8002da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002db2:	425a      	negs	r2, r3
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	f002 0207 	and.w	r2, r2, #7
 8002dbc:	bf58      	it	pl
 8002dbe:	4253      	negpl	r3, r2
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
  
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	2e5f5680 	.word	0x2e5f5680
 8002dd4:	390c2fe0 	.word	0x390c2fe0
 8002dd8:	1701e47f 	.word	0x1701e47f
 8002ddc:	1c146a60 	.word	0x1c146a60
 8002de0:	11d260bf 	.word	0x11d260bf
 8002de4:	14ced7e0 	.word	0x14ced7e0
 8002de8:	08e18f3f 	.word	0x08e18f3f
 8002dec:	0a6fd060 	.word	0x0a6fd060
 8002df0:	10624dd3 	.word	0x10624dd3
 8002df4:	08009fe0 	.word	0x08009fe0

08002df8 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002dfe:	1d3b      	adds	r3, r7, #4
 8002e00:	461a      	mov	r2, r3
 8002e02:	2104      	movs	r1, #4
 8002e04:	2008      	movs	r0, #8
 8002e06:	f001 f921 	bl	800404c <RadioSpiReadRegisters>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e40 <SpiritRadioGetSynthWord+0x48>)
 8002e0e:	b212      	sxth	r2, r2
 8002e10:	4611      	mov	r1, r2
 8002e12:	7019      	strb	r1, [r3, #0]
 8002e14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e18:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002e1a:	793b      	ldrb	r3, [r7, #4]
 8002e1c:	055b      	lsls	r3, r3, #21
 8002e1e:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8002e22:	797b      	ldrb	r3, [r7, #5]
 8002e24:	035b      	lsls	r3, r3, #13
 8002e26:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002e28:	79bb      	ldrb	r3, [r7, #6]
 8002e2a:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002e2c:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002e2e:	79fa      	ldrb	r2, [r7, #7]
 8002e30:	08d2      	lsrs	r2, r2, #3
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	4413      	add	r3, r2
  
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000168 	.word	0x20000168

08002e44 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2101      	movs	r1, #1
 8002e50:	200b      	movs	r0, #11
 8002e52:	f001 f8fb 	bl	800404c <RadioSpiReadRegisters>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b10      	ldr	r3, [pc, #64]	@ (8002e9c <SpiritRadioGetBand+0x58>)
 8002e5a:	b212      	sxth	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	7019      	strb	r1, [r3, #0]
 8002e60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e64:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e00e      	b.n	8002e92 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d101      	bne.n	8002e82 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e007      	b.n	8002e92 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d101      	bne.n	8002e90 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e000      	b.n	8002e92 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002e90:	2303      	movs	r3, #3
  }
  
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000168 	.word	0x20000168

08002ea0 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8002ea6:	1dfb      	adds	r3, r7, #7
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	2101      	movs	r1, #1
 8002eac:	206c      	movs	r0, #108	@ 0x6c
 8002eae:	f001 f8cd 	bl	800404c <RadioSpiReadRegisters>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ecc <SpiritRadioGetChannel+0x2c>)
 8002eb6:	b212      	sxth	r2, r2
 8002eb8:	4611      	mov	r1, r2
 8002eba:	7019      	strb	r1, [r3, #0]
 8002ebc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ec0:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000168 	.word	0x20000168

08002ed0 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8002ed6:	1dfb      	adds	r3, r7, #7
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2101      	movs	r1, #1
 8002edc:	200c      	movs	r0, #12
 8002ede:	f001 f8b5 	bl	800404c <RadioSpiReadRegisters>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	4b08      	ldr	r3, [pc, #32]	@ (8002f08 <SpiritRadioGetChannelSpace+0x38>)
 8002ee6:	b212      	sxth	r2, r2
 8002ee8:	4611      	mov	r1, r2
 8002eea:	7019      	strb	r1, [r3, #0]
 8002eec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ef0:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8002ef2:	79fb      	ldrb	r3, [r7, #7]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <SpiritRadioGetChannelSpace+0x3c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fb02 f303 	mul.w	r3, r2, r3
 8002efe:	0bdb      	lsrs	r3, r3, #15
  
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000168 	.word	0x20000168
 8002f0c:	20000164 	.word	0x20000164

08002f10 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	200e      	movs	r0, #14
 8002f1e:	f001 f895 	bl	800404c <RadioSpiReadRegisters>
 8002f22:	4602      	mov	r2, r0
 8002f24:	4b19      	ldr	r3, [pc, #100]	@ (8002f8c <SpiritRadioGetFrequencyOffset+0x7c>)
 8002f26:	b212      	sxth	r2, r2
 8002f28:	4611      	mov	r1, r2
 8002f2a:	7019      	strb	r1, [r3, #0]
 8002f2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f30:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8002f32:	793b      	ldrb	r3, [r7, #4]
 8002f34:	021b      	lsls	r3, r3, #8
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	797a      	ldrb	r2, [r7, #5]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8002f40:	887b      	ldrh	r3, [r7, #2]
 8002f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d007      	beq.n	8002f5a <SpiritRadioGetFrequencyOffset+0x4a>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8002f4a:	887b      	ldrh	r3, [r7, #2]
 8002f4c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002f50:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	807b      	strh	r3, [r7, #2]
 8002f58:	e004      	b.n	8002f64 <SpiritRadioGetFrequencyOffset+0x54>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8002f64:	1cbb      	adds	r3, r7, #2
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8002f6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f6e:	4a08      	ldr	r2, [pc, #32]	@ (8002f90 <SpiritRadioGetFrequencyOffset+0x80>)
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	fb02 f303 	mul.w	r3, r2, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da03      	bge.n	8002f82 <SpiritRadioGetFrequencyOffset+0x72>
 8002f7a:	f503 337f 	add.w	r3, r3, #261120	@ 0x3fc00
 8002f7e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002f82:	149b      	asrs	r3, r3, #18
  
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000168 	.word	0x20000168
 8002f90:	20000164 	.word	0x20000164

08002f94 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8002f94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f98:	b08a      	sub	sp, #40	@ 0x28
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a79      	ldr	r2, [pc, #484]	@ (800318c <SpiritRadioSetFrequencyBase+0x1f8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d307      	bcc.n	8002fbc <SpiritRadioSetFrequencyBase+0x28>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a78      	ldr	r2, [pc, #480]	@ (8003190 <SpiritRadioSetFrequencyBase+0x1fc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d803      	bhi.n	8002fbc <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fba:	e022      	b.n	8003002 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a75      	ldr	r2, [pc, #468]	@ (8003194 <SpiritRadioSetFrequencyBase+0x200>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d907      	bls.n	8002fd4 <SpiritRadioSetFrequencyBase+0x40>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a74      	ldr	r2, [pc, #464]	@ (8003198 <SpiritRadioSetFrequencyBase+0x204>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d803      	bhi.n	8002fd4 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fd2:	e016      	b.n	8003002 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a71      	ldr	r2, [pc, #452]	@ (800319c <SpiritRadioSetFrequencyBase+0x208>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d907      	bls.n	8002fec <SpiritRadioSetFrequencyBase+0x58>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a70      	ldr	r2, [pc, #448]	@ (80031a0 <SpiritRadioSetFrequencyBase+0x20c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d803      	bhi.n	8002fec <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fea:	e00a      	b.n	8003002 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a6d      	ldr	r2, [pc, #436]	@ (80031a4 <SpiritRadioSetFrequencyBase+0x210>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d906      	bls.n	8003002 <SpiritRadioSetFrequencyBase+0x6e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a6c      	ldr	r2, [pc, #432]	@ (80031a8 <SpiritRadioSetFrequencyBase+0x214>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d802      	bhi.n	8003002 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003002:	f7ff ff85 	bl	8002f10 <SpiritRadioGetFrequencyOffset>
 8003006:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003008:	f7ff ff62 	bl	8002ed0 <SpiritRadioGetChannelSpace>
 800300c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800300e:	f7ff ff47 	bl	8002ea0 <SpiritRadioGetChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8003016:	6a3a      	ldr	r2, [r7, #32]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	441a      	add	r2, r3
 800301c:	7efb      	ldrb	r3, [r7, #27]
 800301e:	69f9      	ldr	r1, [r7, #28]
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003028:	f000 fd60 	bl	8003aec <SpiritRadioGetRefDiv>
 800302c:	4603      	mov	r3, r0
 800302e:	3301      	adds	r3, #1
 8003030:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8003032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003036:	2b03      	cmp	r3, #3
 8003038:	d839      	bhi.n	80030ae <SpiritRadioSetFrequencyBase+0x11a>
 800303a:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <SpiritRadioSetFrequencyBase+0xac>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003099 	.word	0x08003099
 8003044:	08003081 	.word	0x08003081
 8003048:	08003069 	.word	0x08003069
 800304c:	08003051 	.word	0x08003051
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	4a56      	ldr	r2, [pc, #344]	@ (80031ac <SpiritRadioSetFrequencyBase+0x218>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d803      	bhi.n	8003060 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003058:	2000      	movs	r0, #0
 800305a:	f7fe fdb9 	bl	8001bd0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800305e:	e026      	b.n	80030ae <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003060:	2001      	movs	r0, #1
 8003062:	f7fe fdb5 	bl	8001bd0 <SpiritCalibrationSelectVco>
    break;
 8003066:	e022      	b.n	80030ae <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4a51      	ldr	r2, [pc, #324]	@ (80031b0 <SpiritRadioSetFrequencyBase+0x21c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d803      	bhi.n	8003078 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003070:	2000      	movs	r0, #0
 8003072:	f7fe fdad 	bl	8001bd0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003076:	e01a      	b.n	80030ae <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003078:	2001      	movs	r0, #1
 800307a:	f7fe fda9 	bl	8001bd0 <SpiritCalibrationSelectVco>
    break;
 800307e:	e016      	b.n	80030ae <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	4a4c      	ldr	r2, [pc, #304]	@ (80031b4 <SpiritRadioSetFrequencyBase+0x220>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d803      	bhi.n	8003090 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003088:	2000      	movs	r0, #0
 800308a:	f7fe fda1 	bl	8001bd0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800308e:	e00e      	b.n	80030ae <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003090:	2001      	movs	r0, #1
 8003092:	f7fe fd9d 	bl	8001bd0 <SpiritCalibrationSelectVco>
    break;
 8003096:	e00a      	b.n	80030ae <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	4a47      	ldr	r2, [pc, #284]	@ (80031b8 <SpiritRadioSetFrequencyBase+0x224>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d803      	bhi.n	80030a8 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80030a0:	2000      	movs	r0, #0
 80030a2:	f7fe fd95 	bl	8001bd0 <SpiritCalibrationSelectVco>
 80030a6:	e002      	b.n	80030ae <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80030a8:	2001      	movs	r0, #1
 80030aa:	f7fe fd91 	bl	8001bd0 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80030ae:	6978      	ldr	r0, [r7, #20]
 80030b0:	f7ff fe0e 	bl	8002cd0 <SpiritRadioSearchWCP>
 80030b4:	4603      	mov	r3, r0
 80030b6:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 80030b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030bc:	4a3f      	ldr	r2, [pc, #252]	@ (80031bc <SpiritRadioSetFrequencyBase+0x228>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	461a      	mov	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	fb02 f303 	mul.w	r3, r2, r3
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd f9c3 	bl	8000454 <__aeabi_ui2d>
 80030ce:	4604      	mov	r4, r0
 80030d0:	460d      	mov	r5, r1
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	049b      	lsls	r3, r3, #18
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd f9cc 	bl	8000474 <__aeabi_i2d>
 80030dc:	4680      	mov	r8, r0
 80030de:	4689      	mov	r9, r1
 80030e0:	4b37      	ldr	r3, [pc, #220]	@ (80031c0 <SpiritRadioSetFrequencyBase+0x22c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd f9b5 	bl	8000454 <__aeabi_ui2d>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4640      	mov	r0, r8
 80030f0:	4649      	mov	r1, r9
 80030f2:	f7fd fb53 	bl	800079c <__aeabi_ddiv>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4620      	mov	r0, r4
 80030fc:	4629      	mov	r1, r5
 80030fe:	f7fd fa23 	bl	8000548 <__aeabi_dmul>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	f7fd fc2f 	bl	800096c <__aeabi_d2uiz>
 800310e:	4603      	mov	r3, r0
 8003110:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	0d5b      	lsrs	r3, r3, #21
 8003116:	b2db      	uxtb	r3, r3
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	b2da      	uxtb	r2, r3
 800311e:	7cbb      	ldrb	r3, [r7, #18]
 8003120:	015b      	lsls	r3, r3, #5
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4313      	orrs	r3, r2
 8003126:	b2db      	uxtb	r3, r3
 8003128:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	0b5b      	lsrs	r3, r3, #13
 800312e:	b2db      	uxtb	r3, r3
 8003130:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	b2db      	uxtb	r3, r3
 8003138:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	b2da      	uxtb	r2, r3
 8003142:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003146:	491f      	ldr	r1, [pc, #124]	@ (80031c4 <SpiritRadioSetFrequencyBase+0x230>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	4313      	orrs	r3, r2
 800314c:	b2db      	uxtb	r3, r3
 800314e:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8003150:	f107 0308 	add.w	r3, r7, #8
 8003154:	461a      	mov	r2, r3
 8003156:	2104      	movs	r1, #4
 8003158:	2008      	movs	r0, #8
 800315a:	f000 ff2b 	bl	8003fb4 <RadioSpiWriteRegisters>
 800315e:	4602      	mov	r2, r0
 8003160:	4b19      	ldr	r3, [pc, #100]	@ (80031c8 <SpiritRadioSetFrequencyBase+0x234>)
 8003162:	b212      	sxth	r2, r2
 8003164:	4611      	mov	r1, r2
 8003166:	7019      	strb	r1, [r3, #0]
 8003168:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800316c:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 800316e:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <SpiritRadioSetFrequencyBase+0x238>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d103      	bne.n	800317e <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8003176:	f7fe ff6f 	bl	8002058 <SpiritManagementWaVcoCalibration>
 800317a:	4603      	mov	r3, r0
 800317c:	e000      	b.n	8003180 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3728      	adds	r7, #40	@ 0x28
 8003184:	46bd      	mov	sp, r7
 8003186:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800318a:	bf00      	nop
 800318c:	2e5f5680 	.word	0x2e5f5680
 8003190:	390c2fe0 	.word	0x390c2fe0
 8003194:	1701e47f 	.word	0x1701e47f
 8003198:	1c146a60 	.word	0x1c146a60
 800319c:	11d260bf 	.word	0x11d260bf
 80031a0:	14ced7e0 	.word	0x14ced7e0
 80031a4:	08e18f3f 	.word	0x08e18f3f
 80031a8:	0a6fd060 	.word	0x0a6fd060
 80031ac:	099cf4e1 	.word	0x099cf4e1
 80031b0:	1339e9c3 	.word	0x1339e9c3
 80031b4:	19a28d05 	.word	0x19a28d05
 80031b8:	33451a0a 	.word	0x33451a0a
 80031bc:	08009f24 	.word	0x08009f24
 80031c0:	20000164 	.word	0x20000164
 80031c4:	08009f28 	.word	0x08009f28
 80031c8:	20000168 	.word	0x20000168
 80031cc:	20000005 	.word	0x20000005

080031d0 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 80031d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 80031d8:	f7ff fe0e 	bl	8002df8 <SpiritRadioGetSynthWord>
 80031dc:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 80031de:	f7ff fe31 	bl	8002e44 <SpiritRadioGetBand>
 80031e2:	4603      	mov	r3, r0
 80031e4:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 80031e6:	f000 fc81 	bl	8003aec <SpiritRadioGetRefDiv>
 80031ea:	4603      	mov	r3, r0
 80031ec:	3301      	adds	r3, #1
 80031ee:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7fd f92f 	bl	8000454 <__aeabi_ui2d>
 80031f6:	4604      	mov	r4, r0
 80031f8:	460d      	mov	r5, r1
 80031fa:	4b19      	ldr	r3, [pc, #100]	@ (8003260 <SpiritRadioGetFrequencyBase+0x90>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd f928 	bl	8000454 <__aeabi_ui2d>
 8003204:	4680      	mov	r8, r0
 8003206:	4689      	mov	r9, r1
 8003208:	78bb      	ldrb	r3, [r7, #2]
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	4915      	ldr	r1, [pc, #84]	@ (8003264 <SpiritRadioGetFrequencyBase+0x94>)
 800320e:	5c8a      	ldrb	r2, [r1, r2]
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	049b      	lsls	r3, r3, #18
 8003216:	4618      	mov	r0, r3
 8003218:	f7fd f92c 	bl	8000474 <__aeabi_i2d>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4640      	mov	r0, r8
 8003222:	4649      	mov	r1, r9
 8003224:	f7fd faba 	bl	800079c <__aeabi_ddiv>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4620      	mov	r0, r4
 800322e:	4629      	mov	r1, r5
 8003230:	f7fd f98a 	bl	8000548 <__aeabi_dmul>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	ec43 2b17 	vmov	d7, r2, r3
 800323c:	eeb0 0a47 	vmov.f32	s0, s14
 8003240:	eef0 0a67 	vmov.f32	s1, s15
 8003244:	f006 fdcc 	bl	8009de0 <round>
 8003248:	ec53 2b10 	vmov	r2, r3, d0
 800324c:	4610      	mov	r0, r2
 800324e:	4619      	mov	r1, r3
 8003250:	f7fd fb8c 	bl	800096c <__aeabi_d2uiz>
 8003254:	4603      	mov	r3, r0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003260:	20000164 	.word	0x20000164
 8003264:	08009f24 	.word	0x08009f24

08003268 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003278:	230f      	movs	r3, #15
 800327a:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003280:	f000 fc86 	bl	8003b90 <SpiritRadioGetDigDiv>
 8003284:	4603      	mov	r3, r0
 8003286:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003288:	e015      	b.n	80032b6 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 800328a:	4b4f      	ldr	r3, [pc, #316]	@ (80033c8 <SpiritRadioSearchDatarateME+0x160>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003292:	f1c3 0114 	rsb	r1, r3, #20
 8003296:	7ebb      	ldrb	r3, [r7, #26]
 8003298:	440b      	add	r3, r1
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d302      	bcc.n	80032aa <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	763b      	strb	r3, [r7, #24]
 80032a8:	e005      	b.n	80032b6 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 80032aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 80032b6:	7e3b      	ldrb	r3, [r7, #24]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <SpiritRadioSearchDatarateME+0x5e>
 80032be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	dae1      	bge.n	800328a <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 80032c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	da01      	bge.n	80032d2 <SpiritRadioSearchDatarateME+0x6a>
 80032ce:	2300      	movs	r3, #0
 80032d0:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 80032d2:	7ffa      	ldrb	r2, [r7, #31]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 80032d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032dc:	f1c3 0317 	rsb	r3, r3, #23
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	409a      	lsls	r2, r3
 80032e4:	4b38      	ldr	r3, [pc, #224]	@ (80033c8 <SpiritRadioSearchDatarateME+0x160>)
 80032e6:	6819      	ldr	r1, [r3, #0]
 80032e8:	7ebb      	ldrb	r3, [r7, #26]
 80032ea:	3305      	adds	r3, #5
 80032ec:	fa21 f303 	lsr.w	r3, r1, r3
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	77bb      	strb	r3, [r7, #30]
 80032fa:	e031      	b.n	8003360 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 80032fc:	7e7a      	ldrb	r2, [r7, #25]
 80032fe:	7fbb      	ldrb	r3, [r7, #30]
 8003300:	4413      	add	r3, r2
 8003302:	2b01      	cmp	r3, #1
 8003304:	d021      	beq.n	800334a <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	b29a      	uxth	r2, r3
 800330a:	7e7b      	ldrb	r3, [r7, #25]
 800330c:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 8003310:	7fbb      	ldrb	r3, [r7, #30]
 8003312:	440b      	add	r3, r1
 8003314:	3b01      	subs	r3, #1
 8003316:	4618      	mov	r0, r3
 8003318:	4b2b      	ldr	r3, [pc, #172]	@ (80033c8 <SpiritRadioSearchDatarateME+0x160>)
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	7ebb      	ldrb	r3, [r7, #26]
 800331e:	3305      	adds	r3, #5
 8003320:	fa21 f303 	lsr.w	r3, r1, r3
 8003324:	fb03 f100 	mul.w	r1, r3, r0
 8003328:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800332c:	f1c3 0317 	rsb	r3, r3, #23
 8003330:	fa21 f303 	lsr.w	r3, r1, r3
 8003334:	b29b      	uxth	r3, r3
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	b29a      	uxth	r2, r3
 800333a:	7fbb      	ldrb	r3, [r7, #30]
 800333c:	b212      	sxth	r2, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	3320      	adds	r3, #32
 8003342:	443b      	add	r3, r7
 8003344:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003348:	e007      	b.n	800335a <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800334a:	7fbb      	ldrb	r3, [r7, #30]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	3320      	adds	r3, #32
 8003350:	443b      	add	r3, r7
 8003352:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003356:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 800335a:	7fbb      	ldrb	r3, [r7, #30]
 800335c:	3301      	adds	r3, #1
 800335e:	77bb      	strb	r3, [r7, #30]
 8003360:	7fbb      	ldrb	r3, [r7, #30]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d9ca      	bls.n	80032fc <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003366:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800336a:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 800336c:	2300      	movs	r3, #0
 800336e:	76fb      	strb	r3, [r7, #27]
 8003370:	e021      	b.n	80033b6 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003372:	7efb      	ldrb	r3, [r7, #27]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	3320      	adds	r3, #32
 8003378:	443b      	add	r3, r7
 800337a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	bfb8      	it	lt
 8003382:	425b      	neglt	r3, r3
 8003384:	b29b      	uxth	r3, r3
 8003386:	8bba      	ldrh	r2, [r7, #28]
 8003388:	429a      	cmp	r2, r3
 800338a:	d911      	bls.n	80033b0 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 800338c:	7efb      	ldrb	r3, [r7, #27]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	3320      	adds	r3, #32
 8003392:	443b      	add	r3, r7
 8003394:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	bfb8      	it	lt
 800339c:	425b      	neglt	r3, r3
 800339e:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 80033a0:	7e7a      	ldrb	r2, [r7, #25]
 80033a2:	7efb      	ldrb	r3, [r7, #27]
 80033a4:	4413      	add	r3, r2
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 80033b0:	7efb      	ldrb	r3, [r7, #27]
 80033b2:	3301      	adds	r3, #1
 80033b4:	76fb      	strb	r3, [r7, #27]
 80033b6:	7efb      	ldrb	r3, [r7, #27]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d9da      	bls.n	8003372 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000164 	.word	0x20000164

080033cc <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08a      	sub	sp, #40	@ 0x28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 80033de:	f000 fbd7 	bl	8003b90 <SpiritRadioGetDigDiv>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 80033e8:	2302      	movs	r3, #2
 80033ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80033ee:	e002      	b.n	80033f6 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 80033f6:	4b63      	ldr	r3, [pc, #396]	@ (8003584 <SpiritRadioSearchChannelBwME+0x1b8>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	4a61      	ldr	r2, [pc, #388]	@ (8003588 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 800340c:	2300      	movs	r3, #0
 800340e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003412:	e006      	b.n	8003422 <SpiritRadioSearchChannelBwME+0x56>
 8003414:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003418:	b2db      	uxtb	r3, r3
 800341a:	3301      	adds	r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003422:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003426:	2b59      	cmp	r3, #89	@ 0x59
 8003428:	dc0f      	bgt.n	800344a <SpiritRadioSearchChannelBwME+0x7e>
 800342a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800342e:	4a57      	ldr	r2, [pc, #348]	@ (800358c <SpiritRadioSearchChannelBwME+0x1c0>)
 8003430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003434:	461a      	mov	r2, r3
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	4a54      	ldr	r2, [pc, #336]	@ (8003590 <SpiritRadioSearchChannelBwME+0x1c4>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0adb      	lsrs	r3, r3, #11
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	429a      	cmp	r2, r3
 8003448:	d3e4      	bcc.n	8003414 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 800344a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800344e:	2b00      	cmp	r3, #0
 8003450:	d077      	beq.n	8003542 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003456:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800345e:	e03a      	b.n	80034d6 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003460:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003464:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003468:	4413      	add	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	dc06      	bgt.n	800347c <SpiritRadioSearchChannelBwME+0xb0>
 800346e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003472:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003476:	4413      	add	r3, r2
 8003478:	2b5a      	cmp	r3, #90	@ 0x5a
 800347a:	dc1e      	bgt.n	80034ba <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	b29a      	uxth	r2, r3
 8003480:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003484:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003488:	440b      	add	r3, r1
 800348a:	3b01      	subs	r3, #1
 800348c:	493f      	ldr	r1, [pc, #252]	@ (800358c <SpiritRadioSearchChannelBwME+0x1c0>)
 800348e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003492:	4619      	mov	r1, r3
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	493d      	ldr	r1, [pc, #244]	@ (8003590 <SpiritRadioSearchChannelBwME+0x1c4>)
 800349c:	fba1 1303 	umull	r1, r3, r1, r3
 80034a0:	0adb      	lsrs	r3, r3, #11
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034ac:	b212      	sxth	r2, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	3328      	adds	r3, #40	@ 0x28
 80034b2:	443b      	add	r3, r7
 80034b4:	f823 2c14 	strh.w	r2, [r3, #-20]
 80034b8:	e008      	b.n	80034cc <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 80034ba:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	3328      	adds	r3, #40	@ 0x28
 80034c2:	443b      	add	r3, r7
 80034c4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80034c8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 80034cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034d0:	3301      	adds	r3, #1
 80034d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80034d6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d9c0      	bls.n	8003460 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 80034de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034e2:	847b      	strh	r3, [r7, #34]	@ 0x22
    
    for(uint8_t j=0;j<3;j++)
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80034ea:	e026      	b.n	800353a <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 80034ec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	3328      	adds	r3, #40	@ 0x28
 80034f4:	443b      	add	r3, r7
 80034f6:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bfb8      	it	lt
 80034fe:	425b      	neglt	r3, r3
 8003500:	b29b      	uxth	r3, r3
 8003502:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003504:	429a      	cmp	r2, r3
 8003506:	d913      	bls.n	8003530 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003508:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	3328      	adds	r3, #40	@ 0x28
 8003510:	443b      	add	r3, r7
 8003512:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	bfb8      	it	lt
 800351a:	425b      	neglt	r3, r3
 800351c:	847b      	strh	r3, [r7, #34]	@ 0x22
        i=i_tmp+j-1;
 800351e:	7efa      	ldrb	r2, [r7, #27]
 8003520:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003524:	4413      	add	r3, r2
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for(uint8_t j=0;j<3;j++)
 8003530:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003534:	3301      	adds	r3, #1
 8003536:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800353a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800353e:	2b02      	cmp	r3, #2
 8003540:	d9d4      	bls.n	80034ec <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003542:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003546:	4a13      	ldr	r2, [pc, #76]	@ (8003594 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003548:	fb82 1203 	smull	r1, r2, r2, r3
 800354c:	1052      	asrs	r2, r2, #1
 800354e:	17db      	asrs	r3, r3, #31
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	b25b      	sxtb	r3, r3
 8003554:	b2da      	uxtb	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 800355a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800355e:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003560:	fb83 1302 	smull	r1, r3, r3, r2
 8003564:	1059      	asrs	r1, r3, #1
 8003566:	17d3      	asrs	r3, r2, #31
 8003568:	1ac9      	subs	r1, r1, r3
 800356a:	460b      	mov	r3, r1
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	440b      	add	r3, r1
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	b25b      	sxtb	r3, r3
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	701a      	strb	r2, [r3, #0]
  
}
 800357a:	bf00      	nop
 800357c:	3728      	adds	r7, #40	@ 0x28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000164 	.word	0x20000164
 8003588:	51eb851f 	.word	0x51eb851f
 800358c:	08009f2c 	.word	0x08009f2c
 8003590:	c9a633fd 	.word	0xc9a633fd
 8003594:	38e38e39 	.word	0x38e38e39

08003598 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b08a      	sub	sp, #40	@ 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 80035a8:	4b53      	ldr	r3, [pc, #332]	@ (80036f8 <SpiritRadioSearchFreqDevME+0x160>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035b4:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80036fc <SpiritRadioSearchFreqDevME+0x164>
 80035b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035bc:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80035c6:	e028      	b.n	800361a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 80035c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035cc:	2201      	movs	r2, #1
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fc ff4e 	bl	8000474 <__aeabi_i2d>
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	4b48      	ldr	r3, [pc, #288]	@ (8003700 <SpiritRadioSearchFreqDevME+0x168>)
 80035de:	f7fc ffb3 	bl	8000548 <__aeabi_dmul>
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	4610      	mov	r0, r2
 80035e8:	4619      	mov	r1, r3
 80035ea:	f7fd f9bf 	bl	800096c <__aeabi_d2uiz>
 80035ee:	ee07 0a90 	vmov	s15, r0
 80035f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80035fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003602:	ee17 3a90 	vmov	r3, s15
 8003606:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	429a      	cmp	r2, r3
 800360e:	d309      	bcc.n	8003624 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003610:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003614:	3301      	adds	r3, #1
 8003616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800361a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800361e:	2b09      	cmp	r3, #9
 8003620:	d9d2      	bls.n	80035c8 <SpiritRadioSearchFreqDevME+0x30>
 8003622:	e000      	b.n	8003626 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003624:	bf00      	nop
  }
  (*pcE) = i;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800362c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 800362e:	2300      	movs	r3, #0
 8003630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003634:	e043      	b.n	80036be <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 800363a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc ff18 	bl	8000474 <__aeabi_i2d>
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	4b2e      	ldr	r3, [pc, #184]	@ (8003704 <SpiritRadioSearchFreqDevME+0x16c>)
 800364a:	f7fc fdc7 	bl	80001dc <__adddf3>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4610      	mov	r0, r2
 8003654:	4619      	mov	r1, r3
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800365e:	f7fd f89d 	bl	800079c <__aeabi_ddiv>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4614      	mov	r4, r2
 8003668:	461d      	mov	r5, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	2301      	movs	r3, #1
 8003672:	4093      	lsls	r3, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7fc fefd 	bl	8000474 <__aeabi_i2d>
 800367a:	4602      	mov	r2, r0
 800367c:	460b      	mov	r3, r1
 800367e:	4620      	mov	r0, r4
 8003680:	4629      	mov	r1, r5
 8003682:	f7fc ff61 	bl	8000548 <__aeabi_dmul>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	f7fd f96d 	bl	800096c <__aeabi_d2uiz>
 8003692:	ee07 0a90 	vmov	s15, r0
 8003696:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800369a:	edd7 7a06 	vldr	s15, [r7, #24]
 800369e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036a6:	ee17 3a90 	vmov	r3, s15
 80036aa:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d309      	bcc.n	80036c8 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 80036b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036b8:	3301      	adds	r3, #1
 80036ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80036be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036c2:	2b07      	cmp	r3, #7
 80036c4:	d9b7      	bls.n	8003636 <SpiritRadioSearchFreqDevME+0x9e>
 80036c6:	e000      	b.n	80036ca <SpiritRadioSearchFreqDevME+0x132>
      break;
 80036c8:	bf00      	nop
  }
  
  (*pcM)=i;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80036d0:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	1ad2      	subs	r2, r2, r3
 80036d8:	69f9      	ldr	r1, [r7, #28]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1acb      	subs	r3, r1, r3
 80036de:	429a      	cmp	r2, r3
 80036e0:	d205      	bcs.n	80036ee <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	701a      	strb	r2, [r3, #0]
  
}
 80036ee:	bf00      	nop
 80036f0:	3728      	adds	r7, #40	@ 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bdb0      	pop	{r4, r5, r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000164 	.word	0x20000164
 80036fc:	48800000 	.word	0x48800000
 8003700:	401e0000 	.word	0x401e0000
 8003704:	40200000 	.word	0x40200000

08003708 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003714:	2300      	movs	r3, #0
 8003716:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003718:	2300      	movs	r3, #0
 800371a:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a74      	ldr	r2, [pc, #464]	@ (80038f0 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d30c      	bcc.n	800373e <SpiritRadioGetdBm2Reg+0x36>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a73      	ldr	r2, [pc, #460]	@ (80038f4 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d808      	bhi.n	800373e <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4a71      	ldr	r2, [pc, #452]	@ (80038f8 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d822      	bhi.n	800377e <SpiritRadioGetdBm2Reg+0x76>
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
 800373c:	e01f      	b.n	800377e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4a6e      	ldr	r2, [pc, #440]	@ (80038fc <SpiritRadioGetdBm2Reg+0x1f4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d906      	bls.n	8003754 <SpiritRadioGetdBm2Reg+0x4c>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a6d      	ldr	r2, [pc, #436]	@ (8003900 <SpiritRadioGetdBm2Reg+0x1f8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d802      	bhi.n	8003754 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 800374e:	2302      	movs	r3, #2
 8003750:	75fb      	strb	r3, [r7, #23]
 8003752:	e014      	b.n	800377e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a6b      	ldr	r2, [pc, #428]	@ (8003904 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d906      	bls.n	800376a <SpiritRadioGetdBm2Reg+0x62>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a6a      	ldr	r2, [pc, #424]	@ (8003908 <SpiritRadioGetdBm2Reg+0x200>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d802      	bhi.n	800376a <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003764:	2303      	movs	r3, #3
 8003766:	75fb      	strb	r3, [r7, #23]
 8003768:	e009      	b.n	800377e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4a67      	ldr	r2, [pc, #412]	@ (800390c <SpiritRadioGetdBm2Reg+0x204>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d905      	bls.n	800377e <SpiritRadioGetdBm2Reg+0x76>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a66      	ldr	r2, [pc, #408]	@ (8003910 <SpiritRadioGetdBm2Reg+0x208>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d801      	bhi.n	800377e <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 800377a:	2304      	movs	r3, #4
 800377c:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 800377e:	2301      	movs	r3, #1
 8003780:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003782:	edd7 7a02 	vldr	s15, [r7, #8]
 8003786:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	dd2f      	ble.n	80037f0 <SpiritRadioGetdBm2Reg+0xe8>
 8003790:	7dfa      	ldrb	r2, [r7, #23]
 8003792:	4960      	ldr	r1, [pc, #384]	@ (8003914 <SpiritRadioGetdBm2Reg+0x20c>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	440b      	add	r3, r1
 800379e:	3308      	adds	r3, #8
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	eef2 6a0a 	vmov.f32	s13, #42	@ 0x41500000  13.0
 80037a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ac:	7dfa      	ldrb	r2, [r7, #23]
 80037ae:	4959      	ldr	r1, [pc, #356]	@ (8003914 <SpiritRadioGetdBm2Reg+0x20c>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	440b      	add	r3, r1
 80037ba:	330c      	adds	r3, #12
 80037bc:	ed93 6a00 	vldr	s12, [r3]
 80037c0:	7dfa      	ldrb	r2, [r7, #23]
 80037c2:	4954      	ldr	r1, [pc, #336]	@ (8003914 <SpiritRadioGetdBm2Reg+0x20c>)
 80037c4:	4613      	mov	r3, r2
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	3308      	adds	r3, #8
 80037d0:	edd3 6a00 	vldr	s13, [r3]
 80037d4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80037d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80037e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e8:	dd02      	ble.n	80037f0 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75bb      	strb	r3, [r7, #22]
 80037ee:	e035      	b.n	800385c <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 80037f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fc:	d82e      	bhi.n	800385c <SpiritRadioGetdBm2Reg+0x154>
 80037fe:	7dfa      	ldrb	r2, [r7, #23]
 8003800:	4944      	ldr	r1, [pc, #272]	@ (8003914 <SpiritRadioGetdBm2Reg+0x20c>)
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	440b      	add	r3, r1
 800380c:	3308      	adds	r3, #8
 800380e:	edd3 7a00 	vldr	s15, [r3]
 8003812:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8003918 <SpiritRadioGetdBm2Reg+0x210>
 8003816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800381a:	7dfa      	ldrb	r2, [r7, #23]
 800381c:	493d      	ldr	r1, [pc, #244]	@ (8003914 <SpiritRadioGetdBm2Reg+0x20c>)
 800381e:	4613      	mov	r3, r2
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	4413      	add	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	440b      	add	r3, r1
 8003828:	330c      	adds	r3, #12
 800382a:	ed93 6a00 	vldr	s12, [r3]
 800382e:	7dfa      	ldrb	r2, [r7, #23]
 8003830:	4938      	ldr	r1, [pc, #224]	@ (8003914 <SpiritRadioGetdBm2Reg+0x20c>)
 8003832:	4613      	mov	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	3308      	adds	r3, #8
 800383e:	edd3 6a00 	vldr	s13, [r3]
 8003842:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800384a:	ed97 7a02 	vldr	s14, [r7, #8]
 800384e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003856:	d501      	bpl.n	800385c <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003858:	2302      	movs	r3, #2
 800385a:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 800385c:	7dfa      	ldrb	r2, [r7, #23]
 800385e:	7dbb      	ldrb	r3, [r7, #22]
 8003860:	0059      	lsls	r1, r3, #1
 8003862:	482c      	ldr	r0, [pc, #176]	@ (8003914 <SpiritRadioGetdBm2Reg+0x20c>)
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	440b      	add	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4403      	add	r3, r0
 8003872:	ed93 7a00 	vldr	s14, [r3]
 8003876:	edd7 7a02 	vldr	s15, [r7, #8]
 800387a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800387e:	7dfa      	ldrb	r2, [r7, #23]
 8003880:	7dbb      	ldrb	r3, [r7, #22]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	1c59      	adds	r1, r3, #1
 8003886:	4823      	ldr	r0, [pc, #140]	@ (8003914 <SpiritRadioGetdBm2Reg+0x20c>)
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	440b      	add	r3, r1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389e:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 80038a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	d503      	bpl.n	80038bc <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 80038b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	e00a      	b.n	80038d2 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 80038bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80038c0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800391c <SpiritRadioGetdBm2Reg+0x214>
 80038c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	dd01      	ble.n	80038d2 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 80038ce:	4b14      	ldr	r3, [pc, #80]	@ (8003920 <SpiritRadioGetdBm2Reg+0x218>)
 80038d0:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 80038d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80038d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038da:	edc7 7a01 	vstr	s15, [r7, #4]
 80038de:	793b      	ldrb	r3, [r7, #4]
 80038e0:	b2db      	uxtb	r3, r3
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	2e5f5680 	.word	0x2e5f5680
 80038f4:	390c2fe0 	.word	0x390c2fe0
 80038f8:	35a4e8ff 	.word	0x35a4e8ff
 80038fc:	1701e47f 	.word	0x1701e47f
 8003900:	1c146a60 	.word	0x1c146a60
 8003904:	11d260bf 	.word	0x11d260bf
 8003908:	14ced7e0 	.word	0x14ced7e0
 800390c:	08e18f3f 	.word	0x08e18f3f
 8003910:	0a6fd060 	.word	0x0a6fd060
 8003914:	0800a000 	.word	0x0800a000
 8003918:	42200000 	.word	0x42200000
 800391c:	42b40000 	.word	0x42b40000
 8003920:	42b40000 	.word	0x42b40000

08003924 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	ed87 0a00 	vstr	s0, [r7]
 8003930:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003932:	f7ff fc4d 	bl	80031d0 <SpiritRadioGetFrequencyBase>
 8003936:	4603      	mov	r3, r0
 8003938:	ed97 0a00 	vldr	s0, [r7]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff fee3 	bl	8003708 <SpiritRadioGetdBm2Reg>
 8003942:	4603      	mov	r3, r0
 8003944:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f1c3 0317 	rsb	r3, r3, #23
 800394c:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 800394e:	f107 020e 	add.w	r2, r7, #14
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2101      	movs	r1, #1
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fb2c 	bl	8003fb4 <RadioSpiWriteRegisters>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <SpiritRadioSetPALeveldBm+0x50>)
 8003960:	b212      	sxth	r2, r2
 8003962:	4611      	mov	r1, r2
 8003964:	7019      	strb	r1, [r3, #0]
 8003966:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800396a:	705a      	strb	r2, [r3, #1]
  
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000168 	.word	0x20000168

08003978 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003982:	f107 030f 	add.w	r3, r7, #15
 8003986:	461a      	mov	r2, r3
 8003988:	2101      	movs	r1, #1
 800398a:	2018      	movs	r0, #24
 800398c:	f000 fb5e 	bl	800404c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003996:	b2db      	uxtb	r3, r3
 8003998:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 800399a:	7bfa      	ldrb	r2, [r7, #15]
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	4313      	orrs	r3, r2
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80039a4:	f107 030f 	add.w	r3, r7, #15
 80039a8:	461a      	mov	r2, r3
 80039aa:	2101      	movs	r1, #1
 80039ac:	2018      	movs	r0, #24
 80039ae:	f000 fb01 	bl	8003fb4 <RadioSpiWriteRegisters>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <SpiritRadioSetPACwc+0x54>)
 80039b6:	b212      	sxth	r2, r2
 80039b8:	4611      	mov	r1, r2
 80039ba:	7019      	strb	r1, [r3, #0]
 80039bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039c0:	705a      	strb	r2, [r3, #1]
  
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000168 	.word	0x20000168

080039d0 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80039da:	f107 030f 	add.w	r3, r7, #15
 80039de:	461a      	mov	r2, r3
 80039e0:	2101      	movs	r1, #1
 80039e2:	2018      	movs	r0, #24
 80039e4:	f000 fb32 	bl	800404c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	f023 0307 	bic.w	r3, r3, #7
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 80039f2:	7bfa      	ldrb	r2, [r7, #15]
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80039fc:	f107 030f 	add.w	r3, r7, #15
 8003a00:	461a      	mov	r2, r3
 8003a02:	2101      	movs	r1, #1
 8003a04:	2018      	movs	r0, #24
 8003a06:	f000 fad5 	bl	8003fb4 <RadioSpiWriteRegisters>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003a0e:	b212      	sxth	r2, r2
 8003a10:	4611      	mov	r1, r2
 8003a12:	7019      	strb	r1, [r3, #0]
 8003a14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a18:	705a      	strb	r2, [r3, #1]
  
}
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000168 	.word	0x20000168

08003a28 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003a36:	f107 030f 	add.w	r3, r7, #15
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	201e      	movs	r0, #30
 8003a40:	f000 fb04 	bl	800404c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e004      	b.n	8003a60 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003a60:	f107 030f 	add.w	r3, r7, #15
 8003a64:	461a      	mov	r2, r3
 8003a66:	2101      	movs	r1, #1
 8003a68:	201e      	movs	r0, #30
 8003a6a:	f000 faa3 	bl	8003fb4 <RadioSpiWriteRegisters>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003a72:	b212      	sxth	r2, r2
 8003a74:	4611      	mov	r1, r2
 8003a76:	7019      	strb	r1, [r3, #0]
 8003a78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a7c:	705a      	strb	r2, [r3, #1]
  
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000168 	.word	0x20000168

08003a8c <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003a96:	f107 030f 	add.w	r3, r7, #15
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	209e      	movs	r0, #158	@ 0x9e
 8003aa0:	f000 fad4 	bl	800404c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d105      	bne.n	8003ab6 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e004      	b.n	8003ac0 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003ac0:	f107 030f 	add.w	r3, r7, #15
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	209e      	movs	r0, #158	@ 0x9e
 8003aca:	f000 fa73 	bl	8003fb4 <RadioSpiWriteRegisters>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <SpiritRadioSetRefDiv+0x5c>)
 8003ad2:	b212      	sxth	r2, r2
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	7019      	strb	r1, [r3, #0]
 8003ad8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003adc:	705a      	strb	r2, [r3, #1]
  
}
 8003ade:	bf00      	nop
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000168 	.word	0x20000168

08003aec <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003af2:	1dfb      	adds	r3, r7, #7
 8003af4:	461a      	mov	r2, r3
 8003af6:	2101      	movs	r1, #1
 8003af8:	209e      	movs	r0, #158	@ 0x9e
 8003afa:	f000 faa7 	bl	800404c <RadioSpiReadRegisters>
 8003afe:	4602      	mov	r2, r0
 8003b00:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <SpiritRadioGetRefDiv+0x40>)
 8003b02:	b212      	sxth	r2, r2
 8003b04:	4611      	mov	r1, r2
 8003b06:	7019      	strb	r1, [r3, #0]
 8003b08:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b0c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	09db      	lsrs	r3, r3, #7
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e000      	b.n	8003b22 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003b20:	2300      	movs	r3, #0
  }
  
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000168 	.word	0x20000168

08003b30 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003b3a:	f107 030f 	add.w	r3, r7, #15
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2101      	movs	r1, #1
 8003b42:	20b4      	movs	r0, #180	@ 0xb4
 8003b44:	f000 fa82 	bl	800404c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d105      	bne.n	8003b5a <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	f023 0308 	bic.w	r3, r3, #8
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	73fb      	strb	r3, [r7, #15]
 8003b58:	e004      	b.n	8003b64 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	f043 0308 	orr.w	r3, r3, #8
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003b64:	f107 030f 	add.w	r3, r7, #15
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	20b4      	movs	r0, #180	@ 0xb4
 8003b6e:	f000 fa21 	bl	8003fb4 <RadioSpiWriteRegisters>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <SpiritRadioSetDigDiv+0x5c>)
 8003b76:	b212      	sxth	r2, r2
 8003b78:	4611      	mov	r1, r2
 8003b7a:	7019      	strb	r1, [r3, #0]
 8003b7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b80:	705a      	strb	r2, [r3, #1]
  
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000168 	.word	0x20000168

08003b90 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003b96:	1dfb      	adds	r3, r7, #7
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	20b4      	movs	r0, #180	@ 0xb4
 8003b9e:	f000 fa55 	bl	800404c <RadioSpiReadRegisters>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd0 <SpiritRadioGetDigDiv+0x40>)
 8003ba6:	b212      	sxth	r2, r2
 8003ba8:	4611      	mov	r1, r2
 8003baa:	7019      	strb	r1, [r3, #0]
 8003bac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003bb0:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	08db      	lsrs	r3, r3, #3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003bc4:	2301      	movs	r3, #1
  }
  
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000168 	.word	0x20000168

08003bd4 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003bd8:	4b03      	ldr	r3, [pc, #12]	@ (8003be8 <SpiritRadioGetXtalFrequency+0x14>)
 8003bda:	681b      	ldr	r3, [r3, #0]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000164 	.word	0x20000164

08003bec <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003bf4:	4a04      	ldr	r2, [pc, #16]	@ (8003c08 <SpiritRadioSetXtalFrequency+0x1c>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6013      	str	r3, [r2, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000164 	.word	0x20000164

08003c0c <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8003c16:	f107 020c 	add.w	r2, r7, #12
 8003c1a:	f107 030c 	add.w	r3, r7, #12
 8003c1e:	3301      	adds	r3, #1
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c28:	f000 f816 	bl	8003c58 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8003c2c:	f107 030c 	add.w	r3, r7, #12
 8003c30:	461a      	mov	r2, r3
 8003c32:	2102      	movs	r1, #2
 8003c34:	2053      	movs	r0, #83	@ 0x53
 8003c36:	f000 f9bd 	bl	8003fb4 <RadioSpiWriteRegisters>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	4b05      	ldr	r3, [pc, #20]	@ (8003c54 <SpiritTimerSetRxTimeoutMs+0x48>)
 8003c3e:	b212      	sxth	r2, r2
 8003c40:	4611      	mov	r1, r2
 8003c42:	7019      	strb	r1, [r3, #0]
 8003c44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c48:	705a      	strb	r2, [r3, #1]

}
 8003c4a:	bf00      	nop
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000168 	.word	0x20000168

08003c58 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003c62:	60b8      	str	r0, [r7, #8]
 8003c64:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8003c66:	f7ff ffb5 	bl	8003bd4 <SpiritRadioGetXtalFrequency>
 8003c6a:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	4a91      	ldr	r2, [pc, #580]	@ (8003eb4 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d902      	bls.n	8003c7a <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	085b      	lsrs	r3, r3, #1
 8003c78:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	ee07 3a90 	vmov	s15, r3
 8003c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c8c:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003eb8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c98:	ee17 3a90 	vmov	r3, s15
 8003c9c:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f64f 5201 	movw	r2, #64769	@ 0xfd01
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d906      	bls.n	8003cb6 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	22ff      	movs	r2, #255	@ 0xff
 8003cac:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	22ff      	movs	r2, #255	@ 0xff
 8003cb2:	701a      	strb	r2, [r3, #0]
    return;
 8003cb4:	e0fa      	b.n	8003eac <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4a80      	ldr	r2, [pc, #512]	@ (8003ebc <SpiritTimerComputeRxTimeoutValues+0x264>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	09db      	lsrs	r3, r3, #7
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	3302      	adds	r3, #2
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8003eb8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003cfc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	ee07 3a90 	vmov	s15, r3
 8003d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	dd1d      	ble.n	8003d5c <SpiritTimerComputeRxTimeoutValues+0x104>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	ee07 3a90 	vmov	s15, r3
 8003d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003eb8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003d40:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d52:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5a:	e01e      	b.n	8003d9a <SpiritTimerComputeRxTimeoutValues+0x142>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	ee07 3a90 	vmov	s15, r3
 8003d64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003eb8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003d7c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d96:	eef1 7a67 	vneg.f32	s15, s15
 8003d9a:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2bff      	cmp	r3, #255	@ 0xff
 8003da4:	d06e      	beq.n	8003e84 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc4:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8003eb8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003dc8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	ee07 3a90 	vmov	s15, r3
 8003dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dda:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dea:	dd1e      	ble.n	8003e2a <SpiritTimerComputeRxTimeoutValues+0x1d2>
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	3301      	adds	r3, #1
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8003eb8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e0e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	ee07 3a90 	vmov	s15, r3
 8003e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e28:	e01f      	b.n	8003e6a <SpiritTimerComputeRxTimeoutValues+0x212>
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e48:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003eb8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e4c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e66:	eef1 7a67 	vneg.f32	s15, s15
 8003e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e76:	d505      	bpl.n	8003e84 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d906      	bls.n	8003ea6 <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	701a      	strb	r2, [r3, #0]
 8003ea4:	e002      	b.n	8003eac <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
}
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	01c9c380 	.word	0x01c9c380
 8003eb8:	4993b480 	.word	0x4993b480
 8003ebc:	80808081 	.word	0x80808081

08003ec0 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	204f      	movs	r0, #79	@ 0x4f
 8003ed4:	f000 f8ba 	bl	800404c <RadioSpiReadRegisters>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	4b1c      	ldr	r3, [pc, #112]	@ (8003f4c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003edc:	b212      	sxth	r2, r2
 8003ede:	4611      	mov	r1, r2
 8003ee0:	7019      	strb	r1, [r3, #0]
 8003ee2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ee6:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003ee8:	7b3b      	ldrb	r3, [r7, #12]
 8003eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003ef2:	7b3b      	ldrb	r3, [r7, #12]
 8003ef4:	b25a      	sxtb	r2, r3
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	b25b      	sxtb	r3, r3
 8003efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f00:	b25b      	sxtb	r3, r3
 8003f02:	4313      	orrs	r3, r2
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003f0a:	7b7b      	ldrb	r3, [r7, #13]
 8003f0c:	f003 031f 	and.w	r3, r3, #31
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003f14:	7b7b      	ldrb	r3, [r7, #13]
 8003f16:	b25a      	sxtb	r2, r3
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	015b      	lsls	r3, r3, #5
 8003f1c:	b25b      	sxtb	r3, r3
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	b25b      	sxtb	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	204f      	movs	r0, #79	@ 0x4f
 8003f30:	f000 f840 	bl	8003fb4 <RadioSpiWriteRegisters>
 8003f34:	4602      	mov	r2, r0
 8003f36:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003f38:	b212      	sxth	r2, r2
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	7019      	strb	r1, [r3, #0]
 8003f3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f42:	705a      	strb	r2, [r3, #1]

}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000168 	.word	0x20000168

08003f50 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	461a      	mov	r2, r3
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	20c0      	movs	r0, #192	@ 0xc0
 8003f5e:	f000 f875 	bl	800404c <RadioSpiReadRegisters>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a09      	ldr	r2, [pc, #36]	@ (8003f8c <SpiritRefreshStatus+0x3c>)
 8003f66:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003f68:	4b08      	ldr	r3, [pc, #32]	@ (8003f8c <SpiritRefreshStatus+0x3c>)
 8003f6a:	781a      	ldrb	r2, [r3, #0]
 8003f6c:	797b      	ldrb	r3, [r7, #5]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d1f1      	bne.n	8003f56 <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003f72:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <SpiritRefreshStatus+0x40>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d1ea      	bne.n	8003f56 <SpiritRefreshStatus+0x6>

}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000168 	.word	0x20000168
 8003f90:	20000169 	.word	0x20000169

08003f94 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <RadioSpiInit+0x1c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <RadioSpiInit+0x16>
  {
    Error_Handler();
 8003fa6:	f7fd fa53 	bl	8001450 <Error_Handler>
  }
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000008 	.word	0x20000008

08003fb4 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	4603      	mov	r3, r0
 8003fbc:	603a      	str	r2, [r7, #0]
 8003fbe:	71fb      	strb	r3, [r7, #7]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	743b      	strb	r3, [r7, #16]
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003fcc:	2017      	movs	r0, #23
 8003fce:	f000 fa73 	bl	80044b8 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	2140      	movs	r1, #64	@ 0x40
 8003fd6:	481b      	ldr	r0, [pc, #108]	@ (8004044 <RadioSpiWriteRegisters+0x90>)
 8003fd8:	f000 fc26 	bl	8004828 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <RadioSpiWriteRegisters+0x94>)
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	f107 020c 	add.w	r2, r7, #12
 8003fe4:	f107 0110 	add.w	r1, r7, #16
 8003fe8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2302      	movs	r3, #2
 8003ff0:	f001 fe19 	bl	8005c26 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003ff4:	4b14      	ldr	r3, [pc, #80]	@ (8004048 <RadioSpiWriteRegisters+0x94>)
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	79bb      	ldrb	r3, [r7, #6]
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	f001 fb64 	bl	80056ce <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004006:	2201      	movs	r2, #1
 8004008:	2140      	movs	r1, #64	@ 0x40
 800400a:	480e      	ldr	r0, [pc, #56]	@ (8004044 <RadioSpiWriteRegisters+0x90>)
 800400c:	f000 fc0c 	bl	8004828 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004010:	2017      	movs	r0, #23
 8004012:	f000 fa43 	bl	800449c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004016:	f107 0308 	add.w	r3, r7, #8
 800401a:	3301      	adds	r3, #1
 800401c:	7b3a      	ldrb	r2, [r7, #12]
 800401e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004020:	f107 0308 	add.w	r3, r7, #8
 8004024:	7b7a      	ldrb	r2, [r7, #13]
 8004026:	701a      	strb	r2, [r3, #0]

  return status;
 8004028:	893b      	ldrh	r3, [r7, #8]
 800402a:	82bb      	strh	r3, [r7, #20]
 800402c:	2300      	movs	r3, #0
 800402e:	7d3a      	ldrb	r2, [r7, #20]
 8004030:	f362 0307 	bfi	r3, r2, #0, #8
 8004034:	7d7a      	ldrb	r2, [r7, #21]
 8004036:	f362 230f 	bfi	r3, r2, #8, #8

}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	48000400 	.word	0x48000400
 8004048:	20000008 	.word	0x20000008

0800404c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af02      	add	r7, sp, #8
 8004052:	4603      	mov	r3, r0
 8004054:	603a      	str	r2, [r7, #0]
 8004056:	71fb      	strb	r3, [r7, #7]
 8004058:	460b      	mov	r3, r1
 800405a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 800405c:	2301      	movs	r3, #1
 800405e:	743b      	strb	r3, [r7, #16]
 8004060:	79fb      	ldrb	r3, [r7, #7]
 8004062:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004064:	2017      	movs	r0, #23
 8004066:	f000 fa27 	bl	80044b8 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800406a:	2200      	movs	r2, #0
 800406c:	2140      	movs	r1, #64	@ 0x40
 800406e:	481b      	ldr	r0, [pc, #108]	@ (80040dc <RadioSpiReadRegisters+0x90>)
 8004070:	f000 fbda 	bl	8004828 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004074:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <RadioSpiReadRegisters+0x94>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	f107 020c 	add.w	r2, r7, #12
 800407c:	f107 0110 	add.w	r1, r7, #16
 8004080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	2302      	movs	r3, #2
 8004088:	f001 fdcd 	bl	8005c26 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800408c:	4b14      	ldr	r3, [pc, #80]	@ (80040e0 <RadioSpiReadRegisters+0x94>)
 800408e:	6818      	ldr	r0, [r3, #0]
 8004090:	79bb      	ldrb	r3, [r7, #6]
 8004092:	b29a      	uxth	r2, r3
 8004094:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004098:	6839      	ldr	r1, [r7, #0]
 800409a:	f001 fc8d 	bl	80059b8 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800409e:	2201      	movs	r2, #1
 80040a0:	2140      	movs	r1, #64	@ 0x40
 80040a2:	480e      	ldr	r0, [pc, #56]	@ (80040dc <RadioSpiReadRegisters+0x90>)
 80040a4:	f000 fbc0 	bl	8004828 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80040a8:	2017      	movs	r0, #23
 80040aa:	f000 f9f7 	bl	800449c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	3301      	adds	r3, #1
 80040b4:	7b3a      	ldrb	r2, [r7, #12]
 80040b6:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80040b8:	f107 0308 	add.w	r3, r7, #8
 80040bc:	7b7a      	ldrb	r2, [r7, #13]
 80040be:	701a      	strb	r2, [r3, #0]

  return status;
 80040c0:	893b      	ldrh	r3, [r7, #8]
 80040c2:	82bb      	strh	r3, [r7, #20]
 80040c4:	2300      	movs	r3, #0
 80040c6:	7d3a      	ldrb	r2, [r7, #20]
 80040c8:	f362 0307 	bfi	r3, r2, #0, #8
 80040cc:	7d7a      	ldrb	r2, [r7, #21]
 80040ce:	f362 230f 	bfi	r3, r2, #8, #8
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	48000400 	.word	0x48000400
 80040e0:	20000008 	.word	0x20000008

080040e4 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 80040ee:	2380      	movs	r3, #128	@ 0x80
 80040f0:	743b      	strb	r3, [r7, #16]
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80040f6:	2017      	movs	r0, #23
 80040f8:	f000 f9de 	bl	80044b8 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80040fc:	2200      	movs	r2, #0
 80040fe:	2140      	movs	r1, #64	@ 0x40
 8004100:	4816      	ldr	r0, [pc, #88]	@ (800415c <RadioSpiCommandStrobes+0x78>)
 8004102:	f000 fb91 	bl	8004828 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004106:	4b16      	ldr	r3, [pc, #88]	@ (8004160 <RadioSpiCommandStrobes+0x7c>)
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	f107 020c 	add.w	r2, r7, #12
 800410e:	f107 0110 	add.w	r1, r7, #16
 8004112:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2302      	movs	r3, #2
 800411a:	f001 fd84 	bl	8005c26 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800411e:	2201      	movs	r2, #1
 8004120:	2140      	movs	r1, #64	@ 0x40
 8004122:	480e      	ldr	r0, [pc, #56]	@ (800415c <RadioSpiCommandStrobes+0x78>)
 8004124:	f000 fb80 	bl	8004828 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004128:	2017      	movs	r0, #23
 800412a:	f000 f9b7 	bl	800449c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800412e:	f107 0308 	add.w	r3, r7, #8
 8004132:	3301      	adds	r3, #1
 8004134:	7b3a      	ldrb	r2, [r7, #12]
 8004136:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004138:	f107 0308 	add.w	r3, r7, #8
 800413c:	7b7a      	ldrb	r2, [r7, #13]
 800413e:	701a      	strb	r2, [r3, #0]

  return status;
 8004140:	893b      	ldrh	r3, [r7, #8]
 8004142:	82bb      	strh	r3, [r7, #20]
 8004144:	2300      	movs	r3, #0
 8004146:	7d3a      	ldrb	r2, [r7, #20]
 8004148:	f362 0307 	bfi	r3, r2, #0, #8
 800414c:	7d7a      	ldrb	r2, [r7, #21]
 800414e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	48000400 	.word	0x48000400
 8004160:	20000008 	.word	0x20000008

08004164 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004170:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8004174:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004176:	2017      	movs	r0, #23
 8004178:	f000 f99e 	bl	80044b8 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800417c:	2200      	movs	r2, #0
 800417e:	2140      	movs	r1, #64	@ 0x40
 8004180:	481a      	ldr	r0, [pc, #104]	@ (80041ec <RadioSpiWriteFifo+0x88>)
 8004182:	f000 fb51 	bl	8004828 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004186:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <RadioSpiWriteFifo+0x8c>)
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	f107 020c 	add.w	r2, r7, #12
 800418e:	f107 0110 	add.w	r1, r7, #16
 8004192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2302      	movs	r3, #2
 800419a:	f001 fd44 	bl	8005c26 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800419e:	4b14      	ldr	r3, [pc, #80]	@ (80041f0 <RadioSpiWriteFifo+0x8c>)
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	f001 fa8f 	bl	80056ce <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80041b0:	2201      	movs	r2, #1
 80041b2:	2140      	movs	r1, #64	@ 0x40
 80041b4:	480d      	ldr	r0, [pc, #52]	@ (80041ec <RadioSpiWriteFifo+0x88>)
 80041b6:	f000 fb37 	bl	8004828 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80041ba:	2017      	movs	r0, #23
 80041bc:	f000 f96e 	bl	800449c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80041c0:	f107 0308 	add.w	r3, r7, #8
 80041c4:	3301      	adds	r3, #1
 80041c6:	7b3a      	ldrb	r2, [r7, #12]
 80041c8:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80041ca:	f107 0308 	add.w	r3, r7, #8
 80041ce:	7b7a      	ldrb	r2, [r7, #13]
 80041d0:	701a      	strb	r2, [r3, #0]

  return status;
 80041d2:	893b      	ldrh	r3, [r7, #8]
 80041d4:	82bb      	strh	r3, [r7, #20]
 80041d6:	2300      	movs	r3, #0
 80041d8:	7d3a      	ldrb	r2, [r7, #20]
 80041da:	f362 0307 	bfi	r3, r2, #0, #8
 80041de:	7d7a      	ldrb	r2, [r7, #21]
 80041e0:	f362 230f 	bfi	r3, r2, #8, #8
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	48000400 	.word	0x48000400
 80041f0:	20000008 	.word	0x20000008

080041f4 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80041f8:	2201      	movs	r2, #1
 80041fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004202:	f000 fb11 	bl	8004828 <HAL_GPIO_WritePin>
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}

0800420a <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800421a:	f000 fb05 	bl	8004828 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  for(volatile uint32_t i=0;i<0x1E00;i++);
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	e002      	b.n	800422a <RadioExitShutdown+0x20>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3301      	adds	r3, #1
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004230:	d3f8      	bcc.n	8004224 <RadioExitShutdown+0x1a>
  // HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004246:	2003      	movs	r0, #3
 8004248:	f000 f901 	bl	800444e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800424c:	200f      	movs	r0, #15
 800424e:	f7fd fadb 	bl	8001808 <HAL_InitTick>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	71fb      	strb	r3, [r7, #7]
 800425c:	e001      	b.n	8004262 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800425e:	f7fd faab 	bl	80017b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004262:	79fb      	ldrb	r3, [r7, #7]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004270:	4b06      	ldr	r3, [pc, #24]	@ (800428c <HAL_IncTick+0x20>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <HAL_IncTick+0x24>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4413      	add	r3, r2
 800427c:	4a04      	ldr	r2, [pc, #16]	@ (8004290 <HAL_IncTick+0x24>)
 800427e:	6013      	str	r3, [r2, #0]
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000010 	.word	0x20000010
 8004290:	2000016c 	.word	0x2000016c

08004294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return uwTick;
 8004298:	4b03      	ldr	r3, [pc, #12]	@ (80042a8 <HAL_GetTick+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	2000016c 	.word	0x2000016c

080042ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042bc:	4b0c      	ldr	r3, [pc, #48]	@ (80042f0 <__NVIC_SetPriorityGrouping+0x44>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042c8:	4013      	ands	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042de:	4a04      	ldr	r2, [pc, #16]	@ (80042f0 <__NVIC_SetPriorityGrouping+0x44>)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	60d3      	str	r3, [r2, #12]
}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	e000ed00 	.word	0xe000ed00

080042f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f8:	4b04      	ldr	r3, [pc, #16]	@ (800430c <__NVIC_GetPriorityGrouping+0x18>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	0a1b      	lsrs	r3, r3, #8
 80042fe:	f003 0307 	and.w	r3, r3, #7
}
 8004302:	4618      	mov	r0, r3
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	e000ed00 	.word	0xe000ed00

08004310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800431a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431e:	2b00      	cmp	r3, #0
 8004320:	db0b      	blt.n	800433a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	f003 021f 	and.w	r2, r3, #31
 8004328:	4907      	ldr	r1, [pc, #28]	@ (8004348 <__NVIC_EnableIRQ+0x38>)
 800432a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2001      	movs	r0, #1
 8004332:	fa00 f202 	lsl.w	r2, r0, r2
 8004336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	e000e100 	.word	0xe000e100

0800434c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db12      	blt.n	8004384 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	490a      	ldr	r1, [pc, #40]	@ (8004390 <__NVIC_DisableIRQ+0x44>)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2001      	movs	r0, #1
 800436e:	fa00 f202 	lsl.w	r2, r0, r2
 8004372:	3320      	adds	r3, #32
 8004374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004378:	f3bf 8f4f 	dsb	sy
}
 800437c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800437e:	f3bf 8f6f 	isb	sy
}
 8004382:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000e100 	.word	0xe000e100

08004394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	6039      	str	r1, [r7, #0]
 800439e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	db0a      	blt.n	80043be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	490c      	ldr	r1, [pc, #48]	@ (80043e0 <__NVIC_SetPriority+0x4c>)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	440b      	add	r3, r1
 80043b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043bc:	e00a      	b.n	80043d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4908      	ldr	r1, [pc, #32]	@ (80043e4 <__NVIC_SetPriority+0x50>)
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	3b04      	subs	r3, #4
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	440b      	add	r3, r1
 80043d2:	761a      	strb	r2, [r3, #24]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	e000e100 	.word	0xe000e100
 80043e4:	e000ed00 	.word	0xe000ed00

080043e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	@ 0x24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f1c3 0307 	rsb	r3, r3, #7
 8004402:	2b04      	cmp	r3, #4
 8004404:	bf28      	it	cs
 8004406:	2304      	movcs	r3, #4
 8004408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3304      	adds	r3, #4
 800440e:	2b06      	cmp	r3, #6
 8004410:	d902      	bls.n	8004418 <NVIC_EncodePriority+0x30>
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3b03      	subs	r3, #3
 8004416:	e000      	b.n	800441a <NVIC_EncodePriority+0x32>
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	401a      	ands	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004430:	f04f 31ff 	mov.w	r1, #4294967295
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	43d9      	mvns	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	4313      	orrs	r3, r2
         );
}
 8004442:	4618      	mov	r0, r3
 8004444:	3724      	adds	r7, #36	@ 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff ff28 	bl	80042ac <__NVIC_SetPriorityGrouping>
}
 800445c:	bf00      	nop
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004476:	f7ff ff3d 	bl	80042f4 <__NVIC_GetPriorityGrouping>
 800447a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	6978      	ldr	r0, [r7, #20]
 8004482:	f7ff ffb1 	bl	80043e8 <NVIC_EncodePriority>
 8004486:	4602      	mov	r2, r0
 8004488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ff80 	bl	8004394 <__NVIC_SetPriority>
}
 8004494:	bf00      	nop
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ff30 	bl	8004310 <__NVIC_EnableIRQ>
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	4603      	mov	r3, r0
 80044c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff ff40 	bl	800434c <__NVIC_DisableIRQ>
}
 80044cc:	bf00      	nop
 80044ce:	3708      	adds	r7, #8
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044e2:	e17f      	b.n	80047e4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2101      	movs	r1, #1
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 8171 	beq.w	80047de <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b01      	cmp	r3, #1
 8004506:	d005      	beq.n	8004514 <HAL_GPIO_Init+0x40>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d130      	bne.n	8004576 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	2203      	movs	r2, #3
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4013      	ands	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68da      	ldr	r2, [r3, #12]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800454a:	2201      	movs	r2, #1
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	fa02 f303 	lsl.w	r3, r2, r3
 8004552:	43db      	mvns	r3, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4013      	ands	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	091b      	lsrs	r3, r3, #4
 8004560:	f003 0201 	and.w	r2, r3, #1
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b03      	cmp	r3, #3
 8004580:	d118      	bne.n	80045b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004588:	2201      	movs	r2, #1
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	43db      	mvns	r3, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4013      	ands	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	08db      	lsrs	r3, r3, #3
 800459e:	f003 0201 	and.w	r2, r3, #1
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d017      	beq.n	80045f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	2203      	movs	r2, #3
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	43db      	mvns	r3, r3
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f003 0303 	and.w	r3, r3, #3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d123      	bne.n	8004644 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	08da      	lsrs	r2, r3, #3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3208      	adds	r2, #8
 8004604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	220f      	movs	r2, #15
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	43db      	mvns	r3, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4013      	ands	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	08da      	lsrs	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3208      	adds	r2, #8
 800463e:	6939      	ldr	r1, [r7, #16]
 8004640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	2203      	movs	r2, #3
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	4013      	ands	r3, r2
 800465a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0203 	and.w	r2, r3, #3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004680:	2b00      	cmp	r3, #0
 8004682:	f000 80ac 	beq.w	80047de <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004686:	4b5f      	ldr	r3, [pc, #380]	@ (8004804 <HAL_GPIO_Init+0x330>)
 8004688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468a:	4a5e      	ldr	r2, [pc, #376]	@ (8004804 <HAL_GPIO_Init+0x330>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6613      	str	r3, [r2, #96]	@ 0x60
 8004692:	4b5c      	ldr	r3, [pc, #368]	@ (8004804 <HAL_GPIO_Init+0x330>)
 8004694:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800469e:	4a5a      	ldr	r2, [pc, #360]	@ (8004808 <HAL_GPIO_Init+0x334>)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	089b      	lsrs	r3, r3, #2
 80046a4:	3302      	adds	r3, #2
 80046a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	220f      	movs	r2, #15
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046c8:	d025      	beq.n	8004716 <HAL_GPIO_Init+0x242>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a4f      	ldr	r2, [pc, #316]	@ (800480c <HAL_GPIO_Init+0x338>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d01f      	beq.n	8004712 <HAL_GPIO_Init+0x23e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004810 <HAL_GPIO_Init+0x33c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d019      	beq.n	800470e <HAL_GPIO_Init+0x23a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a4d      	ldr	r2, [pc, #308]	@ (8004814 <HAL_GPIO_Init+0x340>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d013      	beq.n	800470a <HAL_GPIO_Init+0x236>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a4c      	ldr	r2, [pc, #304]	@ (8004818 <HAL_GPIO_Init+0x344>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00d      	beq.n	8004706 <HAL_GPIO_Init+0x232>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a4b      	ldr	r2, [pc, #300]	@ (800481c <HAL_GPIO_Init+0x348>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <HAL_GPIO_Init+0x22e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004820 <HAL_GPIO_Init+0x34c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d101      	bne.n	80046fe <HAL_GPIO_Init+0x22a>
 80046fa:	2306      	movs	r3, #6
 80046fc:	e00c      	b.n	8004718 <HAL_GPIO_Init+0x244>
 80046fe:	2307      	movs	r3, #7
 8004700:	e00a      	b.n	8004718 <HAL_GPIO_Init+0x244>
 8004702:	2305      	movs	r3, #5
 8004704:	e008      	b.n	8004718 <HAL_GPIO_Init+0x244>
 8004706:	2304      	movs	r3, #4
 8004708:	e006      	b.n	8004718 <HAL_GPIO_Init+0x244>
 800470a:	2303      	movs	r3, #3
 800470c:	e004      	b.n	8004718 <HAL_GPIO_Init+0x244>
 800470e:	2302      	movs	r3, #2
 8004710:	e002      	b.n	8004718 <HAL_GPIO_Init+0x244>
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_GPIO_Init+0x244>
 8004716:	2300      	movs	r3, #0
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	f002 0203 	and.w	r2, r2, #3
 800471e:	0092      	lsls	r2, r2, #2
 8004720:	4093      	lsls	r3, r2
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	4313      	orrs	r3, r2
 8004726:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004728:	4937      	ldr	r1, [pc, #220]	@ (8004808 <HAL_GPIO_Init+0x334>)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	089b      	lsrs	r3, r3, #2
 800472e:	3302      	adds	r3, #2
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004736:	4b3b      	ldr	r3, [pc, #236]	@ (8004824 <HAL_GPIO_Init+0x350>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	43db      	mvns	r3, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800475a:	4a32      	ldr	r2, [pc, #200]	@ (8004824 <HAL_GPIO_Init+0x350>)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004760:	4b30      	ldr	r3, [pc, #192]	@ (8004824 <HAL_GPIO_Init+0x350>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	43db      	mvns	r3, r3
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4013      	ands	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004784:	4a27      	ldr	r2, [pc, #156]	@ (8004824 <HAL_GPIO_Init+0x350>)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800478a:	4b26      	ldr	r3, [pc, #152]	@ (8004824 <HAL_GPIO_Init+0x350>)
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	43db      	mvns	r3, r3
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4013      	ands	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047ae:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <HAL_GPIO_Init+0x350>)
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80047b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004824 <HAL_GPIO_Init+0x350>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	43db      	mvns	r3, r3
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	4013      	ands	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047d8:	4a12      	ldr	r2, [pc, #72]	@ (8004824 <HAL_GPIO_Init+0x350>)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	3301      	adds	r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	fa22 f303 	lsr.w	r3, r2, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f47f ae78 	bne.w	80044e4 <HAL_GPIO_Init+0x10>
  }
}
 80047f4:	bf00      	nop
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	40010000 	.word	0x40010000
 800480c:	48000400 	.word	0x48000400
 8004810:	48000800 	.word	0x48000800
 8004814:	48000c00 	.word	0x48000c00
 8004818:	48001000 	.word	0x48001000
 800481c:	48001400 	.word	0x48001400
 8004820:	48001800 	.word	0x48001800
 8004824:	40010400 	.word	0x40010400

08004828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	460b      	mov	r3, r1
 8004832:	807b      	strh	r3, [r7, #2]
 8004834:	4613      	mov	r3, r2
 8004836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004838:	787b      	ldrb	r3, [r7, #1]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800483e:	887a      	ldrh	r2, [r7, #2]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004844:	e002      	b.n	800484c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004862:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d006      	beq.n	800487c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800486e:	4a05      	ldr	r2, [pc, #20]	@ (8004884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	4618      	mov	r0, r3
 8004878:	f7fc fd4c 	bl	8001314 <HAL_GPIO_EXTI_Callback>
  }
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40010400 	.word	0x40010400

08004888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800488c:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40007000 	.word	0x40007000

080048a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b2:	d130      	bne.n	8004916 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048b4:	4b23      	ldr	r3, [pc, #140]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048c0:	d038      	beq.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048c2:	4b20      	ldr	r3, [pc, #128]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2232      	movs	r2, #50	@ 0x32
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	4a1b      	ldr	r2, [pc, #108]	@ (800494c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	0c9b      	lsrs	r3, r3, #18
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048e8:	e002      	b.n	80048f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3b01      	subs	r3, #1
 80048ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048f0:	4b14      	ldr	r3, [pc, #80]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fc:	d102      	bne.n	8004904 <HAL_PWREx_ControlVoltageScaling+0x60>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f2      	bne.n	80048ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004904:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800490c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004910:	d110      	bne.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e00f      	b.n	8004936 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004916:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800491e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004922:	d007      	beq.n	8004934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004924:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800492c:	4a05      	ldr	r2, [pc, #20]	@ (8004944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004932:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40007000 	.word	0x40007000
 8004948:	20000000 	.word	0x20000000
 800494c:	431bde83 	.word	0x431bde83

08004950 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e3ca      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004962:	4b97      	ldr	r3, [pc, #604]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800496c:	4b94      	ldr	r3, [pc, #592]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 80e4 	beq.w	8004b4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <HAL_RCC_OscConfig+0x4a>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	f040 808b 	bne.w	8004aa8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b01      	cmp	r3, #1
 8004996:	f040 8087 	bne.w	8004aa8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800499a:	4b89      	ldr	r3, [pc, #548]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_RCC_OscConfig+0x62>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e3a2      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	4b82      	ldr	r3, [pc, #520]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <HAL_RCC_OscConfig+0x7c>
 80049c2:	4b7f      	ldr	r3, [pc, #508]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ca:	e005      	b.n	80049d8 <HAL_RCC_OscConfig+0x88>
 80049cc:	4b7c      	ldr	r3, [pc, #496]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049d8:	4293      	cmp	r3, r2
 80049da:	d223      	bcs.n	8004a24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fd71 	bl	80054c8 <RCC_SetFlashLatencyFromMSIRange>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e383      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f0:	4b73      	ldr	r3, [pc, #460]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a72      	ldr	r2, [pc, #456]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049f6:	f043 0308 	orr.w	r3, r3, #8
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	4b70      	ldr	r3, [pc, #448]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	496d      	ldr	r1, [pc, #436]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	4968      	ldr	r1, [pc, #416]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]
 8004a22:	e025      	b.n	8004a70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a24:	4b66      	ldr	r3, [pc, #408]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a65      	ldr	r2, [pc, #404]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a2a:	f043 0308 	orr.w	r3, r3, #8
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	4b63      	ldr	r3, [pc, #396]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	4960      	ldr	r1, [pc, #384]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a42:	4b5f      	ldr	r3, [pc, #380]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	495b      	ldr	r1, [pc, #364]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fd31 	bl	80054c8 <RCC_SetFlashLatencyFromMSIRange>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e343      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a70:	f000 fc4a 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b52      	ldr	r3, [pc, #328]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	4950      	ldr	r1, [pc, #320]	@ (8004bc4 <HAL_RCC_OscConfig+0x274>)
 8004a82:	5ccb      	ldrb	r3, [r1, r3]
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8004bc8 <HAL_RCC_OscConfig+0x278>)
 8004a8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a90:	4b4e      	ldr	r3, [pc, #312]	@ (8004bcc <HAL_RCC_OscConfig+0x27c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fc feb7 	bl	8001808 <HAL_InitTick>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d052      	beq.n	8004b4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	e327      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d032      	beq.n	8004b16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ab0:	4b43      	ldr	r3, [pc, #268]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a42      	ldr	r2, [pc, #264]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004abc:	f7ff fbea 	bl	8004294 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ac4:	f7ff fbe6 	bl	8004294 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e310      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0f0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae2:	4b37      	ldr	r3, [pc, #220]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a36      	ldr	r2, [pc, #216]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	f043 0308 	orr.w	r3, r3, #8
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b34      	ldr	r3, [pc, #208]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	4931      	ldr	r1, [pc, #196]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b00:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	492c      	ldr	r1, [pc, #176]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
 8004b14:	e01a      	b.n	8004b4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b16:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a29      	ldr	r2, [pc, #164]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b22:	f7ff fbb7 	bl	8004294 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b2a:	f7ff fbb3 	bl	8004294 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e2dd      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b3c:	4b20      	ldr	r3, [pc, #128]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x1da>
 8004b48:	e000      	b.n	8004b4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d074      	beq.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d005      	beq.n	8004b6a <HAL_RCC_OscConfig+0x21a>
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d10e      	bne.n	8004b82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d10b      	bne.n	8004b82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6a:	4b15      	ldr	r3, [pc, #84]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d064      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2f0>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d160      	bne.n	8004c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e2ba      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x24a>
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0b      	ldr	r2, [pc, #44]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004b92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b96:	6013      	str	r3, [r2, #0]
 8004b98:	e026      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ba2:	d115      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x280>
 8004ba4:	4b06      	ldr	r3, [pc, #24]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a05      	ldr	r2, [pc, #20]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004baa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a02      	ldr	r2, [pc, #8]	@ (8004bc0 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e014      	b.n	8004be8 <HAL_RCC_OscConfig+0x298>
 8004bbe:	bf00      	nop
 8004bc0:	40021000 	.word	0x40021000
 8004bc4:	08009ed4 	.word	0x08009ed4
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	2000000c 	.word	0x2000000c
 8004bd0:	4ba0      	ldr	r3, [pc, #640]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a9f      	ldr	r2, [pc, #636]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b9d      	ldr	r3, [pc, #628]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a9c      	ldr	r2, [pc, #624]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7ff fb50 	bl	8004294 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7ff fb4c 	bl	8004294 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	@ 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e276      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c0a:	4b92      	ldr	r3, [pc, #584]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2a8>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7ff fb3c 	bl	8004294 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7ff fb38 	bl	8004294 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	@ 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e262      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c32:	4b88      	ldr	r3, [pc, #544]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2d0>
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d060      	beq.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d005      	beq.n	8004c60 <HAL_RCC_OscConfig+0x310>
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b0c      	cmp	r3, #12
 8004c58:	d119      	bne.n	8004c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d116      	bne.n	8004c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c60:	4b7c      	ldr	r3, [pc, #496]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d005      	beq.n	8004c78 <HAL_RCC_OscConfig+0x328>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e23f      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c78:	4b76      	ldr	r3, [pc, #472]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	061b      	lsls	r3, r3, #24
 8004c86:	4973      	ldr	r1, [pc, #460]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c8c:	e040      	b.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d023      	beq.n	8004cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c96:	4b6f      	ldr	r3, [pc, #444]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7ff faf7 	bl	8004294 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004caa:	f7ff faf3 	bl	8004294 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e21d      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cbc:	4b65      	ldr	r3, [pc, #404]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc8:	4b62      	ldr	r3, [pc, #392]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	495f      	ldr	r1, [pc, #380]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
 8004cdc:	e018      	b.n	8004d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cde:	4b5d      	ldr	r3, [pc, #372]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cea:	f7ff fad3 	bl	8004294 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf2:	f7ff facf 	bl	8004294 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e1f9      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d04:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0308 	and.w	r3, r3, #8
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03c      	beq.n	8004d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01c      	beq.n	8004d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d24:	4b4b      	ldr	r3, [pc, #300]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7ff faae 	bl	8004294 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d3c:	f7ff faaa 	bl	8004294 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e1d4      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ef      	beq.n	8004d3c <HAL_RCC_OscConfig+0x3ec>
 8004d5c:	e01b      	b.n	8004d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d64:	4a3b      	ldr	r2, [pc, #236]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7ff fa91 	bl	8004294 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d76:	f7ff fa8d 	bl	8004294 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e1b7      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d88:	4b32      	ldr	r3, [pc, #200]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ef      	bne.n	8004d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 80a6 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da4:	2300      	movs	r3, #0
 8004da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004da8:	4b2a      	ldr	r3, [pc, #168]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db4:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db8:	4a26      	ldr	r2, [pc, #152]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dc0:	4b24      	ldr	r3, [pc, #144]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd0:	4b21      	ldr	r3, [pc, #132]	@ (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d118      	bne.n	8004e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de8:	f7ff fa54 	bl	8004294 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df0:	f7ff fa50 	bl	8004294 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e17a      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e02:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <HAL_RCC_OscConfig+0x508>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0f0      	beq.n	8004df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d108      	bne.n	8004e28 <HAL_RCC_OscConfig+0x4d8>
 8004e16:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e1e:	f043 0301 	orr.w	r3, r3, #1
 8004e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e26:	e029      	b.n	8004e7c <HAL_RCC_OscConfig+0x52c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b05      	cmp	r3, #5
 8004e2e:	d115      	bne.n	8004e5c <HAL_RCC_OscConfig+0x50c>
 8004e30:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e36:	4a07      	ldr	r2, [pc, #28]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e38:	f043 0304 	orr.w	r3, r3, #4
 8004e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e40:	4b04      	ldr	r3, [pc, #16]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e46:	4a03      	ldr	r2, [pc, #12]	@ (8004e54 <HAL_RCC_OscConfig+0x504>)
 8004e48:	f043 0301 	orr.w	r3, r3, #1
 8004e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e50:	e014      	b.n	8004e7c <HAL_RCC_OscConfig+0x52c>
 8004e52:	bf00      	nop
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	4b9c      	ldr	r3, [pc, #624]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e62:	4a9b      	ldr	r2, [pc, #620]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e6c:	4b98      	ldr	r3, [pc, #608]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e72:	4a97      	ldr	r2, [pc, #604]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004e74:	f023 0304 	bic.w	r3, r3, #4
 8004e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d016      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7ff fa06 	bl	8004294 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7ff fa02 	bl	8004294 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e12a      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ea2:	4b8b      	ldr	r3, [pc, #556]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ed      	beq.n	8004e8c <HAL_RCC_OscConfig+0x53c>
 8004eb0:	e015      	b.n	8004ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7ff f9ef 	bl	8004294 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7ff f9eb 	bl	8004294 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e113      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ed0:	4b7f      	ldr	r3, [pc, #508]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1ed      	bne.n	8004eba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ede:	7ffb      	ldrb	r3, [r7, #31]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee4:	4b7a      	ldr	r3, [pc, #488]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee8:	4a79      	ldr	r2, [pc, #484]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80fe 	beq.w	80050f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	f040 80d0 	bne.w	80050a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f04:	4b72      	ldr	r3, [pc, #456]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0203 	and.w	r2, r3, #3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d130      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	3b01      	subs	r3, #1
 8004f24:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d127      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f34:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d11f      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f44:	2a07      	cmp	r2, #7
 8004f46:	bf14      	ite	ne
 8004f48:	2201      	movne	r2, #1
 8004f4a:	2200      	moveq	r2, #0
 8004f4c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d113      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d109      	bne.n	8004f7a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	085b      	lsrs	r3, r3, #1
 8004f72:	3b01      	subs	r3, #1
 8004f74:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d06e      	beq.n	8005058 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d069      	beq.n	8005054 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f80:	4b53      	ldr	r3, [pc, #332]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d105      	bne.n	8004f98 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f8c:	4b50      	ldr	r3, [pc, #320]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0ad      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f9c:	4b4c      	ldr	r3, [pc, #304]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004fa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fa6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fa8:	f7ff f974 	bl	8004294 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7ff f970 	bl	8004294 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e09a      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc2:	4b43      	ldr	r3, [pc, #268]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fce:	4b40      	ldr	r3, [pc, #256]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	4b40      	ldr	r3, [pc, #256]	@ (80050d4 <HAL_RCC_OscConfig+0x784>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	0112      	lsls	r2, r2, #4
 8004fe2:	4311      	orrs	r1, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fe8:	0212      	lsls	r2, r2, #8
 8004fea:	4311      	orrs	r1, r2
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ff0:	0852      	lsrs	r2, r2, #1
 8004ff2:	3a01      	subs	r2, #1
 8004ff4:	0552      	lsls	r2, r2, #21
 8004ff6:	4311      	orrs	r1, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ffc:	0852      	lsrs	r2, r2, #1
 8004ffe:	3a01      	subs	r2, #1
 8005000:	0652      	lsls	r2, r2, #25
 8005002:	4311      	orrs	r1, r2
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005008:	0912      	lsrs	r2, r2, #4
 800500a:	0452      	lsls	r2, r2, #17
 800500c:	430a      	orrs	r2, r1
 800500e:	4930      	ldr	r1, [pc, #192]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005010:	4313      	orrs	r3, r2
 8005012:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005014:	4b2e      	ldr	r3, [pc, #184]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a2d      	ldr	r2, [pc, #180]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 800501a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800501e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005020:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800502a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800502c:	f7ff f932 	bl	8004294 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005034:	f7ff f92e 	bl	8004294 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e058      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005046:	4b22      	ldr	r3, [pc, #136]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005052:	e050      	b.n	80050f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e04f      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005058:	4b1d      	ldr	r3, [pc, #116]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d148      	bne.n	80050f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005064:	4b1a      	ldr	r3, [pc, #104]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a19      	ldr	r2, [pc, #100]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 800506a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005070:	4b17      	ldr	r3, [pc, #92]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800507a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800507c:	f7ff f90a 	bl	8004294 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005084:	f7ff f906 	bl	8004294 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e030      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005096:	4b0e      	ldr	r3, [pc, #56]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x734>
 80050a2:	e028      	b.n	80050f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b0c      	cmp	r3, #12
 80050a8:	d023      	beq.n	80050f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050aa:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a08      	ldr	r2, [pc, #32]	@ (80050d0 <HAL_RCC_OscConfig+0x780>)
 80050b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b6:	f7ff f8ed 	bl	8004294 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050bc:	e00c      	b.n	80050d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050be:	f7ff f8e9 	bl	8004294 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d905      	bls.n	80050d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e013      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
 80050d0:	40021000 	.word	0x40021000
 80050d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050d8:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <HAL_RCC_OscConfig+0x7b0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1ec      	bne.n	80050be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050e4:	4b06      	ldr	r3, [pc, #24]	@ (8005100 <HAL_RCC_OscConfig+0x7b0>)
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	4905      	ldr	r1, [pc, #20]	@ (8005100 <HAL_RCC_OscConfig+0x7b0>)
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_RCC_OscConfig+0x7b4>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	60cb      	str	r3, [r1, #12]
 80050f0:	e001      	b.n	80050f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40021000 	.word	0x40021000
 8005104:	feeefffc 	.word	0xfeeefffc

08005108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0e7      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800511c:	4b75      	ldr	r3, [pc, #468]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d910      	bls.n	800514c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512a:	4b72      	ldr	r3, [pc, #456]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f023 0207 	bic.w	r2, r3, #7
 8005132:	4970      	ldr	r1, [pc, #448]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	4313      	orrs	r3, r2
 8005138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b6e      	ldr	r3, [pc, #440]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d001      	beq.n	800514c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e0cf      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d010      	beq.n	800517a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	4b66      	ldr	r3, [pc, #408]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005164:	429a      	cmp	r2, r3
 8005166:	d908      	bls.n	800517a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005168:	4b63      	ldr	r3, [pc, #396]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	4960      	ldr	r1, [pc, #384]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d04c      	beq.n	8005220 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d107      	bne.n	800519e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518e:	4b5a      	ldr	r3, [pc, #360]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d121      	bne.n	80051de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e0a6      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d107      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051a6:	4b54      	ldr	r3, [pc, #336]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d115      	bne.n	80051de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e09a      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d107      	bne.n	80051ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051be:	4b4e      	ldr	r3, [pc, #312]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e08e      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ce:	4b4a      	ldr	r3, [pc, #296]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d101      	bne.n	80051de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e086      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051de:	4b46      	ldr	r3, [pc, #280]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f023 0203 	bic.w	r2, r3, #3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4943      	ldr	r1, [pc, #268]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f0:	f7ff f850 	bl	8004294 <HAL_GetTick>
 80051f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f6:	e00a      	b.n	800520e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f8:	f7ff f84c 	bl	8004294 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e06e      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800520e:	4b3a      	ldr	r3, [pc, #232]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 020c 	and.w	r2, r3, #12
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	429a      	cmp	r2, r3
 800521e:	d1eb      	bne.n	80051f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005238:	429a      	cmp	r2, r3
 800523a:	d208      	bcs.n	800524e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523c:	4b2e      	ldr	r3, [pc, #184]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	492b      	ldr	r1, [pc, #172]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800524e:	4b29      	ldr	r3, [pc, #164]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d210      	bcs.n	800527e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525c:	4b25      	ldr	r3, [pc, #148]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f023 0207 	bic.w	r2, r3, #7
 8005264:	4923      	ldr	r1, [pc, #140]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526c:	4b21      	ldr	r3, [pc, #132]	@ (80052f4 <HAL_RCC_ClockConfig+0x1ec>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d001      	beq.n	800527e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e036      	b.n	80052ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d008      	beq.n	800529c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528a:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	4918      	ldr	r1, [pc, #96]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d009      	beq.n	80052bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	4910      	ldr	r1, [pc, #64]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052bc:	f000 f824 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <HAL_RCC_ClockConfig+0x1f0>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	490b      	ldr	r1, [pc, #44]	@ (80052fc <HAL_RCC_ClockConfig+0x1f4>)
 80052ce:	5ccb      	ldrb	r3, [r1, r3]
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	4a09      	ldr	r2, [pc, #36]	@ (8005300 <HAL_RCC_ClockConfig+0x1f8>)
 80052da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052dc:	4b09      	ldr	r3, [pc, #36]	@ (8005304 <HAL_RCC_ClockConfig+0x1fc>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fc fa91 	bl	8001808 <HAL_InitTick>
 80052e6:	4603      	mov	r3, r0
 80052e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80052ea:	7afb      	ldrb	r3, [r7, #11]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40021000 	.word	0x40021000
 80052fc:	08009ed4 	.word	0x08009ed4
 8005300:	20000000 	.word	0x20000000
 8005304:	2000000c 	.word	0x2000000c

08005308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	@ 0x24
 800530c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005316:	4b3e      	ldr	r3, [pc, #248]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005320:	4b3b      	ldr	r3, [pc, #236]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x34>
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d121      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d11e      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800533c:	4b34      	ldr	r3, [pc, #208]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d107      	bne.n	8005358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005348:	4b31      	ldr	r3, [pc, #196]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800534a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e005      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005358:	4b2d      	ldr	r3, [pc, #180]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005364:	4a2b      	ldr	r2, [pc, #172]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10d      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005378:	e00a      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d102      	bne.n	8005386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005380:	4b25      	ldr	r3, [pc, #148]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x110>)
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e004      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d101      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800538c:	4b23      	ldr	r3, [pc, #140]	@ (800541c <HAL_RCC_GetSysClockFreq+0x114>)
 800538e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b0c      	cmp	r3, #12
 8005394:	d134      	bne.n	8005400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005396:	4b1e      	ldr	r3, [pc, #120]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d003      	beq.n	80053ae <HAL_RCC_GetSysClockFreq+0xa6>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d003      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0xac>
 80053ac:	e005      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x110>)
 80053b0:	617b      	str	r3, [r7, #20]
      break;
 80053b2:	e005      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053b4:	4b19      	ldr	r3, [pc, #100]	@ (800541c <HAL_RCC_GetSysClockFreq+0x114>)
 80053b6:	617b      	str	r3, [r7, #20]
      break;
 80053b8:	e002      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	617b      	str	r3, [r7, #20]
      break;
 80053be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c0:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	3301      	adds	r3, #1
 80053cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053ce:	4b10      	ldr	r3, [pc, #64]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	fb03 f202 	mul.w	r2, r3, r2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	0e5b      	lsrs	r3, r3, #25
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	3301      	adds	r3, #1
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005400:	69bb      	ldr	r3, [r7, #24]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3724      	adds	r7, #36	@ 0x24
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	08009eec 	.word	0x08009eec
 8005418:	00f42400 	.word	0x00f42400
 800541c:	007a1200 	.word	0x007a1200

08005420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005424:	4b03      	ldr	r3, [pc, #12]	@ (8005434 <HAL_RCC_GetHCLKFreq+0x14>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000000 	.word	0x20000000

08005438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800543c:	f7ff fff0 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005440:	4602      	mov	r2, r0
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0adb      	lsrs	r3, r3, #11
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4904      	ldr	r1, [pc, #16]	@ (8005460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800544e:	5ccb      	ldrb	r3, [r1, r3]
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000
 8005460:	08009ee4 	.word	0x08009ee4

08005464 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	220f      	movs	r2, #15
 8005472:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005474:	4b12      	ldr	r3, [pc, #72]	@ (80054c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 0203 	and.w	r2, r3, #3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005480:	4b0f      	ldr	r3, [pc, #60]	@ (80054c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800548c:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <HAL_RCC_GetClockConfig+0x5c>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005498:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <HAL_RCC_GetClockConfig+0x5c>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	08db      	lsrs	r3, r3, #3
 800549e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80054a6:	4b07      	ldr	r3, [pc, #28]	@ (80054c4 <HAL_RCC_GetClockConfig+0x60>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0207 	and.w	r2, r3, #7
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	601a      	str	r2, [r3, #0]
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40022000 	.word	0x40022000

080054c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054e0:	f7ff f9d2 	bl	8004888 <HAL_PWREx_GetVoltageRange>
 80054e4:	6178      	str	r0, [r7, #20]
 80054e6:	e014      	b.n	8005512 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054e8:	4b25      	ldr	r3, [pc, #148]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ec:	4a24      	ldr	r2, [pc, #144]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054f4:	4b22      	ldr	r3, [pc, #136]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005500:	f7ff f9c2 	bl	8004888 <HAL_PWREx_GetVoltageRange>
 8005504:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005506:	4b1e      	ldr	r3, [pc, #120]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550a:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800550c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005510:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005518:	d10b      	bne.n	8005532 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b80      	cmp	r3, #128	@ 0x80
 800551e:	d919      	bls.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2ba0      	cmp	r3, #160	@ 0xa0
 8005524:	d902      	bls.n	800552c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005526:	2302      	movs	r3, #2
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	e013      	b.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800552c:	2301      	movs	r3, #1
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	e010      	b.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b80      	cmp	r3, #128	@ 0x80
 8005536:	d902      	bls.n	800553e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005538:	2303      	movs	r3, #3
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	e00a      	b.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b80      	cmp	r3, #128	@ 0x80
 8005542:	d102      	bne.n	800554a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005544:	2302      	movs	r3, #2
 8005546:	613b      	str	r3, [r7, #16]
 8005548:	e004      	b.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b70      	cmp	r3, #112	@ 0x70
 800554e:	d101      	bne.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005550:	2301      	movs	r3, #1
 8005552:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005554:	4b0b      	ldr	r3, [pc, #44]	@ (8005584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 0207 	bic.w	r2, r3, #7
 800555c:	4909      	ldr	r1, [pc, #36]	@ (8005584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4313      	orrs	r3, r2
 8005562:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005564:	4b07      	ldr	r3, [pc, #28]	@ (8005584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	d001      	beq.n	8005576 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40021000 	.word	0x40021000
 8005584:	40022000 	.word	0x40022000

08005588 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e095      	b.n	80056c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d108      	bne.n	80055b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055aa:	d009      	beq.n	80055c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	61da      	str	r2, [r3, #28]
 80055b2:	e005      	b.n	80055c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fb ff7c 	bl	80014d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005600:	d902      	bls.n	8005608 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e002      	b.n	800560e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005608:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800560c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005616:	d007      	beq.n	8005628 <HAL_SPI_Init+0xa0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005620:	d002      	beq.n	8005628 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800566a:	ea42 0103 	orr.w	r1, r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	0c1b      	lsrs	r3, r3, #16
 8005684:	f003 0204 	and.w	r2, r3, #4
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005696:	f003 0308 	and.w	r3, r3, #8
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80056a4:	ea42 0103 	orr.w	r1, r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b088      	sub	sp, #32
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d101      	bne.n	80056f0 <HAL_SPI_Transmit+0x22>
 80056ec:	2302      	movs	r3, #2
 80056ee:	e15f      	b.n	80059b0 <HAL_SPI_Transmit+0x2e2>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056f8:	f7fe fdcc 	bl	8004294 <HAL_GetTick>
 80056fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d002      	beq.n	8005714 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800570e:	2302      	movs	r3, #2
 8005710:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005712:	e148      	b.n	80059a6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_SPI_Transmit+0x52>
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d102      	bne.n	8005726 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005724:	e13f      	b.n	80059a6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2203      	movs	r2, #3
 800572a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005770:	d10f      	bne.n	8005792 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005780:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005790:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800579c:	2b40      	cmp	r3, #64	@ 0x40
 800579e:	d007      	beq.n	80057b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057b8:	d94f      	bls.n	800585a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_SPI_Transmit+0xfa>
 80057c2:	8afb      	ldrh	r3, [r7, #22]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d142      	bne.n	800584e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	881a      	ldrh	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d8:	1c9a      	adds	r2, r3, #2
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057ec:	e02f      	b.n	800584e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d112      	bne.n	8005822 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580c:	1c9a      	adds	r2, r3, #2
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005820:	e015      	b.n	800584e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005822:	f7fe fd37 	bl	8004294 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d803      	bhi.n	800583a <HAL_SPI_Transmit+0x16c>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d102      	bne.n	8005840 <HAL_SPI_Transmit+0x172>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800584c:	e0ab      	b.n	80059a6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ca      	bne.n	80057ee <HAL_SPI_Transmit+0x120>
 8005858:	e080      	b.n	800595c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <HAL_SPI_Transmit+0x19a>
 8005862:	8afb      	ldrh	r3, [r7, #22]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d174      	bne.n	8005952 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d912      	bls.n	8005898 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005876:	881a      	ldrh	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b02      	subs	r3, #2
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005896:	e05c      	b.n	8005952 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	7812      	ldrb	r2, [r2, #0]
 80058a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80058be:	e048      	b.n	8005952 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d12b      	bne.n	8005926 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d912      	bls.n	80058fe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	881a      	ldrh	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e8:	1c9a      	adds	r2, r3, #2
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	3b02      	subs	r3, #2
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058fc:	e029      	b.n	8005952 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	330c      	adds	r3, #12
 8005908:	7812      	ldrb	r2, [r2, #0]
 800590a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	1c5a      	adds	r2, r3, #1
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005924:	e015      	b.n	8005952 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005926:	f7fe fcb5 	bl	8004294 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d803      	bhi.n	800593e <HAL_SPI_Transmit+0x270>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d102      	bne.n	8005944 <HAL_SPI_Transmit+0x276>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d106      	bne.n	8005952 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005950:	e029      	b.n	80059a6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1b1      	bne.n	80058c0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	6839      	ldr	r1, [r7, #0]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fcf9 	bl	8006358 <SPI_EndRxTxTransaction>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800597a:	2300      	movs	r3, #0
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	613b      	str	r3, [r7, #16]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	77fb      	strb	r3, [r7, #31]
 800599c:	e003      	b.n	80059a6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80059ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3720      	adds	r7, #32
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d002      	beq.n	80059de <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
 80059da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059dc:	e11a      	b.n	8005c14 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059e6:	d112      	bne.n	8005a0e <HAL_SPI_Receive+0x56>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10e      	bne.n	8005a0e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2204      	movs	r2, #4
 80059f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	4613      	mov	r3, r2
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	68b9      	ldr	r1, [r7, #8]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 f90e 	bl	8005c26 <HAL_SPI_TransmitReceive>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	e107      	b.n	8005c1e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_SPI_Receive+0x64>
 8005a18:	2302      	movs	r3, #2
 8005a1a:	e100      	b.n	8005c1e <HAL_SPI_Receive+0x266>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a24:	f7fe fc36 	bl	8004294 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_SPI_Receive+0x7e>
 8005a30:	88fb      	ldrh	r3, [r7, #6]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a3a:	e0eb      	b.n	8005c14 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a86:	d908      	bls.n	8005a9a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a96:	605a      	str	r2, [r3, #4]
 8005a98:	e007      	b.n	8005aaa <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005aa8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ab2:	d10f      	bne.n	8005ad4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ac2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ad2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d007      	beq.n	8005af2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005af0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005afa:	d86f      	bhi.n	8005bdc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005afc:	e034      	b.n	8005b68 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d117      	bne.n	8005b3c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f103 020c 	add.w	r2, r3, #12
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005b3a:	e015      	b.n	8005b68 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b3c:	f7fe fbaa 	bl	8004294 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d803      	bhi.n	8005b54 <HAL_SPI_Receive+0x19c>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b52:	d102      	bne.n	8005b5a <HAL_SPI_Receive+0x1a2>
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005b66:	e055      	b.n	8005c14 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1c4      	bne.n	8005afe <HAL_SPI_Receive+0x146>
 8005b74:	e038      	b.n	8005be8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d115      	bne.n	8005bb0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	b292      	uxth	r2, r2
 8005b90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	1c9a      	adds	r2, r3, #2
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005bae:	e015      	b.n	8005bdc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb0:	f7fe fb70 	bl	8004294 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d803      	bhi.n	8005bc8 <HAL_SPI_Receive+0x210>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d102      	bne.n	8005bce <HAL_SPI_Receive+0x216>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005bda:	e01b      	b.n	8005c14 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1c6      	bne.n	8005b76 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fb5b 	bl	80062a8 <SPI_EndRxTransaction>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	75fb      	strb	r3, [r7, #23]
 8005c0a:	e003      	b.n	8005c14 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b08a      	sub	sp, #40	@ 0x28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	607a      	str	r2, [r7, #4]
 8005c32:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c34:	2301      	movs	r3, #1
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x26>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e20a      	b.n	8006062 <HAL_SPI_TransmitReceive+0x43c>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c54:	f7fe fb1e 	bl	8004294 <HAL_GetTick>
 8005c58:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c60:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c68:	887b      	ldrh	r3, [r7, #2]
 8005c6a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c6c:	887b      	ldrh	r3, [r7, #2]
 8005c6e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c70:	7efb      	ldrb	r3, [r7, #27]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d00e      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x6e>
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c7c:	d106      	bne.n	8005c8c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d102      	bne.n	8005c8c <HAL_SPI_TransmitReceive+0x66>
 8005c86:	7efb      	ldrb	r3, [r7, #27]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d003      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005c92:	e1e0      	b.n	8006056 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_SPI_TransmitReceive+0x80>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <HAL_SPI_TransmitReceive+0x80>
 8005ca0:	887b      	ldrh	r3, [r7, #2]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005cac:	e1d3      	b.n	8006056 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d003      	beq.n	8005cc2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2205      	movs	r2, #5
 8005cbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	887a      	ldrh	r2, [r7, #2]
 8005cd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	887a      	ldrh	r2, [r7, #2]
 8005cda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	887a      	ldrh	r2, [r7, #2]
 8005ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	887a      	ldrh	r2, [r7, #2]
 8005cee:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d04:	d802      	bhi.n	8005d0c <HAL_SPI_TransmitReceive+0xe6>
 8005d06:	8a3b      	ldrh	r3, [r7, #16]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d908      	bls.n	8005d1e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d1a:	605a      	str	r2, [r3, #4]
 8005d1c:	e007      	b.n	8005d2e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d2c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d38:	2b40      	cmp	r3, #64	@ 0x40
 8005d3a:	d007      	beq.n	8005d4c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d54:	f240 8081 	bls.w	8005e5a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d002      	beq.n	8005d66 <HAL_SPI_TransmitReceive+0x140>
 8005d60:	8a7b      	ldrh	r3, [r7, #18]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d16d      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d6a:	881a      	ldrh	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	1c9a      	adds	r2, r3, #2
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d8a:	e05a      	b.n	8005e42 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d11b      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x1ac>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d016      	beq.n	8005dd2 <HAL_SPI_TransmitReceive+0x1ac>
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d113      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dae:	881a      	ldrh	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dba:	1c9a      	adds	r2, r3, #2
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d11c      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x1f4>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d016      	beq.n	8005e1a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df6:	b292      	uxth	r2, r2
 8005df8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	1c9a      	adds	r2, r3, #2
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e16:	2301      	movs	r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e1a:	f7fe fa3b 	bl	8004294 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d80b      	bhi.n	8005e42 <HAL_SPI_TransmitReceive+0x21c>
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d007      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005e40:	e109      	b.n	8006056 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d19f      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x166>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d199      	bne.n	8005d8c <HAL_SPI_TransmitReceive+0x166>
 8005e58:	e0e3      	b.n	8006022 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_SPI_TransmitReceive+0x244>
 8005e62:	8a7b      	ldrh	r3, [r7, #18]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	f040 80cf 	bne.w	8006008 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d912      	bls.n	8005e9a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e78:	881a      	ldrh	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e84:	1c9a      	adds	r2, r3, #2
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b02      	subs	r3, #2
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e98:	e0b6      	b.n	8006008 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec0:	e0a2      	b.n	8006008 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d134      	bne.n	8005f3a <HAL_SPI_TransmitReceive+0x314>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d02f      	beq.n	8005f3a <HAL_SPI_TransmitReceive+0x314>
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d12c      	bne.n	8005f3a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d912      	bls.n	8005f10 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eee:	881a      	ldrh	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	1c9a      	adds	r2, r3, #2
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	3b02      	subs	r3, #2
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f0e:	e012      	b.n	8005f36 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	330c      	adds	r3, #12
 8005f1a:	7812      	ldrb	r2, [r2, #0]
 8005f1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f22:	1c5a      	adds	r2, r3, #1
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d148      	bne.n	8005fda <HAL_SPI_TransmitReceive+0x3b4>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d042      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d923      	bls.n	8005fa8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6a:	b292      	uxth	r2, r2
 8005f6c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f72:	1c9a      	adds	r2, r3, #2
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b02      	subs	r3, #2
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d81f      	bhi.n	8005fd6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fa4:	605a      	str	r2, [r3, #4]
 8005fa6:	e016      	b.n	8005fd6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f103 020c 	add.w	r2, r3, #12
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb4:	7812      	ldrb	r2, [r2, #0]
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fda:	f7fe f95b 	bl	8004294 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d803      	bhi.n	8005ff2 <HAL_SPI_TransmitReceive+0x3cc>
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff0:	d102      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x3d2>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d107      	bne.n	8006008 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006006:	e026      	b.n	8006056 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	f47f af57 	bne.w	8005ec2 <HAL_SPI_TransmitReceive+0x29c>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	f47f af50 	bne.w	8005ec2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f000 f996 	bl	8006358 <SPI_EndRxTxTransaction>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2220      	movs	r2, #32
 800603c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800604c:	e003      	b.n	8006056 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800605e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006062:	4618      	mov	r0, r3
 8006064:	3728      	adds	r7, #40	@ 0x28
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800607c:	f7fe f90a 	bl	8004294 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	4413      	add	r3, r2
 800608a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800608c:	f7fe f902 	bl	8004294 <HAL_GetTick>
 8006090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006092:	4b39      	ldr	r3, [pc, #228]	@ (8006178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	015b      	lsls	r3, r3, #5
 8006098:	0d1b      	lsrs	r3, r3, #20
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060a2:	e054      	b.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d050      	beq.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060ac:	f7fe f8f2 	bl	8004294 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d902      	bls.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d13d      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060da:	d111      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060e4:	d004      	beq.n	80060f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ee:	d107      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006108:	d10f      	bne.n	800612a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e017      	b.n	800616e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	3b01      	subs	r3, #1
 800614c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d19b      	bne.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000000 	.word	0x20000000

0800617c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	@ 0x28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800618e:	f7fe f881 	bl	8004294 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	4413      	add	r3, r2
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800619e:	f7fe f879 	bl	8004294 <HAL_GetTick>
 80061a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061ac:	4b3d      	ldr	r3, [pc, #244]	@ (80062a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	00da      	lsls	r2, r3, #3
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	0d1b      	lsrs	r3, r3, #20
 80061bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061c4:	e060      	b.n	8006288 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061cc:	d107      	bne.n	80061de <SPI_WaitFifoStateUntilTimeout+0x62>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d050      	beq.n	8006288 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061e6:	f7fe f855 	bl	8004294 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d902      	bls.n	80061fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d13d      	bne.n	8006278 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800620a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006214:	d111      	bne.n	800623a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800621e:	d004      	beq.n	800622a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006228:	d107      	bne.n	800623a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006242:	d10f      	bne.n	8006264 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e010      	b.n	800629a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	3b01      	subs	r3, #1
 8006286:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4013      	ands	r3, r2
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	429a      	cmp	r2, r3
 8006296:	d196      	bne.n	80061c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3728      	adds	r7, #40	@ 0x28
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	20000000 	.word	0x20000000

080062a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062bc:	d111      	bne.n	80062e2 <SPI_EndRxTransaction+0x3a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c6:	d004      	beq.n	80062d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d0:	d107      	bne.n	80062e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	9300      	str	r3, [sp, #0]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2200      	movs	r2, #0
 80062ea:	2180      	movs	r1, #128	@ 0x80
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f7ff febd 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d007      	beq.n	8006308 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062fc:	f043 0220 	orr.w	r2, r3, #32
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e023      	b.n	8006350 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006310:	d11d      	bne.n	800634e <SPI_EndRxTransaction+0xa6>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631a:	d004      	beq.n	8006326 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006324:	d113      	bne.n	800634e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2200      	movs	r2, #0
 800632e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff ff22 	bl	800617c <SPI_WaitFifoStateUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006342:	f043 0220 	orr.w	r2, r3, #32
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e000      	b.n	8006350 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	2200      	movs	r2, #0
 800636c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f7ff ff03 	bl	800617c <SPI_WaitFifoStateUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006380:	f043 0220 	orr.w	r2, r3, #32
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e027      	b.n	80063dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2200      	movs	r2, #0
 8006394:	2180      	movs	r1, #128	@ 0x80
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff fe68 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d007      	beq.n	80063b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063a6:	f043 0220 	orr.w	r2, r3, #32
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e014      	b.n	80063dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff fedc 	bl	800617c <SPI_WaitFifoStateUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ce:	f043 0220 	orr.w	r2, r3, #32
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e000      	b.n	80063dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e049      	b.n	800648a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f841 	bl	8006492 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3304      	adds	r3, #4
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f000 f9da 	bl	80067dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d001      	beq.n	80064c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e04f      	b.n	8006560 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a23      	ldr	r2, [pc, #140]	@ (800656c <HAL_TIM_Base_Start_IT+0xc4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01d      	beq.n	800651e <HAL_TIM_Base_Start_IT+0x76>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ea:	d018      	beq.n	800651e <HAL_TIM_Base_Start_IT+0x76>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006570 <HAL_TIM_Base_Start_IT+0xc8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <HAL_TIM_Base_Start_IT+0x76>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006574 <HAL_TIM_Base_Start_IT+0xcc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <HAL_TIM_Base_Start_IT+0x76>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a1c      	ldr	r2, [pc, #112]	@ (8006578 <HAL_TIM_Base_Start_IT+0xd0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_TIM_Base_Start_IT+0x76>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <HAL_TIM_Base_Start_IT+0xd4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_TIM_Base_Start_IT+0x76>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a19      	ldr	r2, [pc, #100]	@ (8006580 <HAL_TIM_Base_Start_IT+0xd8>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d115      	bne.n	800654a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	4b17      	ldr	r3, [pc, #92]	@ (8006584 <HAL_TIM_Base_Start_IT+0xdc>)
 8006526:	4013      	ands	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2b06      	cmp	r3, #6
 800652e:	d015      	beq.n	800655c <HAL_TIM_Base_Start_IT+0xb4>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006536:	d011      	beq.n	800655c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f042 0201 	orr.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006548:	e008      	b.n	800655c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0201 	orr.w	r2, r2, #1
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	e000      	b.n	800655e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800655c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40013400 	.word	0x40013400
 8006580:	40014000 	.word	0x40014000
 8006584:	00010007 	.word	0x00010007

08006588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d020      	beq.n	80065ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01b      	beq.n	80065ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0202 	mvn.w	r2, #2
 80065bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f8e4 	bl	80067a0 <HAL_TIM_IC_CaptureCallback>
 80065d8:	e005      	b.n	80065e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f8d6 	bl	800678c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f8e7 	bl	80067b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d020      	beq.n	8006638 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01b      	beq.n	8006638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0204 	mvn.w	r2, #4
 8006608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2202      	movs	r2, #2
 800660e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f8be 	bl	80067a0 <HAL_TIM_IC_CaptureCallback>
 8006624:	e005      	b.n	8006632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f8b0 	bl	800678c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8c1 	bl	80067b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 0308 	and.w	r3, r3, #8
 800663e:	2b00      	cmp	r3, #0
 8006640:	d020      	beq.n	8006684 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f06f 0208 	mvn.w	r2, #8
 8006654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2204      	movs	r2, #4
 800665a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f898 	bl	80067a0 <HAL_TIM_IC_CaptureCallback>
 8006670:	e005      	b.n	800667e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f88a 	bl	800678c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f89b 	bl	80067b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 0310 	and.w	r3, r3, #16
 800668a:	2b00      	cmp	r3, #0
 800668c:	d020      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01b      	beq.n	80066d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0210 	mvn.w	r2, #16
 80066a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2208      	movs	r2, #8
 80066a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f872 	bl	80067a0 <HAL_TIM_IC_CaptureCallback>
 80066bc:	e005      	b.n	80066ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f864 	bl	800678c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f875 	bl	80067b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00c      	beq.n	80066f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d007      	beq.n	80066f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0201 	mvn.w	r2, #1
 80066ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7fa fe9c 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00c      	beq.n	8006718 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006704:	2b00      	cmp	r3, #0
 8006706:	d007      	beq.n	8006718 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f906 	bl	8006924 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00c      	beq.n	800673c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006728:	2b00      	cmp	r3, #0
 800672a:	d007      	beq.n	800673c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f8fe 	bl	8006938 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00c      	beq.n	8006760 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f834 	bl	80067c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00c      	beq.n	8006784 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f06f 0220 	mvn.w	r2, #32
 800677c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f8c6 	bl	8006910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a40      	ldr	r2, [pc, #256]	@ (80068f0 <TIM_Base_SetConfig+0x114>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d013      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067fa:	d00f      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a3d      	ldr	r2, [pc, #244]	@ (80068f4 <TIM_Base_SetConfig+0x118>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d00b      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a3c      	ldr	r2, [pc, #240]	@ (80068f8 <TIM_Base_SetConfig+0x11c>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d007      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a3b      	ldr	r2, [pc, #236]	@ (80068fc <TIM_Base_SetConfig+0x120>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_Base_SetConfig+0x40>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a3a      	ldr	r2, [pc, #232]	@ (8006900 <TIM_Base_SetConfig+0x124>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d108      	bne.n	800682e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2f      	ldr	r2, [pc, #188]	@ (80068f0 <TIM_Base_SetConfig+0x114>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01f      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683c:	d01b      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a2c      	ldr	r2, [pc, #176]	@ (80068f4 <TIM_Base_SetConfig+0x118>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d017      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a2b      	ldr	r2, [pc, #172]	@ (80068f8 <TIM_Base_SetConfig+0x11c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d013      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2a      	ldr	r2, [pc, #168]	@ (80068fc <TIM_Base_SetConfig+0x120>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00f      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a29      	ldr	r2, [pc, #164]	@ (8006900 <TIM_Base_SetConfig+0x124>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00b      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a28      	ldr	r2, [pc, #160]	@ (8006904 <TIM_Base_SetConfig+0x128>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d007      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a27      	ldr	r2, [pc, #156]	@ (8006908 <TIM_Base_SetConfig+0x12c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d003      	beq.n	8006876 <TIM_Base_SetConfig+0x9a>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a26      	ldr	r2, [pc, #152]	@ (800690c <TIM_Base_SetConfig+0x130>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d108      	bne.n	8006888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800687c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a10      	ldr	r2, [pc, #64]	@ (80068f0 <TIM_Base_SetConfig+0x114>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0xf8>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a12      	ldr	r2, [pc, #72]	@ (8006900 <TIM_Base_SetConfig+0x124>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0xf8>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a11      	ldr	r2, [pc, #68]	@ (8006904 <TIM_Base_SetConfig+0x128>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0xf8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a10      	ldr	r2, [pc, #64]	@ (8006908 <TIM_Base_SetConfig+0x12c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0xf8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0f      	ldr	r2, [pc, #60]	@ (800690c <TIM_Base_SetConfig+0x130>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d103      	bne.n	80068dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	615a      	str	r2, [r3, #20]
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	40000c00 	.word	0x40000c00
 8006900:	40013400 	.word	0x40013400
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006950:	4b05      	ldr	r3, [pc, #20]	@ (8006968 <SysTick_Handler+0x1c>)
 8006952:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006954:	f001 ff06 	bl	8008764 <xTaskGetSchedulerState>
 8006958:	4603      	mov	r3, r0
 800695a:	2b01      	cmp	r3, #1
 800695c:	d001      	beq.n	8006962 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800695e:	f002 fdfb 	bl	8009558 <xPortSysTickHandler>
  }
}
 8006962:	bf00      	nop
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	e000e010 	.word	0xe000e010

0800696c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a07      	ldr	r2, [pc, #28]	@ (8006998 <vApplicationGetIdleTaskMemory+0x2c>)
 800697c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	4a06      	ldr	r2, [pc, #24]	@ (800699c <vApplicationGetIdleTaskMemory+0x30>)
 8006982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2280      	movs	r2, #128	@ 0x80
 8006988:	601a      	str	r2, [r3, #0]
}
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20000170 	.word	0x20000170
 800699c:	20000218 	.word	0x20000218

080069a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a07      	ldr	r2, [pc, #28]	@ (80069cc <vApplicationGetTimerTaskMemory+0x2c>)
 80069b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4a06      	ldr	r2, [pc, #24]	@ (80069d0 <vApplicationGetTimerTaskMemory+0x30>)
 80069b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069be:	601a      	str	r2, [r3, #0]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	20000418 	.word	0x20000418
 80069d0:	200004c0 	.word	0x200004c0

080069d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f103 0208 	add.w	r2, r3, #8
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f103 0208 	add.w	r2, r3, #8
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f103 0208 	add.w	r2, r3, #8
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d103      	bne.n	8006a96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	e00c      	b.n	8006ab0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	e002      	b.n	8006aa4 <vListInsert+0x2e>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d2f6      	bcs.n	8006a9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	601a      	str	r2, [r3, #0]
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6892      	ldr	r2, [r2, #8]
 8006afe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6852      	ldr	r2, [r2, #4]
 8006b08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d103      	bne.n	8006b1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689a      	ldr	r2, [r3, #8]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	1e5a      	subs	r2, r3, #1
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10b      	bne.n	8006b68 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	e7fd      	b.n	8006b64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b68:	f002 fc66 	bl	8009438 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b78:	fb01 f303 	mul.w	r3, r1, r3
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	68f9      	ldr	r1, [r7, #12]
 8006b9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ba2:	441a      	add	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	22ff      	movs	r2, #255	@ 0xff
 8006bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	22ff      	movs	r2, #255	@ 0xff
 8006bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d114      	bne.n	8006be8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d01a      	beq.n	8006bfc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3310      	adds	r3, #16
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f001 fbac 	bl	8008328 <xTaskRemoveFromEventList>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d012      	beq.n	8006bfc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <xQueueGenericReset+0xd0>)
 8006bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	e009      	b.n	8006bfc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3310      	adds	r3, #16
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fef1 	bl	80069d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3324      	adds	r3, #36	@ 0x24
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff feec 	bl	80069d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bfc:	f002 fc4e 	bl	800949c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c00:	2301      	movs	r3, #1
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08e      	sub	sp, #56	@ 0x38
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10b      	bne.n	8006c3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10b      	bne.n	8006c5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	e7fd      	b.n	8006c56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <xQueueGenericCreateStatic+0x56>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d001      	beq.n	8006c6a <xQueueGenericCreateStatic+0x5a>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <xQueueGenericCreateStatic+0x5c>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10b      	bne.n	8006c88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	623b      	str	r3, [r7, #32]
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	e7fd      	b.n	8006c84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d102      	bne.n	8006c94 <xQueueGenericCreateStatic+0x84>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <xQueueGenericCreateStatic+0x88>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e000      	b.n	8006c9a <xQueueGenericCreateStatic+0x8a>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10b      	bne.n	8006cb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	61fb      	str	r3, [r7, #28]
}
 8006cb0:	bf00      	nop
 8006cb2:	bf00      	nop
 8006cb4:	e7fd      	b.n	8006cb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cb6:	2350      	movs	r3, #80	@ 0x50
 8006cb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b50      	cmp	r3, #80	@ 0x50
 8006cbe:	d00b      	beq.n	8006cd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	61bb      	str	r3, [r7, #24]
}
 8006cd2:	bf00      	nop
 8006cd4:	bf00      	nop
 8006cd6:	e7fd      	b.n	8006cd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00d      	beq.n	8006d00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f840 	bl	8006d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3730      	adds	r7, #48	@ 0x30
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b08a      	sub	sp, #40	@ 0x28
 8006d0e:	af02      	add	r7, sp, #8
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	4613      	mov	r3, r2
 8006d16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10b      	bne.n	8006d36 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	613b      	str	r3, [r7, #16]
}
 8006d30:	bf00      	nop
 8006d32:	bf00      	nop
 8006d34:	e7fd      	b.n	8006d32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
 8006d3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	3350      	adds	r3, #80	@ 0x50
 8006d44:	4618      	mov	r0, r3
 8006d46:	f002 fd75 	bl	8009834 <pvPortMalloc>
 8006d4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d011      	beq.n	8006d76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	3350      	adds	r3, #80	@ 0x50
 8006d5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d64:	79fa      	ldrb	r2, [r7, #7]
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f805 	bl	8006d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d76:	69bb      	ldr	r3, [r7, #24]
	}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3720      	adds	r7, #32
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d103      	bne.n	8006d9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	e002      	b.n	8006da2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dae:	2101      	movs	r1, #1
 8006db0:	69b8      	ldr	r0, [r7, #24]
 8006db2:	f7ff fec3 	bl	8006b3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00e      	beq.n	8006df2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006de6:	2300      	movs	r3, #0
 8006de8:	2200      	movs	r2, #0
 8006dea:	2100      	movs	r1, #0
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 f81d 	bl	8006e2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	4603      	mov	r3, r0
 8006e02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e04:	2301      	movs	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6939      	ldr	r1, [r7, #16]
 8006e12:	6978      	ldr	r0, [r7, #20]
 8006e14:	f7ff ff79 	bl	8006d0a <xQueueGenericCreate>
 8006e18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7ff ffd3 	bl	8006dc6 <prvInitialiseMutex>

		return xNewQueue;
 8006e20:	68fb      	ldr	r3, [r7, #12]
	}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b08e      	sub	sp, #56	@ 0x38
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <xQueueGenericSend+0x34>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e5a:	bf00      	nop
 8006e5c:	bf00      	nop
 8006e5e:	e7fd      	b.n	8006e5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d103      	bne.n	8006e6e <xQueueGenericSend+0x42>
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <xQueueGenericSend+0x46>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <xQueueGenericSend+0x48>
 8006e72:	2300      	movs	r3, #0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d10b      	bne.n	8006e90 <xQueueGenericSend+0x64>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e8a:	bf00      	nop
 8006e8c:	bf00      	nop
 8006e8e:	e7fd      	b.n	8006e8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d103      	bne.n	8006e9e <xQueueGenericSend+0x72>
 8006e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <xQueueGenericSend+0x76>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <xQueueGenericSend+0x78>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10b      	bne.n	8006ec0 <xQueueGenericSend+0x94>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	623b      	str	r3, [r7, #32]
}
 8006eba:	bf00      	nop
 8006ebc:	bf00      	nop
 8006ebe:	e7fd      	b.n	8006ebc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ec0:	f001 fc50 	bl	8008764 <xTaskGetSchedulerState>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d102      	bne.n	8006ed0 <xQueueGenericSend+0xa4>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <xQueueGenericSend+0xa8>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e000      	b.n	8006ed6 <xQueueGenericSend+0xaa>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	61fb      	str	r3, [r7, #28]
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ef2:	f002 faa1 	bl	8009438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d302      	bcc.n	8006f08 <xQueueGenericSend+0xdc>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d129      	bne.n	8006f5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f0e:	f000 fb37 	bl	8007580 <prvCopyDataToQueue>
 8006f12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d010      	beq.n	8006f3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1e:	3324      	adds	r3, #36	@ 0x24
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 fa01 	bl	8008328 <xTaskRemoveFromEventList>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d013      	beq.n	8006f54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f2c:	4b3f      	ldr	r3, [pc, #252]	@ (800702c <xQueueGenericSend+0x200>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	e00a      	b.n	8006f54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f44:	4b39      	ldr	r3, [pc, #228]	@ (800702c <xQueueGenericSend+0x200>)
 8006f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f54:	f002 faa2 	bl	800949c <vPortExitCritical>
				return pdPASS;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e063      	b.n	8007024 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d103      	bne.n	8006f6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f62:	f002 fa9b 	bl	800949c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e05c      	b.n	8007024 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f70:	f107 0314 	add.w	r3, r7, #20
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fa3d 	bl	80083f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f7e:	f002 fa8d 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f82:	f000 ff43 	bl	8007e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f86:	f002 fa57 	bl	8009438 <vPortEnterCritical>
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f90:	b25b      	sxtb	r3, r3
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f96:	d103      	bne.n	8006fa0 <xQueueGenericSend+0x174>
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fa6:	b25b      	sxtb	r3, r3
 8006fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fac:	d103      	bne.n	8006fb6 <xQueueGenericSend+0x18a>
 8006fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fb6:	f002 fa71 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fba:	1d3a      	adds	r2, r7, #4
 8006fbc:	f107 0314 	add.w	r3, r7, #20
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 fa2c 	bl	8008420 <xTaskCheckForTimeOut>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d124      	bne.n	8007018 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fd0:	f000 fbce 	bl	8007770 <prvIsQueueFull>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d018      	beq.n	800700c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fdc:	3310      	adds	r3, #16
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 f94e 	bl	8008284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fea:	f000 fb59 	bl	80076a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fee:	f000 ff53 	bl	8007e98 <xTaskResumeAll>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f47f af7c 	bne.w	8006ef2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800702c <xQueueGenericSend+0x200>)
 8006ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	e772      	b.n	8006ef2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800700c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800700e:	f000 fb47 	bl	80076a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007012:	f000 ff41 	bl	8007e98 <xTaskResumeAll>
 8007016:	e76c      	b.n	8006ef2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007018:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800701a:	f000 fb41 	bl	80076a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800701e:	f000 ff3b 	bl	8007e98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007022:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007024:	4618      	mov	r0, r3
 8007026:	3738      	adds	r7, #56	@ 0x38
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	e000ed04 	.word	0xe000ed04

08007030 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b090      	sub	sp, #64	@ 0x40
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800705a:	bf00      	nop
 800705c:	bf00      	nop
 800705e:	e7fd      	b.n	800705c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d103      	bne.n	800706e <xQueueGenericSendFromISR+0x3e>
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <xQueueGenericSendFromISR+0x42>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <xQueueGenericSendFromISR+0x44>
 8007072:	2300      	movs	r3, #0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	e7fd      	b.n	800708c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d103      	bne.n	800709e <xQueueGenericSendFromISR+0x6e>
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <xQueueGenericSendFromISR+0x72>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <xQueueGenericSendFromISR+0x74>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	623b      	str	r3, [r7, #32]
}
 80070ba:	bf00      	nop
 80070bc:	bf00      	nop
 80070be:	e7fd      	b.n	80070bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070c0:	f002 fb76 	bl	80097b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070c4:	f3ef 8211 	mrs	r2, BASEPRI
 80070c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	61fa      	str	r2, [r7, #28]
 80070da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d302      	bcc.n	80070f2 <xQueueGenericSendFromISR+0xc2>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d12f      	bne.n	8007152 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007100:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	68b9      	ldr	r1, [r7, #8]
 8007106:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007108:	f000 fa3a 	bl	8007580 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800710c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007114:	d112      	bne.n	800713c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711a:	2b00      	cmp	r3, #0
 800711c:	d016      	beq.n	800714c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800711e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007120:	3324      	adds	r3, #36	@ 0x24
 8007122:	4618      	mov	r0, r3
 8007124:	f001 f900 	bl	8008328 <xTaskRemoveFromEventList>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00e      	beq.n	800714c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00b      	beq.n	800714c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	601a      	str	r2, [r3, #0]
 800713a:	e007      	b.n	800714c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800713c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007140:	3301      	adds	r3, #1
 8007142:	b2db      	uxtb	r3, r3
 8007144:	b25a      	sxtb	r2, r3
 8007146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800714c:	2301      	movs	r3, #1
 800714e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007150:	e001      	b.n	8007156 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007152:	2300      	movs	r3, #0
 8007154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007158:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007160:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007164:	4618      	mov	r0, r3
 8007166:	3740      	adds	r7, #64	@ 0x40
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08c      	sub	sp, #48	@ 0x30
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007178:	2300      	movs	r3, #0
 800717a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10b      	bne.n	800719e <xQueueReceive+0x32>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	623b      	str	r3, [r7, #32]
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	e7fd      	b.n	800719a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d103      	bne.n	80071ac <xQueueReceive+0x40>
 80071a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d101      	bne.n	80071b0 <xQueueReceive+0x44>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <xQueueReceive+0x46>
 80071b0:	2300      	movs	r3, #0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10b      	bne.n	80071ce <xQueueReceive+0x62>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	61fb      	str	r3, [r7, #28]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ce:	f001 fac9 	bl	8008764 <xTaskGetSchedulerState>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <xQueueReceive+0x72>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <xQueueReceive+0x76>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <xQueueReceive+0x78>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10b      	bne.n	8007200 <xQueueReceive+0x94>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	61bb      	str	r3, [r7, #24]
}
 80071fa:	bf00      	nop
 80071fc:	bf00      	nop
 80071fe:	e7fd      	b.n	80071fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007200:	f002 f91a 	bl	8009438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007208:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01f      	beq.n	8007250 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007214:	f000 fa1e 	bl	8007654 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	1e5a      	subs	r2, r3, #1
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00f      	beq.n	8007248 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722a:	3310      	adds	r3, #16
 800722c:	4618      	mov	r0, r3
 800722e:	f001 f87b 	bl	8008328 <xTaskRemoveFromEventList>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007238:	4b3c      	ldr	r3, [pc, #240]	@ (800732c <xQueueReceive+0x1c0>)
 800723a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007248:	f002 f928 	bl	800949c <vPortExitCritical>
				return pdPASS;
 800724c:	2301      	movs	r3, #1
 800724e:	e069      	b.n	8007324 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d103      	bne.n	800725e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007256:	f002 f921 	bl	800949c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800725a:	2300      	movs	r3, #0
 800725c:	e062      	b.n	8007324 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800725e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d106      	bne.n	8007272 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007264:	f107 0310 	add.w	r3, r7, #16
 8007268:	4618      	mov	r0, r3
 800726a:	f001 f8c3 	bl	80083f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800726e:	2301      	movs	r3, #1
 8007270:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007272:	f002 f913 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007276:	f000 fdc9 	bl	8007e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800727a:	f002 f8dd 	bl	8009438 <vPortEnterCritical>
 800727e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007284:	b25b      	sxtb	r3, r3
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800728a:	d103      	bne.n	8007294 <xQueueReceive+0x128>
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800729a:	b25b      	sxtb	r3, r3
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d103      	bne.n	80072aa <xQueueReceive+0x13e>
 80072a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072aa:	f002 f8f7 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072ae:	1d3a      	adds	r2, r7, #4
 80072b0:	f107 0310 	add.w	r3, r7, #16
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 f8b2 	bl	8008420 <xTaskCheckForTimeOut>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d123      	bne.n	800730a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072c4:	f000 fa3e 	bl	8007744 <prvIsQueueEmpty>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d017      	beq.n	80072fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d0:	3324      	adds	r3, #36	@ 0x24
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	4611      	mov	r1, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 ffd4 	bl	8008284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072de:	f000 f9df 	bl	80076a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072e2:	f000 fdd9 	bl	8007e98 <xTaskResumeAll>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d189      	bne.n	8007200 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80072ec:	4b0f      	ldr	r3, [pc, #60]	@ (800732c <xQueueReceive+0x1c0>)
 80072ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	e780      	b.n	8007200 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007300:	f000 f9ce 	bl	80076a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007304:	f000 fdc8 	bl	8007e98 <xTaskResumeAll>
 8007308:	e77a      	b.n	8007200 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800730a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800730c:	f000 f9c8 	bl	80076a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007310:	f000 fdc2 	bl	8007e98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007314:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007316:	f000 fa15 	bl	8007744 <prvIsQueueEmpty>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	f43f af6f 	beq.w	8007200 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007322:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007324:	4618      	mov	r0, r3
 8007326:	3730      	adds	r7, #48	@ 0x30
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	e000ed04 	.word	0xe000ed04

08007330 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08e      	sub	sp, #56	@ 0x38
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800733a:	2300      	movs	r3, #0
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007342:	2300      	movs	r3, #0
 8007344:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	623b      	str	r3, [r7, #32]
}
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	e7fd      	b.n	8007360 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00b      	beq.n	8007384 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	61fb      	str	r3, [r7, #28]
}
 800737e:	bf00      	nop
 8007380:	bf00      	nop
 8007382:	e7fd      	b.n	8007380 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007384:	f001 f9ee 	bl	8008764 <xTaskGetSchedulerState>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d102      	bne.n	8007394 <xQueueSemaphoreTake+0x64>
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <xQueueSemaphoreTake+0x68>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <xQueueSemaphoreTake+0x6a>
 8007398:	2300      	movs	r3, #0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10b      	bne.n	80073b6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	61bb      	str	r3, [r7, #24]
}
 80073b0:	bf00      	nop
 80073b2:	bf00      	nop
 80073b4:	e7fd      	b.n	80073b2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073b6:	f002 f83f 	bl	8009438 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073be:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d024      	beq.n	8007410 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c8:	1e5a      	subs	r2, r3, #1
 80073ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073cc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073d6:	f001 fb3f 	bl	8008a58 <pvTaskIncrementMutexHeldCount>
 80073da:	4602      	mov	r2, r0
 80073dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073de:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00f      	beq.n	8007408 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ea:	3310      	adds	r3, #16
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 ff9b 	bl	8008328 <xTaskRemoveFromEventList>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073f8:	4b54      	ldr	r3, [pc, #336]	@ (800754c <xQueueSemaphoreTake+0x21c>)
 80073fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073fe:	601a      	str	r2, [r3, #0]
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007408:	f002 f848 	bl	800949c <vPortExitCritical>
				return pdPASS;
 800740c:	2301      	movs	r3, #1
 800740e:	e098      	b.n	8007542 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d112      	bne.n	800743c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	617b      	str	r3, [r7, #20]
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	e7fd      	b.n	8007430 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007434:	f002 f832 	bl	800949c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007438:	2300      	movs	r3, #0
 800743a:	e082      	b.n	8007542 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800743c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007442:	f107 030c 	add.w	r3, r7, #12
 8007446:	4618      	mov	r0, r3
 8007448:	f000 ffd4 	bl	80083f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007450:	f002 f824 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007454:	f000 fcda 	bl	8007e0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007458:	f001 ffee 	bl	8009438 <vPortEnterCritical>
 800745c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007462:	b25b      	sxtb	r3, r3
 8007464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007468:	d103      	bne.n	8007472 <xQueueSemaphoreTake+0x142>
 800746a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746c:	2200      	movs	r2, #0
 800746e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007474:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007478:	b25b      	sxtb	r3, r3
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d103      	bne.n	8007488 <xQueueSemaphoreTake+0x158>
 8007480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007488:	f002 f808 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800748c:	463a      	mov	r2, r7
 800748e:	f107 030c 	add.w	r3, r7, #12
 8007492:	4611      	mov	r1, r2
 8007494:	4618      	mov	r0, r3
 8007496:	f000 ffc3 	bl	8008420 <xTaskCheckForTimeOut>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d132      	bne.n	8007506 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074a2:	f000 f94f 	bl	8007744 <prvIsQueueEmpty>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d026      	beq.n	80074fa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d109      	bne.n	80074c8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80074b4:	f001 ffc0 	bl	8009438 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 f96f 	bl	80087a0 <xTaskPriorityInherit>
 80074c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80074c4:	f001 ffea 	bl	800949c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ca:	3324      	adds	r3, #36	@ 0x24
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	4611      	mov	r1, r2
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 fed7 	bl	8008284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074d8:	f000 f8e2 	bl	80076a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074dc:	f000 fcdc 	bl	8007e98 <xTaskResumeAll>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f47f af67 	bne.w	80073b6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80074e8:	4b18      	ldr	r3, [pc, #96]	@ (800754c <xQueueSemaphoreTake+0x21c>)
 80074ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	e75d      	b.n	80073b6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80074fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074fc:	f000 f8d0 	bl	80076a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007500:	f000 fcca 	bl	8007e98 <xTaskResumeAll>
 8007504:	e757      	b.n	80073b6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007506:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007508:	f000 f8ca 	bl	80076a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800750c:	f000 fcc4 	bl	8007e98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007510:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007512:	f000 f917 	bl	8007744 <prvIsQueueEmpty>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	f43f af4c 	beq.w	80073b6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00d      	beq.n	8007540 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007524:	f001 ff88 	bl	8009438 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007528:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800752a:	f000 f811 	bl	8007550 <prvGetDisinheritPriorityAfterTimeout>
 800752e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007536:	4618      	mov	r0, r3
 8007538:	f001 fa0a 	bl	8008950 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800753c:	f001 ffae 	bl	800949c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007540:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007542:	4618      	mov	r0, r3
 8007544:	3738      	adds	r7, #56	@ 0x38
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	d006      	beq.n	800756e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	e001      	b.n	8007572 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007572:	68fb      	ldr	r3, [r7, #12]
	}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800758c:	2300      	movs	r3, #0
 800758e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007594:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10d      	bne.n	80075ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d14d      	bne.n	8007642 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f001 f960 	bl	8008870 <xTaskPriorityDisinherit>
 80075b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	609a      	str	r2, [r3, #8]
 80075b8:	e043      	b.n	8007642 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d119      	bne.n	80075f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6858      	ldr	r0, [r3, #4]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c8:	461a      	mov	r2, r3
 80075ca:	68b9      	ldr	r1, [r7, #8]
 80075cc:	f002 fba4 	bl	8009d18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d8:	441a      	add	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d32b      	bcc.n	8007642 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	e026      	b.n	8007642 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	68d8      	ldr	r0, [r3, #12]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fc:	461a      	mov	r2, r3
 80075fe:	68b9      	ldr	r1, [r7, #8]
 8007600:	f002 fb8a 	bl	8009d18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68da      	ldr	r2, [r3, #12]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760c:	425b      	negs	r3, r3
 800760e:	441a      	add	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d207      	bcs.n	8007630 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689a      	ldr	r2, [r3, #8]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007628:	425b      	negs	r3, r3
 800762a:	441a      	add	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d105      	bne.n	8007642 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	3b01      	subs	r3, #1
 8007640:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800764a:	697b      	ldr	r3, [r7, #20]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007662:	2b00      	cmp	r3, #0
 8007664:	d018      	beq.n	8007698 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766e:	441a      	add	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68da      	ldr	r2, [r3, #12]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	429a      	cmp	r2, r3
 800767e:	d303      	bcc.n	8007688 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68d9      	ldr	r1, [r3, #12]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007690:	461a      	mov	r2, r3
 8007692:	6838      	ldr	r0, [r7, #0]
 8007694:	f002 fb40 	bl	8009d18 <memcpy>
	}
}
 8007698:	bf00      	nop
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076a8:	f001 fec6 	bl	8009438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076b4:	e011      	b.n	80076da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d012      	beq.n	80076e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	3324      	adds	r3, #36	@ 0x24
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fe30 	bl	8008328 <xTaskRemoveFromEventList>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076ce:	f000 ff0b 	bl	80084e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	dce9      	bgt.n	80076b6 <prvUnlockQueue+0x16>
 80076e2:	e000      	b.n	80076e6 <prvUnlockQueue+0x46>
					break;
 80076e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	22ff      	movs	r2, #255	@ 0xff
 80076ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076ee:	f001 fed5 	bl	800949c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076f2:	f001 fea1 	bl	8009438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076fe:	e011      	b.n	8007724 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d012      	beq.n	800772e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3310      	adds	r3, #16
 800770c:	4618      	mov	r0, r3
 800770e:	f000 fe0b 	bl	8008328 <xTaskRemoveFromEventList>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007718:	f000 fee6 	bl	80084e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	3b01      	subs	r3, #1
 8007720:	b2db      	uxtb	r3, r3
 8007722:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	dce9      	bgt.n	8007700 <prvUnlockQueue+0x60>
 800772c:	e000      	b.n	8007730 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800772e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	22ff      	movs	r2, #255	@ 0xff
 8007734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007738:	f001 feb0 	bl	800949c <vPortExitCritical>
}
 800773c:	bf00      	nop
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800774c:	f001 fe74 	bl	8009438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007758:	2301      	movs	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	e001      	b.n	8007762 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007762:	f001 fe9b 	bl	800949c <vPortExitCritical>

	return xReturn;
 8007766:	68fb      	ldr	r3, [r7, #12]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007778:	f001 fe5e 	bl	8009438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007784:	429a      	cmp	r2, r3
 8007786:	d102      	bne.n	800778e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	e001      	b.n	8007792 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007792:	f001 fe83 	bl	800949c <vPortExitCritical>

	return xReturn;
 8007796:	68fb      	ldr	r3, [r7, #12]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	e014      	b.n	80077da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80077b0:	4a0f      	ldr	r2, [pc, #60]	@ (80077f0 <vQueueAddToRegistry+0x50>)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10b      	bne.n	80077d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80077bc:	490c      	ldr	r1, [pc, #48]	@ (80077f0 <vQueueAddToRegistry+0x50>)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077c6:	4a0a      	ldr	r2, [pc, #40]	@ (80077f0 <vQueueAddToRegistry+0x50>)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	4413      	add	r3, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077d2:	e006      	b.n	80077e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3301      	adds	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2b07      	cmp	r3, #7
 80077de:	d9e7      	bls.n	80077b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	200008c0 	.word	0x200008c0

080077f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007804:	f001 fe18 	bl	8009438 <vPortEnterCritical>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800780e:	b25b      	sxtb	r3, r3
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007814:	d103      	bne.n	800781e <vQueueWaitForMessageRestricted+0x2a>
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007824:	b25b      	sxtb	r3, r3
 8007826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782a:	d103      	bne.n	8007834 <vQueueWaitForMessageRestricted+0x40>
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007834:	f001 fe32 	bl	800949c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	d106      	bne.n	800784e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	3324      	adds	r3, #36	@ 0x24
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	68b9      	ldr	r1, [r7, #8]
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fd41 	bl	80082d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800784e:	6978      	ldr	r0, [r7, #20]
 8007850:	f7ff ff26 	bl	80076a0 <prvUnlockQueue>
	}
 8007854:	bf00      	nop
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08e      	sub	sp, #56	@ 0x38
 8007860:	af04      	add	r7, sp, #16
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800786a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10b      	bne.n	8007888 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	623b      	str	r3, [r7, #32]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	61fb      	str	r3, [r7, #28]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078a6:	23a8      	movs	r3, #168	@ 0xa8
 80078a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2ba8      	cmp	r3, #168	@ 0xa8
 80078ae:	d00b      	beq.n	80078c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	61bb      	str	r3, [r7, #24]
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01e      	beq.n	800790e <xTaskCreateStatic+0xb2>
 80078d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01b      	beq.n	800790e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078e8:	2300      	movs	r3, #0
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	9302      	str	r3, [sp, #8]
 80078f0:	f107 0314 	add.w	r3, r7, #20
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f851 	bl	80079a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007906:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007908:	f000 f8f6 	bl	8007af8 <prvAddNewTaskToReadyList>
 800790c:	e001      	b.n	8007912 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007912:	697b      	ldr	r3, [r7, #20]
	}
 8007914:	4618      	mov	r0, r3
 8007916:	3728      	adds	r7, #40	@ 0x28
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08c      	sub	sp, #48	@ 0x30
 8007920:	af04      	add	r7, sp, #16
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f001 ff7f 	bl	8009834 <pvPortMalloc>
 8007936:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00e      	beq.n	800795c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800793e:	20a8      	movs	r0, #168	@ 0xa8
 8007940:	f001 ff78 	bl	8009834 <pvPortMalloc>
 8007944:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	631a      	str	r2, [r3, #48]	@ 0x30
 8007952:	e005      	b.n	8007960 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	f002 f83b 	bl	80099d0 <vPortFree>
 800795a:	e001      	b.n	8007960 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d017      	beq.n	8007996 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800796e:	88fa      	ldrh	r2, [r7, #6]
 8007970:	2300      	movs	r3, #0
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	9302      	str	r3, [sp, #8]
 8007978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f80f 	bl	80079a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800798a:	69f8      	ldr	r0, [r7, #28]
 800798c:	f000 f8b4 	bl	8007af8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007990:	2301      	movs	r3, #1
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	e002      	b.n	800799c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007996:	f04f 33ff 	mov.w	r3, #4294967295
 800799a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800799c:	69bb      	ldr	r3, [r7, #24]
	}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
	...

080079a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b088      	sub	sp, #32
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	461a      	mov	r2, r3
 80079c0:	21a5      	movs	r1, #165	@ 0xa5
 80079c2:	f002 f925 	bl	8009c10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079d0:	3b01      	subs	r3, #1
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079d8:	69bb      	ldr	r3, [r7, #24]
 80079da:	f023 0307 	bic.w	r3, r3, #7
 80079de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	617b      	str	r3, [r7, #20]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d01f      	beq.n	8007a48 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	e012      	b.n	8007a34 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	7819      	ldrb	r1, [r3, #0]
 8007a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3334      	adds	r3, #52	@ 0x34
 8007a1e:	460a      	mov	r2, r1
 8007a20:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	4413      	add	r3, r2
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d006      	beq.n	8007a3c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	3301      	adds	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b0f      	cmp	r3, #15
 8007a38:	d9e9      	bls.n	8007a0e <prvInitialiseNewTask+0x66>
 8007a3a:	e000      	b.n	8007a3e <prvInitialiseNewTask+0x96>
			{
				break;
 8007a3c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a46:	e003      	b.n	8007a50 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a52:	2b37      	cmp	r3, #55	@ 0x37
 8007a54:	d901      	bls.n	8007a5a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a56:	2337      	movs	r3, #55	@ 0x37
 8007a58:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a64:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	2200      	movs	r2, #0
 8007a6a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe ffcf 	bl	8006a14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	3318      	adds	r3, #24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe ffca 	bl	8006a14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a84:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a94:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	3354      	adds	r3, #84	@ 0x54
 8007aaa:	224c      	movs	r2, #76	@ 0x4c
 8007aac:	2100      	movs	r1, #0
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f002 f8ae 	bl	8009c10 <memset>
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab6:	4a0d      	ldr	r2, [pc, #52]	@ (8007aec <prvInitialiseNewTask+0x144>)
 8007ab8:	659a      	str	r2, [r3, #88]	@ 0x58
 8007aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abc:	4a0c      	ldr	r2, [pc, #48]	@ (8007af0 <prvInitialiseNewTask+0x148>)
 8007abe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8007af4 <prvInitialiseNewTask+0x14c>)
 8007ac4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	68f9      	ldr	r1, [r7, #12]
 8007aca:	69b8      	ldr	r0, [r7, #24]
 8007acc:	f001 fb86 	bl	80091dc <pxPortInitialiseStack>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ae2:	bf00      	nop
 8007ae4:	3720      	adds	r7, #32
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20001b18 	.word	0x20001b18
 8007af0:	20001b80 	.word	0x20001b80
 8007af4:	20001be8 	.word	0x20001be8

08007af8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b00:	f001 fc9a 	bl	8009438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b04:	4b2d      	ldr	r3, [pc, #180]	@ (8007bbc <prvAddNewTaskToReadyList+0xc4>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8007bbc <prvAddNewTaskToReadyList+0xc4>)
 8007b0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8007bc0 <prvAddNewTaskToReadyList+0xc8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d109      	bne.n	8007b2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b16:	4a2a      	ldr	r2, [pc, #168]	@ (8007bc0 <prvAddNewTaskToReadyList+0xc8>)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b1c:	4b27      	ldr	r3, [pc, #156]	@ (8007bbc <prvAddNewTaskToReadyList+0xc4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d110      	bne.n	8007b46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b24:	f000 fd5a 	bl	80085dc <prvInitialiseTaskLists>
 8007b28:	e00d      	b.n	8007b46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b2a:	4b26      	ldr	r3, [pc, #152]	@ (8007bc4 <prvAddNewTaskToReadyList+0xcc>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b32:	4b23      	ldr	r3, [pc, #140]	@ (8007bc0 <prvAddNewTaskToReadyList+0xc8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d802      	bhi.n	8007b46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b40:	4a1f      	ldr	r2, [pc, #124]	@ (8007bc0 <prvAddNewTaskToReadyList+0xc8>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b46:	4b20      	ldr	r3, [pc, #128]	@ (8007bc8 <prvAddNewTaskToReadyList+0xd0>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8007bc8 <prvAddNewTaskToReadyList+0xd0>)
 8007b4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b50:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc8 <prvAddNewTaskToReadyList+0xd0>)
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bcc <prvAddNewTaskToReadyList+0xd4>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d903      	bls.n	8007b6c <prvAddNewTaskToReadyList+0x74>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b68:	4a18      	ldr	r2, [pc, #96]	@ (8007bcc <prvAddNewTaskToReadyList+0xd4>)
 8007b6a:	6013      	str	r3, [r2, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	4a15      	ldr	r2, [pc, #84]	@ (8007bd0 <prvAddNewTaskToReadyList+0xd8>)
 8007b7a:	441a      	add	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4619      	mov	r1, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	f7fe ff53 	bl	8006a2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b88:	f001 fc88 	bl	800949c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <prvAddNewTaskToReadyList+0xcc>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00e      	beq.n	8007bb2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b94:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc0 <prvAddNewTaskToReadyList+0xc8>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d207      	bcs.n	8007bb2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd4 <prvAddNewTaskToReadyList+0xdc>)
 8007ba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	20000dd4 	.word	0x20000dd4
 8007bc0:	20000900 	.word	0x20000900
 8007bc4:	20000de0 	.word	0x20000de0
 8007bc8:	20000df0 	.word	0x20000df0
 8007bcc:	20000ddc 	.word	0x20000ddc
 8007bd0:	20000904 	.word	0x20000904
 8007bd4:	e000ed04 	.word	0xe000ed04

08007bd8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007be0:	f001 fc2a 	bl	8009438 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d102      	bne.n	8007bf0 <vTaskDelete+0x18>
 8007bea:	4b2d      	ldr	r3, [pc, #180]	@ (8007ca0 <vTaskDelete+0xc8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	e000      	b.n	8007bf2 <vTaskDelete+0x1a>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7fe ff75 	bl	8006ae8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3318      	adds	r3, #24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe ff6c 	bl	8006ae8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007c10:	4b24      	ldr	r3, [pc, #144]	@ (8007ca4 <vTaskDelete+0xcc>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	4a23      	ldr	r2, [pc, #140]	@ (8007ca4 <vTaskDelete+0xcc>)
 8007c18:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007c1a:	4b21      	ldr	r3, [pc, #132]	@ (8007ca0 <vTaskDelete+0xc8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d10b      	bne.n	8007c3c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	3304      	adds	r3, #4
 8007c28:	4619      	mov	r1, r3
 8007c2a:	481f      	ldr	r0, [pc, #124]	@ (8007ca8 <vTaskDelete+0xd0>)
 8007c2c:	f7fe feff 	bl	8006a2e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007c30:	4b1e      	ldr	r3, [pc, #120]	@ (8007cac <vTaskDelete+0xd4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	3301      	adds	r3, #1
 8007c36:	4a1d      	ldr	r2, [pc, #116]	@ (8007cac <vTaskDelete+0xd4>)
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	e009      	b.n	8007c50 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007cb0 <vTaskDelete+0xd8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	4a1b      	ldr	r2, [pc, #108]	@ (8007cb0 <vTaskDelete+0xd8>)
 8007c44:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007c46:	68f8      	ldr	r0, [r7, #12]
 8007c48:	f000 fd36 	bl	80086b8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007c4c:	f000 fd6a 	bl	8008724 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007c50:	f001 fc24 	bl	800949c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007c54:	4b17      	ldr	r3, [pc, #92]	@ (8007cb4 <vTaskDelete+0xdc>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01c      	beq.n	8007c96 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8007c5c:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <vTaskDelete+0xc8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d117      	bne.n	8007c96 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007c66:	4b14      	ldr	r3, [pc, #80]	@ (8007cb8 <vTaskDelete+0xe0>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00b      	beq.n	8007c86 <vTaskDelete+0xae>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	60bb      	str	r3, [r7, #8]
}
 8007c80:	bf00      	nop
 8007c82:	bf00      	nop
 8007c84:	e7fd      	b.n	8007c82 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007c86:	4b0d      	ldr	r3, [pc, #52]	@ (8007cbc <vTaskDelete+0xe4>)
 8007c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c96:	bf00      	nop
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000900 	.word	0x20000900
 8007ca4:	20000df0 	.word	0x20000df0
 8007ca8:	20000da8 	.word	0x20000da8
 8007cac:	20000dbc 	.word	0x20000dbc
 8007cb0:	20000dd4 	.word	0x20000dd4
 8007cb4:	20000de0 	.word	0x20000de0
 8007cb8:	20000dfc 	.word	0x20000dfc
 8007cbc:	e000ed04 	.word	0xe000ed04

08007cc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d018      	beq.n	8007d04 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cd2:	4b14      	ldr	r3, [pc, #80]	@ (8007d24 <vTaskDelay+0x64>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00b      	beq.n	8007cf2 <vTaskDelay+0x32>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60bb      	str	r3, [r7, #8]
}
 8007cec:	bf00      	nop
 8007cee:	bf00      	nop
 8007cf0:	e7fd      	b.n	8007cee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007cf2:	f000 f88b 	bl	8007e0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fec1 	bl	8008a80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007cfe:	f000 f8cb 	bl	8007e98 <xTaskResumeAll>
 8007d02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d107      	bne.n	8007d1a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d0a:	4b07      	ldr	r3, [pc, #28]	@ (8007d28 <vTaskDelay+0x68>)
 8007d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	f3bf 8f4f 	dsb	sy
 8007d16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d1a:	bf00      	nop
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000dfc 	.word	0x20000dfc
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	@ 0x28
 8007d30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d3a:	463a      	mov	r2, r7
 8007d3c:	1d39      	adds	r1, r7, #4
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fe12 	bl	800696c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d48:	6839      	ldr	r1, [r7, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68ba      	ldr	r2, [r7, #8]
 8007d4e:	9202      	str	r2, [sp, #8]
 8007d50:	9301      	str	r3, [sp, #4]
 8007d52:	2300      	movs	r3, #0
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	2300      	movs	r3, #0
 8007d58:	460a      	mov	r2, r1
 8007d5a:	4924      	ldr	r1, [pc, #144]	@ (8007dec <vTaskStartScheduler+0xc0>)
 8007d5c:	4824      	ldr	r0, [pc, #144]	@ (8007df0 <vTaskStartScheduler+0xc4>)
 8007d5e:	f7ff fd7d 	bl	800785c <xTaskCreateStatic>
 8007d62:	4603      	mov	r3, r0
 8007d64:	4a23      	ldr	r2, [pc, #140]	@ (8007df4 <vTaskStartScheduler+0xc8>)
 8007d66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d68:	4b22      	ldr	r3, [pc, #136]	@ (8007df4 <vTaskStartScheduler+0xc8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d70:	2301      	movs	r3, #1
 8007d72:	617b      	str	r3, [r7, #20]
 8007d74:	e001      	b.n	8007d7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d102      	bne.n	8007d86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d80:	f000 fed2 	bl	8008b28 <xTimerCreateTimerTask>
 8007d84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d11b      	bne.n	8007dc4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	613b      	str	r3, [r7, #16]
}
 8007d9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007da0:	4b15      	ldr	r3, [pc, #84]	@ (8007df8 <vTaskStartScheduler+0xcc>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3354      	adds	r3, #84	@ 0x54
 8007da6:	4a15      	ldr	r2, [pc, #84]	@ (8007dfc <vTaskStartScheduler+0xd0>)
 8007da8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007daa:	4b15      	ldr	r3, [pc, #84]	@ (8007e00 <vTaskStartScheduler+0xd4>)
 8007dac:	f04f 32ff 	mov.w	r2, #4294967295
 8007db0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007db2:	4b14      	ldr	r3, [pc, #80]	@ (8007e04 <vTaskStartScheduler+0xd8>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007db8:	4b13      	ldr	r3, [pc, #76]	@ (8007e08 <vTaskStartScheduler+0xdc>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dbe:	f001 fa97 	bl	80092f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007dc2:	e00f      	b.n	8007de4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dca:	d10b      	bne.n	8007de4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60fb      	str	r3, [r7, #12]
}
 8007dde:	bf00      	nop
 8007de0:	bf00      	nop
 8007de2:	e7fd      	b.n	8007de0 <vTaskStartScheduler+0xb4>
}
 8007de4:	bf00      	nop
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	08009ebc 	.word	0x08009ebc
 8007df0:	08008501 	.word	0x08008501
 8007df4:	20000df8 	.word	0x20000df8
 8007df8:	20000900 	.word	0x20000900
 8007dfc:	20000018 	.word	0x20000018
 8007e00:	20000df4 	.word	0x20000df4
 8007e04:	20000de0 	.word	0x20000de0
 8007e08:	20000dd8 	.word	0x20000dd8

08007e0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e10:	4b04      	ldr	r3, [pc, #16]	@ (8007e24 <vTaskSuspendAll+0x18>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3301      	adds	r3, #1
 8007e16:	4a03      	ldr	r2, [pc, #12]	@ (8007e24 <vTaskSuspendAll+0x18>)
 8007e18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e1a:	bf00      	nop
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20000dfc 	.word	0x20000dfc

08007e28 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8007e32:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <prvGetExpectedIdleTime+0x5c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8007e3e:	4b12      	ldr	r3, [pc, #72]	@ (8007e88 <prvGetExpectedIdleTime+0x60>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	607b      	str	r3, [r7, #4]
 8007e4c:	e012      	b.n	8007e74 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e8c <prvGetExpectedIdleTime+0x64>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d902      	bls.n	8007e5c <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8007e56:	2300      	movs	r3, #0
 8007e58:	607b      	str	r3, [r7, #4]
 8007e5a:	e00b      	b.n	8007e74 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	e005      	b.n	8007e74 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8007e68:	4b09      	ldr	r3, [pc, #36]	@ (8007e90 <prvGetExpectedIdleTime+0x68>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4b09      	ldr	r3, [pc, #36]	@ (8007e94 <prvGetExpectedIdleTime+0x6c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8007e74:	687b      	ldr	r3, [r7, #4]
	}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20000ddc 	.word	0x20000ddc
 8007e88:	20000900 	.word	0x20000900
 8007e8c:	20000904 	.word	0x20000904
 8007e90:	20000df4 	.word	0x20000df4
 8007e94:	20000dd8 	.word	0x20000dd8

08007e98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ea6:	4b42      	ldr	r3, [pc, #264]	@ (8007fb0 <xTaskResumeAll+0x118>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10b      	bne.n	8007ec6 <xTaskResumeAll+0x2e>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	603b      	str	r3, [r7, #0]
}
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	e7fd      	b.n	8007ec2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ec6:	f001 fab7 	bl	8009438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007eca:	4b39      	ldr	r3, [pc, #228]	@ (8007fb0 <xTaskResumeAll+0x118>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	4a37      	ldr	r2, [pc, #220]	@ (8007fb0 <xTaskResumeAll+0x118>)
 8007ed2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed4:	4b36      	ldr	r3, [pc, #216]	@ (8007fb0 <xTaskResumeAll+0x118>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d162      	bne.n	8007fa2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007edc:	4b35      	ldr	r3, [pc, #212]	@ (8007fb4 <xTaskResumeAll+0x11c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d05e      	beq.n	8007fa2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ee4:	e02f      	b.n	8007f46 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ee6:	4b34      	ldr	r3, [pc, #208]	@ (8007fb8 <xTaskResumeAll+0x120>)
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	3318      	adds	r3, #24
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fdf8 	bl	8006ae8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3304      	adds	r3, #4
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fdf3 	bl	8006ae8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f06:	4b2d      	ldr	r3, [pc, #180]	@ (8007fbc <xTaskResumeAll+0x124>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d903      	bls.n	8007f16 <xTaskResumeAll+0x7e>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f12:	4a2a      	ldr	r2, [pc, #168]	@ (8007fbc <xTaskResumeAll+0x124>)
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4a27      	ldr	r2, [pc, #156]	@ (8007fc0 <xTaskResumeAll+0x128>)
 8007f24:	441a      	add	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3304      	adds	r3, #4
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f7fe fd7e 	bl	8006a2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f36:	4b23      	ldr	r3, [pc, #140]	@ (8007fc4 <xTaskResumeAll+0x12c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d302      	bcc.n	8007f46 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007f40:	4b21      	ldr	r3, [pc, #132]	@ (8007fc8 <xTaskResumeAll+0x130>)
 8007f42:	2201      	movs	r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f46:	4b1c      	ldr	r3, [pc, #112]	@ (8007fb8 <xTaskResumeAll+0x120>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1cb      	bne.n	8007ee6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007f54:	f000 fbe6 	bl	8008724 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007f58:	4b1c      	ldr	r3, [pc, #112]	@ (8007fcc <xTaskResumeAll+0x134>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d010      	beq.n	8007f86 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f64:	f000 f86e 	bl	8008044 <xTaskIncrementTick>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007f6e:	4b16      	ldr	r3, [pc, #88]	@ (8007fc8 <xTaskResumeAll+0x130>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1f1      	bne.n	8007f64 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007f80:	4b12      	ldr	r3, [pc, #72]	@ (8007fcc <xTaskResumeAll+0x134>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f86:	4b10      	ldr	r3, [pc, #64]	@ (8007fc8 <xTaskResumeAll+0x130>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f92:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd0 <xTaskResumeAll+0x138>)
 8007f94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fa2:	f001 fa7b 	bl	800949c <vPortExitCritical>

	return xAlreadyYielded;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	20000dfc 	.word	0x20000dfc
 8007fb4:	20000dd4 	.word	0x20000dd4
 8007fb8:	20000d94 	.word	0x20000d94
 8007fbc:	20000ddc 	.word	0x20000ddc
 8007fc0:	20000904 	.word	0x20000904
 8007fc4:	20000900 	.word	0x20000900
 8007fc8:	20000de8 	.word	0x20000de8
 8007fcc:	20000de4 	.word	0x20000de4
 8007fd0:	e000ed04 	.word	0xe000ed04

08007fd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007fda:	4b05      	ldr	r3, [pc, #20]	@ (8007ff0 <xTaskGetTickCount+0x1c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007fe0:	687b      	ldr	r3, [r7, #4]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	20000dd8 	.word	0x20000dd8

08007ff4 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8007ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800803c <vTaskStepTick+0x48>)
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	441a      	add	r2, r3
 8008004:	4b0e      	ldr	r3, [pc, #56]	@ (8008040 <vTaskStepTick+0x4c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d90b      	bls.n	8008024 <vTaskStepTick+0x30>
	__asm volatile
 800800c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008010:	f383 8811 	msr	BASEPRI, r3
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	f3bf 8f4f 	dsb	sy
 800801c:	60fb      	str	r3, [r7, #12]
}
 800801e:	bf00      	nop
 8008020:	bf00      	nop
 8008022:	e7fd      	b.n	8008020 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8008024:	4b05      	ldr	r3, [pc, #20]	@ (800803c <vTaskStepTick+0x48>)
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4413      	add	r3, r2
 800802c:	4a03      	ldr	r2, [pc, #12]	@ (800803c <vTaskStepTick+0x48>)
 800802e:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8008030:	bf00      	nop
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	20000dd8 	.word	0x20000dd8
 8008040:	20000df4 	.word	0x20000df4

08008044 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800804e:	4b4f      	ldr	r3, [pc, #316]	@ (800818c <xTaskIncrementTick+0x148>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f040 8090 	bne.w	8008178 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008058:	4b4d      	ldr	r3, [pc, #308]	@ (8008190 <xTaskIncrementTick+0x14c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008060:	4a4b      	ldr	r2, [pc, #300]	@ (8008190 <xTaskIncrementTick+0x14c>)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d121      	bne.n	80080b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800806c:	4b49      	ldr	r3, [pc, #292]	@ (8008194 <xTaskIncrementTick+0x150>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00b      	beq.n	800808e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	603b      	str	r3, [r7, #0]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <xTaskIncrementTick+0x46>
 800808e:	4b41      	ldr	r3, [pc, #260]	@ (8008194 <xTaskIncrementTick+0x150>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	4b40      	ldr	r3, [pc, #256]	@ (8008198 <xTaskIncrementTick+0x154>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a3e      	ldr	r2, [pc, #248]	@ (8008194 <xTaskIncrementTick+0x150>)
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	4a3e      	ldr	r2, [pc, #248]	@ (8008198 <xTaskIncrementTick+0x154>)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	4b3e      	ldr	r3, [pc, #248]	@ (800819c <xTaskIncrementTick+0x158>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3301      	adds	r3, #1
 80080a8:	4a3c      	ldr	r2, [pc, #240]	@ (800819c <xTaskIncrementTick+0x158>)
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	f000 fb3a 	bl	8008724 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080b0:	4b3b      	ldr	r3, [pc, #236]	@ (80081a0 <xTaskIncrementTick+0x15c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d349      	bcc.n	800814e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ba:	4b36      	ldr	r3, [pc, #216]	@ (8008194 <xTaskIncrementTick+0x150>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d104      	bne.n	80080ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c4:	4b36      	ldr	r3, [pc, #216]	@ (80081a0 <xTaskIncrementTick+0x15c>)
 80080c6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ca:	601a      	str	r2, [r3, #0]
					break;
 80080cc:	e03f      	b.n	800814e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ce:	4b31      	ldr	r3, [pc, #196]	@ (8008194 <xTaskIncrementTick+0x150>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d203      	bcs.n	80080ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080e6:	4a2e      	ldr	r2, [pc, #184]	@ (80081a0 <xTaskIncrementTick+0x15c>)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080ec:	e02f      	b.n	800814e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe fcf8 	bl	8006ae8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	3318      	adds	r3, #24
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fcef 	bl	8006ae8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800810e:	4b25      	ldr	r3, [pc, #148]	@ (80081a4 <xTaskIncrementTick+0x160>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	429a      	cmp	r2, r3
 8008114:	d903      	bls.n	800811e <xTaskIncrementTick+0xda>
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811a:	4a22      	ldr	r2, [pc, #136]	@ (80081a4 <xTaskIncrementTick+0x160>)
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008122:	4613      	mov	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4a1f      	ldr	r2, [pc, #124]	@ (80081a8 <xTaskIncrementTick+0x164>)
 800812c:	441a      	add	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	3304      	adds	r3, #4
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f7fe fc7a 	bl	8006a2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800813e:	4b1b      	ldr	r3, [pc, #108]	@ (80081ac <xTaskIncrementTick+0x168>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008144:	429a      	cmp	r2, r3
 8008146:	d3b8      	bcc.n	80080ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008148:	2301      	movs	r3, #1
 800814a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800814c:	e7b5      	b.n	80080ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800814e:	4b17      	ldr	r3, [pc, #92]	@ (80081ac <xTaskIncrementTick+0x168>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008154:	4914      	ldr	r1, [pc, #80]	@ (80081a8 <xTaskIncrementTick+0x164>)
 8008156:	4613      	mov	r3, r2
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	440b      	add	r3, r1
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d901      	bls.n	800816a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008166:	2301      	movs	r3, #1
 8008168:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800816a:	4b11      	ldr	r3, [pc, #68]	@ (80081b0 <xTaskIncrementTick+0x16c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008172:	2301      	movs	r3, #1
 8008174:	617b      	str	r3, [r7, #20]
 8008176:	e004      	b.n	8008182 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008178:	4b0e      	ldr	r3, [pc, #56]	@ (80081b4 <xTaskIncrementTick+0x170>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3301      	adds	r3, #1
 800817e:	4a0d      	ldr	r2, [pc, #52]	@ (80081b4 <xTaskIncrementTick+0x170>)
 8008180:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008182:	697b      	ldr	r3, [r7, #20]
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20000dfc 	.word	0x20000dfc
 8008190:	20000dd8 	.word	0x20000dd8
 8008194:	20000d8c 	.word	0x20000d8c
 8008198:	20000d90 	.word	0x20000d90
 800819c:	20000dec 	.word	0x20000dec
 80081a0:	20000df4 	.word	0x20000df4
 80081a4:	20000ddc 	.word	0x20000ddc
 80081a8:	20000904 	.word	0x20000904
 80081ac:	20000900 	.word	0x20000900
 80081b0:	20000de8 	.word	0x20000de8
 80081b4:	20000de4 	.word	0x20000de4

080081b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081be:	4b2b      	ldr	r3, [pc, #172]	@ (800826c <vTaskSwitchContext+0xb4>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008270 <vTaskSwitchContext+0xb8>)
 80081c8:	2201      	movs	r2, #1
 80081ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081cc:	e047      	b.n	800825e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80081ce:	4b28      	ldr	r3, [pc, #160]	@ (8008270 <vTaskSwitchContext+0xb8>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d4:	4b27      	ldr	r3, [pc, #156]	@ (8008274 <vTaskSwitchContext+0xbc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	e011      	b.n	8008200 <vTaskSwitchContext+0x48>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <vTaskSwitchContext+0x42>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	607b      	str	r3, [r7, #4]
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	e7fd      	b.n	80081f6 <vTaskSwitchContext+0x3e>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	491d      	ldr	r1, [pc, #116]	@ (8008278 <vTaskSwitchContext+0xc0>)
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	440b      	add	r3, r1
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0e3      	beq.n	80081dc <vTaskSwitchContext+0x24>
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4a16      	ldr	r2, [pc, #88]	@ (8008278 <vTaskSwitchContext+0xc0>)
 8008220:	4413      	add	r3, r2
 8008222:	60bb      	str	r3, [r7, #8]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	605a      	str	r2, [r3, #4]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	3308      	adds	r3, #8
 8008236:	429a      	cmp	r2, r3
 8008238:	d104      	bne.n	8008244 <vTaskSwitchContext+0x8c>
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	605a      	str	r2, [r3, #4]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	4a0c      	ldr	r2, [pc, #48]	@ (800827c <vTaskSwitchContext+0xc4>)
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	4a09      	ldr	r2, [pc, #36]	@ (8008274 <vTaskSwitchContext+0xbc>)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008254:	4b09      	ldr	r3, [pc, #36]	@ (800827c <vTaskSwitchContext+0xc4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	3354      	adds	r3, #84	@ 0x54
 800825a:	4a09      	ldr	r2, [pc, #36]	@ (8008280 <vTaskSwitchContext+0xc8>)
 800825c:	6013      	str	r3, [r2, #0]
}
 800825e:	bf00      	nop
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	20000dfc 	.word	0x20000dfc
 8008270:	20000de8 	.word	0x20000de8
 8008274:	20000ddc 	.word	0x20000ddc
 8008278:	20000904 	.word	0x20000904
 800827c:	20000900 	.word	0x20000900
 8008280:	20000018 	.word	0x20000018

08008284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10b      	bne.n	80082ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	60fb      	str	r3, [r7, #12]
}
 80082a6:	bf00      	nop
 80082a8:	bf00      	nop
 80082aa:	e7fd      	b.n	80082a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082ac:	4b07      	ldr	r3, [pc, #28]	@ (80082cc <vTaskPlaceOnEventList+0x48>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3318      	adds	r3, #24
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7fe fbde 	bl	8006a76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082ba:	2101      	movs	r1, #1
 80082bc:	6838      	ldr	r0, [r7, #0]
 80082be:	f000 fbdf 	bl	8008a80 <prvAddCurrentTaskToDelayedList>
}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000900 	.word	0x20000900

080082d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10b      	bne.n	80082fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	617b      	str	r3, [r7, #20]
}
 80082f4:	bf00      	nop
 80082f6:	bf00      	nop
 80082f8:	e7fd      	b.n	80082f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082fa:	4b0a      	ldr	r3, [pc, #40]	@ (8008324 <vTaskPlaceOnEventListRestricted+0x54>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3318      	adds	r3, #24
 8008300:	4619      	mov	r1, r3
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7fe fb93 	bl	8006a2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d002      	beq.n	8008314 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800830e:	f04f 33ff 	mov.w	r3, #4294967295
 8008312:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008314:	6879      	ldr	r1, [r7, #4]
 8008316:	68b8      	ldr	r0, [r7, #8]
 8008318:	f000 fbb2 	bl	8008a80 <prvAddCurrentTaskToDelayedList>
	}
 800831c:	bf00      	nop
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	20000900 	.word	0x20000900

08008328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d10b      	bne.n	8008356 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	60fb      	str	r3, [r7, #12]
}
 8008350:	bf00      	nop
 8008352:	bf00      	nop
 8008354:	e7fd      	b.n	8008352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3318      	adds	r3, #24
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fbc4 	bl	8006ae8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008360:	4b1e      	ldr	r3, [pc, #120]	@ (80083dc <xTaskRemoveFromEventList+0xb4>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d11f      	bne.n	80083a8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	3304      	adds	r3, #4
 800836c:	4618      	mov	r0, r3
 800836e:	f7fe fbbb 	bl	8006ae8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008376:	4b1a      	ldr	r3, [pc, #104]	@ (80083e0 <xTaskRemoveFromEventList+0xb8>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d903      	bls.n	8008386 <xTaskRemoveFromEventList+0x5e>
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008382:	4a17      	ldr	r2, [pc, #92]	@ (80083e0 <xTaskRemoveFromEventList+0xb8>)
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4a14      	ldr	r2, [pc, #80]	@ (80083e4 <xTaskRemoveFromEventList+0xbc>)
 8008394:	441a      	add	r2, r3
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	3304      	adds	r3, #4
 800839a:	4619      	mov	r1, r3
 800839c:	4610      	mov	r0, r2
 800839e:	f7fe fb46 	bl	8006a2e <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 80083a2:	f000 f9bf 	bl	8008724 <prvResetNextTaskUnblockTime>
 80083a6:	e005      	b.n	80083b4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	3318      	adds	r3, #24
 80083ac:	4619      	mov	r1, r3
 80083ae:	480e      	ldr	r0, [pc, #56]	@ (80083e8 <xTaskRemoveFromEventList+0xc0>)
 80083b0:	f7fe fb3d 	bl	8006a2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b8:	4b0c      	ldr	r3, [pc, #48]	@ (80083ec <xTaskRemoveFromEventList+0xc4>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083be:	429a      	cmp	r2, r3
 80083c0:	d905      	bls.n	80083ce <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80083c2:	2301      	movs	r3, #1
 80083c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80083c6:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <xTaskRemoveFromEventList+0xc8>)
 80083c8:	2201      	movs	r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	e001      	b.n	80083d2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80083d2:	697b      	ldr	r3, [r7, #20]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3718      	adds	r7, #24
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	20000dfc 	.word	0x20000dfc
 80083e0:	20000ddc 	.word	0x20000ddc
 80083e4:	20000904 	.word	0x20000904
 80083e8:	20000d94 	.word	0x20000d94
 80083ec:	20000900 	.word	0x20000900
 80083f0:	20000de8 	.word	0x20000de8

080083f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80083fc:	4b06      	ldr	r3, [pc, #24]	@ (8008418 <vTaskInternalSetTimeOutState+0x24>)
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008404:	4b05      	ldr	r3, [pc, #20]	@ (800841c <vTaskInternalSetTimeOutState+0x28>)
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	605a      	str	r2, [r3, #4]
}
 800840c:	bf00      	nop
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	20000dec 	.word	0x20000dec
 800841c:	20000dd8 	.word	0x20000dd8

08008420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10b      	bne.n	8008448 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	613b      	str	r3, [r7, #16]
}
 8008442:	bf00      	nop
 8008444:	bf00      	nop
 8008446:	e7fd      	b.n	8008444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	60fb      	str	r3, [r7, #12]
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	e7fd      	b.n	8008462 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008466:	f000 ffe7 	bl	8009438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800846a:	4b1d      	ldr	r3, [pc, #116]	@ (80084e0 <xTaskCheckForTimeOut+0xc0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	d102      	bne.n	800848a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008484:	2300      	movs	r3, #0
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	e023      	b.n	80084d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	4b15      	ldr	r3, [pc, #84]	@ (80084e4 <xTaskCheckForTimeOut+0xc4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d007      	beq.n	80084a6 <xTaskCheckForTimeOut+0x86>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	69ba      	ldr	r2, [r7, #24]
 800849c:	429a      	cmp	r2, r3
 800849e:	d302      	bcc.n	80084a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084a0:	2301      	movs	r3, #1
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	e015      	b.n	80084d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d20b      	bcs.n	80084c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	1ad2      	subs	r2, r2, r3
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff ff99 	bl	80083f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084c2:	2300      	movs	r3, #0
 80084c4:	61fb      	str	r3, [r7, #28]
 80084c6:	e004      	b.n	80084d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	2200      	movs	r2, #0
 80084cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084ce:	2301      	movs	r3, #1
 80084d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80084d2:	f000 ffe3 	bl	800949c <vPortExitCritical>

	return xReturn;
 80084d6:	69fb      	ldr	r3, [r7, #28]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3720      	adds	r7, #32
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000dd8 	.word	0x20000dd8
 80084e4:	20000dec 	.word	0x20000dec

080084e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80084ec:	4b03      	ldr	r3, [pc, #12]	@ (80084fc <vTaskMissedYield+0x14>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	601a      	str	r2, [r3, #0]
}
 80084f2:	bf00      	nop
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	20000de8 	.word	0x20000de8

08008500 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008508:	f000 f8a8 	bl	800865c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800850c:	4b18      	ldr	r3, [pc, #96]	@ (8008570 <prvIdleTask+0x70>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d907      	bls.n	8008524 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008514:	4b17      	ldr	r3, [pc, #92]	@ (8008574 <prvIdleTask+0x74>)
 8008516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8008524:	f7ff fc80 	bl	8007e28 <prvGetExpectedIdleTime>
 8008528:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b31      	cmp	r3, #49	@ 0x31
 800852e:	d9eb      	bls.n	8008508 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8008530:	f7ff fc6c 	bl	8007e0c <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8008534:	4b10      	ldr	r3, [pc, #64]	@ (8008578 <prvIdleTask+0x78>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	4b10      	ldr	r3, [pc, #64]	@ (800857c <prvIdleTask+0x7c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d20b      	bcs.n	8008558 <prvIdleTask+0x58>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	60bb      	str	r3, [r7, #8]
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8008558:	f7ff fc66 	bl	8007e28 <prvGetExpectedIdleTime>
 800855c:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b31      	cmp	r3, #49	@ 0x31
 8008562:	d902      	bls.n	800856a <prvIdleTask+0x6a>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f001 f819 	bl	800959c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800856a:	f7ff fc95 	bl	8007e98 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800856e:	e7cb      	b.n	8008508 <prvIdleTask+0x8>
 8008570:	20000904 	.word	0x20000904
 8008574:	e000ed04 	.word	0xe000ed04
 8008578:	20000df4 	.word	0x20000df4
 800857c:	20000dd8 	.word	0x20000dd8

08008580 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8008586:	2301      	movs	r3, #1
 8008588:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800858a:	2301      	movs	r3, #1
 800858c:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800858e:	4b0f      	ldr	r3, [pc, #60]	@ (80085cc <eTaskConfirmSleepModeStatus+0x4c>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8008596:	2300      	movs	r3, #0
 8008598:	71fb      	strb	r3, [r7, #7]
 800859a:	e010      	b.n	80085be <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800859c:	4b0c      	ldr	r3, [pc, #48]	@ (80085d0 <eTaskConfirmSleepModeStatus+0x50>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d002      	beq.n	80085aa <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 80085a4:	2300      	movs	r3, #0
 80085a6:	71fb      	strb	r3, [r7, #7]
 80085a8:	e009      	b.n	80085be <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 80085aa:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <eTaskConfirmSleepModeStatus+0x54>)
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	4b0a      	ldr	r3, [pc, #40]	@ (80085d8 <eTaskConfirmSleepModeStatus+0x58>)
 80085b0:	6819      	ldr	r1, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	1acb      	subs	r3, r1, r3
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d101      	bne.n	80085be <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80085ba:	2302      	movs	r3, #2
 80085bc:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80085be:	79fb      	ldrb	r3, [r7, #7]
	}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20000d94 	.word	0x20000d94
 80085d0:	20000de8 	.word	0x20000de8
 80085d4:	20000dc0 	.word	0x20000dc0
 80085d8:	20000dd4 	.word	0x20000dd4

080085dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085e2:	2300      	movs	r3, #0
 80085e4:	607b      	str	r3, [r7, #4]
 80085e6:	e00c      	b.n	8008602 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4a12      	ldr	r2, [pc, #72]	@ (800863c <prvInitialiseTaskLists+0x60>)
 80085f4:	4413      	add	r3, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe f9ec 	bl	80069d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3301      	adds	r3, #1
 8008600:	607b      	str	r3, [r7, #4]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b37      	cmp	r3, #55	@ 0x37
 8008606:	d9ef      	bls.n	80085e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008608:	480d      	ldr	r0, [pc, #52]	@ (8008640 <prvInitialiseTaskLists+0x64>)
 800860a:	f7fe f9e3 	bl	80069d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800860e:	480d      	ldr	r0, [pc, #52]	@ (8008644 <prvInitialiseTaskLists+0x68>)
 8008610:	f7fe f9e0 	bl	80069d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008614:	480c      	ldr	r0, [pc, #48]	@ (8008648 <prvInitialiseTaskLists+0x6c>)
 8008616:	f7fe f9dd 	bl	80069d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800861a:	480c      	ldr	r0, [pc, #48]	@ (800864c <prvInitialiseTaskLists+0x70>)
 800861c:	f7fe f9da 	bl	80069d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008620:	480b      	ldr	r0, [pc, #44]	@ (8008650 <prvInitialiseTaskLists+0x74>)
 8008622:	f7fe f9d7 	bl	80069d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008626:	4b0b      	ldr	r3, [pc, #44]	@ (8008654 <prvInitialiseTaskLists+0x78>)
 8008628:	4a05      	ldr	r2, [pc, #20]	@ (8008640 <prvInitialiseTaskLists+0x64>)
 800862a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800862c:	4b0a      	ldr	r3, [pc, #40]	@ (8008658 <prvInitialiseTaskLists+0x7c>)
 800862e:	4a05      	ldr	r2, [pc, #20]	@ (8008644 <prvInitialiseTaskLists+0x68>)
 8008630:	601a      	str	r2, [r3, #0]
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20000904 	.word	0x20000904
 8008640:	20000d64 	.word	0x20000d64
 8008644:	20000d78 	.word	0x20000d78
 8008648:	20000d94 	.word	0x20000d94
 800864c:	20000da8 	.word	0x20000da8
 8008650:	20000dc0 	.word	0x20000dc0
 8008654:	20000d8c 	.word	0x20000d8c
 8008658:	20000d90 	.word	0x20000d90

0800865c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008662:	e019      	b.n	8008698 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008664:	f000 fee8 	bl	8009438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008668:	4b10      	ldr	r3, [pc, #64]	@ (80086ac <prvCheckTasksWaitingTermination+0x50>)
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	3304      	adds	r3, #4
 8008674:	4618      	mov	r0, r3
 8008676:	f7fe fa37 	bl	8006ae8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800867a:	4b0d      	ldr	r3, [pc, #52]	@ (80086b0 <prvCheckTasksWaitingTermination+0x54>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3b01      	subs	r3, #1
 8008680:	4a0b      	ldr	r2, [pc, #44]	@ (80086b0 <prvCheckTasksWaitingTermination+0x54>)
 8008682:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008684:	4b0b      	ldr	r3, [pc, #44]	@ (80086b4 <prvCheckTasksWaitingTermination+0x58>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3b01      	subs	r3, #1
 800868a:	4a0a      	ldr	r2, [pc, #40]	@ (80086b4 <prvCheckTasksWaitingTermination+0x58>)
 800868c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800868e:	f000 ff05 	bl	800949c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f810 	bl	80086b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008698:	4b06      	ldr	r3, [pc, #24]	@ (80086b4 <prvCheckTasksWaitingTermination+0x58>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e1      	bne.n	8008664 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	3708      	adds	r7, #8
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20000da8 	.word	0x20000da8
 80086b0:	20000dd4 	.word	0x20000dd4
 80086b4:	20000dbc 	.word	0x20000dbc

080086b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3354      	adds	r3, #84	@ 0x54
 80086c4:	4618      	mov	r0, r3
 80086c6:	f001 faab 	bl	8009c20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d108      	bne.n	80086e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 f979 	bl	80099d0 <vPortFree>
				vPortFree( pxTCB );
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f001 f976 	bl	80099d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086e4:	e019      	b.n	800871a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d103      	bne.n	80086f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 f96d 	bl	80099d0 <vPortFree>
	}
 80086f6:	e010      	b.n	800871a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d00b      	beq.n	800871a <prvDeleteTCB+0x62>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	60fb      	str	r3, [r7, #12]
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop
 8008718:	e7fd      	b.n	8008716 <prvDeleteTCB+0x5e>
	}
 800871a:	bf00      	nop
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800872a:	4b0c      	ldr	r3, [pc, #48]	@ (800875c <prvResetNextTaskUnblockTime+0x38>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d104      	bne.n	800873e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008734:	4b0a      	ldr	r3, [pc, #40]	@ (8008760 <prvResetNextTaskUnblockTime+0x3c>)
 8008736:	f04f 32ff 	mov.w	r2, #4294967295
 800873a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800873c:	e008      	b.n	8008750 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800873e:	4b07      	ldr	r3, [pc, #28]	@ (800875c <prvResetNextTaskUnblockTime+0x38>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	4a04      	ldr	r2, [pc, #16]	@ (8008760 <prvResetNextTaskUnblockTime+0x3c>)
 800874e:	6013      	str	r3, [r2, #0]
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	20000d8c 	.word	0x20000d8c
 8008760:	20000df4 	.word	0x20000df4

08008764 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800876a:	4b0b      	ldr	r3, [pc, #44]	@ (8008798 <xTaskGetSchedulerState+0x34>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008772:	2301      	movs	r3, #1
 8008774:	607b      	str	r3, [r7, #4]
 8008776:	e008      	b.n	800878a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008778:	4b08      	ldr	r3, [pc, #32]	@ (800879c <xTaskGetSchedulerState+0x38>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d102      	bne.n	8008786 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008780:	2302      	movs	r3, #2
 8008782:	607b      	str	r3, [r7, #4]
 8008784:	e001      	b.n	800878a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008786:	2300      	movs	r3, #0
 8008788:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800878a:	687b      	ldr	r3, [r7, #4]
	}
 800878c:	4618      	mov	r0, r3
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	20000de0 	.word	0x20000de0
 800879c:	20000dfc 	.word	0x20000dfc

080087a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d051      	beq.n	800885a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008864 <xTaskPriorityInherit+0xc4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d241      	bcs.n	8008848 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	699b      	ldr	r3, [r3, #24]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	db06      	blt.n	80087da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087cc:	4b25      	ldr	r3, [pc, #148]	@ (8008864 <xTaskPriorityInherit+0xc4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	6959      	ldr	r1, [r3, #20]
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087e2:	4613      	mov	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008868 <xTaskPriorityInherit+0xc8>)
 80087ec:	4413      	add	r3, r2
 80087ee:	4299      	cmp	r1, r3
 80087f0:	d122      	bne.n	8008838 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	3304      	adds	r3, #4
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe f976 	bl	8006ae8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087fc:	4b19      	ldr	r3, [pc, #100]	@ (8008864 <xTaskPriorityInherit+0xc4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800880a:	4b18      	ldr	r3, [pc, #96]	@ (800886c <xTaskPriorityInherit+0xcc>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d903      	bls.n	800881a <xTaskPriorityInherit+0x7a>
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008816:	4a15      	ldr	r2, [pc, #84]	@ (800886c <xTaskPriorityInherit+0xcc>)
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4a10      	ldr	r2, [pc, #64]	@ (8008868 <xTaskPriorityInherit+0xc8>)
 8008828:	441a      	add	r2, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	3304      	adds	r3, #4
 800882e:	4619      	mov	r1, r3
 8008830:	4610      	mov	r0, r2
 8008832:	f7fe f8fc 	bl	8006a2e <vListInsertEnd>
 8008836:	e004      	b.n	8008842 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008838:	4b0a      	ldr	r3, [pc, #40]	@ (8008864 <xTaskPriorityInherit+0xc4>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008842:	2301      	movs	r3, #1
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	e008      	b.n	800885a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800884c:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <xTaskPriorityInherit+0xc4>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008852:	429a      	cmp	r2, r3
 8008854:	d201      	bcs.n	800885a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008856:	2301      	movs	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800885a:	68fb      	ldr	r3, [r7, #12]
	}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20000900 	.word	0x20000900
 8008868:	20000904 	.word	0x20000904
 800886c:	20000ddc 	.word	0x20000ddc

08008870 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d058      	beq.n	8008938 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008886:	4b2f      	ldr	r3, [pc, #188]	@ (8008944 <xTaskPriorityDisinherit+0xd4>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	429a      	cmp	r2, r3
 800888e:	d00b      	beq.n	80088a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	60fb      	str	r3, [r7, #12]
}
 80088a2:	bf00      	nop
 80088a4:	bf00      	nop
 80088a6:	e7fd      	b.n	80088a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10b      	bne.n	80088c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	60bb      	str	r3, [r7, #8]
}
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	e7fd      	b.n	80088c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088cc:	1e5a      	subs	r2, r3, #1
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088da:	429a      	cmp	r2, r3
 80088dc:	d02c      	beq.n	8008938 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d128      	bne.n	8008938 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe f8fc 	bl	8006ae8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008908:	4b0f      	ldr	r3, [pc, #60]	@ (8008948 <xTaskPriorityDisinherit+0xd8>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d903      	bls.n	8008918 <xTaskPriorityDisinherit+0xa8>
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008914:	4a0c      	ldr	r2, [pc, #48]	@ (8008948 <xTaskPriorityDisinherit+0xd8>)
 8008916:	6013      	str	r3, [r2, #0]
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	4a09      	ldr	r2, [pc, #36]	@ (800894c <xTaskPriorityDisinherit+0xdc>)
 8008926:	441a      	add	r2, r3
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	3304      	adds	r3, #4
 800892c:	4619      	mov	r1, r3
 800892e:	4610      	mov	r0, r2
 8008930:	f7fe f87d 	bl	8006a2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008934:	2301      	movs	r3, #1
 8008936:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008938:	697b      	ldr	r3, [r7, #20]
	}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000900 	.word	0x20000900
 8008948:	20000ddc 	.word	0x20000ddc
 800894c:	20000904 	.word	0x20000904

08008950 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008950:	b580      	push	{r7, lr}
 8008952:	b088      	sub	sp, #32
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800895e:	2301      	movs	r3, #1
 8008960:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d06c      	beq.n	8008a42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	60fb      	str	r3, [r7, #12]
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	429a      	cmp	r2, r3
 8008990:	d902      	bls.n	8008998 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	61fb      	str	r3, [r7, #28]
 8008996:	e002      	b.n	800899e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800899c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a2:	69fa      	ldr	r2, [r7, #28]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d04c      	beq.n	8008a42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d147      	bne.n	8008a42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80089b2:	4b26      	ldr	r3, [pc, #152]	@ (8008a4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d10b      	bne.n	80089d4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	60bb      	str	r3, [r7, #8]
}
 80089ce:	bf00      	nop
 80089d0:	bf00      	nop
 80089d2:	e7fd      	b.n	80089d0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	69fa      	ldr	r2, [r7, #28]
 80089de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	db04      	blt.n	80089f2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	6959      	ldr	r1, [r3, #20]
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	4613      	mov	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4a13      	ldr	r2, [pc, #76]	@ (8008a50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a02:	4413      	add	r3, r2
 8008a04:	4299      	cmp	r1, r3
 8008a06:	d11c      	bne.n	8008a42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe f86b 	bl	8006ae8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a16:	4b0f      	ldr	r3, [pc, #60]	@ (8008a54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d903      	bls.n	8008a26 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a22:	4a0c      	ldr	r2, [pc, #48]	@ (8008a54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	4413      	add	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4a07      	ldr	r2, [pc, #28]	@ (8008a50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a34:	441a      	add	r2, r3
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	3304      	adds	r3, #4
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f7fd fff6 	bl	8006a2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a42:	bf00      	nop
 8008a44:	3720      	adds	r7, #32
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20000900 	.word	0x20000900
 8008a50:	20000904 	.word	0x20000904
 8008a54:	20000ddc 	.word	0x20000ddc

08008a58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a5c:	4b07      	ldr	r3, [pc, #28]	@ (8008a7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a64:	4b05      	ldr	r3, [pc, #20]	@ (8008a7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a6a:	3201      	adds	r2, #1
 8008a6c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008a6e:	4b03      	ldr	r3, [pc, #12]	@ (8008a7c <pvTaskIncrementMutexHeldCount+0x24>)
 8008a70:	681b      	ldr	r3, [r3, #0]
	}
 8008a72:	4618      	mov	r0, r3
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	20000900 	.word	0x20000900

08008a80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a8a:	4b21      	ldr	r3, [pc, #132]	@ (8008b10 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a90:	4b20      	ldr	r3, [pc, #128]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3304      	adds	r3, #4
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe f826 	bl	8006ae8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa2:	d10a      	bne.n	8008aba <prvAddCurrentTaskToDelayedList+0x3a>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d007      	beq.n	8008aba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4819      	ldr	r0, [pc, #100]	@ (8008b18 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ab4:	f7fd ffbb 	bl	8006a2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ab8:	e026      	b.n	8008b08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4413      	add	r3, r2
 8008ac0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ac2:	4b14      	ldr	r3, [pc, #80]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d209      	bcs.n	8008ae6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ad2:	4b12      	ldr	r3, [pc, #72]	@ (8008b1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3304      	adds	r3, #4
 8008adc:	4619      	mov	r1, r3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	f7fd ffc9 	bl	8006a76 <vListInsert>
}
 8008ae4:	e010      	b.n	8008b08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4619      	mov	r1, r3
 8008af2:	4610      	mov	r0, r2
 8008af4:	f7fd ffbf 	bl	8006a76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008af8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d202      	bcs.n	8008b08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b02:	4a08      	ldr	r2, [pc, #32]	@ (8008b24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6013      	str	r3, [r2, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	20000dd8 	.word	0x20000dd8
 8008b14:	20000900 	.word	0x20000900
 8008b18:	20000dc0 	.word	0x20000dc0
 8008b1c:	20000d90 	.word	0x20000d90
 8008b20:	20000d8c 	.word	0x20000d8c
 8008b24:	20000df4 	.word	0x20000df4

08008b28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08a      	sub	sp, #40	@ 0x28
 8008b2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b32:	f000 fb13 	bl	800915c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b36:	4b1d      	ldr	r3, [pc, #116]	@ (8008bac <xTimerCreateTimerTask+0x84>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d021      	beq.n	8008b82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b46:	1d3a      	adds	r2, r7, #4
 8008b48:	f107 0108 	add.w	r1, r7, #8
 8008b4c:	f107 030c 	add.w	r3, r7, #12
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fd ff25 	bl	80069a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	9202      	str	r2, [sp, #8]
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	2302      	movs	r3, #2
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	2300      	movs	r3, #0
 8008b66:	460a      	mov	r2, r1
 8008b68:	4911      	ldr	r1, [pc, #68]	@ (8008bb0 <xTimerCreateTimerTask+0x88>)
 8008b6a:	4812      	ldr	r0, [pc, #72]	@ (8008bb4 <xTimerCreateTimerTask+0x8c>)
 8008b6c:	f7fe fe76 	bl	800785c <xTaskCreateStatic>
 8008b70:	4603      	mov	r3, r0
 8008b72:	4a11      	ldr	r2, [pc, #68]	@ (8008bb8 <xTimerCreateTimerTask+0x90>)
 8008b74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b76:	4b10      	ldr	r3, [pc, #64]	@ (8008bb8 <xTimerCreateTimerTask+0x90>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10b      	bne.n	8008ba0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	613b      	str	r3, [r7, #16]
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ba0:	697b      	ldr	r3, [r7, #20]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000e30 	.word	0x20000e30
 8008bb0:	08009ec4 	.word	0x08009ec4
 8008bb4:	08008cf5 	.word	0x08008cf5
 8008bb8:	20000e34 	.word	0x20000e34

08008bbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08a      	sub	sp, #40	@ 0x28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <xTimerGenericCommand+0x30>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	623b      	str	r3, [r7, #32]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bec:	4b19      	ldr	r3, [pc, #100]	@ (8008c54 <xTimerGenericCommand+0x98>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d02a      	beq.n	8008c4a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b05      	cmp	r3, #5
 8008c04:	dc18      	bgt.n	8008c38 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c06:	f7ff fdad 	bl	8008764 <xTaskGetSchedulerState>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d109      	bne.n	8008c24 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c10:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <xTimerGenericCommand+0x98>)
 8008c12:	6818      	ldr	r0, [r3, #0]
 8008c14:	f107 0110 	add.w	r1, r7, #16
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c1c:	f7fe f906 	bl	8006e2c <xQueueGenericSend>
 8008c20:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c22:	e012      	b.n	8008c4a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c24:	4b0b      	ldr	r3, [pc, #44]	@ (8008c54 <xTimerGenericCommand+0x98>)
 8008c26:	6818      	ldr	r0, [r3, #0]
 8008c28:	f107 0110 	add.w	r1, r7, #16
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f7fe f8fc 	bl	8006e2c <xQueueGenericSend>
 8008c34:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c36:	e008      	b.n	8008c4a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c38:	4b06      	ldr	r3, [pc, #24]	@ (8008c54 <xTimerGenericCommand+0x98>)
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	f107 0110 	add.w	r1, r7, #16
 8008c40:	2300      	movs	r3, #0
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	f7fe f9f4 	bl	8007030 <xQueueGenericSendFromISR>
 8008c48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3728      	adds	r7, #40	@ 0x28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	20000e30 	.word	0x20000e30

08008c58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af02      	add	r7, sp, #8
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c62:	4b23      	ldr	r3, [pc, #140]	@ (8008cf0 <prvProcessExpiredTimer+0x98>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fd ff39 	bl	8006ae8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d023      	beq.n	8008ccc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	699a      	ldr	r2, [r3, #24]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	18d1      	adds	r1, r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	6978      	ldr	r0, [r7, #20]
 8008c92:	f000 f8d5 	bl	8008e40 <prvInsertTimerInActiveList>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d020      	beq.n	8008cde <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	6978      	ldr	r0, [r7, #20]
 8008ca8:	f7ff ff88 	bl	8008bbc <xTimerGenericCommand>
 8008cac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d114      	bne.n	8008cde <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	60fb      	str	r3, [r7, #12]
}
 8008cc6:	bf00      	nop
 8008cc8:	bf00      	nop
 8008cca:	e7fd      	b.n	8008cc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cd2:	f023 0301 	bic.w	r3, r3, #1
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	4798      	blx	r3
}
 8008ce6:	bf00      	nop
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000e28 	.word	0x20000e28

08008cf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cfc:	f107 0308 	add.w	r3, r7, #8
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f859 	bl	8008db8 <prvGetNextExpireTime>
 8008d06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f805 	bl	8008d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d12:	f000 f8d7 	bl	8008ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d16:	bf00      	nop
 8008d18:	e7f0      	b.n	8008cfc <prvTimerTask+0x8>
	...

08008d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d26:	f7ff f871 	bl	8007e0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d2a:	f107 0308 	add.w	r3, r7, #8
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f866 	bl	8008e00 <prvSampleTimeNow>
 8008d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d130      	bne.n	8008d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10a      	bne.n	8008d58 <prvProcessTimerOrBlockTask+0x3c>
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d806      	bhi.n	8008d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d4a:	f7ff f8a5 	bl	8007e98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff ff81 	bl	8008c58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d56:	e024      	b.n	8008da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d008      	beq.n	8008d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d5e:	4b13      	ldr	r3, [pc, #76]	@ (8008dac <prvProcessTimerOrBlockTask+0x90>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <prvProcessTimerOrBlockTask+0x50>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e000      	b.n	8008d6e <prvProcessTimerOrBlockTask+0x52>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d70:	4b0f      	ldr	r3, [pc, #60]	@ (8008db0 <prvProcessTimerOrBlockTask+0x94>)
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f7fe fd39 	bl	80077f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d82:	f7ff f889 	bl	8007e98 <xTaskResumeAll>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d8c:	4b09      	ldr	r3, [pc, #36]	@ (8008db4 <prvProcessTimerOrBlockTask+0x98>)
 8008d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	f3bf 8f6f 	isb	sy
}
 8008d9c:	e001      	b.n	8008da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d9e:	f7ff f87b 	bl	8007e98 <xTaskResumeAll>
}
 8008da2:	bf00      	nop
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20000e2c 	.word	0x20000e2c
 8008db0:	20000e30 	.word	0x20000e30
 8008db4:	e000ed04 	.word	0xe000ed04

08008db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8008dfc <prvGetNextExpireTime+0x44>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <prvGetNextExpireTime+0x16>
 8008dca:	2201      	movs	r2, #1
 8008dcc:	e000      	b.n	8008dd0 <prvGetNextExpireTime+0x18>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d105      	bne.n	8008de8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ddc:	4b07      	ldr	r3, [pc, #28]	@ (8008dfc <prvGetNextExpireTime+0x44>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	e001      	b.n	8008dec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008dec:	68fb      	ldr	r3, [r7, #12]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20000e28 	.word	0x20000e28

08008e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e08:	f7ff f8e4 	bl	8007fd4 <xTaskGetTickCount>
 8008e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e3c <prvSampleTimeNow+0x3c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d205      	bcs.n	8008e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e18:	f000 f93a 	bl	8009090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	e002      	b.n	8008e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e2a:	4a04      	ldr	r2, [pc, #16]	@ (8008e3c <prvSampleTimeNow+0x3c>)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e30:	68fb      	ldr	r3, [r7, #12]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20000e38 	.word	0x20000e38

08008e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d812      	bhi.n	8008e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	1ad2      	subs	r2, r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d302      	bcc.n	8008e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	e01b      	b.n	8008eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e7a:	4b10      	ldr	r3, [pc, #64]	@ (8008ebc <prvInsertTimerInActiveList+0x7c>)
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4619      	mov	r1, r3
 8008e84:	4610      	mov	r0, r2
 8008e86:	f7fd fdf6 	bl	8006a76 <vListInsert>
 8008e8a:	e012      	b.n	8008eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d206      	bcs.n	8008ea2 <prvInsertTimerInActiveList+0x62>
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d302      	bcc.n	8008ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	e007      	b.n	8008eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ea2:	4b07      	ldr	r3, [pc, #28]	@ (8008ec0 <prvInsertTimerInActiveList+0x80>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4610      	mov	r0, r2
 8008eae:	f7fd fde2 	bl	8006a76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008eb2:	697b      	ldr	r3, [r7, #20]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20000e2c 	.word	0x20000e2c
 8008ec0:	20000e28 	.word	0x20000e28

08008ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08e      	sub	sp, #56	@ 0x38
 8008ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eca:	e0ce      	b.n	800906a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da19      	bge.n	8008f06 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10b      	bne.n	8008ef6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	61fb      	str	r3, [r7, #28]
}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	e7fd      	b.n	8008ef2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008efc:	6850      	ldr	r0, [r2, #4]
 8008efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f00:	6892      	ldr	r2, [r2, #8]
 8008f02:	4611      	mov	r1, r2
 8008f04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f2c0 80ae 	blt.w	800906a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fd fde2 	bl	8006ae8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f24:	463b      	mov	r3, r7
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff ff6a 	bl	8008e00 <prvSampleTimeNow>
 8008f2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b09      	cmp	r3, #9
 8008f32:	f200 8097 	bhi.w	8009064 <prvProcessReceivedCommands+0x1a0>
 8008f36:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <prvProcessReceivedCommands+0x78>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f65 	.word	0x08008f65
 8008f48:	08008fdb 	.word	0x08008fdb
 8008f4c:	08008fef 	.word	0x08008fef
 8008f50:	0800903b 	.word	0x0800903b
 8008f54:	08008f65 	.word	0x08008f65
 8008f58:	08008f65 	.word	0x08008f65
 8008f5c:	08008fdb 	.word	0x08008fdb
 8008f60:	08008fef 	.word	0x08008fef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	18d1      	adds	r1, r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f84:	f7ff ff5c 	bl	8008e40 <prvInsertTimerInActiveList>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d06c      	beq.n	8009068 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d061      	beq.n	8009068 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	441a      	add	r2, r3
 8008fac:	2300      	movs	r3, #0
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fb6:	f7ff fe01 	bl	8008bbc <xTimerGenericCommand>
 8008fba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d152      	bne.n	8009068 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	61bb      	str	r3, [r7, #24]
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	e7fd      	b.n	8008fd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fe0:	f023 0301 	bic.w	r3, r3, #1
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008fec:	e03d      	b.n	800906a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ff4:	f043 0301 	orr.w	r3, r3, #1
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10b      	bne.n	8009026 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	617b      	str	r3, [r7, #20]
}
 8009020:	bf00      	nop
 8009022:	bf00      	nop
 8009024:	e7fd      	b.n	8009022 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	18d1      	adds	r1, r2, r3
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009034:	f7ff ff04 	bl	8008e40 <prvInsertTimerInActiveList>
					break;
 8009038:	e017      	b.n	800906a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800903a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d103      	bne.n	8009050 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800904a:	f000 fcc1 	bl	80099d0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800904e:	e00c      	b.n	800906a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009056:	f023 0301 	bic.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009062:	e002      	b.n	800906a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009064:	bf00      	nop
 8009066:	e000      	b.n	800906a <prvProcessReceivedCommands+0x1a6>
					break;
 8009068:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800906a:	4b08      	ldr	r3, [pc, #32]	@ (800908c <prvProcessReceivedCommands+0x1c8>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	1d39      	adds	r1, r7, #4
 8009070:	2200      	movs	r2, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe f87a 	bl	800716c <xQueueReceive>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	f47f af26 	bne.w	8008ecc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	3730      	adds	r7, #48	@ 0x30
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20000e30 	.word	0x20000e30

08009090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009096:	e049      	b.n	800912c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009098:	4b2e      	ldr	r3, [pc, #184]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3304      	adds	r3, #4
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fd fd19 	bl	8006ae8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02f      	beq.n	800912c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4413      	add	r3, r2
 80090d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d90e      	bls.n	80090fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f7fd fcbe 	bl	8006a76 <vListInsert>
 80090fa:	e017      	b.n	800912c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090fc:	2300      	movs	r3, #0
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	2300      	movs	r3, #0
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	2100      	movs	r1, #0
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f7ff fd58 	bl	8008bbc <xTimerGenericCommand>
 800910c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10b      	bne.n	800912c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	603b      	str	r3, [r7, #0]
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800912c:	4b09      	ldr	r3, [pc, #36]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1b0      	bne.n	8009098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009136:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800913c:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <prvSwitchTimerLists+0xc8>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a04      	ldr	r2, [pc, #16]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 8009142:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009144:	4a04      	ldr	r2, [pc, #16]	@ (8009158 <prvSwitchTimerLists+0xc8>)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	6013      	str	r3, [r2, #0]
}
 800914a:	bf00      	nop
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000e28 	.word	0x20000e28
 8009158:	20000e2c 	.word	0x20000e2c

0800915c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009162:	f000 f969 	bl	8009438 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009166:	4b15      	ldr	r3, [pc, #84]	@ (80091bc <prvCheckForValidListAndQueue+0x60>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d120      	bne.n	80091b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800916e:	4814      	ldr	r0, [pc, #80]	@ (80091c0 <prvCheckForValidListAndQueue+0x64>)
 8009170:	f7fd fc30 	bl	80069d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009174:	4813      	ldr	r0, [pc, #76]	@ (80091c4 <prvCheckForValidListAndQueue+0x68>)
 8009176:	f7fd fc2d 	bl	80069d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800917a:	4b13      	ldr	r3, [pc, #76]	@ (80091c8 <prvCheckForValidListAndQueue+0x6c>)
 800917c:	4a10      	ldr	r2, [pc, #64]	@ (80091c0 <prvCheckForValidListAndQueue+0x64>)
 800917e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009180:	4b12      	ldr	r3, [pc, #72]	@ (80091cc <prvCheckForValidListAndQueue+0x70>)
 8009182:	4a10      	ldr	r2, [pc, #64]	@ (80091c4 <prvCheckForValidListAndQueue+0x68>)
 8009184:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009186:	2300      	movs	r3, #0
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	4b11      	ldr	r3, [pc, #68]	@ (80091d0 <prvCheckForValidListAndQueue+0x74>)
 800918c:	4a11      	ldr	r2, [pc, #68]	@ (80091d4 <prvCheckForValidListAndQueue+0x78>)
 800918e:	2110      	movs	r1, #16
 8009190:	200a      	movs	r0, #10
 8009192:	f7fd fd3d 	bl	8006c10 <xQueueGenericCreateStatic>
 8009196:	4603      	mov	r3, r0
 8009198:	4a08      	ldr	r2, [pc, #32]	@ (80091bc <prvCheckForValidListAndQueue+0x60>)
 800919a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800919c:	4b07      	ldr	r3, [pc, #28]	@ (80091bc <prvCheckForValidListAndQueue+0x60>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091a4:	4b05      	ldr	r3, [pc, #20]	@ (80091bc <prvCheckForValidListAndQueue+0x60>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	490b      	ldr	r1, [pc, #44]	@ (80091d8 <prvCheckForValidListAndQueue+0x7c>)
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe faf8 	bl	80077a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091b0:	f000 f974 	bl	800949c <vPortExitCritical>
}
 80091b4:	bf00      	nop
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000e30 	.word	0x20000e30
 80091c0:	20000e00 	.word	0x20000e00
 80091c4:	20000e14 	.word	0x20000e14
 80091c8:	20000e28 	.word	0x20000e28
 80091cc:	20000e2c 	.word	0x20000e2c
 80091d0:	20000edc 	.word	0x20000edc
 80091d4:	20000e3c 	.word	0x20000e3c
 80091d8:	08009ecc 	.word	0x08009ecc

080091dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3b04      	subs	r3, #4
 80091ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f023 0201 	bic.w	r2, r3, #1
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3b04      	subs	r3, #4
 800920a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800920c:	4a0c      	ldr	r2, [pc, #48]	@ (8009240 <pxPortInitialiseStack+0x64>)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3b14      	subs	r3, #20
 8009216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3b04      	subs	r3, #4
 8009222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f06f 0202 	mvn.w	r2, #2
 800922a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3b20      	subs	r3, #32
 8009230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009232:	68fb      	ldr	r3, [r7, #12]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	08009245 	.word	0x08009245

08009244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800924e:	4b13      	ldr	r3, [pc, #76]	@ (800929c <prvTaskExitError+0x58>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009256:	d00b      	beq.n	8009270 <prvTaskExitError+0x2c>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	60fb      	str	r3, [r7, #12]
}
 800926a:	bf00      	nop
 800926c:	bf00      	nop
 800926e:	e7fd      	b.n	800926c <prvTaskExitError+0x28>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60bb      	str	r3, [r7, #8]
}
 8009282:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009284:	bf00      	nop
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0fc      	beq.n	8009286 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	20000014 	.word	0x20000014

080092a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092a0:	4b07      	ldr	r3, [pc, #28]	@ (80092c0 <pxCurrentTCBConst2>)
 80092a2:	6819      	ldr	r1, [r3, #0]
 80092a4:	6808      	ldr	r0, [r1, #0]
 80092a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092aa:	f380 8809 	msr	PSP, r0
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f04f 0000 	mov.w	r0, #0
 80092b6:	f380 8811 	msr	BASEPRI, r0
 80092ba:	4770      	bx	lr
 80092bc:	f3af 8000 	nop.w

080092c0 <pxCurrentTCBConst2>:
 80092c0:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop

080092c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092c8:	4808      	ldr	r0, [pc, #32]	@ (80092ec <prvPortStartFirstTask+0x24>)
 80092ca:	6800      	ldr	r0, [r0, #0]
 80092cc:	6800      	ldr	r0, [r0, #0]
 80092ce:	f380 8808 	msr	MSP, r0
 80092d2:	f04f 0000 	mov.w	r0, #0
 80092d6:	f380 8814 	msr	CONTROL, r0
 80092da:	b662      	cpsie	i
 80092dc:	b661      	cpsie	f
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	df00      	svc	0
 80092e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092ea:	bf00      	nop
 80092ec:	e000ed08 	.word	0xe000ed08

080092f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092f6:	4b47      	ldr	r3, [pc, #284]	@ (8009414 <xPortStartScheduler+0x124>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a47      	ldr	r2, [pc, #284]	@ (8009418 <xPortStartScheduler+0x128>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d10b      	bne.n	8009318 <xPortStartScheduler+0x28>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	613b      	str	r3, [r7, #16]
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009318:	4b3e      	ldr	r3, [pc, #248]	@ (8009414 <xPortStartScheduler+0x124>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a3f      	ldr	r2, [pc, #252]	@ (800941c <xPortStartScheduler+0x12c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d10b      	bne.n	800933a <xPortStartScheduler+0x4a>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	60fb      	str	r3, [r7, #12]
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	e7fd      	b.n	8009336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800933a:	4b39      	ldr	r3, [pc, #228]	@ (8009420 <xPortStartScheduler+0x130>)
 800933c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	22ff      	movs	r2, #255	@ 0xff
 800934a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800935c:	b2da      	uxtb	r2, r3
 800935e:	4b31      	ldr	r3, [pc, #196]	@ (8009424 <xPortStartScheduler+0x134>)
 8009360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009362:	4b31      	ldr	r3, [pc, #196]	@ (8009428 <xPortStartScheduler+0x138>)
 8009364:	2207      	movs	r2, #7
 8009366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009368:	e009      	b.n	800937e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800936a:	4b2f      	ldr	r3, [pc, #188]	@ (8009428 <xPortStartScheduler+0x138>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3b01      	subs	r3, #1
 8009370:	4a2d      	ldr	r2, [pc, #180]	@ (8009428 <xPortStartScheduler+0x138>)
 8009372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	b2db      	uxtb	r3, r3
 800937c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009386:	2b80      	cmp	r3, #128	@ 0x80
 8009388:	d0ef      	beq.n	800936a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800938a:	4b27      	ldr	r3, [pc, #156]	@ (8009428 <xPortStartScheduler+0x138>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f1c3 0307 	rsb	r3, r3, #7
 8009392:	2b04      	cmp	r3, #4
 8009394:	d00b      	beq.n	80093ae <xPortStartScheduler+0xbe>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60bb      	str	r3, [r7, #8]
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	e7fd      	b.n	80093aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009428 <xPortStartScheduler+0x138>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009428 <xPortStartScheduler+0x138>)
 80093b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009428 <xPortStartScheduler+0x138>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093c0:	4a19      	ldr	r2, [pc, #100]	@ (8009428 <xPortStartScheduler+0x138>)
 80093c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093cc:	4b17      	ldr	r3, [pc, #92]	@ (800942c <xPortStartScheduler+0x13c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a16      	ldr	r2, [pc, #88]	@ (800942c <xPortStartScheduler+0x13c>)
 80093d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093d8:	4b14      	ldr	r3, [pc, #80]	@ (800942c <xPortStartScheduler+0x13c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a13      	ldr	r2, [pc, #76]	@ (800942c <xPortStartScheduler+0x13c>)
 80093de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80093e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093e4:	f000 f99e 	bl	8009724 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093e8:	4b11      	ldr	r3, [pc, #68]	@ (8009430 <xPortStartScheduler+0x140>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093ee:	f000 f9d5 	bl	800979c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093f2:	4b10      	ldr	r3, [pc, #64]	@ (8009434 <xPortStartScheduler+0x144>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009434 <xPortStartScheduler+0x144>)
 80093f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80093fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093fe:	f7ff ff63 	bl	80092c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009402:	f7fe fed9 	bl	80081b8 <vTaskSwitchContext>
	prvTaskExitError();
 8009406:	f7ff ff1d 	bl	8009244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	e000ed00 	.word	0xe000ed00
 8009418:	410fc271 	.word	0x410fc271
 800941c:	410fc270 	.word	0x410fc270
 8009420:	e000e400 	.word	0xe000e400
 8009424:	20000f38 	.word	0x20000f38
 8009428:	20000f3c 	.word	0x20000f3c
 800942c:	e000ed20 	.word	0xe000ed20
 8009430:	20000014 	.word	0x20000014
 8009434:	e000ef34 	.word	0xe000ef34

08009438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
}
 8009450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009452:	4b10      	ldr	r3, [pc, #64]	@ (8009494 <vPortEnterCritical+0x5c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3301      	adds	r3, #1
 8009458:	4a0e      	ldr	r2, [pc, #56]	@ (8009494 <vPortEnterCritical+0x5c>)
 800945a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800945c:	4b0d      	ldr	r3, [pc, #52]	@ (8009494 <vPortEnterCritical+0x5c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d110      	bne.n	8009486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009464:	4b0c      	ldr	r3, [pc, #48]	@ (8009498 <vPortEnterCritical+0x60>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00b      	beq.n	8009486 <vPortEnterCritical+0x4e>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	603b      	str	r3, [r7, #0]
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <vPortEnterCritical+0x4a>
	}
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	20000014 	.word	0x20000014
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094a2:	4b12      	ldr	r3, [pc, #72]	@ (80094ec <vPortExitCritical+0x50>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10b      	bne.n	80094c2 <vPortExitCritical+0x26>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	607b      	str	r3, [r7, #4]
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	e7fd      	b.n	80094be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094c2:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <vPortExitCritical+0x50>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4a08      	ldr	r2, [pc, #32]	@ (80094ec <vPortExitCritical+0x50>)
 80094ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094cc:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <vPortExitCritical+0x50>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <vPortExitCritical+0x44>
 80094d4:	2300      	movs	r3, #0
 80094d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f383 8811 	msr	BASEPRI, r3
}
 80094de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	20000014 	.word	0x20000014

080094f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094f0:	f3ef 8009 	mrs	r0, PSP
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	4b15      	ldr	r3, [pc, #84]	@ (8009550 <pxCurrentTCBConst>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	f01e 0f10 	tst.w	lr, #16
 8009500:	bf08      	it	eq
 8009502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950a:	6010      	str	r0, [r2, #0]
 800950c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009514:	f380 8811 	msr	BASEPRI, r0
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f7fe fe4a 	bl	80081b8 <vTaskSwitchContext>
 8009524:	f04f 0000 	mov.w	r0, #0
 8009528:	f380 8811 	msr	BASEPRI, r0
 800952c:	bc09      	pop	{r0, r3}
 800952e:	6819      	ldr	r1, [r3, #0]
 8009530:	6808      	ldr	r0, [r1, #0]
 8009532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009536:	f01e 0f10 	tst.w	lr, #16
 800953a:	bf08      	it	eq
 800953c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009540:	f380 8809 	msr	PSP, r0
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	f3af 8000 	nop.w

08009550 <pxCurrentTCBConst>:
 8009550:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop

08009558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	607b      	str	r3, [r7, #4]
}
 8009570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009572:	f7fe fd67 	bl	8008044 <xTaskIncrementTick>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d003      	beq.n	8009584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800957c:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <xPortSysTickHandler+0x40>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	2300      	movs	r3, #0
 8009586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f383 8811 	msr	BASEPRI, r3
}
 800958e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800959c:	b580      	push	{r7, lr}
 800959e:	b088      	sub	sp, #32
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80095a4:	4b59      	ldr	r3, [pc, #356]	@ (800970c <vPortSuppressTicksAndSleep+0x170>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d902      	bls.n	80095b4 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80095ae:	4b57      	ldr	r3, [pc, #348]	@ (800970c <vPortSuppressTicksAndSleep+0x170>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 80095b4:	4b56      	ldr	r3, [pc, #344]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a55      	ldr	r2, [pc, #340]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 80095ba:	f023 0301 	bic.w	r3, r3, #1
 80095be:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80095c0:	4b54      	ldr	r3, [pc, #336]	@ (8009714 <vPortSuppressTicksAndSleep+0x178>)
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	3b01      	subs	r3, #1
 80095c8:	4953      	ldr	r1, [pc, #332]	@ (8009718 <vPortSuppressTicksAndSleep+0x17c>)
 80095ca:	6809      	ldr	r1, [r1, #0]
 80095cc:	fb01 f303 	mul.w	r3, r1, r3
 80095d0:	4413      	add	r3, r2
 80095d2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 80095d4:	4b51      	ldr	r3, [pc, #324]	@ (800971c <vPortSuppressTicksAndSleep+0x180>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	69fa      	ldr	r2, [r7, #28]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d904      	bls.n	80095e8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 80095de:	4b4f      	ldr	r3, [pc, #316]	@ (800971c <vPortSuppressTicksAndSleep+0x180>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69fa      	ldr	r2, [r7, #28]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 80095e8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 80095ea:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 80095ee:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80095f2:	f7fe ffc5 	bl	8008580 <eTaskConfirmSleepModeStatus>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d110      	bne.n	800961e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80095fc:	4b45      	ldr	r3, [pc, #276]	@ (8009714 <vPortSuppressTicksAndSleep+0x178>)
 80095fe:	4a48      	ldr	r2, [pc, #288]	@ (8009720 <vPortSuppressTicksAndSleep+0x184>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8009604:	4b42      	ldr	r3, [pc, #264]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a41      	ldr	r2, [pc, #260]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8009610:	4b41      	ldr	r3, [pc, #260]	@ (8009718 <vPortSuppressTicksAndSleep+0x17c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a42      	ldr	r2, [pc, #264]	@ (8009720 <vPortSuppressTicksAndSleep+0x184>)
 8009616:	3b01      	subs	r3, #1
 8009618:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800961a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800961c:	e071      	b.n	8009702 <vPortSuppressTicksAndSleep+0x166>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800961e:	4a40      	ldr	r2, [pc, #256]	@ (8009720 <vPortSuppressTicksAndSleep+0x184>)
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009624:	4b3b      	ldr	r3, [pc, #236]	@ (8009714 <vPortSuppressTicksAndSleep+0x178>)
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800962a:	4b39      	ldr	r3, [pc, #228]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a38      	ldr	r2, [pc, #224]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	613b      	str	r3, [r7, #16]
			if( xModifiableIdleTime > 0 )
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d004      	beq.n	800964a <vPortSuppressTicksAndSleep+0xae>
				__asm volatile( "dsb" ::: "memory" );
 8009640:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8009644:	bf30      	wfi
				__asm volatile( "isb" );
 8009646:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsie i" ::: "memory" );
 800964a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800964c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8009650:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8009654:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8009656:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800965a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800965e:	4b2c      	ldr	r3, [pc, #176]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 8009660:	2206      	movs	r2, #6
 8009662:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8009664:	4b2a      	ldr	r3, [pc, #168]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01d      	beq.n	80096ac <vPortSuppressTicksAndSleep+0x110>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8009670:	4b29      	ldr	r3, [pc, #164]	@ (8009718 <vPortSuppressTicksAndSleep+0x17c>)
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	4b27      	ldr	r3, [pc, #156]	@ (8009714 <vPortSuppressTicksAndSleep+0x178>)
 8009676:	6819      	ldr	r1, [r3, #0]
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	1acb      	subs	r3, r1, r3
 800967c:	4413      	add	r3, r2
 800967e:	3b01      	subs	r3, #1
 8009680:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8009682:	4b26      	ldr	r3, [pc, #152]	@ (800971c <vPortSuppressTicksAndSleep+0x180>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	429a      	cmp	r2, r3
 800968a:	d304      	bcc.n	8009696 <vPortSuppressTicksAndSleep+0xfa>
 800968c:	4b22      	ldr	r3, [pc, #136]	@ (8009718 <vPortSuppressTicksAndSleep+0x17c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	697a      	ldr	r2, [r7, #20]
 8009692:	429a      	cmp	r2, r3
 8009694:	d903      	bls.n	800969e <vPortSuppressTicksAndSleep+0x102>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8009696:	4b20      	ldr	r3, [pc, #128]	@ (8009718 <vPortSuppressTicksAndSleep+0x17c>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3b01      	subs	r3, #1
 800969c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800969e:	4a20      	ldr	r2, [pc, #128]	@ (8009720 <vPortSuppressTicksAndSleep+0x184>)
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	3b01      	subs	r3, #1
 80096a8:	61bb      	str	r3, [r7, #24]
 80096aa:	e018      	b.n	80096de <vPortSuppressTicksAndSleep+0x142>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80096ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009718 <vPortSuppressTicksAndSleep+0x17c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	fb03 f202 	mul.w	r2, r3, r2
 80096b6:	4b17      	ldr	r3, [pc, #92]	@ (8009714 <vPortSuppressTicksAndSleep+0x178>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80096be:	4b16      	ldr	r3, [pc, #88]	@ (8009718 <vPortSuppressTicksAndSleep+0x17c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c8:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	3301      	adds	r3, #1
 80096ce:	4a12      	ldr	r2, [pc, #72]	@ (8009718 <vPortSuppressTicksAndSleep+0x17c>)
 80096d0:	6812      	ldr	r2, [r2, #0]
 80096d2:	fb03 f202 	mul.w	r2, r3, r2
 80096d6:	4912      	ldr	r1, [pc, #72]	@ (8009720 <vPortSuppressTicksAndSleep+0x184>)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096de:	4b0d      	ldr	r3, [pc, #52]	@ (8009714 <vPortSuppressTicksAndSleep+0x178>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80096e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a09      	ldr	r2, [pc, #36]	@ (8009710 <vPortSuppressTicksAndSleep+0x174>)
 80096ea:	f043 0301 	orr.w	r3, r3, #1
 80096ee:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 80096f0:	69b8      	ldr	r0, [r7, #24]
 80096f2:	f7fe fc7f 	bl	8007ff4 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80096f6:	4b08      	ldr	r3, [pc, #32]	@ (8009718 <vPortSuppressTicksAndSleep+0x17c>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a09      	ldr	r2, [pc, #36]	@ (8009720 <vPortSuppressTicksAndSleep+0x184>)
 80096fc:	3b01      	subs	r3, #1
 80096fe:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8009700:	b662      	cpsie	i
	}
 8009702:	bf00      	nop
 8009704:	3720      	adds	r7, #32
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000f30 	.word	0x20000f30
 8009710:	e000e010 	.word	0xe000e010
 8009714:	e000e018 	.word	0xe000e018
 8009718:	20000f2c 	.word	0x20000f2c
 800971c:	20000f34 	.word	0x20000f34
 8009720:	e000e014 	.word	0xe000e014

08009724 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009724:	b480      	push	{r7}
 8009726:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8009728:	4b14      	ldr	r3, [pc, #80]	@ (800977c <vPortSetupTimerInterrupt+0x58>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a14      	ldr	r2, [pc, #80]	@ (8009780 <vPortSetupTimerInterrupt+0x5c>)
 800972e:	fba2 2303 	umull	r2, r3, r2, r3
 8009732:	099b      	lsrs	r3, r3, #6
 8009734:	4a13      	ldr	r2, [pc, #76]	@ (8009784 <vPortSetupTimerInterrupt+0x60>)
 8009736:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8009738:	4b12      	ldr	r3, [pc, #72]	@ (8009784 <vPortSetupTimerInterrupt+0x60>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8009740:	fbb2 f3f3 	udiv	r3, r2, r3
 8009744:	4a10      	ldr	r2, [pc, #64]	@ (8009788 <vPortSetupTimerInterrupt+0x64>)
 8009746:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8009748:	4b10      	ldr	r3, [pc, #64]	@ (800978c <vPortSetupTimerInterrupt+0x68>)
 800974a:	222d      	movs	r2, #45	@ 0x2d
 800974c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800974e:	4b10      	ldr	r3, [pc, #64]	@ (8009790 <vPortSetupTimerInterrupt+0x6c>)
 8009750:	2200      	movs	r2, #0
 8009752:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009754:	4b0f      	ldr	r3, [pc, #60]	@ (8009794 <vPortSetupTimerInterrupt+0x70>)
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800975a:	4b08      	ldr	r3, [pc, #32]	@ (800977c <vPortSetupTimerInterrupt+0x58>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a08      	ldr	r2, [pc, #32]	@ (8009780 <vPortSetupTimerInterrupt+0x5c>)
 8009760:	fba2 2303 	umull	r2, r3, r2, r3
 8009764:	099b      	lsrs	r3, r3, #6
 8009766:	4a0c      	ldr	r2, [pc, #48]	@ (8009798 <vPortSetupTimerInterrupt+0x74>)
 8009768:	3b01      	subs	r3, #1
 800976a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800976c:	4b08      	ldr	r3, [pc, #32]	@ (8009790 <vPortSetupTimerInterrupt+0x6c>)
 800976e:	2207      	movs	r2, #7
 8009770:	601a      	str	r2, [r3, #0]
}
 8009772:	bf00      	nop
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	20000000 	.word	0x20000000
 8009780:	10624dd3 	.word	0x10624dd3
 8009784:	20000f2c 	.word	0x20000f2c
 8009788:	20000f30 	.word	0x20000f30
 800978c:	20000f34 	.word	0x20000f34
 8009790:	e000e010 	.word	0xe000e010
 8009794:	e000e018 	.word	0xe000e018
 8009798:	e000e014 	.word	0xe000e014

0800979c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800979c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80097ac <vPortEnableVFP+0x10>
 80097a0:	6801      	ldr	r1, [r0, #0]
 80097a2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80097a6:	6001      	str	r1, [r0, #0]
 80097a8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097aa:	bf00      	nop
 80097ac:	e000ed88 	.word	0xe000ed88

080097b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097b6:	f3ef 8305 	mrs	r3, IPSR
 80097ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b0f      	cmp	r3, #15
 80097c0:	d915      	bls.n	80097ee <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097c2:	4a18      	ldr	r2, [pc, #96]	@ (8009824 <vPortValidateInterruptPriority+0x74>)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4413      	add	r3, r2
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097cc:	4b16      	ldr	r3, [pc, #88]	@ (8009828 <vPortValidateInterruptPriority+0x78>)
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	7afa      	ldrb	r2, [r7, #11]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d20b      	bcs.n	80097ee <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	607b      	str	r3, [r7, #4]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097ee:	4b0f      	ldr	r3, [pc, #60]	@ (800982c <vPortValidateInterruptPriority+0x7c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80097f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009830 <vPortValidateInterruptPriority+0x80>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d90b      	bls.n	8009816 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	603b      	str	r3, [r7, #0]
}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	e7fd      	b.n	8009812 <vPortValidateInterruptPriority+0x62>
	}
 8009816:	bf00      	nop
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	e000e3f0 	.word	0xe000e3f0
 8009828:	20000f38 	.word	0x20000f38
 800982c:	e000ed0c 	.word	0xe000ed0c
 8009830:	20000f3c 	.word	0x20000f3c

08009834 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b08a      	sub	sp, #40	@ 0x28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800983c:	2300      	movs	r3, #0
 800983e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009840:	f7fe fae4 	bl	8007e0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009844:	4b5c      	ldr	r3, [pc, #368]	@ (80099b8 <pvPortMalloc+0x184>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800984c:	f000 f924 	bl	8009a98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009850:	4b5a      	ldr	r3, [pc, #360]	@ (80099bc <pvPortMalloc+0x188>)
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4013      	ands	r3, r2
 8009858:	2b00      	cmp	r3, #0
 800985a:	f040 8095 	bne.w	8009988 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d01e      	beq.n	80098a2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009864:	2208      	movs	r2, #8
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4413      	add	r3, r2
 800986a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b00      	cmp	r3, #0
 8009874:	d015      	beq.n	80098a2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f023 0307 	bic.w	r3, r3, #7
 800987c:	3308      	adds	r3, #8
 800987e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <pvPortMalloc+0x6e>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	617b      	str	r3, [r7, #20]
}
 800989c:	bf00      	nop
 800989e:	bf00      	nop
 80098a0:	e7fd      	b.n	800989e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d06f      	beq.n	8009988 <pvPortMalloc+0x154>
 80098a8:	4b45      	ldr	r3, [pc, #276]	@ (80099c0 <pvPortMalloc+0x18c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d86a      	bhi.n	8009988 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098b2:	4b44      	ldr	r3, [pc, #272]	@ (80099c4 <pvPortMalloc+0x190>)
 80098b4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098b6:	4b43      	ldr	r3, [pc, #268]	@ (80099c4 <pvPortMalloc+0x190>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098bc:	e004      	b.n	80098c8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80098be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d903      	bls.n	80098da <pvPortMalloc+0xa6>
 80098d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d1f1      	bne.n	80098be <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098da:	4b37      	ldr	r3, [pc, #220]	@ (80099b8 <pvPortMalloc+0x184>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d051      	beq.n	8009988 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2208      	movs	r2, #8
 80098ea:	4413      	add	r3, r2
 80098ec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	1ad2      	subs	r2, r2, r3
 80098fe:	2308      	movs	r3, #8
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	429a      	cmp	r2, r3
 8009904:	d920      	bls.n	8009948 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4413      	add	r3, r2
 800990c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	f003 0307 	and.w	r3, r3, #7
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <pvPortMalloc+0xfc>
	__asm volatile
 8009918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	613b      	str	r3, [r7, #16]
}
 800992a:	bf00      	nop
 800992c:	bf00      	nop
 800992e:	e7fd      	b.n	800992c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	1ad2      	subs	r2, r2, r3
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800993c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009942:	69b8      	ldr	r0, [r7, #24]
 8009944:	f000 f90a 	bl	8009b5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009948:	4b1d      	ldr	r3, [pc, #116]	@ (80099c0 <pvPortMalloc+0x18c>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	4a1b      	ldr	r2, [pc, #108]	@ (80099c0 <pvPortMalloc+0x18c>)
 8009954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009956:	4b1a      	ldr	r3, [pc, #104]	@ (80099c0 <pvPortMalloc+0x18c>)
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	4b1b      	ldr	r3, [pc, #108]	@ (80099c8 <pvPortMalloc+0x194>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	429a      	cmp	r2, r3
 8009960:	d203      	bcs.n	800996a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009962:	4b17      	ldr	r3, [pc, #92]	@ (80099c0 <pvPortMalloc+0x18c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a18      	ldr	r2, [pc, #96]	@ (80099c8 <pvPortMalloc+0x194>)
 8009968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	4b13      	ldr	r3, [pc, #76]	@ (80099bc <pvPortMalloc+0x188>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	431a      	orrs	r2, r3
 8009974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	2200      	movs	r2, #0
 800997c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800997e:	4b13      	ldr	r3, [pc, #76]	@ (80099cc <pvPortMalloc+0x198>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3301      	adds	r3, #1
 8009984:	4a11      	ldr	r2, [pc, #68]	@ (80099cc <pvPortMalloc+0x198>)
 8009986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009988:	f7fe fa86 	bl	8007e98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00b      	beq.n	80099ae <pvPortMalloc+0x17a>
	__asm volatile
 8009996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	60fb      	str	r3, [r7, #12]
}
 80099a8:	bf00      	nop
 80099aa:	bf00      	nop
 80099ac:	e7fd      	b.n	80099aa <pvPortMalloc+0x176>
	return pvReturn;
 80099ae:	69fb      	ldr	r3, [r7, #28]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3728      	adds	r7, #40	@ 0x28
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	20001b00 	.word	0x20001b00
 80099bc:	20001b14 	.word	0x20001b14
 80099c0:	20001b04 	.word	0x20001b04
 80099c4:	20001af8 	.word	0x20001af8
 80099c8:	20001b08 	.word	0x20001b08
 80099cc:	20001b0c 	.word	0x20001b0c

080099d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b086      	sub	sp, #24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d04f      	beq.n	8009a82 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099e2:	2308      	movs	r3, #8
 80099e4:	425b      	negs	r3, r3
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	4413      	add	r3, r2
 80099ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	4b25      	ldr	r3, [pc, #148]	@ (8009a8c <vPortFree+0xbc>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4013      	ands	r3, r2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10b      	bne.n	8009a16 <vPortFree+0x46>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	60fb      	str	r3, [r7, #12]
}
 8009a10:	bf00      	nop
 8009a12:	bf00      	nop
 8009a14:	e7fd      	b.n	8009a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00b      	beq.n	8009a36 <vPortFree+0x66>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	60bb      	str	r3, [r7, #8]
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	e7fd      	b.n	8009a32 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	4b14      	ldr	r3, [pc, #80]	@ (8009a8c <vPortFree+0xbc>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4013      	ands	r3, r2
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d01e      	beq.n	8009a82 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d11a      	bne.n	8009a82 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	4b0e      	ldr	r3, [pc, #56]	@ (8009a8c <vPortFree+0xbc>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	43db      	mvns	r3, r3
 8009a56:	401a      	ands	r2, r3
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a5c:	f7fe f9d6 	bl	8007e0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	4b0a      	ldr	r3, [pc, #40]	@ (8009a90 <vPortFree+0xc0>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4413      	add	r3, r2
 8009a6a:	4a09      	ldr	r2, [pc, #36]	@ (8009a90 <vPortFree+0xc0>)
 8009a6c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a6e:	6938      	ldr	r0, [r7, #16]
 8009a70:	f000 f874 	bl	8009b5c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009a74:	4b07      	ldr	r3, [pc, #28]	@ (8009a94 <vPortFree+0xc4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	4a06      	ldr	r2, [pc, #24]	@ (8009a94 <vPortFree+0xc4>)
 8009a7c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009a7e:	f7fe fa0b 	bl	8007e98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a82:	bf00      	nop
 8009a84:	3718      	adds	r7, #24
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20001b14 	.word	0x20001b14
 8009a90:	20001b04 	.word	0x20001b04
 8009a94:	20001b10 	.word	0x20001b10

08009a98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a9e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009aa2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009aa4:	4b27      	ldr	r3, [pc, #156]	@ (8009b44 <prvHeapInit+0xac>)
 8009aa6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00c      	beq.n	8009acc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3307      	adds	r3, #7
 8009ab6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0307 	bic.w	r3, r3, #7
 8009abe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8009b44 <prvHeapInit+0xac>)
 8009ac8:	4413      	add	r3, r2
 8009aca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b48 <prvHeapInit+0xb0>)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8009b48 <prvHeapInit+0xb0>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	1a9b      	subs	r3, r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f023 0307 	bic.w	r3, r3, #7
 8009af2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	4a15      	ldr	r2, [pc, #84]	@ (8009b4c <prvHeapInit+0xb4>)
 8009af8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009afa:	4b14      	ldr	r3, [pc, #80]	@ (8009b4c <prvHeapInit+0xb4>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2200      	movs	r2, #0
 8009b00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b02:	4b12      	ldr	r3, [pc, #72]	@ (8009b4c <prvHeapInit+0xb4>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2200      	movs	r2, #0
 8009b08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	1ad2      	subs	r2, r2, r3
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b18:	4b0c      	ldr	r3, [pc, #48]	@ (8009b4c <prvHeapInit+0xb4>)
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	4a0a      	ldr	r2, [pc, #40]	@ (8009b50 <prvHeapInit+0xb8>)
 8009b26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	4a09      	ldr	r2, [pc, #36]	@ (8009b54 <prvHeapInit+0xbc>)
 8009b2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b30:	4b09      	ldr	r3, [pc, #36]	@ (8009b58 <prvHeapInit+0xc0>)
 8009b32:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009b36:	601a      	str	r2, [r3, #0]
}
 8009b38:	bf00      	nop
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	20000f40 	.word	0x20000f40
 8009b48:	20001af8 	.word	0x20001af8
 8009b4c:	20001b00 	.word	0x20001b00
 8009b50:	20001b08 	.word	0x20001b08
 8009b54:	20001b04 	.word	0x20001b04
 8009b58:	20001b14 	.word	0x20001b14

08009b5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b64:	4b28      	ldr	r3, [pc, #160]	@ (8009c08 <prvInsertBlockIntoFreeList+0xac>)
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	e002      	b.n	8009b70 <prvInsertBlockIntoFreeList+0x14>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d8f7      	bhi.n	8009b6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	4413      	add	r3, r2
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d108      	bne.n	8009b9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	685a      	ldr	r2, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	441a      	add	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	441a      	add	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d118      	bne.n	8009be4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	4b15      	ldr	r3, [pc, #84]	@ (8009c0c <prvInsertBlockIntoFreeList+0xb0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d00d      	beq.n	8009bda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	441a      	add	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	601a      	str	r2, [r3, #0]
 8009bd8:	e008      	b.n	8009bec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009bda:	4b0c      	ldr	r3, [pc, #48]	@ (8009c0c <prvInsertBlockIntoFreeList+0xb0>)
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	e003      	b.n	8009bec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d002      	beq.n	8009bfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bfa:	bf00      	nop
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	20001af8 	.word	0x20001af8
 8009c0c:	20001b00 	.word	0x20001b00

08009c10 <memset>:
 8009c10:	4402      	add	r2, r0
 8009c12:	4603      	mov	r3, r0
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d100      	bne.n	8009c1a <memset+0xa>
 8009c18:	4770      	bx	lr
 8009c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1e:	e7f9      	b.n	8009c14 <memset+0x4>

08009c20 <_reclaim_reent>:
 8009c20:	4b29      	ldr	r3, [pc, #164]	@ (8009cc8 <_reclaim_reent+0xa8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4283      	cmp	r3, r0
 8009c26:	b570      	push	{r4, r5, r6, lr}
 8009c28:	4604      	mov	r4, r0
 8009c2a:	d04b      	beq.n	8009cc4 <_reclaim_reent+0xa4>
 8009c2c:	69c3      	ldr	r3, [r0, #28]
 8009c2e:	b1ab      	cbz	r3, 8009c5c <_reclaim_reent+0x3c>
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	b16b      	cbz	r3, 8009c50 <_reclaim_reent+0x30>
 8009c34:	2500      	movs	r5, #0
 8009c36:	69e3      	ldr	r3, [r4, #28]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	5959      	ldr	r1, [r3, r5]
 8009c3c:	2900      	cmp	r1, #0
 8009c3e:	d13b      	bne.n	8009cb8 <_reclaim_reent+0x98>
 8009c40:	3504      	adds	r5, #4
 8009c42:	2d80      	cmp	r5, #128	@ 0x80
 8009c44:	d1f7      	bne.n	8009c36 <_reclaim_reent+0x16>
 8009c46:	69e3      	ldr	r3, [r4, #28]
 8009c48:	4620      	mov	r0, r4
 8009c4a:	68d9      	ldr	r1, [r3, #12]
 8009c4c:	f000 f872 	bl	8009d34 <_free_r>
 8009c50:	69e3      	ldr	r3, [r4, #28]
 8009c52:	6819      	ldr	r1, [r3, #0]
 8009c54:	b111      	cbz	r1, 8009c5c <_reclaim_reent+0x3c>
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f86c 	bl	8009d34 <_free_r>
 8009c5c:	6961      	ldr	r1, [r4, #20]
 8009c5e:	b111      	cbz	r1, 8009c66 <_reclaim_reent+0x46>
 8009c60:	4620      	mov	r0, r4
 8009c62:	f000 f867 	bl	8009d34 <_free_r>
 8009c66:	69e1      	ldr	r1, [r4, #28]
 8009c68:	b111      	cbz	r1, 8009c70 <_reclaim_reent+0x50>
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f000 f862 	bl	8009d34 <_free_r>
 8009c70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009c72:	b111      	cbz	r1, 8009c7a <_reclaim_reent+0x5a>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f000 f85d 	bl	8009d34 <_free_r>
 8009c7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c7c:	b111      	cbz	r1, 8009c84 <_reclaim_reent+0x64>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 f858 	bl	8009d34 <_free_r>
 8009c84:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009c86:	b111      	cbz	r1, 8009c8e <_reclaim_reent+0x6e>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 f853 	bl	8009d34 <_free_r>
 8009c8e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009c90:	b111      	cbz	r1, 8009c98 <_reclaim_reent+0x78>
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 f84e 	bl	8009d34 <_free_r>
 8009c98:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009c9a:	b111      	cbz	r1, 8009ca2 <_reclaim_reent+0x82>
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 f849 	bl	8009d34 <_free_r>
 8009ca2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009ca4:	b111      	cbz	r1, 8009cac <_reclaim_reent+0x8c>
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 f844 	bl	8009d34 <_free_r>
 8009cac:	6a23      	ldr	r3, [r4, #32]
 8009cae:	b14b      	cbz	r3, 8009cc4 <_reclaim_reent+0xa4>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cb6:	4718      	bx	r3
 8009cb8:	680e      	ldr	r6, [r1, #0]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f000 f83a 	bl	8009d34 <_free_r>
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	e7bb      	b.n	8009c3c <_reclaim_reent+0x1c>
 8009cc4:	bd70      	pop	{r4, r5, r6, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000018 	.word	0x20000018

08009ccc <__libc_init_array>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	4d0d      	ldr	r5, [pc, #52]	@ (8009d04 <__libc_init_array+0x38>)
 8009cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8009d08 <__libc_init_array+0x3c>)
 8009cd2:	1b64      	subs	r4, r4, r5
 8009cd4:	10a4      	asrs	r4, r4, #2
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	42a6      	cmp	r6, r4
 8009cda:	d109      	bne.n	8009cf0 <__libc_init_array+0x24>
 8009cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8009d0c <__libc_init_array+0x40>)
 8009cde:	4c0c      	ldr	r4, [pc, #48]	@ (8009d10 <__libc_init_array+0x44>)
 8009ce0:	f000 f8c4 	bl	8009e6c <_init>
 8009ce4:	1b64      	subs	r4, r4, r5
 8009ce6:	10a4      	asrs	r4, r4, #2
 8009ce8:	2600      	movs	r6, #0
 8009cea:	42a6      	cmp	r6, r4
 8009cec:	d105      	bne.n	8009cfa <__libc_init_array+0x2e>
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf4:	4798      	blx	r3
 8009cf6:	3601      	adds	r6, #1
 8009cf8:	e7ee      	b.n	8009cd8 <__libc_init_array+0xc>
 8009cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cfe:	4798      	blx	r3
 8009d00:	3601      	adds	r6, #1
 8009d02:	e7f2      	b.n	8009cea <__libc_init_array+0x1e>
 8009d04:	0800a078 	.word	0x0800a078
 8009d08:	0800a078 	.word	0x0800a078
 8009d0c:	0800a078 	.word	0x0800a078
 8009d10:	0800a07c 	.word	0x0800a07c

08009d14 <__retarget_lock_acquire_recursive>:
 8009d14:	4770      	bx	lr

08009d16 <__retarget_lock_release_recursive>:
 8009d16:	4770      	bx	lr

08009d18 <memcpy>:
 8009d18:	440a      	add	r2, r1
 8009d1a:	4291      	cmp	r1, r2
 8009d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d20:	d100      	bne.n	8009d24 <memcpy+0xc>
 8009d22:	4770      	bx	lr
 8009d24:	b510      	push	{r4, lr}
 8009d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d2e:	4291      	cmp	r1, r2
 8009d30:	d1f9      	bne.n	8009d26 <memcpy+0xe>
 8009d32:	bd10      	pop	{r4, pc}

08009d34 <_free_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4605      	mov	r5, r0
 8009d38:	2900      	cmp	r1, #0
 8009d3a:	d041      	beq.n	8009dc0 <_free_r+0x8c>
 8009d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d40:	1f0c      	subs	r4, r1, #4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	bfb8      	it	lt
 8009d46:	18e4      	addlt	r4, r4, r3
 8009d48:	f000 f83e 	bl	8009dc8 <__malloc_lock>
 8009d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8009dc4 <_free_r+0x90>)
 8009d4e:	6813      	ldr	r3, [r2, #0]
 8009d50:	b933      	cbnz	r3, 8009d60 <_free_r+0x2c>
 8009d52:	6063      	str	r3, [r4, #4]
 8009d54:	6014      	str	r4, [r2, #0]
 8009d56:	4628      	mov	r0, r5
 8009d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d5c:	f000 b83a 	b.w	8009dd4 <__malloc_unlock>
 8009d60:	42a3      	cmp	r3, r4
 8009d62:	d908      	bls.n	8009d76 <_free_r+0x42>
 8009d64:	6820      	ldr	r0, [r4, #0]
 8009d66:	1821      	adds	r1, r4, r0
 8009d68:	428b      	cmp	r3, r1
 8009d6a:	bf01      	itttt	eq
 8009d6c:	6819      	ldreq	r1, [r3, #0]
 8009d6e:	685b      	ldreq	r3, [r3, #4]
 8009d70:	1809      	addeq	r1, r1, r0
 8009d72:	6021      	streq	r1, [r4, #0]
 8009d74:	e7ed      	b.n	8009d52 <_free_r+0x1e>
 8009d76:	461a      	mov	r2, r3
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	b10b      	cbz	r3, 8009d80 <_free_r+0x4c>
 8009d7c:	42a3      	cmp	r3, r4
 8009d7e:	d9fa      	bls.n	8009d76 <_free_r+0x42>
 8009d80:	6811      	ldr	r1, [r2, #0]
 8009d82:	1850      	adds	r0, r2, r1
 8009d84:	42a0      	cmp	r0, r4
 8009d86:	d10b      	bne.n	8009da0 <_free_r+0x6c>
 8009d88:	6820      	ldr	r0, [r4, #0]
 8009d8a:	4401      	add	r1, r0
 8009d8c:	1850      	adds	r0, r2, r1
 8009d8e:	4283      	cmp	r3, r0
 8009d90:	6011      	str	r1, [r2, #0]
 8009d92:	d1e0      	bne.n	8009d56 <_free_r+0x22>
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	6053      	str	r3, [r2, #4]
 8009d9a:	4408      	add	r0, r1
 8009d9c:	6010      	str	r0, [r2, #0]
 8009d9e:	e7da      	b.n	8009d56 <_free_r+0x22>
 8009da0:	d902      	bls.n	8009da8 <_free_r+0x74>
 8009da2:	230c      	movs	r3, #12
 8009da4:	602b      	str	r3, [r5, #0]
 8009da6:	e7d6      	b.n	8009d56 <_free_r+0x22>
 8009da8:	6820      	ldr	r0, [r4, #0]
 8009daa:	1821      	adds	r1, r4, r0
 8009dac:	428b      	cmp	r3, r1
 8009dae:	bf04      	itt	eq
 8009db0:	6819      	ldreq	r1, [r3, #0]
 8009db2:	685b      	ldreq	r3, [r3, #4]
 8009db4:	6063      	str	r3, [r4, #4]
 8009db6:	bf04      	itt	eq
 8009db8:	1809      	addeq	r1, r1, r0
 8009dba:	6021      	streq	r1, [r4, #0]
 8009dbc:	6054      	str	r4, [r2, #4]
 8009dbe:	e7ca      	b.n	8009d56 <_free_r+0x22>
 8009dc0:	bd38      	pop	{r3, r4, r5, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20001c54 	.word	0x20001c54

08009dc8 <__malloc_lock>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	@ (8009dd0 <__malloc_lock+0x8>)
 8009dca:	f7ff bfa3 	b.w	8009d14 <__retarget_lock_acquire_recursive>
 8009dce:	bf00      	nop
 8009dd0:	20001c50 	.word	0x20001c50

08009dd4 <__malloc_unlock>:
 8009dd4:	4801      	ldr	r0, [pc, #4]	@ (8009ddc <__malloc_unlock+0x8>)
 8009dd6:	f7ff bf9e 	b.w	8009d16 <__retarget_lock_release_recursive>
 8009dda:	bf00      	nop
 8009ddc:	20001c50 	.word	0x20001c50

08009de0 <round>:
 8009de0:	ec51 0b10 	vmov	r0, r1, d0
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8009dea:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8009dee:	2a13      	cmp	r2, #19
 8009df0:	460b      	mov	r3, r1
 8009df2:	4605      	mov	r5, r0
 8009df4:	dc1b      	bgt.n	8009e2e <round+0x4e>
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	da0b      	bge.n	8009e12 <round+0x32>
 8009dfa:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8009dfe:	3201      	adds	r2, #1
 8009e00:	bf04      	itt	eq
 8009e02:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e06:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4610      	mov	r0, r2
 8009e10:	e015      	b.n	8009e3e <round+0x5e>
 8009e12:	4c15      	ldr	r4, [pc, #84]	@ (8009e68 <round+0x88>)
 8009e14:	4114      	asrs	r4, r2
 8009e16:	ea04 0601 	and.w	r6, r4, r1
 8009e1a:	4306      	orrs	r6, r0
 8009e1c:	d00f      	beq.n	8009e3e <round+0x5e>
 8009e1e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8009e22:	fa41 f202 	asr.w	r2, r1, r2
 8009e26:	4413      	add	r3, r2
 8009e28:	ea23 0304 	bic.w	r3, r3, r4
 8009e2c:	e7ed      	b.n	8009e0a <round+0x2a>
 8009e2e:	2a33      	cmp	r2, #51	@ 0x33
 8009e30:	dd08      	ble.n	8009e44 <round+0x64>
 8009e32:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009e36:	d102      	bne.n	8009e3e <round+0x5e>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	f7f6 f9cf 	bl	80001dc <__adddf3>
 8009e3e:	ec41 0b10 	vmov	d0, r0, r1
 8009e42:	bd70      	pop	{r4, r5, r6, pc}
 8009e44:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8009e48:	f04f 34ff 	mov.w	r4, #4294967295
 8009e4c:	40f4      	lsrs	r4, r6
 8009e4e:	4204      	tst	r4, r0
 8009e50:	d0f5      	beq.n	8009e3e <round+0x5e>
 8009e52:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8009e56:	2201      	movs	r2, #1
 8009e58:	408a      	lsls	r2, r1
 8009e5a:	1952      	adds	r2, r2, r5
 8009e5c:	bf28      	it	cs
 8009e5e:	3301      	addcs	r3, #1
 8009e60:	ea22 0204 	bic.w	r2, r2, r4
 8009e64:	e7d2      	b.n	8009e0c <round+0x2c>
 8009e66:	bf00      	nop
 8009e68:	000fffff 	.word	0x000fffff

08009e6c <_init>:
 8009e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6e:	bf00      	nop
 8009e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e72:	bc08      	pop	{r3}
 8009e74:	469e      	mov	lr, r3
 8009e76:	4770      	bx	lr

08009e78 <_fini>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr
