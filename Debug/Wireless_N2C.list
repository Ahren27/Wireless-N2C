
Wireless_N2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800648c  0800648c  0000748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e4  080065e4  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080065e4  080065e4  000075e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ec  080065ec  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ec  080065ec  000075ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065f0  080065f0  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080065f4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c80  20000060  08006654  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00001e00  20001ce0  08006654  00008ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160d1  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ce  00000000  00000000  0001e161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00021430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f3c  00000000  00000000  00022800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003961  00000000  00000000  0002373c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015859  00000000  00000000  0002709d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f780c  00000000  00000000  0003c8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134102  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005700  00000000  00000000  00134148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00139848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006474 	.word	0x08006474

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006474 	.word	0x08006474

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	@ (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	@ (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	@ (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <createI2CSemaphores>:

SemaphoreHandle_t txCompleteSemaphore, stopCompleteSemaphore,
		rxCompleteSemaphore, txCompleteSemaphore2, stopCompleteSemaphore2,
		rxCompleteSemaphore2;

void createI2CSemaphores(void) {
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	txCompleteSemaphore = xSemaphoreCreateBinary();
 8000304:	2203      	movs	r2, #3
 8000306:	2100      	movs	r1, #0
 8000308:	2001      	movs	r0, #1
 800030a:	f002 fd3a 	bl	8002d82 <xQueueGenericCreate>
 800030e:	4603      	mov	r3, r0
 8000310:	4a27      	ldr	r2, [pc, #156]	@ (80003b0 <createI2CSemaphores+0xb0>)
 8000312:	6013      	str	r3, [r2, #0]
	if (txCompleteSemaphore == NULL) {
 8000314:	4b26      	ldr	r3, [pc, #152]	@ (80003b0 <createI2CSemaphores+0xb0>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d101      	bne.n	8000320 <createI2CSemaphores+0x20>
		while (1)
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <createI2CSemaphores+0x1c>
			;
	} // check if binary semaphore creation failed

	stopCompleteSemaphore = xSemaphoreCreateBinary();
 8000320:	2203      	movs	r2, #3
 8000322:	2100      	movs	r1, #0
 8000324:	2001      	movs	r0, #1
 8000326:	f002 fd2c 	bl	8002d82 <xQueueGenericCreate>
 800032a:	4603      	mov	r3, r0
 800032c:	4a21      	ldr	r2, [pc, #132]	@ (80003b4 <createI2CSemaphores+0xb4>)
 800032e:	6013      	str	r3, [r2, #0]
	if (stopCompleteSemaphore == NULL) {
 8000330:	4b20      	ldr	r3, [pc, #128]	@ (80003b4 <createI2CSemaphores+0xb4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d101      	bne.n	800033c <createI2CSemaphores+0x3c>
		while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <createI2CSemaphores+0x38>
			;
	} // check if binary semaphore creation failed

	rxCompleteSemaphore = xSemaphoreCreateBinary();
 800033c:	2203      	movs	r2, #3
 800033e:	2100      	movs	r1, #0
 8000340:	2001      	movs	r0, #1
 8000342:	f002 fd1e 	bl	8002d82 <xQueueGenericCreate>
 8000346:	4603      	mov	r3, r0
 8000348:	4a1b      	ldr	r2, [pc, #108]	@ (80003b8 <createI2CSemaphores+0xb8>)
 800034a:	6013      	str	r3, [r2, #0]
	if (rxCompleteSemaphore == NULL) {
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <createI2CSemaphores+0xb8>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d101      	bne.n	8000358 <createI2CSemaphores+0x58>
		while (1)
 8000354:	bf00      	nop
 8000356:	e7fd      	b.n	8000354 <createI2CSemaphores+0x54>
			;
	} // check if binary semaphore creation failed

	txCompleteSemaphore2 = xSemaphoreCreateBinary();
 8000358:	2203      	movs	r2, #3
 800035a:	2100      	movs	r1, #0
 800035c:	2001      	movs	r0, #1
 800035e:	f002 fd10 	bl	8002d82 <xQueueGenericCreate>
 8000362:	4603      	mov	r3, r0
 8000364:	4a15      	ldr	r2, [pc, #84]	@ (80003bc <createI2CSemaphores+0xbc>)
 8000366:	6013      	str	r3, [r2, #0]
	if (txCompleteSemaphore2 == NULL) {
 8000368:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <createI2CSemaphores+0xbc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d101      	bne.n	8000374 <createI2CSemaphores+0x74>
		while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <createI2CSemaphores+0x70>
			;
	} // check if binary semaphore creation failed

	stopCompleteSemaphore2 = xSemaphoreCreateBinary();
 8000374:	2203      	movs	r2, #3
 8000376:	2100      	movs	r1, #0
 8000378:	2001      	movs	r0, #1
 800037a:	f002 fd02 	bl	8002d82 <xQueueGenericCreate>
 800037e:	4603      	mov	r3, r0
 8000380:	4a0f      	ldr	r2, [pc, #60]	@ (80003c0 <createI2CSemaphores+0xc0>)
 8000382:	6013      	str	r3, [r2, #0]
	if (stopCompleteSemaphore2 == NULL) {
 8000384:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <createI2CSemaphores+0xc0>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d101      	bne.n	8000390 <createI2CSemaphores+0x90>
		while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <createI2CSemaphores+0x8c>
			;
	} // check if binary semaphore creation failed

	rxCompleteSemaphore2 = xSemaphoreCreateBinary();
 8000390:	2203      	movs	r2, #3
 8000392:	2100      	movs	r1, #0
 8000394:	2001      	movs	r0, #1
 8000396:	f002 fcf4 	bl	8002d82 <xQueueGenericCreate>
 800039a:	4603      	mov	r3, r0
 800039c:	4a09      	ldr	r2, [pc, #36]	@ (80003c4 <createI2CSemaphores+0xc4>)
 800039e:	6013      	str	r3, [r2, #0]
	if (rxCompleteSemaphore2 == NULL) {
 80003a0:	4b08      	ldr	r3, [pc, #32]	@ (80003c4 <createI2CSemaphores+0xc4>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d101      	bne.n	80003ac <createI2CSemaphores+0xac>
		while (1)
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <createI2CSemaphores+0xa8>
			;
	} // check if binary semaphore creation failed
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	2000007c 	.word	0x2000007c
 80003b4:	20000080 	.word	0x20000080
 80003b8:	20000084 	.word	0x20000084
 80003bc:	20000088 	.word	0x20000088
 80003c0:	2000008c 	.word	0x2000008c
 80003c4:	20000090 	.word	0x20000090

080003c8 <I2C_GPIO_Init1>:

void I2C_GPIO_Init1(void) {
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80003cc:	4b20      	ldr	r3, [pc, #128]	@ (8000450 <I2C_GPIO_Init1+0x88>)
 80003ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000450 <I2C_GPIO_Init1+0x88>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C1EN);
 80003d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000450 <I2C_GPIO_Init1+0x88>)
 80003da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003dc:	4a1c      	ldr	r2, [pc, #112]	@ (8000450 <I2C_GPIO_Init1+0x88>)
 80003de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003e2:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 6 and 7 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 80003e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 80003ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80003ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 80003f0:	4b18      	ldr	r3, [pc, #96]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a17      	ldr	r2, [pc, #92]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 80003f6:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80003fa:	6013      	str	r3, [r2, #0]

	// Set Pins 6 and 7 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 80003fc:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	4a14      	ldr	r2, [pc, #80]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 8000402:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000406:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 8000408:	4b12      	ldr	r3, [pc, #72]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	4a11      	ldr	r2, [pc, #68]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 800040e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000412:	6053      	str	r3, [r2, #4]

	// Set pints 6 and 7 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	4a0e      	ldr	r2, [pc, #56]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 800041a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800041e:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED6_1 | GPIO_OSPEEDR_OSPEED7_1);
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 8000426:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 800042a:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 800042e:	6a1b      	ldr	r3, [r3, #32]
 8000430:	4a08      	ldr	r2, [pc, #32]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 8000432:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000436:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= ((4 << GPIO_AFRL_AFSEL6_Pos) | 4 << GPIO_AFRL_AFSEL7_Pos);
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 800043a:	6a1b      	ldr	r3, [r3, #32]
 800043c:	4a05      	ldr	r2, [pc, #20]	@ (8000454 <I2C_GPIO_Init1+0x8c>)
 800043e:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 8000442:	6213      	str	r3, [r2, #32]
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000
 8000454:	48000400 	.word	0x48000400

08000458 <I2C_GPIO_Init2>:

void I2C_GPIO_Init2(void) {
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 800045c:	4b20      	ldr	r3, [pc, #128]	@ (80004e0 <I2C_GPIO_Init2+0x88>)
 800045e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000460:	4a1f      	ldr	r2, [pc, #124]	@ (80004e0 <I2C_GPIO_Init2+0x88>)
 8000462:	f043 0302 	orr.w	r3, r3, #2
 8000466:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C2EN);
 8000468:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <I2C_GPIO_Init2+0x88>)
 800046a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800046c:	4a1c      	ldr	r2, [pc, #112]	@ (80004e0 <I2C_GPIO_Init2+0x88>)
 800046e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000472:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 10 and 11 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11);
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a1a      	ldr	r2, [pc, #104]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 800047a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800047e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);
 8000480:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a17      	ldr	r2, [pc, #92]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 8000486:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 800048a:	6013      	str	r3, [r2, #0]

	// Set Pins 10 and 11 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 800048c:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	4a14      	ldr	r2, [pc, #80]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 8000492:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000496:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 8000498:	4b12      	ldr	r3, [pc, #72]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a11      	ldr	r2, [pc, #68]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 800049e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80004a2:	6053      	str	r3, [r2, #4]

	// Set pints 10 and 11 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED10 | GPIO_OSPEEDR_OSPEED11);
 80004a4:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	4a0e      	ldr	r2, [pc, #56]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 80004aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80004ae:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED10_1 | GPIO_OSPEEDR_OSPEED11_1);
 80004b0:	4b0c      	ldr	r3, [pc, #48]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	4a0b      	ldr	r2, [pc, #44]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 80004b6:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80004ba:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 80004bc:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 80004be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004c0:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 80004c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80004c6:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |=
 80004c8:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 80004ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004cc:	4a05      	ldr	r2, [pc, #20]	@ (80004e4 <I2C_GPIO_Init2+0x8c>)
 80004ce:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 80004d2:	6253      	str	r3, [r2, #36]	@ 0x24
			((4 << GPIO_AFRH_AFSEL10_Pos) | 4 << GPIO_AFRH_AFSEL11_Pos);
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48000400 	.word	0x48000400

080004e8 <I2C_init1>:

void I2C_init1() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	I2C1->CR1 &= ~I2C_CR1_PE;
 80004ec:	4b14      	ldr	r3, [pc, #80]	@ (8000540 <I2C_init1+0x58>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <I2C_init1+0x58>)
 80004f2:	f023 0301 	bic.w	r3, r3, #1
 80004f6:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <I2C_init1+0x58>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a10      	ldr	r2, [pc, #64]	@ (8000540 <I2C_init1+0x58>)
 80004fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000502:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;
 8000504:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <I2C_init1+0x58>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <I2C_init1+0x58>)
 800050a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800050e:	6013      	str	r3, [r2, #0]

	I2C1->TIMINGR = 0X0000004;
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <I2C_init1+0x58>)
 8000512:	2204      	movs	r2, #4
 8000514:	611a      	str	r2, [r3, #16]

	// Enable I2C interrupts
	I2C1->CR1 |= I2C_CR1_TXIE | I2C_CR1_STOPIE | I2C_CR1_ERRIE;
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <I2C_init1+0x58>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <I2C_init1+0x58>)
 800051c:	f043 03a2 	orr.w	r3, r3, #162	@ 0xa2
 8000520:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(I2C1_EV_IRQn, 5);
 8000522:	2105      	movs	r1, #5
 8000524:	201f      	movs	r0, #31
 8000526:	f7ff fec1 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_EV_IRQn);
 800052a:	201f      	movs	r0, #31
 800052c:	f7ff fea0 	bl	8000270 <__NVIC_EnableIRQ>

	I2C1->CR1 |= I2C_CR1_PE;
 8000530:	4b03      	ldr	r3, [pc, #12]	@ (8000540 <I2C_init1+0x58>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a02      	ldr	r2, [pc, #8]	@ (8000540 <I2C_init1+0x58>)
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40005400 	.word	0x40005400

08000544 <I2C_init2>:

void I2C_init2() {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000548:	4b14      	ldr	r3, [pc, #80]	@ (800059c <I2C_init2+0x58>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a13      	ldr	r2, [pc, #76]	@ (800059c <I2C_init2+0x58>)
 800054e:	f023 0301 	bic.w	r3, r3, #1
 8000552:	6013      	str	r3, [r2, #0]

	I2C2->CR1 &= ~I2C_CR1_ANFOFF;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <I2C_init2+0x58>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a10      	ldr	r2, [pc, #64]	@ (800059c <I2C_init2+0x58>)
 800055a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800055e:	6013      	str	r3, [r2, #0]
	I2C2->CR1 &= ~I2C_CR1_NOSTRETCH;
 8000560:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <I2C_init2+0x58>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0d      	ldr	r2, [pc, #52]	@ (800059c <I2C_init2+0x58>)
 8000566:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800056a:	6013      	str	r3, [r2, #0]

	I2C2->TIMINGR = 0X0000004;
 800056c:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <I2C_init2+0x58>)
 800056e:	2204      	movs	r2, #4
 8000570:	611a      	str	r2, [r3, #16]

	// Enable I2C interrupts
	I2C2->CR1 |= I2C_CR1_TXIE | I2C_CR1_STOPIE | I2C_CR1_ERRIE;
 8000572:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <I2C_init2+0x58>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a09      	ldr	r2, [pc, #36]	@ (800059c <I2C_init2+0x58>)
 8000578:	f043 03a2 	orr.w	r3, r3, #162	@ 0xa2
 800057c:	6013      	str	r3, [r2, #0]

	NVIC_SetPriority(I2C2_EV_IRQn, 5);
 800057e:	2105      	movs	r1, #5
 8000580:	2021      	movs	r0, #33	@ 0x21
 8000582:	f7ff fe93 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000586:	2021      	movs	r0, #33	@ 0x21
 8000588:	f7ff fe72 	bl	8000270 <__NVIC_EnableIRQ>

	I2C2->CR1 |= I2C_CR1_PE;
 800058c:	4b03      	ldr	r3, [pc, #12]	@ (800059c <I2C_init2+0x58>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a02      	ldr	r2, [pc, #8]	@ (800059c <I2C_init2+0x58>)
 8000592:	f043 0301 	orr.w	r3, r3, #1
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40005800 	.word	0x40005800

080005a0 <N2C_Config1>:

/******************************* NUNCHUCK #1 ********************************/

void N2C_Config1() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	71bb      	strb	r3, [r7, #6]
 80005b6:	e064      	b.n	8000682 <N2C_Config1+0xe2>

		/* Clear and then set AUTOEND bit to 1 */
		I2C1->CR2 &= ~(I2C_CR2_AUTOEND);
 80005b8:	4b36      	ldr	r3, [pc, #216]	@ (8000694 <N2C_Config1+0xf4>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a35      	ldr	r2, [pc, #212]	@ (8000694 <N2C_Config1+0xf4>)
 80005be:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80005c2:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (I2C_CR2_AUTOEND);
 80005c4:	4b33      	ldr	r3, [pc, #204]	@ (8000694 <N2C_Config1+0xf4>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a32      	ldr	r2, [pc, #200]	@ (8000694 <N2C_Config1+0xf4>)
 80005ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005ce:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 80005d0:	4b30      	ldr	r3, [pc, #192]	@ (8000694 <N2C_Config1+0xf4>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000694 <N2C_Config1+0xf4>)
 80005d6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80005da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80005de:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 80005e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000694 <N2C_Config1+0xf4>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	4a2b      	ldr	r2, [pc, #172]	@ (8000694 <N2C_Config1+0xf4>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005ea:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 80005ec:	4b29      	ldr	r3, [pc, #164]	@ (8000694 <N2C_Config1+0xf4>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	4a28      	ldr	r2, [pc, #160]	@ (8000694 <N2C_Config1+0xf4>)
 80005f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80005f6:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C1->CR2 |= (N2C_ADDR << 1);
 80005f8:	4b26      	ldr	r3, [pc, #152]	@ (8000694 <N2C_Config1+0xf4>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	4a25      	ldr	r2, [pc, #148]	@ (8000694 <N2C_Config1+0xf4>)
 80005fe:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000602:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C1->CR2 |= I2C_CR2_START;
 8000604:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <N2C_Config1+0xf4>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	4a22      	ldr	r2, [pc, #136]	@ (8000694 <N2C_Config1+0xf4>)
 800060a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800060e:	6053      	str	r3, [r2, #4]

		/* Wait for TXIS */
		if (xSemaphoreTake(txCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8000610:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <N2C_Config1+0xf8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f04f 31ff 	mov.w	r1, #4294967295
 8000618:	4618      	mov	r0, r3
 800061a:	f002 ff55 	bl	80034c8 <xQueueSemaphoreTake>
 800061e:	4603      	mov	r3, r0
 8000620:	2b01      	cmp	r3, #1
 8000622:	d12b      	bne.n	800067c <N2C_Config1+0xdc>
			/* Get Data */
			data = N2C_data(step);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f9f2 	bl	8000a10 <N2C_data>
 800062c:	4603      	mov	r3, r0
 800062e:	717b      	strb	r3, [r7, #5]

			/* Send Data */
			I2C1->TXDR = data;
 8000630:	4a18      	ldr	r2, [pc, #96]	@ (8000694 <N2C_Config1+0xf4>)
 8000632:	797b      	ldrb	r3, [r7, #5]
 8000634:	6293      	str	r3, [r2, #40]	@ 0x28

			/* Wait for TXIS */
			if (xSemaphoreTake(txCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <N2C_Config1+0xf8>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f04f 31ff 	mov.w	r1, #4294967295
 800063e:	4618      	mov	r0, r3
 8000640:	f002 ff42 	bl	80034c8 <xQueueSemaphoreTake>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d118      	bne.n	800067c <N2C_Config1+0xdc>
				/* Increment step (To send 2nd Byte) */
				step++;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	3301      	adds	r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]

				/* Get Data */
				data = N2C_data(step);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f9dc 	bl	8000a10 <N2C_data>
 8000658:	4603      	mov	r3, r0
 800065a:	717b      	strb	r3, [r7, #5]

				/* Send Data */
				I2C1->TXDR = data;
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <N2C_Config1+0xf4>)
 800065e:	797b      	ldrb	r3, [r7, #5]
 8000660:	6293      	str	r3, [r2, #40]	@ 0x28

				/* Wait for STOPF */
				if (xSemaphoreTake(stopCompleteSemaphore,
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <N2C_Config1+0xfc>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f04f 31ff 	mov.w	r1, #4294967295
 800066a:	4618      	mov	r0, r3
 800066c:	f002 ff2c 	bl	80034c8 <xQueueSemaphoreTake>
 8000670:	4603      	mov	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d102      	bne.n	800067c <N2C_Config1+0xdc>
						portMAX_DELAY) == pdTRUE) {
					/* Increment step (To send 2nd data when byteSender is 0) */
					step++;
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	3301      	adds	r3, #1
 800067a:	71fb      	strb	r3, [r7, #7]
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	3301      	adds	r3, #1
 8000680:	71bb      	strb	r3, [r7, #6]
 8000682:	79bb      	ldrb	r3, [r7, #6]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d997      	bls.n	80005b8 <N2C_Config1+0x18>
				}
			}
		}
	}
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40005400 	.word	0x40005400
 8000698:	2000007c 	.word	0x2000007c
 800069c:	20000080 	.word	0x20000080

080006a0 <N2C_Read1>:

void N2C_Read1(uint8_t *measurments) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 80006a8:	2305      	movs	r3, #5
 80006aa:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C1->CR2 = 0;
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <N2C_Read1+0x138>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C1->CR2 |= I2C_CR2_AUTOEND;
 80006b6:	4b48      	ldr	r3, [pc, #288]	@ (80007d8 <N2C_Read1+0x138>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	4a47      	ldr	r2, [pc, #284]	@ (80007d8 <N2C_Read1+0x138>)
 80006bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006c0:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 80006c2:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <N2C_Read1+0x138>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <N2C_Read1+0x138>)
 80006c8:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80006cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80006d0:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 80006d2:	4b41      	ldr	r3, [pc, #260]	@ (80007d8 <N2C_Read1+0x138>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	4a40      	ldr	r2, [pc, #256]	@ (80007d8 <N2C_Read1+0x138>)
 80006d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80006dc:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 80006de:	4b3e      	ldr	r3, [pc, #248]	@ (80007d8 <N2C_Read1+0x138>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	4a3d      	ldr	r2, [pc, #244]	@ (80007d8 <N2C_Read1+0x138>)
 80006e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80006e8:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 80006ea:	4b3b      	ldr	r3, [pc, #236]	@ (80007d8 <N2C_Read1+0x138>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	4a3a      	ldr	r2, [pc, #232]	@ (80007d8 <N2C_Read1+0x138>)
 80006f0:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 80006f4:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 80006f6:	4b38      	ldr	r3, [pc, #224]	@ (80007d8 <N2C_Read1+0x138>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	4a37      	ldr	r2, [pc, #220]	@ (80007d8 <N2C_Read1+0x138>)
 80006fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000700:	6053      	str	r3, [r2, #4]

	/* Wait for TXIS */
	if (xSemaphoreTake(txCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8000702:	4b36      	ldr	r3, [pc, #216]	@ (80007dc <N2C_Read1+0x13c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f04f 31ff 	mov.w	r1, #4294967295
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fedc 	bl	80034c8 <xQueueSemaphoreTake>
 8000710:	4603      	mov	r3, r0
 8000712:	2b01      	cmp	r3, #1
 8000714:	d15b      	bne.n	80007ce <N2C_Read1+0x12e>
		/* Get Data */
		data = N2C_data(step);
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f979 	bl	8000a10 <N2C_data>
 800071e:	4603      	mov	r3, r0
 8000720:	737b      	strb	r3, [r7, #13]

		/* Send Data */
		I2C1->TXDR |= data;
 8000722:	4b2d      	ldr	r3, [pc, #180]	@ (80007d8 <N2C_Read1+0x138>)
 8000724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000726:	7b7b      	ldrb	r3, [r7, #13]
 8000728:	492b      	ldr	r1, [pc, #172]	@ (80007d8 <N2C_Read1+0x138>)
 800072a:	4313      	orrs	r3, r2
 800072c:	628b      	str	r3, [r1, #40]	@ 0x28

		/* Wait for STOPF */
		if (xSemaphoreTake(stopCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <N2C_Read1+0x140>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f04f 31ff 	mov.w	r1, #4294967295
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fec6 	bl	80034c8 <xQueueSemaphoreTake>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d145      	bne.n	80007ce <N2C_Read1+0x12e>
			///// Read Measurements /////

			I2C1->CR2 &= ~I2C_CR2_AUTOEND;
 8000742:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <N2C_Read1+0x138>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	4a24      	ldr	r2, [pc, #144]	@ (80007d8 <N2C_Read1+0x138>)
 8000748:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800074c:	6053      	str	r3, [r2, #4]
			/* Set AUTOEND bit to 1 */
			//I2C1 -> CR2 |= I2C_CR2_AUTOEND;
			/* NBYTES = (Amount of Data Needed to Be Sent) */
			/* SADD = Slave Address for Nunchuck */
			I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800074e:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <N2C_Read1+0x138>)
 8000750:	685b      	ldr	r3, [r3, #4]
 8000752:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <N2C_Read1+0x138>)
 8000754:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800075c:	6053      	str	r3, [r2, #4]

			/* NBYTES = 6 */
			I2C1->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <N2C_Read1+0x138>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	4a1d      	ldr	r2, [pc, #116]	@ (80007d8 <N2C_Read1+0x138>)
 8000764:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8000768:	6053      	str	r3, [r2, #4]

			/* Set RD_WRN bit to read */
			I2C1->CR2 |= I2C_CR2_RD_WRN;
 800076a:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <N2C_Read1+0x138>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	4a1a      	ldr	r2, [pc, #104]	@ (80007d8 <N2C_Read1+0x138>)
 8000770:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000774:	6053      	str	r3, [r2, #4]

			/* Send Address */
			I2C1->CR2 |= (N2C_ADDR << 1);
 8000776:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <N2C_Read1+0x138>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	4a17      	ldr	r2, [pc, #92]	@ (80007d8 <N2C_Read1+0x138>)
 800077c:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000780:	6053      	str	r3, [r2, #4]

			/* Set START bit to 1 */
			I2C1->CR2 |= I2C_CR2_START;
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <N2C_Read1+0x138>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	4a14      	ldr	r2, [pc, #80]	@ (80007d8 <N2C_Read1+0x138>)
 8000788:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800078c:	6053      	str	r3, [r2, #4]

			for (uint8_t i = 0; i < 6; i++) {
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e013      	b.n	80007bc <N2C_Read1+0x11c>
				/* Wait for RXNE */
				if (xSemaphoreTake(rxCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8000794:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <N2C_Read1+0x144>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fe93 	bl	80034c8 <xQueueSemaphoreTake>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d106      	bne.n	80007b6 <N2C_Read1+0x116>
					/* Receive byte */
					measurments[i] = I2C1->RXDR;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <N2C_Read1+0x138>)
 80007aa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	b2ca      	uxtb	r2, r1
 80007b4:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 6; i++) {
 80007b6:	7bfb      	ldrb	r3, [r7, #15]
 80007b8:	3301      	adds	r3, #1
 80007ba:	73fb      	strb	r3, [r7, #15]
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2b05      	cmp	r3, #5
 80007c0:	d9e8      	bls.n	8000794 <N2C_Read1+0xf4>
				}
			}

			I2C1->CR2 |= (I2C_CR2_STOP);
 80007c2:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <N2C_Read1+0x138>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <N2C_Read1+0x138>)
 80007c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007cc:	6053      	str	r3, [r2, #4]
		}
	}
}
 80007ce:	bf00      	nop
 80007d0:	3710      	adds	r7, #16
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40005400 	.word	0x40005400
 80007dc:	2000007c 	.word	0x2000007c
 80007e0:	20000080 	.word	0x20000080
 80007e4:	20000084 	.word	0x20000084

080007e8 <N2C_Config2>:

/******************************* NUNCHUCK #2 ********************************/

void N2C_Config2() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	71bb      	strb	r3, [r7, #6]
 80007fe:	e064      	b.n	80008ca <N2C_Config2+0xe2>
		/* Clear and then set AUTOEND bit to 1 */
		I2C2->CR2 &= ~(I2C_CR2_AUTOEND);
 8000800:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <N2C_Config2+0xf4>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	4a35      	ldr	r2, [pc, #212]	@ (80008dc <N2C_Config2+0xf4>)
 8000806:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800080a:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (I2C_CR2_AUTOEND);
 800080c:	4b33      	ldr	r3, [pc, #204]	@ (80008dc <N2C_Config2+0xf4>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a32      	ldr	r2, [pc, #200]	@ (80008dc <N2C_Config2+0xf4>)
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000816:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C2->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000818:	4b30      	ldr	r3, [pc, #192]	@ (80008dc <N2C_Config2+0xf4>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4a2f      	ldr	r2, [pc, #188]	@ (80008dc <N2C_Config2+0xf4>)
 800081e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000826:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000828:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <N2C_Config2+0xf4>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	4a2b      	ldr	r2, [pc, #172]	@ (80008dc <N2C_Config2+0xf4>)
 800082e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000832:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000834:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <N2C_Config2+0xf4>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	4a28      	ldr	r2, [pc, #160]	@ (80008dc <N2C_Config2+0xf4>)
 800083a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800083e:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C2->CR2 |= (N2C_ADDR << 1);
 8000840:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <N2C_Config2+0xf4>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	4a25      	ldr	r2, [pc, #148]	@ (80008dc <N2C_Config2+0xf4>)
 8000846:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 800084a:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C2->CR2 |= I2C_CR2_START;
 800084c:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <N2C_Config2+0xf4>)
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	4a22      	ldr	r2, [pc, #136]	@ (80008dc <N2C_Config2+0xf4>)
 8000852:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000856:	6053      	str	r3, [r2, #4]

		/* Wait for TXIS */
		if (xSemaphoreTake(txCompleteSemaphore2, portMAX_DELAY) == pdTRUE) {
 8000858:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <N2C_Config2+0xf8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	4618      	mov	r0, r3
 8000862:	f002 fe31 	bl	80034c8 <xQueueSemaphoreTake>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d12b      	bne.n	80008c4 <N2C_Config2+0xdc>
			/* Get Data */
			data = N2C_data(step);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f8ce 	bl	8000a10 <N2C_data>
 8000874:	4603      	mov	r3, r0
 8000876:	717b      	strb	r3, [r7, #5]

			/* Send Data */
			I2C2->TXDR = data;
 8000878:	4a18      	ldr	r2, [pc, #96]	@ (80008dc <N2C_Config2+0xf4>)
 800087a:	797b      	ldrb	r3, [r7, #5]
 800087c:	6293      	str	r3, [r2, #40]	@ 0x28

			/* Wait for TXIS */
			if (xSemaphoreTake(txCompleteSemaphore2, portMAX_DELAY) == pdTRUE) {
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <N2C_Config2+0xf8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f04f 31ff 	mov.w	r1, #4294967295
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fe1e 	bl	80034c8 <xQueueSemaphoreTake>
 800088c:	4603      	mov	r3, r0
 800088e:	2b01      	cmp	r3, #1
 8000890:	d118      	bne.n	80008c4 <N2C_Config2+0xdc>
				/* Increment step (To send 2nd Byte) */
				step++;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	3301      	adds	r3, #1
 8000896:	71fb      	strb	r3, [r7, #7]

				/* Get Data */
				data = N2C_data(step);
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f8b8 	bl	8000a10 <N2C_data>
 80008a0:	4603      	mov	r3, r0
 80008a2:	717b      	strb	r3, [r7, #5]

				/* Send Data */
				I2C2->TXDR = data;
 80008a4:	4a0d      	ldr	r2, [pc, #52]	@ (80008dc <N2C_Config2+0xf4>)
 80008a6:	797b      	ldrb	r3, [r7, #5]
 80008a8:	6293      	str	r3, [r2, #40]	@ 0x28

				/* Wait for STOPF */
				if (xSemaphoreTake(stopCompleteSemaphore2,
 80008aa:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <N2C_Config2+0xfc>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f04f 31ff 	mov.w	r1, #4294967295
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fe08 	bl	80034c8 <xQueueSemaphoreTake>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d102      	bne.n	80008c4 <N2C_Config2+0xdc>
						portMAX_DELAY) == pdTRUE) {
					/* Increment step (To send 2nd data when byteSender is 0) */
					step++;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	3301      	adds	r3, #1
 80008c2:	71fb      	strb	r3, [r7, #7]
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	3301      	adds	r3, #1
 80008c8:	71bb      	strb	r3, [r7, #6]
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d997      	bls.n	8000800 <N2C_Config2+0x18>
				}
			}
		}
	}
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40005800 	.word	0x40005800
 80008e0:	20000088 	.word	0x20000088
 80008e4:	2000008c 	.word	0x2000008c

080008e8 <N2C_Read2>:

void N2C_Read2(uint8_t *measurments) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 80008f0:	2305      	movs	r3, #5
 80008f2:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C2->CR2 = 0;
 80008f8:	4b44      	ldr	r3, [pc, #272]	@ (8000a0c <N2C_Read2+0x124>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C2->CR2 |= I2C_CR2_AUTOEND;
 80008fe:	4b43      	ldr	r3, [pc, #268]	@ (8000a0c <N2C_Read2+0x124>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	4a42      	ldr	r2, [pc, #264]	@ (8000a0c <N2C_Read2+0x124>)
 8000904:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000908:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C2->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800090a:	4b40      	ldr	r3, [pc, #256]	@ (8000a0c <N2C_Read2+0x124>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a0c <N2C_Read2+0x124>)
 8000910:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000918:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C2->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 800091a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a0c <N2C_Read2+0x124>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a0c <N2C_Read2+0x124>)
 8000920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000924:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000926:	4b39      	ldr	r3, [pc, #228]	@ (8000a0c <N2C_Read2+0x124>)
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4a38      	ldr	r2, [pc, #224]	@ (8000a0c <N2C_Read2+0x124>)
 800092c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000930:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C2->CR2 |= (N2C_ADDR << 1);
 8000932:	4b36      	ldr	r3, [pc, #216]	@ (8000a0c <N2C_Read2+0x124>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <N2C_Read2+0x124>)
 8000938:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 800093c:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C2->CR2 |= I2C_CR2_START;
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <N2C_Read2+0x124>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	4a32      	ldr	r2, [pc, #200]	@ (8000a0c <N2C_Read2+0x124>)
 8000944:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000948:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C2->ISR & I2C_ISR_TXIS))
 800094a:	bf00      	nop
 800094c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a0c <N2C_Read2+0x124>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0302 	and.w	r3, r3, #2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f9      	beq.n	800094c <N2C_Read2+0x64>
		;

	/* Get Data */
	data = N2C_data(step);
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f858 	bl	8000a10 <N2C_data>
 8000960:	4603      	mov	r3, r0
 8000962:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C2->TXDR |= data;
 8000964:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <N2C_Read2+0x124>)
 8000966:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000968:	7b7b      	ldrb	r3, [r7, #13]
 800096a:	4928      	ldr	r1, [pc, #160]	@ (8000a0c <N2C_Read2+0x124>)
 800096c:	4313      	orrs	r3, r2
 800096e:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C2->ISR & I2C_ISR_STOPF))
 8000970:	bf00      	nop
 8000972:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <N2C_Read2+0x124>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0320 	and.w	r3, r3, #32
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0f9      	beq.n	8000972 <N2C_Read2+0x8a>
//	/* Delay for 1ms */
//	HAL_Delay(1);

///// Read Measurements /////

	I2C2->CR2 &= ~I2C_CR2_AUTOEND;
 800097e:	4b23      	ldr	r3, [pc, #140]	@ (8000a0c <N2C_Read2+0x124>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	4a22      	ldr	r2, [pc, #136]	@ (8000a0c <N2C_Read2+0x124>)
 8000984:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000988:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C2 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C2->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800098a:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <N2C_Read2+0x124>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	4a1f      	ldr	r2, [pc, #124]	@ (8000a0c <N2C_Read2+0x124>)
 8000990:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000998:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C2->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <N2C_Read2+0x124>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a0c <N2C_Read2+0x124>)
 80009a0:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 80009a4:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C2->CR2 |= I2C_CR2_RD_WRN;
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <N2C_Read2+0x124>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	4a18      	ldr	r2, [pc, #96]	@ (8000a0c <N2C_Read2+0x124>)
 80009ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009b0:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C2->CR2 |= (N2C_ADDR << 1);
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <N2C_Read2+0x124>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <N2C_Read2+0x124>)
 80009b8:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 80009bc:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C2->CR2 |= I2C_CR2_START;
 80009be:	4b13      	ldr	r3, [pc, #76]	@ (8000a0c <N2C_Read2+0x124>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	4a12      	ldr	r2, [pc, #72]	@ (8000a0c <N2C_Read2+0x124>)
 80009c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009c8:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e010      	b.n	80009f2 <N2C_Read2+0x10a>
		/* Wait until byte is received */
		while (!(I2C2->ISR & I2C_ISR_RXNE))
 80009d0:	bf00      	nop
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <N2C_Read2+0x124>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0f9      	beq.n	80009d2 <N2C_Read2+0xea>
			;

		/* Receive byte */
		measurments[i] = I2C2->RXDR;
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <N2C_Read2+0x124>)
 80009e0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	b2ca      	uxtb	r2, r1
 80009ea:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	3301      	adds	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d9eb      	bls.n	80009d0 <N2C_Read2+0xe8>
	}

	I2C2->CR2 |= (I2C_CR2_STOP);
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <N2C_Read2+0x124>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a03      	ldr	r2, [pc, #12]	@ (8000a0c <N2C_Read2+0x124>)
 80009fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a02:	6053      	str	r3, [r2, #4]

//	HAL_Delay(1);
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40005800 	.word	0x40005800

08000a10 <N2C_data>:

/* Returns the appropriate byte to be sent over I2C */
uint8_t N2C_data(uint8_t step) {
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (step) {
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	d818      	bhi.n	8000a54 <N2C_data+0x44>
 8000a22:	a201      	add	r2, pc, #4	@ (adr r2, 8000a28 <N2C_data+0x18>)
 8000a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a28:	08000a3d 	.word	0x08000a3d
 8000a2c:	08000a43 	.word	0x08000a43
 8000a30:	08000a49 	.word	0x08000a49
 8000a34:	08000a4f 	.word	0x08000a4f
 8000a38:	08000a4f 	.word	0x08000a4f
	case 1:
		data = 0xF0;
 8000a3c:	23f0      	movs	r3, #240	@ 0xf0
 8000a3e:	73fb      	strb	r3, [r7, #15]
		break;
 8000a40:	e008      	b.n	8000a54 <N2C_data+0x44>
	case 2:
		data = 0x55;
 8000a42:	2355      	movs	r3, #85	@ 0x55
 8000a44:	73fb      	strb	r3, [r7, #15]
		break;
 8000a46:	e005      	b.n	8000a54 <N2C_data+0x44>
	case 3:
		data = 0xFB;
 8000a48:	23fb      	movs	r3, #251	@ 0xfb
 8000a4a:	73fb      	strb	r3, [r7, #15]
		break;
 8000a4c:	e002      	b.n	8000a54 <N2C_data+0x44>
	case 4:
	case 5:
		data = 0x00;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
		break;
 8000a52:	bf00      	nop
	}

	return data;
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]

	if (I2C1->ISR & I2C_ISR_TXIS) {
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <I2C1_EV_IRQHandler+0x7c>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <I2C1_EV_IRQHandler+0x24>
		// Handle TXIS event (ready to transmit next byte)
		// Give the semaphore
		xSemaphoreGiveFromISR(txCompleteSemaphore, &xHigherPriorityTaskWoken);
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <I2C1_EV_IRQHandler+0x80>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1d3a      	adds	r2, r7, #4
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fbae 	bl	80031e4 <xQueueGiveFromISR>
	}

	if (I2C1->ISR & I2C_ISR_RXNE) {
 8000a88:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <I2C1_EV_IRQHandler+0x7c>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d006      	beq.n	8000aa2 <I2C1_EV_IRQHandler+0x3e>
		xSemaphoreGiveFromISR(rxCompleteSemaphore, &xHigherPriorityTaskWoken);
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <I2C1_EV_IRQHandler+0x84>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1d3a      	adds	r2, r7, #4
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fba1 	bl	80031e4 <xQueueGiveFromISR>
	}

	if (I2C1->ISR & I2C_ISR_STOPF) {
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <I2C1_EV_IRQHandler+0x7c>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f003 0320 	and.w	r3, r3, #32
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d009      	beq.n	8000ac2 <I2C1_EV_IRQHandler+0x5e>
		// Handle STOPF event (stop condition detected)
		I2C1->ICR = I2C_ICR_STOPCF;  // Clear the STOPF flag
 8000aae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <I2C1_EV_IRQHandler+0x7c>)
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	61da      	str	r2, [r3, #28]
		// Give the semaphore
		xSemaphoreGiveFromISR(stopCompleteSemaphore, &xHigherPriorityTaskWoken);
 8000ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <I2C1_EV_IRQHandler+0x88>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	1d3a      	adds	r2, r7, #4
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f002 fb91 	bl	80031e4 <xQueueGiveFromISR>
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <I2C1_EV_IRQHandler+0x74>
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <I2C1_EV_IRQHandler+0x8c>)
 8000aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	f3bf 8f4f 	dsb	sy
 8000ad4:	f3bf 8f6f 	isb	sy
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	2000007c 	.word	0x2000007c
 8000ae8:	20000084 	.word	0x20000084
 8000aec:	20000080 	.word	0x20000080
 8000af0:	e000ed04 	.word	0xe000ed04

08000af4 <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]

	if (I2C2->ISR & I2C_ISR_TXIS) {
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <I2C2_EV_IRQHandler+0x7c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 0302 	and.w	r3, r3, #2
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <I2C2_EV_IRQHandler+0x24>
		// Handle TXIS event (ready to transmit next byte)
		// Give the semaphore
		xSemaphoreGiveFromISR(txCompleteSemaphore2, &xHigherPriorityTaskWoken);
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <I2C2_EV_IRQHandler+0x80>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	1d3a      	adds	r2, r7, #4
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f002 fb66 	bl	80031e4 <xQueueGiveFromISR>
	}

	if (I2C2->ISR & I2C_ISR_RXNE) {
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <I2C2_EV_IRQHandler+0x7c>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d006      	beq.n	8000b32 <I2C2_EV_IRQHandler+0x3e>
		xSemaphoreGiveFromISR(rxCompleteSemaphore2, &xHigherPriorityTaskWoken);
 8000b24:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <I2C2_EV_IRQHandler+0x84>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1d3a      	adds	r2, r7, #4
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f002 fb59 	bl	80031e4 <xQueueGiveFromISR>
	}

	if (I2C2->ISR & I2C_ISR_STOPF) {
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <I2C2_EV_IRQHandler+0x7c>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0320 	and.w	r3, r3, #32
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d009      	beq.n	8000b52 <I2C2_EV_IRQHandler+0x5e>
		// Handle STOPF event (stop condition detected)
		I2C2->ICR = I2C_ICR_STOPCF;  // Clear the STOPF flag
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <I2C2_EV_IRQHandler+0x7c>)
 8000b40:	2220      	movs	r2, #32
 8000b42:	61da      	str	r2, [r3, #28]
		// Give the semaphore
		xSemaphoreGiveFromISR(stopCompleteSemaphore2,
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <I2C2_EV_IRQHandler+0x88>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	1d3a      	adds	r2, r7, #4
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 fb49 	bl	80031e4 <xQueueGiveFromISR>
				&xHigherPriorityTaskWoken);
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d007      	beq.n	8000b68 <I2C2_EV_IRQHandler+0x74>
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <I2C2_EV_IRQHandler+0x8c>)
 8000b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	f3bf 8f4f 	dsb	sy
 8000b64:	f3bf 8f6f 	isb	sy
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40005800 	.word	0x40005800
 8000b74:	20000088 	.word	0x20000088
 8000b78:	20000090 	.word	0x20000090
 8000b7c:	2000008c 	.word	0x2000008c
 8000b80:	e000ed04 	.word	0xe000ed04

08000b84 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b8a:	f000 fccc 	bl	8001526 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000b8e:	f000 faaf 	bl	80010f0 <SystemClock_Config>

	/* Set up RTOS */
	BaseType_t retVal; // used for checking task creation

	/* Create the tasks */
	retVal = xTaskCreate(Task1, "Set Up Program", configMINIMAL_STACK_SIZE * 2,
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <main+0x94>)
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	2328      	movs	r3, #40	@ 0x28
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ba0:	491e      	ldr	r1, [pc, #120]	@ (8000c1c <main+0x98>)
 8000ba2:	481f      	ldr	r0, [pc, #124]	@ (8000c20 <main+0x9c>)
 8000ba4:	f002 ff86 	bl	8003ab4 <xTaskCreate>
 8000ba8:	6078      	str	r0, [r7, #4]
	NULL, osPriorityHigh, &task1Handler);
	if (retVal != pdPASS) {
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d001      	beq.n	8000bb4 <main+0x30>
		while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <main+0x2c>
			;
	} // check if task creation failed

	retVal = xTaskCreate(Task2, "Send Data", configMINIMAL_STACK_SIZE * 2,
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c24 <main+0xa0>)
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	2318      	movs	r3, #24
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bc2:	4919      	ldr	r1, [pc, #100]	@ (8000c28 <main+0xa4>)
 8000bc4:	4819      	ldr	r0, [pc, #100]	@ (8000c2c <main+0xa8>)
 8000bc6:	f002 ff75 	bl	8003ab4 <xTaskCreate>
 8000bca:	6078      	str	r0, [r7, #4]
	NULL, osPriorityNormal, &task2Handler);
	if (retVal != pdPASS) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d001      	beq.n	8000bd6 <main+0x52>
		while (1)
 8000bd2:	bf00      	nop
 8000bd4:	e7fd      	b.n	8000bd2 <main+0x4e>
			;
	} // check if task creation failed

	sendDataSema = xSemaphoreCreateBinary();
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f002 f8d1 	bl	8002d82 <xQueueGenericCreate>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a13      	ldr	r2, [pc, #76]	@ (8000c30 <main+0xac>)
 8000be4:	6013      	str	r3, [r2, #0]
	if (sendDataSema == NULL) {
 8000be6:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <main+0xac>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <main+0x6e>
		while (1)
 8000bee:	bf00      	nop
 8000bf0:	e7fd      	b.n	8000bee <main+0x6a>
			;
	} // check if binary semaphore creation failed

	configMutex = xSemaphoreCreateMutex();
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f002 f93d 	bl	8002e72 <xQueueCreateMutex>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000c34 <main+0xb0>)
 8000bfc:	6013      	str	r3, [r2, #0]
	if (configMutex == NULL) {
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <main+0xb0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <main+0x86>
		while (1)
 8000c06:	bf00      	nop
 8000c08:	e7fd      	b.n	8000c06 <main+0x82>
			;
	}

	createI2CSemaphores();
 8000c0a:	f7ff fb79 	bl	8000300 <createI2CSemaphores>

	/* Start scheduler */
	vTaskStartScheduler();
 8000c0e:	f003 f959 	bl	8003ec4 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 8000c12:	bf00      	nop
 8000c14:	e7fd      	b.n	8000c12 <main+0x8e>
 8000c16:	bf00      	nop
 8000c18:	20000094 	.word	0x20000094
 8000c1c:	0800648c 	.word	0x0800648c
 8000c20:	08000c39 	.word	0x08000c39
 8000c24:	20000098 	.word	0x20000098
 8000c28:	0800649c 	.word	0x0800649c
 8000c2c:	08000c8d 	.word	0x08000c8d
 8000c30:	2000009c 	.word	0x2000009c
 8000c34:	200000a0 	.word	0x200000a0

08000c38 <Task1>:
}

/* Define Tasks --------------------------------------------------------------*/

/* Configure Device */
void Task1(void *argument) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {

		// Take the mutex before configuring I2C
		if (xSemaphoreTake(configMutex, portMAX_DELAY) == pdTRUE) {
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <Task1+0x50>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 fc3d 	bl	80034c8 <xQueueSemaphoreTake>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d114      	bne.n	8000c7e <Task1+0x46>
			// Configure Peripherals
			UART_Init();
 8000c54:	f000 fbae 	bl	80013b4 <UART_Init>
			I2C_GPIO_Init1();
 8000c58:	f7ff fbb6 	bl	80003c8 <I2C_GPIO_Init1>
			I2C_GPIO_Init2();
 8000c5c:	f7ff fbfc 	bl	8000458 <I2C_GPIO_Init2>
			I2C_init1();
 8000c60:	f7ff fc42 	bl	80004e8 <I2C_init1>
			I2C_init2();
 8000c64:	f7ff fc6e 	bl	8000544 <I2C_init2>
			N2C_Config1();
 8000c68:	f7ff fc9a 	bl	80005a0 <N2C_Config1>
			N2C_Config2();
 8000c6c:	f7ff fdbc 	bl	80007e8 <N2C_Config2>

			// Release the mutex after transmission
			xSemaphoreGive(configMutex);
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <Task1+0x50>)
 8000c72:	6818      	ldr	r0, [r3, #0]
 8000c74:	2300      	movs	r3, #0
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f002 f913 	bl	8002ea4 <xQueueGenericSend>
		}

		// Task not needed for rest of program duration, so delete it
		vTaskDelete(NULL);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f003 f876 	bl	8003d70 <vTaskDelete>
		if (xSemaphoreTake(configMutex, portMAX_DELAY) == pdTRUE) {
 8000c84:	e7dc      	b.n	8000c40 <Task1+0x8>
 8000c86:	bf00      	nop
 8000c88:	200000a0 	.word	0x200000a0

08000c8c <Task2>:
	}
}

/* Send Data */
void Task2(void *argument) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Get measurements for Nunchuck #1
		N2C_Read1(measurments1);
 8000c94:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <Task2+0x28>)
 8000c96:	f7ff fd03 	bl	80006a0 <N2C_Read1>

		// Get measurements for Nunchuck #2
		N2C_Read2(measurments2);
 8000c9a:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <Task2+0x2c>)
 8000c9c:	f7ff fe24 	bl	80008e8 <N2C_Read2>

		// Decode Raw Bytes Measurement into Global Variables
		split_data();
 8000ca0:	f000 f80c 	bl	8000cbc <split_data>

		// Uploads data to serial port
		print_data();
 8000ca4:	f000 f932 	bl	8000f0c <print_data>

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 8000ca8:	2005      	movs	r0, #5
 8000caa:	f003 f8d5 	bl	8003e58 <vTaskDelay>
		N2C_Read1(measurments1);
 8000cae:	bf00      	nop
 8000cb0:	e7f0      	b.n	8000c94 <Task2+0x8>
 8000cb2:	bf00      	nop
 8000cb4:	200000a4 	.word	0x200000a4
 8000cb8:	200000ac 	.word	0x200000ac

08000cbc <split_data>:
	}
}

// Decode Raw Bytes Measurement into Global Variables
void split_data() {
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
// x and y axis from first 2 bytes
	stick_x1 = measurments1[0];
 8000cc0:	4b82      	ldr	r3, [pc, #520]	@ (8000ecc <split_data+0x210>)
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	4b82      	ldr	r3, [pc, #520]	@ (8000ed0 <split_data+0x214>)
 8000cc6:	701a      	strb	r2, [r3, #0]
	stick_y1 = measurments1[1];
 8000cc8:	4b80      	ldr	r3, [pc, #512]	@ (8000ecc <split_data+0x210>)
 8000cca:	785a      	ldrb	r2, [r3, #1]
 8000ccc:	4b81      	ldr	r3, [pc, #516]	@ (8000ed4 <split_data+0x218>)
 8000cce:	701a      	strb	r2, [r3, #0]

// x and y axis from first 2 bytes
	stick_x2 = measurments2[0];
 8000cd0:	4b81      	ldr	r3, [pc, #516]	@ (8000ed8 <split_data+0x21c>)
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	4b81      	ldr	r3, [pc, #516]	@ (8000edc <split_data+0x220>)
 8000cd6:	701a      	strb	r2, [r3, #0]
	stick_y2 = measurments2[1];
 8000cd8:	4b7f      	ldr	r3, [pc, #508]	@ (8000ed8 <split_data+0x21c>)
 8000cda:	785a      	ldrb	r2, [r3, #1]
 8000cdc:	4b80      	ldr	r3, [pc, #512]	@ (8000ee0 <split_data+0x224>)
 8000cde:	701a      	strb	r2, [r3, #0]

// Might want to Reset accelerometer values
	acc_x1 = 0;
 8000ce0:	4b80      	ldr	r3, [pc, #512]	@ (8000ee4 <split_data+0x228>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	801a      	strh	r2, [r3, #0]
	acc_y1 = 0;
 8000ce6:	4b80      	ldr	r3, [pc, #512]	@ (8000ee8 <split_data+0x22c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	801a      	strh	r2, [r3, #0]
	acc_z1 = 0;
 8000cec:	4b7f      	ldr	r3, [pc, #508]	@ (8000eec <split_data+0x230>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	801a      	strh	r2, [r3, #0]

// Might want to Reset accelerometer values
	acc_x2 = 0;
 8000cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8000ef0 <split_data+0x234>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	801a      	strh	r2, [r3, #0]
	acc_y2 = 0;
 8000cf8:	4b7e      	ldr	r3, [pc, #504]	@ (8000ef4 <split_data+0x238>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	801a      	strh	r2, [r3, #0]
	acc_z2 = 0;
 8000cfe:	4b7e      	ldr	r3, [pc, #504]	@ (8000ef8 <split_data+0x23c>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	801a      	strh	r2, [r3, #0]

// higher 8 bits of accelerometer from next 3 bytes
	acc_x1 |= (measurments1[2] << 2);
 8000d04:	4b71      	ldr	r3, [pc, #452]	@ (8000ecc <split_data+0x210>)
 8000d06:	789b      	ldrb	r3, [r3, #2]
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	4b75      	ldr	r3, [pc, #468]	@ (8000ee4 <split_data+0x228>)
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b72      	ldr	r3, [pc, #456]	@ (8000ee4 <split_data+0x228>)
 8000d1c:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (measurments1[3] << 2);
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000ecc <split_data+0x210>)
 8000d20:	78db      	ldrb	r3, [r3, #3]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	4b70      	ldr	r3, [pc, #448]	@ (8000ee8 <split_data+0x22c>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b6c      	ldr	r3, [pc, #432]	@ (8000ee8 <split_data+0x22c>)
 8000d36:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (measurments1[4] << 2);
 8000d38:	4b64      	ldr	r3, [pc, #400]	@ (8000ecc <split_data+0x210>)
 8000d3a:	791b      	ldrb	r3, [r3, #4]
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	4b6a      	ldr	r3, [pc, #424]	@ (8000eec <split_data+0x230>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b67      	ldr	r3, [pc, #412]	@ (8000eec <split_data+0x230>)
 8000d50:	801a      	strh	r2, [r3, #0]

// higher 8 bits of accelerometer from next 3 bytes
	acc_x2 |= (measurments2[2] << 2);
 8000d52:	4b61      	ldr	r3, [pc, #388]	@ (8000ed8 <split_data+0x21c>)
 8000d54:	789b      	ldrb	r3, [r3, #2]
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	4b65      	ldr	r3, [pc, #404]	@ (8000ef0 <split_data+0x234>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	b21b      	sxth	r3, r3
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	4b61      	ldr	r3, [pc, #388]	@ (8000ef0 <split_data+0x234>)
 8000d6a:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (measurments2[3] << 2);
 8000d6c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ed8 <split_data+0x21c>)
 8000d6e:	78db      	ldrb	r3, [r3, #3]
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	4b5f      	ldr	r3, [pc, #380]	@ (8000ef4 <split_data+0x238>)
 8000d76:	881b      	ldrh	r3, [r3, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b5c      	ldr	r3, [pc, #368]	@ (8000ef4 <split_data+0x238>)
 8000d84:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (measurments2[4] << 2);
 8000d86:	4b54      	ldr	r3, [pc, #336]	@ (8000ed8 <split_data+0x21c>)
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ef8 <split_data+0x23c>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	4313      	orrs	r3, r2
 8000d98:	b21b      	sxth	r3, r3
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	4b56      	ldr	r3, [pc, #344]	@ (8000ef8 <split_data+0x23c>)
 8000d9e:	801a      	strh	r2, [r3, #0]

// lower 2 bits from last byte
	acc_x1 |= (((1 << 2) - 1) & (measurments1[5] >> 3));
 8000da0:	4b4a      	ldr	r3, [pc, #296]	@ (8000ecc <split_data+0x210>)
 8000da2:	795b      	ldrb	r3, [r3, #5]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ee4 <split_data+0x228>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	4b49      	ldr	r3, [pc, #292]	@ (8000ee4 <split_data+0x228>)
 8000dc0:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (((1 << 2) - 1) & (measurments1[5] >> 5));
 8000dc2:	4b42      	ldr	r3, [pc, #264]	@ (8000ecc <split_data+0x210>)
 8000dc4:	795b      	ldrb	r3, [r3, #5]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	b21a      	sxth	r2, r3
 8000dd2:	4b45      	ldr	r3, [pc, #276]	@ (8000ee8 <split_data+0x22c>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b21b      	sxth	r3, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b41      	ldr	r3, [pc, #260]	@ (8000ee8 <split_data+0x22c>)
 8000de2:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (((1 << 2) - 1) & (measurments1[5] >> 7));
 8000de4:	4b39      	ldr	r3, [pc, #228]	@ (8000ecc <split_data+0x210>)
 8000de6:	795b      	ldrb	r3, [r3, #5]
 8000de8:	09db      	lsrs	r3, r3, #7
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b3f      	ldr	r3, [pc, #252]	@ (8000eec <split_data+0x230>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4313      	orrs	r3, r2
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b3c      	ldr	r3, [pc, #240]	@ (8000eec <split_data+0x230>)
 8000dfa:	801a      	strh	r2, [r3, #0]

// lower 2 bits from last byte
	acc_x2 |= (((1 << 2) - 1) & (measurments2[5] >> 3));
 8000dfc:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <split_data+0x21c>)
 8000dfe:	795b      	ldrb	r3, [r3, #5]
 8000e00:	08db      	lsrs	r3, r3, #3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	b21a      	sxth	r2, r3
 8000e0c:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <split_data+0x234>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	b21b      	sxth	r3, r3
 8000e14:	4313      	orrs	r3, r2
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	4b35      	ldr	r3, [pc, #212]	@ (8000ef0 <split_data+0x234>)
 8000e1c:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (((1 << 2) - 1) & (measurments2[5] >> 5));
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed8 <split_data+0x21c>)
 8000e20:	795b      	ldrb	r3, [r3, #5]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	b21b      	sxth	r3, r3
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	b21a      	sxth	r2, r3
 8000e2e:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <split_data+0x238>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	b21b      	sxth	r3, r3
 8000e36:	4313      	orrs	r3, r2
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <split_data+0x238>)
 8000e3e:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (((1 << 2) - 1) & (measurments2[5] >> 7));
 8000e40:	4b25      	ldr	r3, [pc, #148]	@ (8000ed8 <split_data+0x21c>)
 8000e42:	795b      	ldrb	r3, [r3, #5]
 8000e44:	09db      	lsrs	r3, r3, #7
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef8 <split_data+0x23c>)
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b28      	ldr	r3, [pc, #160]	@ (8000ef8 <split_data+0x23c>)
 8000e56:	801a      	strh	r2, [r3, #0]

// Buttons are last 2 bits of last byte
	button_c1 = (1 & ~(measurments1[5] >> 1));
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <split_data+0x210>)
 8000e5a:	795b      	ldrb	r3, [r3, #5]
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf0c      	ite	eq
 8000e68:	2301      	moveq	r3, #1
 8000e6a:	2300      	movne	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <split_data+0x240>)
 8000e72:	701a      	strb	r2, [r3, #0]
	button_z1 = (1 & ~(measurments1[5] >> 0));
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <split_data+0x210>)
 8000e76:	795b      	ldrb	r3, [r3, #5]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf0c      	ite	eq
 8000e80:	2301      	moveq	r3, #1
 8000e82:	2300      	movne	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <split_data+0x244>)
 8000e8a:	701a      	strb	r2, [r3, #0]

// Buttons are last 2 bits of last byte
	button_c2 = (1 & ~(measurments2[5] >> 1));
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <split_data+0x21c>)
 8000e8e:	795b      	ldrb	r3, [r3, #5]
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf0c      	ite	eq
 8000e9c:	2301      	moveq	r3, #1
 8000e9e:	2300      	movne	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <split_data+0x248>)
 8000ea6:	701a      	strb	r2, [r3, #0]
	button_z2 = (1 & ~(measurments2[5] >> 0));
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <split_data+0x21c>)
 8000eaa:	795b      	ldrb	r3, [r3, #5]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bf0c      	ite	eq
 8000eb4:	2301      	moveq	r3, #1
 8000eb6:	2300      	movne	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <split_data+0x24c>)
 8000ebe:	701a      	strb	r2, [r3, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200000a4 	.word	0x200000a4
 8000ed0:	200000b2 	.word	0x200000b2
 8000ed4:	200000b3 	.word	0x200000b3
 8000ed8:	200000ac 	.word	0x200000ac
 8000edc:	200000bc 	.word	0x200000bc
 8000ee0:	200000bd 	.word	0x200000bd
 8000ee4:	200000b4 	.word	0x200000b4
 8000ee8:	200000b6 	.word	0x200000b6
 8000eec:	200000b8 	.word	0x200000b8
 8000ef0:	200000be 	.word	0x200000be
 8000ef4:	200000c0 	.word	0x200000c0
 8000ef8:	200000c2 	.word	0x200000c2
 8000efc:	200000ba 	.word	0x200000ba
 8000f00:	200000bb 	.word	0x200000bb
 8000f04:	200000c4 	.word	0x200000c4
 8000f08:	200000c5 	.word	0x200000c5

08000f0c <print_data>:

// Uploads data to serial port
void print_data() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
// Convert Data to Strings
	sprintf(sx_str1, "StickX1:%i", stick_x1);
 8000f10:	4b4d      	ldr	r3, [pc, #308]	@ (8001048 <print_data+0x13c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	494c      	ldr	r1, [pc, #304]	@ (800104c <print_data+0x140>)
 8000f1a:	484d      	ldr	r0, [pc, #308]	@ (8001050 <print_data+0x144>)
 8000f1c:	f004 fdb4 	bl	8005a88 <siprintf>
	sprintf(sy_str1, "StickY1:%i", stick_y1);
 8000f20:	4b4c      	ldr	r3, [pc, #304]	@ (8001054 <print_data+0x148>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	461a      	mov	r2, r3
 8000f28:	494b      	ldr	r1, [pc, #300]	@ (8001058 <print_data+0x14c>)
 8000f2a:	484c      	ldr	r0, [pc, #304]	@ (800105c <print_data+0x150>)
 8000f2c:	f004 fdac 	bl	8005a88 <siprintf>

	sprintf(ax_str1, "AccX1:%i", acc_x1);
 8000f30:	4b4b      	ldr	r3, [pc, #300]	@ (8001060 <print_data+0x154>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	494a      	ldr	r1, [pc, #296]	@ (8001064 <print_data+0x158>)
 8000f3a:	484b      	ldr	r0, [pc, #300]	@ (8001068 <print_data+0x15c>)
 8000f3c:	f004 fda4 	bl	8005a88 <siprintf>
	sprintf(ay_str1, "AccY1:%i", acc_y1);
 8000f40:	4b4a      	ldr	r3, [pc, #296]	@ (800106c <print_data+0x160>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	461a      	mov	r2, r3
 8000f48:	4949      	ldr	r1, [pc, #292]	@ (8001070 <print_data+0x164>)
 8000f4a:	484a      	ldr	r0, [pc, #296]	@ (8001074 <print_data+0x168>)
 8000f4c:	f004 fd9c 	bl	8005a88 <siprintf>
	sprintf(az_str1, "AccZ1:%i", acc_z1);
 8000f50:	4b49      	ldr	r3, [pc, #292]	@ (8001078 <print_data+0x16c>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	461a      	mov	r2, r3
 8000f58:	4948      	ldr	r1, [pc, #288]	@ (800107c <print_data+0x170>)
 8000f5a:	4849      	ldr	r0, [pc, #292]	@ (8001080 <print_data+0x174>)
 8000f5c:	f004 fd94 	bl	8005a88 <siprintf>

	sprintf(bc_str1, "ButtonC1:%i", button_c1);
 8000f60:	4b48      	ldr	r3, [pc, #288]	@ (8001084 <print_data+0x178>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	4947      	ldr	r1, [pc, #284]	@ (8001088 <print_data+0x17c>)
 8000f6a:	4848      	ldr	r0, [pc, #288]	@ (800108c <print_data+0x180>)
 8000f6c:	f004 fd8c 	bl	8005a88 <siprintf>
	sprintf(bz_str1, "ButtonZ1:%i", button_z1);
 8000f70:	4b47      	ldr	r3, [pc, #284]	@ (8001090 <print_data+0x184>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	4946      	ldr	r1, [pc, #280]	@ (8001094 <print_data+0x188>)
 8000f7a:	4847      	ldr	r0, [pc, #284]	@ (8001098 <print_data+0x18c>)
 8000f7c:	f004 fd84 	bl	8005a88 <siprintf>

// Convert Data to Strings
	sprintf(sx_str2, "StickX2:%i", stick_x2);
 8000f80:	4b46      	ldr	r3, [pc, #280]	@ (800109c <print_data+0x190>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	4945      	ldr	r1, [pc, #276]	@ (80010a0 <print_data+0x194>)
 8000f8a:	4846      	ldr	r0, [pc, #280]	@ (80010a4 <print_data+0x198>)
 8000f8c:	f004 fd7c 	bl	8005a88 <siprintf>
	sprintf(sy_str2, "StickY2:%i", stick_y2);
 8000f90:	4b45      	ldr	r3, [pc, #276]	@ (80010a8 <print_data+0x19c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	461a      	mov	r2, r3
 8000f98:	4944      	ldr	r1, [pc, #272]	@ (80010ac <print_data+0x1a0>)
 8000f9a:	4845      	ldr	r0, [pc, #276]	@ (80010b0 <print_data+0x1a4>)
 8000f9c:	f004 fd74 	bl	8005a88 <siprintf>

	sprintf(ax_str2, "AccX2:%i", acc_x2);
 8000fa0:	4b44      	ldr	r3, [pc, #272]	@ (80010b4 <print_data+0x1a8>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4943      	ldr	r1, [pc, #268]	@ (80010b8 <print_data+0x1ac>)
 8000faa:	4844      	ldr	r0, [pc, #272]	@ (80010bc <print_data+0x1b0>)
 8000fac:	f004 fd6c 	bl	8005a88 <siprintf>
	sprintf(ay_str2, "AccY2:%i", acc_y2);
 8000fb0:	4b43      	ldr	r3, [pc, #268]	@ (80010c0 <print_data+0x1b4>)
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4942      	ldr	r1, [pc, #264]	@ (80010c4 <print_data+0x1b8>)
 8000fba:	4843      	ldr	r0, [pc, #268]	@ (80010c8 <print_data+0x1bc>)
 8000fbc:	f004 fd64 	bl	8005a88 <siprintf>
	sprintf(az_str2, "AccZ2:%i", acc_z2);
 8000fc0:	4b42      	ldr	r3, [pc, #264]	@ (80010cc <print_data+0x1c0>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4941      	ldr	r1, [pc, #260]	@ (80010d0 <print_data+0x1c4>)
 8000fca:	4842      	ldr	r0, [pc, #264]	@ (80010d4 <print_data+0x1c8>)
 8000fcc:	f004 fd5c 	bl	8005a88 <siprintf>

	sprintf(bc_str2, "ButtonC2:%i", button_c2);
 8000fd0:	4b41      	ldr	r3, [pc, #260]	@ (80010d8 <print_data+0x1cc>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4940      	ldr	r1, [pc, #256]	@ (80010dc <print_data+0x1d0>)
 8000fda:	4841      	ldr	r0, [pc, #260]	@ (80010e0 <print_data+0x1d4>)
 8000fdc:	f004 fd54 	bl	8005a88 <siprintf>
	sprintf(bz_str2, "ButtonZ2:%i", button_z2);
 8000fe0:	4b40      	ldr	r3, [pc, #256]	@ (80010e4 <print_data+0x1d8>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	493f      	ldr	r1, [pc, #252]	@ (80010e8 <print_data+0x1dc>)
 8000fea:	4840      	ldr	r0, [pc, #256]	@ (80010ec <print_data+0x1e0>)
 8000fec:	f004 fd4c 	bl	8005a88 <siprintf>

// Print strings to terminal
	UART_PrintLn(sx_str1);
 8000ff0:	4817      	ldr	r0, [pc, #92]	@ (8001050 <print_data+0x144>)
 8000ff2:	f000 fa47 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(sy_str1);
 8000ff6:	4819      	ldr	r0, [pc, #100]	@ (800105c <print_data+0x150>)
 8000ff8:	f000 fa44 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(ax_str1);
 8000ffc:	481a      	ldr	r0, [pc, #104]	@ (8001068 <print_data+0x15c>)
 8000ffe:	f000 fa41 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(ay_str1);
 8001002:	481c      	ldr	r0, [pc, #112]	@ (8001074 <print_data+0x168>)
 8001004:	f000 fa3e 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(az_str1);
 8001008:	481d      	ldr	r0, [pc, #116]	@ (8001080 <print_data+0x174>)
 800100a:	f000 fa3b 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(bc_str1);
 800100e:	481f      	ldr	r0, [pc, #124]	@ (800108c <print_data+0x180>)
 8001010:	f000 fa38 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(bz_str1);
 8001014:	4820      	ldr	r0, [pc, #128]	@ (8001098 <print_data+0x18c>)
 8001016:	f000 fa35 	bl	8001484 <UART_PrintLn>

// Print strings to terminal
	UART_PrintLn(sx_str2);
 800101a:	4822      	ldr	r0, [pc, #136]	@ (80010a4 <print_data+0x198>)
 800101c:	f000 fa32 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(sy_str2);
 8001020:	4823      	ldr	r0, [pc, #140]	@ (80010b0 <print_data+0x1a4>)
 8001022:	f000 fa2f 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(ax_str2);
 8001026:	4825      	ldr	r0, [pc, #148]	@ (80010bc <print_data+0x1b0>)
 8001028:	f000 fa2c 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(ay_str2);
 800102c:	4826      	ldr	r0, [pc, #152]	@ (80010c8 <print_data+0x1bc>)
 800102e:	f000 fa29 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(az_str2);
 8001032:	4828      	ldr	r0, [pc, #160]	@ (80010d4 <print_data+0x1c8>)
 8001034:	f000 fa26 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(bc_str2);
 8001038:	4829      	ldr	r0, [pc, #164]	@ (80010e0 <print_data+0x1d4>)
 800103a:	f000 fa23 	bl	8001484 <UART_PrintLn>
	UART_PrintLn(bz_str2);
 800103e:	482b      	ldr	r0, [pc, #172]	@ (80010ec <print_data+0x1e0>)
 8001040:	f000 fa20 	bl	8001484 <UART_PrintLn>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000b2 	.word	0x200000b2
 800104c:	080064a8 	.word	0x080064a8
 8001050:	200000c8 	.word	0x200000c8
 8001054:	200000b3 	.word	0x200000b3
 8001058:	080064b4 	.word	0x080064b4
 800105c:	200000d8 	.word	0x200000d8
 8001060:	200000b4 	.word	0x200000b4
 8001064:	080064c0 	.word	0x080064c0
 8001068:	200000e8 	.word	0x200000e8
 800106c:	200000b6 	.word	0x200000b6
 8001070:	080064cc 	.word	0x080064cc
 8001074:	200000f8 	.word	0x200000f8
 8001078:	200000b8 	.word	0x200000b8
 800107c:	080064d8 	.word	0x080064d8
 8001080:	20000108 	.word	0x20000108
 8001084:	200000ba 	.word	0x200000ba
 8001088:	080064e4 	.word	0x080064e4
 800108c:	20000118 	.word	0x20000118
 8001090:	200000bb 	.word	0x200000bb
 8001094:	080064f0 	.word	0x080064f0
 8001098:	20000128 	.word	0x20000128
 800109c:	200000bc 	.word	0x200000bc
 80010a0:	080064fc 	.word	0x080064fc
 80010a4:	20000138 	.word	0x20000138
 80010a8:	200000bd 	.word	0x200000bd
 80010ac:	08006508 	.word	0x08006508
 80010b0:	20000148 	.word	0x20000148
 80010b4:	200000be 	.word	0x200000be
 80010b8:	08006514 	.word	0x08006514
 80010bc:	20000158 	.word	0x20000158
 80010c0:	200000c0 	.word	0x200000c0
 80010c4:	08006520 	.word	0x08006520
 80010c8:	20000168 	.word	0x20000168
 80010cc:	200000c2 	.word	0x200000c2
 80010d0:	0800652c 	.word	0x0800652c
 80010d4:	20000178 	.word	0x20000178
 80010d8:	200000c4 	.word	0x200000c4
 80010dc:	08006538 	.word	0x08006538
 80010e0:	20000188 	.word	0x20000188
 80010e4:	200000c5 	.word	0x200000c5
 80010e8:	08006544 	.word	0x08006544
 80010ec:	20000198 	.word	0x20000198

080010f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b096      	sub	sp, #88	@ 0x58
 80010f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	2244      	movs	r2, #68	@ 0x44
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fce2 	bl	8005ac8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001104:	463b      	mov	r3, r7
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001112:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001116:	f000 fb2f 	bl	8001778 <HAL_PWREx_ControlVoltageScaling>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001120:	f000 f83e 	bl	80011a0 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001124:	2310      	movs	r3, #16
 8001126:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001130:	2360      	movs	r3, #96	@ 0x60
 8001132:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001134:	2300      	movs	r3, #0
 8001136:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fb71 	bl	8001824 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x5c>
		Error_Handler();
 8001148:	f000 f82a 	bl	80011a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001160:	463b      	mov	r3, r7
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f000 ff39 	bl	8001fdc <HAL_RCC_ClockConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x84>
		Error_Handler();
 8001170:	f000 f816 	bl	80011a0 <Error_Handler>
	}
}
 8001174:	bf00      	nop
 8001176:	3758      	adds	r7, #88	@ 0x58
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a04      	ldr	r2, [pc, #16]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800118e:	f000 f9e3 	bl	8001558 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40014800 	.word	0x40014800

080011a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <Error_Handler+0x8>

080011ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b6:	4a10      	ldr	r2, [pc, #64]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011b8:	f043 0301 	orr.w	r3, r3, #1
 80011bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ca:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ce:	4a0a      	ldr	r2, [pc, #40]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d6:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <HAL_MspInit+0x4c>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	210f      	movs	r1, #15
 80011e6:	f06f 0001 	mvn.w	r0, #1
 80011ea:	f000 fa8d 	bl	8001708 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	@ 0x30
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800120a:	4b2e      	ldr	r3, [pc, #184]	@ (80012c4 <HAL_InitTick+0xc8>)
 800120c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800120e:	4a2d      	ldr	r2, [pc, #180]	@ (80012c4 <HAL_InitTick+0xc8>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001214:	6613      	str	r3, [r2, #96]	@ 0x60
 8001216:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <HAL_InitTick+0xc8>)
 8001218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001222:	f107 020c 	add.w	r2, r7, #12
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f001 f883 	bl	8002338 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001232:	f001 f86b 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8001236:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800123a:	4a23      	ldr	r2, [pc, #140]	@ (80012c8 <HAL_InitTick+0xcc>)
 800123c:	fba2 2303 	umull	r2, r3, r2, r3
 8001240:	0c9b      	lsrs	r3, r3, #18
 8001242:	3b01      	subs	r3, #1
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_InitTick+0xd0>)
 8001248:	4a21      	ldr	r2, [pc, #132]	@ (80012d0 <HAL_InitTick+0xd4>)
 800124a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800124c:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <HAL_InitTick+0xd0>)
 800124e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001252:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001254:	4a1d      	ldr	r2, [pc, #116]	@ (80012cc <HAL_InitTick+0xd0>)
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <HAL_InitTick+0xd0>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <HAL_InitTick+0xd0>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_InitTick+0xd0>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 800126c:	4817      	ldr	r0, [pc, #92]	@ (80012cc <HAL_InitTick+0xd0>)
 800126e:	f001 f8f5 	bl	800245c <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001278:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127c:	2b00      	cmp	r3, #0
 800127e:	d11b      	bne.n	80012b8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001280:	4812      	ldr	r0, [pc, #72]	@ (80012cc <HAL_InitTick+0xd0>)
 8001282:	f001 f94d 	bl	8002520 <HAL_TIM_Base_Start_IT>
 8001286:	4603      	mov	r3, r0
 8001288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800128c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001290:	2b00      	cmp	r3, #0
 8001292:	d111      	bne.n	80012b8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001294:	201a      	movs	r0, #26
 8001296:	f000 fa53 	bl	8001740 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d808      	bhi.n	80012b2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	201a      	movs	r0, #26
 80012a6:	f000 fa2f 	bl	8001708 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <HAL_InitTick+0xd8>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e002      	b.n	80012b8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3730      	adds	r7, #48	@ 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	200001a8 	.word	0x200001a8
 80012d0:	40014800 	.word	0x40014800
 80012d4:	20000004 	.word	0x20000004

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <NMI_Handler+0x4>

080012e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <MemManage_Handler+0x4>

080012f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <UsageFault_Handler+0x4>

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001316:	f001 f973 	bl	8002600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200001a8 	.word	0x200001a8

08001324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800132c:	4a14      	ldr	r2, [pc, #80]	@ (8001380 <_sbrk+0x5c>)
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <_sbrk+0x60>)
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001338:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <_sbrk+0x64>)
 8001342:	4a12      	ldr	r2, [pc, #72]	@ (800138c <_sbrk+0x68>)
 8001344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	429a      	cmp	r2, r3
 8001352:	d207      	bcs.n	8001364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001354:	f004 fc16 	bl	8005b84 <__errno>
 8001358:	4603      	mov	r3, r0
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20018000 	.word	0x20018000
 8001384:	00000f00 	.word	0x00000f00
 8001388:	200001f4 	.word	0x200001f4
 800138c:	20001ce0 	.word	0x20001ce0

08001390 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <SystemInit+0x20>)
 8001396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <SystemInit+0x20>)
 800139c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <UART_Init>:
 */

#include "main.h"
#include "uart.h"

void UART_Init(void) {
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	// Configure GPIOA for USART2
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80013b8:	4b23      	ldr	r3, [pc, #140]	@ (8001448 <UART_Init+0x94>)
 80013ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013bc:	4a22      	ldr	r2, [pc, #136]	@ (8001448 <UART_Init+0x94>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN);
 80013c4:	4b20      	ldr	r3, [pc, #128]	@ (8001448 <UART_Init+0x94>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001448 <UART_Init+0x94>)
 80013ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ce:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 2 and 3 to AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 80013d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 80013e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013ea:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80013ee:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 80013f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013fa:	f423 43ee 	bic.w	r3, r3, #30464	@ 0x7700
 80013fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 8001400:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800140a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800140e:	6213      	str	r3, [r2, #32]
	 * TE		1
	 * RE		1
	 * USEM		0
	 * UE		1
	 */
	USART2->CR1 |= (0b000100000);
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <UART_Init+0x98>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <UART_Init+0x98>)
 8001416:	f043 0320 	orr.w	r3, r3, #32
 800141a:	6013      	str	r3, [r2, #0]

	// Configure BR

	USART2->BRR = (35);
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <UART_Init+0x98>)
 800141e:	2223      	movs	r2, #35	@ 0x23
 8001420:	60da      	str	r2, [r3, #12]

	// Enable  bits
	USART2->CR1 |= (0b1101);
 8001422:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <UART_Init+0x98>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <UART_Init+0x98>)
 8001428:	f043 030d 	orr.w	r3, r3, #13
 800142c:	6013      	str	r3, [r2, #0]

	// Enable interupts
	NVIC->ISER[1] |= (1 << (USART2_IRQn & 0X1F));
 800142e:	4b08      	ldr	r3, [pc, #32]	@ (8001450 <UART_Init+0x9c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a07      	ldr	r2, [pc, #28]	@ (8001450 <UART_Init+0x9c>)
 8001434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001438:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800143a:	b662      	cpsie	i
}
 800143c:	bf00      	nop
	__enable_irq();

}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40004400 	.word	0x40004400
 8001450:	e000e100 	.word	0xe000e100

08001454 <UART_Print_Char>:

// Prints a character to the UART serial connection
void UART_Print_Char(char character) {
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	while (!(USART2->ISR & 1 << 7)) {
 800145e:	bf00      	nop
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <UART_Print_Char+0x2c>)
 8001462:	69db      	ldr	r3, [r3, #28]
 8001464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f9      	beq.n	8001460 <UART_Print_Char+0xc>
	};
	USART2->TDR = character;
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <UART_Print_Char+0x2c>)
 800146e:	79fa      	ldrb	r2, [r7, #7]
 8001470:	b292      	uxth	r2, r2
 8001472:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40004400 	.word	0x40004400

08001484 <UART_PrintLn>:

// Prints a character to the UART serial connection and appends a NEWLINE char
void UART_PrintLn(char *output) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 8001490:	e009      	b.n	80014a6 <UART_PrintLn+0x22>
		UART_Print_Char(output[i]);
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ffda 	bl	8001454 <UART_Print_Char>
		i++;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	3301      	adds	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1ef      	bne.n	8001492 <UART_PrintLn+0xe>
	}
	// Finish with new line and return cairage chars
	while (!(USART2->ISR & 1 << 7)) {
 80014b2:	bf00      	nop
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <UART_PrintLn+0x4c>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f9      	beq.n	80014b4 <UART_PrintLn+0x30>
	};
	USART2->TDR = '\n';
 80014c0:	4b03      	ldr	r3, [pc, #12]	@ (80014d0 <UART_PrintLn+0x4c>)
 80014c2:	220a      	movs	r2, #10
 80014c4:	851a      	strh	r2, [r3, #40]	@ 0x28
	//while(!(USART2 -> ISR & 1 << 7)){};
	//USART2 -> TDR = '\r';
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40004400 	.word	0x40004400

080014d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800150c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d8:	f7ff ff5a 	bl	8001390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <LoopForever+0x6>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	@ (8001514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001518 <LoopForever+0xe>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	@ (800151c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <LoopForever+0x16>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f004 fb45 	bl	8005b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001506:	f7ff fb3d 	bl	8000b84 <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800150c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001518:	080065f4 	.word	0x080065f4
  ldr r2, =_sbss
 800151c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001520:	20001ce0 	.word	0x20001ce0

08001524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_2_IRQHandler>

08001526 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800152c:	2300      	movs	r3, #0
 800152e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f000 f8de 	bl	80016f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001536:	200f      	movs	r0, #15
 8001538:	f7ff fe60 	bl	80011fc <HAL_InitTick>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	71fb      	strb	r3, [r7, #7]
 8001546:	e001      	b.n	800154c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001548:	f7ff fe30 	bl	80011ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800154c:	79fb      	ldrb	r3, [r7, #7]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_IncTick+0x20>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_IncTick+0x24>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4413      	add	r3, r2
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <HAL_IncTick+0x24>)
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	20000008 	.word	0x20000008
 800157c:	200001f8 	.word	0x200001f8

08001580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b03      	ldr	r3, [pc, #12]	@ (8001594 <HAL_GetTick+0x14>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200001f8 	.word	0x200001f8

08001598 <__NVIC_SetPriorityGrouping>:
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ca:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	60d3      	str	r3, [r2, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_GetPriorityGrouping>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_EnableIRQ>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	db0b      	blt.n	8001626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	f003 021f 	and.w	r2, r3, #31
 8001614:	4907      	ldr	r1, [pc, #28]	@ (8001634 <__NVIC_EnableIRQ+0x38>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	095b      	lsrs	r3, r3, #5
 800161c:	2001      	movs	r0, #1
 800161e:	fa00 f202 	lsl.w	r2, r0, r2
 8001622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	@ (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	@ (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	@ 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ff4c 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800171a:	f7ff ff61 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 800171e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	68b9      	ldr	r1, [r7, #8]
 8001724:	6978      	ldr	r0, [r7, #20]
 8001726:	f7ff ffb1 	bl	800168c <NVIC_EncodePriority>
 800172a:	4602      	mov	r2, r0
 800172c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff80 	bl	8001638 <__NVIC_SetPriority>
}
 8001738:	bf00      	nop
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff54 	bl	80015fc <__NVIC_EnableIRQ>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <HAL_PWREx_GetVoltageRange+0x18>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40007000 	.word	0x40007000

08001778 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001786:	d130      	bne.n	80017ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001788:	4b23      	ldr	r3, [pc, #140]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001794:	d038      	beq.n	8001808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800179e:	4a1e      	ldr	r2, [pc, #120]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a6:	4b1d      	ldr	r3, [pc, #116]	@ (800181c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2232      	movs	r2, #50	@ 0x32
 80017ac:	fb02 f303 	mul.w	r3, r2, r3
 80017b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	0c9b      	lsrs	r3, r3, #18
 80017b8:	3301      	adds	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017bc:	e002      	b.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017d0:	d102      	bne.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f2      	bne.n	80017be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017e4:	d110      	bne.n	8001808 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e00f      	b.n	800180a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017f6:	d007      	beq.n	8001808 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017f8:	4b07      	ldr	r3, [pc, #28]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001800:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001802:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001806:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40007000 	.word	0x40007000
 800181c:	20000000 	.word	0x20000000
 8001820:	431bde83 	.word	0x431bde83

08001824 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e3ca      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001836:	4b97      	ldr	r3, [pc, #604]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001840:	4b94      	ldr	r3, [pc, #592]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0310 	and.w	r3, r3, #16
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80e4 	beq.w	8001a20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_RCC_OscConfig+0x4a>
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	f040 808b 	bne.w	800197c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2b01      	cmp	r3, #1
 800186a:	f040 8087 	bne.w	800197c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800186e:	4b89      	ldr	r3, [pc, #548]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d005      	beq.n	8001886 <HAL_RCC_OscConfig+0x62>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e3a2      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a1a      	ldr	r2, [r3, #32]
 800188a:	4b82      	ldr	r3, [pc, #520]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d004      	beq.n	80018a0 <HAL_RCC_OscConfig+0x7c>
 8001896:	4b7f      	ldr	r3, [pc, #508]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800189e:	e005      	b.n	80018ac <HAL_RCC_OscConfig+0x88>
 80018a0:	4b7c      	ldr	r3, [pc, #496]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d223      	bcs.n	80018f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fd71 	bl	800239c <RCC_SetFlashLatencyFromMSIRange>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e383      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c4:	4b73      	ldr	r3, [pc, #460]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a72      	ldr	r2, [pc, #456]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b70      	ldr	r3, [pc, #448]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	496d      	ldr	r1, [pc, #436]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e2:	4b6c      	ldr	r3, [pc, #432]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	4968      	ldr	r1, [pc, #416]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
 80018f6:	e025      	b.n	8001944 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018f8:	4b66      	ldr	r3, [pc, #408]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a65      	ldr	r2, [pc, #404]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b63      	ldr	r3, [pc, #396]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4960      	ldr	r1, [pc, #384]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001912:	4313      	orrs	r3, r2
 8001914:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001916:	4b5f      	ldr	r3, [pc, #380]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	495b      	ldr	r1, [pc, #364]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4618      	mov	r0, r3
 8001936:	f000 fd31 	bl	800239c <RCC_SetFlashLatencyFromMSIRange>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e343      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001944:	f000 fc4a 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b52      	ldr	r3, [pc, #328]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	4950      	ldr	r1, [pc, #320]	@ (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	4a4e      	ldr	r2, [pc, #312]	@ (8001a9c <HAL_RCC_OscConfig+0x278>)
 8001962:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001964:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fc47 	bl	80011fc <HAL_InitTick>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d052      	beq.n	8001a1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	e327      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d032      	beq.n	80019ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001984:	4b43      	ldr	r3, [pc, #268]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a42      	ldr	r2, [pc, #264]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001990:	f7ff fdf6 	bl	8001580 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001998:	f7ff fdf2 	bl	8001580 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e310      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019b6:	4b37      	ldr	r3, [pc, #220]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a36      	ldr	r2, [pc, #216]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b34      	ldr	r3, [pc, #208]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	4931      	ldr	r1, [pc, #196]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	492c      	ldr	r1, [pc, #176]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e01a      	b.n	8001a20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a29      	ldr	r2, [pc, #164]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019f0:	f023 0301 	bic.w	r3, r3, #1
 80019f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019f6:	f7ff fdc3 	bl	8001580 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019fe:	f7ff fdbf 	bl	8001580 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e2dd      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a10:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x1da>
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d074      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x21a>
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	d10e      	bne.n	8001a56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d10b      	bne.n	8001a56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3e:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d064      	beq.n	8001b14 <HAL_RCC_OscConfig+0x2f0>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d160      	bne.n	8001b14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e2ba      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x24a>
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0b      	ldr	r2, [pc, #44]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	e026      	b.n	8001abc <HAL_RCC_OscConfig+0x298>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a76:	d115      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x280>
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b03      	ldr	r3, [pc, #12]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a02      	ldr	r2, [pc, #8]	@ (8001a94 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	e014      	b.n	8001abc <HAL_RCC_OscConfig+0x298>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	08006568 	.word	0x08006568
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004
 8001aa4:	4ba0      	ldr	r3, [pc, #640]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a9f      	ldr	r2, [pc, #636]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b9d      	ldr	r3, [pc, #628]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a9c      	ldr	r2, [pc, #624]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d013      	beq.n	8001aec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fd5c 	bl	8001580 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fd58 	bl	8001580 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e276      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ade:	4b92      	ldr	r3, [pc, #584]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x2a8>
 8001aea:	e014      	b.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fd48 	bl	8001580 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fd44 	bl	8001580 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	@ 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e262      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b06:	4b88      	ldr	r3, [pc, #544]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2d0>
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d060      	beq.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_OscConfig+0x310>
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d119      	bne.n	8001b62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d116      	bne.n	8001b62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b34:	4b7c      	ldr	r3, [pc, #496]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_OscConfig+0x328>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e23f      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b76      	ldr	r3, [pc, #472]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	061b      	lsls	r3, r3, #24
 8001b5a:	4973      	ldr	r1, [pc, #460]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b60:	e040      	b.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d023      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fd03 	bl	8001580 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fcff 	bl	8001580 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e21d      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	4b65      	ldr	r3, [pc, #404]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b62      	ldr	r3, [pc, #392]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	061b      	lsls	r3, r3, #24
 8001baa:	495f      	ldr	r1, [pc, #380]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
 8001bb0:	e018      	b.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7ff fcdf 	bl	8001580 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff fcdb 	bl	8001580 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e1f9      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd8:	4b53      	ldr	r3, [pc, #332]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d03c      	beq.n	8001c6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf8:	4b4b      	ldr	r3, [pc, #300]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfe:	4a4a      	ldr	r2, [pc, #296]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c08:	f7ff fcba 	bl	8001580 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff fcb6 	bl	8001580 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1d4      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c22:	4b41      	ldr	r3, [pc, #260]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ef      	beq.n	8001c10 <HAL_RCC_OscConfig+0x3ec>
 8001c30:	e01b      	b.n	8001c6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	4b3d      	ldr	r3, [pc, #244]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c38:	4a3b      	ldr	r2, [pc, #236]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c42:	f7ff fc9d 	bl	8001580 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fc99 	bl	8001580 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1b7      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c5c:	4b32      	ldr	r3, [pc, #200]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1ef      	bne.n	8001c4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80a6 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c88:	4b27      	ldr	r3, [pc, #156]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8c:	4a26      	ldr	r2, [pc, #152]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c94:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca4:	4b21      	ldr	r3, [pc, #132]	@ (8001d2c <HAL_RCC_OscConfig+0x508>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d118      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d2c <HAL_RCC_OscConfig+0x508>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d2c <HAL_RCC_OscConfig+0x508>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fc60 	bl	8001580 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc4:	f7ff fc5c 	bl	8001580 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e17a      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd6:	4b15      	ldr	r3, [pc, #84]	@ (8001d2c <HAL_RCC_OscConfig+0x508>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d108      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4d8>
 8001cea:	4b0f      	ldr	r3, [pc, #60]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cfa:	e029      	b.n	8001d50 <HAL_RCC_OscConfig+0x52c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b05      	cmp	r3, #5
 8001d02:	d115      	bne.n	8001d30 <HAL_RCC_OscConfig+0x50c>
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0a:	4a07      	ldr	r2, [pc, #28]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d14:	4b04      	ldr	r3, [pc, #16]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1a:	4a03      	ldr	r2, [pc, #12]	@ (8001d28 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x52c>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	4b9c      	ldr	r3, [pc, #624]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d36:	4a9b      	ldr	r2, [pc, #620]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001d38:	f023 0301 	bic.w	r3, r3, #1
 8001d3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d40:	4b98      	ldr	r3, [pc, #608]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d46:	4a97      	ldr	r2, [pc, #604]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d016      	beq.n	8001d86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d58:	f7ff fc12 	bl	8001580 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff fc0e 	bl	8001580 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e12a      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d76:	4b8b      	ldr	r3, [pc, #556]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ed      	beq.n	8001d60 <HAL_RCC_OscConfig+0x53c>
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7ff fbfb 	bl	8001580 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fbf7 	bl	8001580 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e113      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da4:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ed      	bne.n	8001d8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db2:	7ffb      	ldrb	r3, [r7, #31]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db8:	4b7a      	ldr	r3, [pc, #488]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbc:	4a79      	ldr	r2, [pc, #484]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001dbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80fe 	beq.w	8001fca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	f040 80d0 	bne.w	8001f78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001dd8:	4b72      	ldr	r3, [pc, #456]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d130      	bne.n	8001e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	3b01      	subs	r3, #1
 8001df8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d127      	bne.n	8001e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d11f      	bne.n	8001e4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e18:	2a07      	cmp	r2, #7
 8001e1a:	bf14      	ite	ne
 8001e1c:	2201      	movne	r2, #1
 8001e1e:	2200      	moveq	r2, #0
 8001e20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d113      	bne.n	8001e4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d109      	bne.n	8001e4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	085b      	lsrs	r3, r3, #1
 8001e46:	3b01      	subs	r3, #1
 8001e48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d06e      	beq.n	8001f2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b0c      	cmp	r3, #12
 8001e52:	d069      	beq.n	8001f28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e54:	4b53      	ldr	r3, [pc, #332]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e60:	4b50      	ldr	r3, [pc, #320]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0ad      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e70:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001e76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e7c:	f7ff fb80 	bl	8001580 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff fb7c 	bl	8001580 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e09a      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e96:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea2:	4b40      	ldr	r3, [pc, #256]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4b40      	ldr	r3, [pc, #256]	@ (8001fa8 <HAL_RCC_OscConfig+0x784>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001eb2:	3a01      	subs	r2, #1
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	4311      	orrs	r1, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ebc:	0212      	lsls	r2, r2, #8
 8001ebe:	4311      	orrs	r1, r2
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ec4:	0852      	lsrs	r2, r2, #1
 8001ec6:	3a01      	subs	r2, #1
 8001ec8:	0552      	lsls	r2, r2, #21
 8001eca:	4311      	orrs	r1, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ed0:	0852      	lsrs	r2, r2, #1
 8001ed2:	3a01      	subs	r2, #1
 8001ed4:	0652      	lsls	r2, r2, #25
 8001ed6:	4311      	orrs	r1, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001edc:	0912      	lsrs	r2, r2, #4
 8001ede:	0452      	lsls	r2, r2, #17
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	4930      	ldr	r1, [pc, #192]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001eee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f00:	f7ff fb3e 	bl	8001580 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff fb3a 	bl	8001580 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e058      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	4b22      	ldr	r3, [pc, #136]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f26:	e050      	b.n	8001fca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e04f      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d148      	bne.n	8001fca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f44:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4a16      	ldr	r2, [pc, #88]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f50:	f7ff fb16 	bl	8001580 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f58:	f7ff fb12 	bl	8001580 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e030      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x734>
 8001f76:	e028      	b.n	8001fca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	d023      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a08      	ldr	r2, [pc, #32]	@ (8001fa4 <HAL_RCC_OscConfig+0x780>)
 8001f84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff faf9 	bl	8001580 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f90:	e00c      	b.n	8001fac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f92:	f7ff faf5 	bl	8001580 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d905      	bls.n	8001fac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e013      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fac:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_RCC_OscConfig+0x7b0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ec      	bne.n	8001f92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001fb8:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_RCC_OscConfig+0x7b0>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4905      	ldr	r1, [pc, #20]	@ (8001fd4 <HAL_RCC_OscConfig+0x7b0>)
 8001fbe:	4b06      	ldr	r3, [pc, #24]	@ (8001fd8 <HAL_RCC_OscConfig+0x7b4>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60cb      	str	r3, [r1, #12]
 8001fc4:	e001      	b.n	8001fca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	feeefffc 	.word	0xfeeefffc

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0e7      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b75      	ldr	r3, [pc, #468]	@ (80021c8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d910      	bls.n	8002020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b72      	ldr	r3, [pc, #456]	@ (80021c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	4970      	ldr	r1, [pc, #448]	@ (80021c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b6e      	ldr	r3, [pc, #440]	@ (80021c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d001      	beq.n	8002020 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0cf      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d010      	beq.n	800204e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4b66      	ldr	r3, [pc, #408]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002038:	429a      	cmp	r2, r3
 800203a:	d908      	bls.n	800204e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b63      	ldr	r3, [pc, #396]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	4960      	ldr	r1, [pc, #384]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d04c      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b03      	cmp	r3, #3
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002062:	4b5a      	ldr	r3, [pc, #360]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d121      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e0a6      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207a:	4b54      	ldr	r3, [pc, #336]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d115      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e09a      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002092:	4b4e      	ldr	r3, [pc, #312]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e08e      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a2:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e086      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b46      	ldr	r3, [pc, #280]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4943      	ldr	r1, [pc, #268]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c4:	f7ff fa5c 	bl	8001580 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7ff fa58 	bl	8001580 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e06e      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b3a      	ldr	r3, [pc, #232]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d010      	beq.n	8002122 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	4b31      	ldr	r3, [pc, #196]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800210c:	429a      	cmp	r2, r3
 800210e:	d208      	bcs.n	8002122 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002110:	4b2e      	ldr	r3, [pc, #184]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	492b      	ldr	r1, [pc, #172]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002122:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d210      	bcs.n	8002152 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 0207 	bic.w	r2, r3, #7
 8002138:	4923      	ldr	r1, [pc, #140]	@ (80021c8 <HAL_RCC_ClockConfig+0x1ec>)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002140:	4b21      	ldr	r3, [pc, #132]	@ (80021c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d001      	beq.n	8002152 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e036      	b.n	80021c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d008      	beq.n	8002170 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215e:	4b1b      	ldr	r3, [pc, #108]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	4918      	ldr	r1, [pc, #96]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	4313      	orrs	r3, r2
 800216e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d009      	beq.n	8002190 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217c:	4b13      	ldr	r3, [pc, #76]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4910      	ldr	r1, [pc, #64]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 800218c:	4313      	orrs	r3, r2
 800218e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002190:	f000 f824 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <HAL_RCC_ClockConfig+0x1f0>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	490b      	ldr	r1, [pc, #44]	@ (80021d0 <HAL_RCC_ClockConfig+0x1f4>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
 80021ac:	4a09      	ldr	r2, [pc, #36]	@ (80021d4 <HAL_RCC_ClockConfig+0x1f8>)
 80021ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021b0:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <HAL_RCC_ClockConfig+0x1fc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f821 	bl	80011fc <HAL_InitTick>
 80021ba:	4603      	mov	r3, r0
 80021bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80021be:	7afb      	ldrb	r3, [r7, #11]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08006568 	.word	0x08006568
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000004 	.word	0x20000004

080021dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	@ 0x24
 80021e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ea:	4b3e      	ldr	r3, [pc, #248]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f4:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_GetSysClockFreq+0x34>
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	2b0c      	cmp	r3, #12
 8002208:	d121      	bne.n	800224e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d11e      	bne.n	800224e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002210:	4b34      	ldr	r3, [pc, #208]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d107      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800221c:	4b31      	ldr	r3, [pc, #196]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800221e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e005      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800222c:	4b2d      	ldr	r3, [pc, #180]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002238:	4a2b      	ldr	r2, [pc, #172]	@ (80022e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10d      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d102      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002254:	4b25      	ldr	r3, [pc, #148]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e004      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d101      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002260:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002262:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d134      	bne.n	80022d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800226a:	4b1e      	ldr	r3, [pc, #120]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0303 	and.w	r3, r3, #3
 8002272:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d003      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0xa6>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d003      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0xac>
 8002280:	e005      	b.n	800228e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002282:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002284:	617b      	str	r3, [r7, #20]
      break;
 8002286:	e005      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800228a:	617b      	str	r3, [r7, #20]
      break;
 800228c:	e002      	b.n	8002294 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	617b      	str	r3, [r7, #20]
      break;
 8002292:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002294:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	3301      	adds	r3, #1
 80022a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	fb03 f202 	mul.w	r2, r3, r2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ba:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	0e5b      	lsrs	r3, r3, #25
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	3301      	adds	r3, #1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022d4:	69bb      	ldr	r3, [r7, #24]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3724      	adds	r7, #36	@ 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40021000 	.word	0x40021000
 80022e8:	08006580 	.word	0x08006580
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	007a1200 	.word	0x007a1200

080022f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <HAL_RCC_GetHCLKFreq+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000000 	.word	0x20000000

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002310:	f7ff fff0 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0adb      	lsrs	r3, r3, #11
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4904      	ldr	r1, [pc, #16]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800232c:	4618      	mov	r0, r3
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40021000 	.word	0x40021000
 8002334:	08006578 	.word	0x08006578

08002338 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	220f      	movs	r2, #15
 8002346:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002348:	4b12      	ldr	r3, [pc, #72]	@ (8002394 <HAL_RCC_GetClockConfig+0x5c>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002354:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <HAL_RCC_GetClockConfig+0x5c>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <HAL_RCC_GetClockConfig+0x5c>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_RCC_GetClockConfig+0x5c>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	08db      	lsrs	r3, r3, #3
 8002372:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800237a:	4b07      	ldr	r3, [pc, #28]	@ (8002398 <HAL_RCC_GetClockConfig+0x60>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0207 	and.w	r2, r3, #7
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	601a      	str	r2, [r3, #0]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	40022000 	.word	0x40022000

0800239c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b4:	f7ff f9d2 	bl	800175c <HAL_PWREx_GetVoltageRange>
 80023b8:	6178      	str	r0, [r7, #20]
 80023ba:	e014      	b.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	4a24      	ldr	r2, [pc, #144]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80023c8:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d4:	f7ff f9c2 	bl	800175c <HAL_PWREx_GetVoltageRange>
 80023d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	4a1d      	ldr	r2, [pc, #116]	@ (8002454 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023ec:	d10b      	bne.n	8002406 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b80      	cmp	r3, #128	@ 0x80
 80023f2:	d919      	bls.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80023f8:	d902      	bls.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023fa:	2302      	movs	r3, #2
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	e013      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002400:	2301      	movs	r3, #1
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e010      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b80      	cmp	r3, #128	@ 0x80
 800240a:	d902      	bls.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800240c:	2303      	movs	r3, #3
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	e00a      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b80      	cmp	r3, #128	@ 0x80
 8002416:	d102      	bne.n	800241e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002418:	2302      	movs	r3, #2
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	e004      	b.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b70      	cmp	r3, #112	@ 0x70
 8002422:	d101      	bne.n	8002428 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002424:	2301      	movs	r3, #1
 8002426:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002428:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 0207 	bic.w	r2, r3, #7
 8002430:	4909      	ldr	r1, [pc, #36]	@ (8002458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002438:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	429a      	cmp	r2, r3
 8002444:	d001      	beq.n	800244a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40021000 	.word	0x40021000
 8002458:	40022000 	.word	0x40022000

0800245c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e049      	b.n	8002502 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d106      	bne.n	8002488 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f841 	bl	800250a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3304      	adds	r3, #4
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f000 f9da 	bl	8002854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d001      	beq.n	8002538 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e04f      	b.n	80025d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a23      	ldr	r2, [pc, #140]	@ (80025e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01d      	beq.n	8002596 <HAL_TIM_Base_Start_IT+0x76>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002562:	d018      	beq.n	8002596 <HAL_TIM_Base_Start_IT+0x76>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a1f      	ldr	r2, [pc, #124]	@ (80025e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_TIM_Base_Start_IT+0x76>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a1e      	ldr	r2, [pc, #120]	@ (80025ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00e      	beq.n	8002596 <HAL_TIM_Base_Start_IT+0x76>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_TIM_Base_Start_IT+0x76>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d004      	beq.n	8002596 <HAL_TIM_Base_Start_IT+0x76>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a19      	ldr	r2, [pc, #100]	@ (80025f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d115      	bne.n	80025c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	4b17      	ldr	r3, [pc, #92]	@ (80025fc <HAL_TIM_Base_Start_IT+0xdc>)
 800259e:	4013      	ands	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b06      	cmp	r3, #6
 80025a6:	d015      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0xb4>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ae:	d011      	beq.n	80025d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c0:	e008      	b.n	80025d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e000      	b.n	80025d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40012c00 	.word	0x40012c00
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40000800 	.word	0x40000800
 80025f0:	40000c00 	.word	0x40000c00
 80025f4:	40013400 	.word	0x40013400
 80025f8:	40014000 	.word	0x40014000
 80025fc:	00010007 	.word	0x00010007

08002600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d020      	beq.n	8002664 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01b      	beq.n	8002664 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0202 	mvn.w	r2, #2
 8002634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d003      	beq.n	8002652 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f8e4 	bl	8002818 <HAL_TIM_IC_CaptureCallback>
 8002650:	e005      	b.n	800265e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f8d6 	bl	8002804 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f8e7 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d020      	beq.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01b      	beq.n	80026b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0204 	mvn.w	r2, #4
 8002680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8be 	bl	8002818 <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8b0 	bl	8002804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f8c1 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d020      	beq.n	80026fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01b      	beq.n	80026fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0208 	mvn.w	r2, #8
 80026cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f898 	bl	8002818 <HAL_TIM_IC_CaptureCallback>
 80026e8:	e005      	b.n	80026f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f88a 	bl	8002804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f89b 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b00      	cmp	r3, #0
 8002704:	d020      	beq.n	8002748 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0210 	mvn.w	r2, #16
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2208      	movs	r2, #8
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f872 	bl	8002818 <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f864 	bl	8002804 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f875 	bl	800282c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0201 	mvn.w	r2, #1
 8002764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fd08 	bl	800117c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00c      	beq.n	8002790 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f906 	bl	800299c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00c      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80027ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8fe 	bl	80029b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00c      	beq.n	80027d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f834 	bl	8002840 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00c      	beq.n	80027fc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0220 	mvn.w	r2, #32
 80027f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8c6 	bl	8002988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a40      	ldr	r2, [pc, #256]	@ (8002968 <TIM_Base_SetConfig+0x114>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002872:	d00f      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a3d      	ldr	r2, [pc, #244]	@ (800296c <TIM_Base_SetConfig+0x118>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00b      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a3c      	ldr	r2, [pc, #240]	@ (8002970 <TIM_Base_SetConfig+0x11c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d007      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3b      	ldr	r2, [pc, #236]	@ (8002974 <TIM_Base_SetConfig+0x120>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d003      	beq.n	8002894 <TIM_Base_SetConfig+0x40>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3a      	ldr	r2, [pc, #232]	@ (8002978 <TIM_Base_SetConfig+0x124>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d108      	bne.n	80028a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800289a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002968 <TIM_Base_SetConfig+0x114>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01f      	beq.n	80028ee <TIM_Base_SetConfig+0x9a>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b4:	d01b      	beq.n	80028ee <TIM_Base_SetConfig+0x9a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a2c      	ldr	r2, [pc, #176]	@ (800296c <TIM_Base_SetConfig+0x118>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d017      	beq.n	80028ee <TIM_Base_SetConfig+0x9a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a2b      	ldr	r2, [pc, #172]	@ (8002970 <TIM_Base_SetConfig+0x11c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <TIM_Base_SetConfig+0x9a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002974 <TIM_Base_SetConfig+0x120>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00f      	beq.n	80028ee <TIM_Base_SetConfig+0x9a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a29      	ldr	r2, [pc, #164]	@ (8002978 <TIM_Base_SetConfig+0x124>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d00b      	beq.n	80028ee <TIM_Base_SetConfig+0x9a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a28      	ldr	r2, [pc, #160]	@ (800297c <TIM_Base_SetConfig+0x128>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <TIM_Base_SetConfig+0x9a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a27      	ldr	r2, [pc, #156]	@ (8002980 <TIM_Base_SetConfig+0x12c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d003      	beq.n	80028ee <TIM_Base_SetConfig+0x9a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a26      	ldr	r2, [pc, #152]	@ (8002984 <TIM_Base_SetConfig+0x130>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d108      	bne.n	8002900 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a10      	ldr	r2, [pc, #64]	@ (8002968 <TIM_Base_SetConfig+0x114>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00f      	beq.n	800294c <TIM_Base_SetConfig+0xf8>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a12      	ldr	r2, [pc, #72]	@ (8002978 <TIM_Base_SetConfig+0x124>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00b      	beq.n	800294c <TIM_Base_SetConfig+0xf8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a11      	ldr	r2, [pc, #68]	@ (800297c <TIM_Base_SetConfig+0x128>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d007      	beq.n	800294c <TIM_Base_SetConfig+0xf8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a10      	ldr	r2, [pc, #64]	@ (8002980 <TIM_Base_SetConfig+0x12c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d003      	beq.n	800294c <TIM_Base_SetConfig+0xf8>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a0f      	ldr	r2, [pc, #60]	@ (8002984 <TIM_Base_SetConfig+0x130>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d103      	bne.n	8002954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	615a      	str	r2, [r3, #20]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40012c00 	.word	0x40012c00
 800296c:	40000400 	.word	0x40000400
 8002970:	40000800 	.word	0x40000800
 8002974:	40000c00 	.word	0x40000c00
 8002978:	40013400 	.word	0x40013400
 800297c:	40014000 	.word	0x40014000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800

08002988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <SysTick_Handler+0x1c>)
 80029ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029cc:	f001 fede 	bl	800478c <xTaskGetSchedulerState>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d001      	beq.n	80029da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80029d6:	f002 fdd7 	bl	8005588 <xPortSysTickHandler>
  }
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a07      	ldr	r2, [pc, #28]	@ (8002a10 <vApplicationGetIdleTaskMemory+0x2c>)
 80029f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	4a06      	ldr	r2, [pc, #24]	@ (8002a14 <vApplicationGetIdleTaskMemory+0x30>)
 80029fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2280      	movs	r2, #128	@ 0x80
 8002a00:	601a      	str	r2, [r3, #0]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	200001fc 	.word	0x200001fc
 8002a14:	200002a4 	.word	0x200002a4

08002a18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a07      	ldr	r2, [pc, #28]	@ (8002a44 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	4a06      	ldr	r2, [pc, #24]	@ (8002a48 <vApplicationGetTimerTaskMemory+0x30>)
 8002a2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a36:	601a      	str	r2, [r3, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	200004a4 	.word	0x200004a4
 8002a48:	2000054c 	.word	0x2000054c

08002a4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f103 0208 	add.w	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f103 0208 	add.w	r2, r3, #8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f103 0208 	add.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aee:	b480      	push	{r7}
 8002af0:	b085      	sub	sp, #20
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
 8002af6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d103      	bne.n	8002b0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	e00c      	b.n	8002b28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3308      	adds	r3, #8
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e002      	b.n	8002b1c <vListInsert+0x2e>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d2f6      	bcs.n	8002b16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	601a      	str	r2, [r3, #0]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6892      	ldr	r2, [r2, #8]
 8002b76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6852      	ldr	r2, [r2, #4]
 8002b80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d103      	bne.n	8002b94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	1e5a      	subs	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002be0:	f002 fc42 	bl	8005468 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	441a      	add	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	3b01      	subs	r3, #1
 8002c12:	68f9      	ldr	r1, [r7, #12]
 8002c14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	22ff      	movs	r2, #255	@ 0xff
 8002c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	22ff      	movs	r2, #255	@ 0xff
 8002c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d114      	bne.n	8002c60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d01a      	beq.n	8002c74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3310      	adds	r3, #16
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 fbdc 	bl	8004400 <xTaskRemoveFromEventList>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d012      	beq.n	8002c74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <xQueueGenericReset+0xd0>)
 8002c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	e009      	b.n	8002c74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3310      	adds	r3, #16
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fef1 	bl	8002a4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3324      	adds	r3, #36	@ 0x24
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff feec 	bl	8002a4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c74:	f002 fc2a 	bl	80054cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c78:	2301      	movs	r3, #1
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000ed04 	.word	0xe000ed04

08002c88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08e      	sub	sp, #56	@ 0x38
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <xQueueGenericCreateStatic+0x56>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <xQueueGenericCreateStatic+0x5a>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <xQueueGenericCreateStatic+0x5c>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10b      	bne.n	8002d00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	623b      	str	r3, [r7, #32]
}
 8002cfa:	bf00      	nop
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <xQueueGenericCreateStatic+0x84>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <xQueueGenericCreateStatic+0x88>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <xQueueGenericCreateStatic+0x8a>
 8002d10:	2300      	movs	r3, #0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	61fb      	str	r3, [r7, #28]
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	e7fd      	b.n	8002d2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d2e:	2350      	movs	r3, #80	@ 0x50
 8002d30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b50      	cmp	r3, #80	@ 0x50
 8002d36:	d00b      	beq.n	8002d50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	61bb      	str	r3, [r7, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00d      	beq.n	8002d78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	68f8      	ldr	r0, [r7, #12]
 8002d74:	f000 f840 	bl	8002df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3730      	adds	r7, #48	@ 0x30
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b08a      	sub	sp, #40	@ 0x28
 8002d86:	af02      	add	r7, sp, #8
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <xQueueGenericCreate+0x2c>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	613b      	str	r3, [r7, #16]
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	3350      	adds	r3, #80	@ 0x50
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 fc75 	bl	80056ac <pvPortMalloc>
 8002dc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d011      	beq.n	8002dee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3350      	adds	r3, #80	@ 0x50
 8002dd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ddc:	79fa      	ldrb	r2, [r7, #7]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	4613      	mov	r3, r2
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f805 	bl	8002df8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dee:	69bb      	ldr	r3, [r7, #24]
	}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3720      	adds	r7, #32
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d103      	bne.n	8002e14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e002      	b.n	8002e1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e26:	2101      	movs	r1, #1
 8002e28:	69b8      	ldr	r0, [r7, #24]
 8002e2a:	f7ff fec3 	bl	8002bb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00e      	beq.n	8002e6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2200      	movs	r2, #0
 8002e62:	2100      	movs	r1, #0
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f81d 	bl	8002ea4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	2300      	movs	r3, #0
 8002e82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	461a      	mov	r2, r3
 8002e88:	6939      	ldr	r1, [r7, #16]
 8002e8a:	6978      	ldr	r0, [r7, #20]
 8002e8c:	f7ff ff79 	bl	8002d82 <xQueueGenericCreate>
 8002e90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f7ff ffd3 	bl	8002e3e <prvInitialiseMutex>

		return xNewQueue;
 8002e98:	68fb      	ldr	r3, [r7, #12]
	}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08e      	sub	sp, #56	@ 0x38
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <xQueueGenericSend+0x34>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ed2:	bf00      	nop
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d103      	bne.n	8002ee6 <xQueueGenericSend+0x42>
 8002ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <xQueueGenericSend+0x46>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <xQueueGenericSend+0x48>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <xQueueGenericSend+0x64>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d103      	bne.n	8002f16 <xQueueGenericSend+0x72>
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <xQueueGenericSend+0x76>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <xQueueGenericSend+0x78>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <xQueueGenericSend+0x94>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	623b      	str	r3, [r7, #32]
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f38:	f001 fc28 	bl	800478c <xTaskGetSchedulerState>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d102      	bne.n	8002f48 <xQueueGenericSend+0xa4>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <xQueueGenericSend+0xa8>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <xQueueGenericSend+0xaa>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10b      	bne.n	8002f6a <xQueueGenericSend+0xc6>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	61fb      	str	r3, [r7, #28]
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	e7fd      	b.n	8002f66 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f6a:	f002 fa7d 	bl	8005468 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d302      	bcc.n	8002f80 <xQueueGenericSend+0xdc>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d129      	bne.n	8002fd4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f86:	f000 fbc7 	bl	8003718 <prvCopyDataToQueue>
 8002f8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d010      	beq.n	8002fb6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	3324      	adds	r3, #36	@ 0x24
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 fa31 	bl	8004400 <xTaskRemoveFromEventList>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80030a4 <xQueueGenericSend+0x200>)
 8002fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	e00a      	b.n	8002fcc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fbc:	4b39      	ldr	r3, [pc, #228]	@ (80030a4 <xQueueGenericSend+0x200>)
 8002fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fcc:	f002 fa7e 	bl	80054cc <vPortExitCritical>
				return pdPASS;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e063      	b.n	800309c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fda:	f002 fa77 	bl	80054cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e05c      	b.n	800309c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 fa6b 	bl	80044c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ff6:	f002 fa69 	bl	80054cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ffa:	f000 ffd3 	bl	8003fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ffe:	f002 fa33 	bl	8005468 <vPortEnterCritical>
 8003002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003004:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003008:	b25b      	sxtb	r3, r3
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d103      	bne.n	8003018 <xQueueGenericSend+0x174>
 8003010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800301e:	b25b      	sxtb	r3, r3
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d103      	bne.n	800302e <xQueueGenericSend+0x18a>
 8003026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800302e:	f002 fa4d 	bl	80054cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003032:	1d3a      	adds	r2, r7, #4
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f001 fa5a 	bl	80044f4 <xTaskCheckForTimeOut>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d124      	bne.n	8003090 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003046:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003048:	f000 fc5e 	bl	8003908 <prvIsQueueFull>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d018      	beq.n	8003084 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003054:	3310      	adds	r3, #16
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f001 f97e 	bl	800435c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003062:	f000 fbe9 	bl	8003838 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003066:	f000 ffab 	bl	8003fc0 <xTaskResumeAll>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	f47f af7c 	bne.w	8002f6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003072:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <xQueueGenericSend+0x200>)
 8003074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	e772      	b.n	8002f6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003086:	f000 fbd7 	bl	8003838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800308a:	f000 ff99 	bl	8003fc0 <xTaskResumeAll>
 800308e:	e76c      	b.n	8002f6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003092:	f000 fbd1 	bl	8003838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003096:	f000 ff93 	bl	8003fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800309a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800309c:	4618      	mov	r0, r3
 800309e:	3738      	adds	r7, #56	@ 0x38
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	e000ed04 	.word	0xe000ed04

080030a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b090      	sub	sp, #64	@ 0x40
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80030ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80030c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c4:	f383 8811 	msr	BASEPRI, r3
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	f3bf 8f4f 	dsb	sy
 80030d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030d2:	bf00      	nop
 80030d4:	bf00      	nop
 80030d6:	e7fd      	b.n	80030d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d103      	bne.n	80030e6 <xQueueGenericSendFromISR+0x3e>
 80030de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <xQueueGenericSendFromISR+0x42>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <xQueueGenericSendFromISR+0x44>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003102:	bf00      	nop
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d103      	bne.n	8003116 <xQueueGenericSendFromISR+0x6e>
 800310e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <xQueueGenericSendFromISR+0x72>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <xQueueGenericSendFromISR+0x74>
 800311a:	2300      	movs	r3, #0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	623b      	str	r3, [r7, #32]
}
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	e7fd      	b.n	8003134 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003138:	f002 fa76 	bl	8005628 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800313c:	f3ef 8211 	mrs	r2, BASEPRI
 8003140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003144:	f383 8811 	msr	BASEPRI, r3
 8003148:	f3bf 8f6f 	isb	sy
 800314c:	f3bf 8f4f 	dsb	sy
 8003150:	61fa      	str	r2, [r7, #28]
 8003152:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003154:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003156:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800315c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800315e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003160:	429a      	cmp	r2, r3
 8003162:	d302      	bcc.n	800316a <xQueueGenericSendFromISR+0xc2>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d12f      	bne.n	80031ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800316a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003170:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003180:	f000 faca 	bl	8003718 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003184:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d112      	bne.n	80031b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003198:	3324      	adds	r3, #36	@ 0x24
 800319a:	4618      	mov	r0, r3
 800319c:	f001 f930 	bl	8004400 <xTaskRemoveFromEventList>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00e      	beq.n	80031c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	e007      	b.n	80031c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80031b8:	3301      	adds	r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	b25a      	sxtb	r2, r3
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80031c4:	2301      	movs	r3, #1
 80031c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80031c8:	e001      	b.n	80031ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3740      	adds	r7, #64	@ 0x40
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	@ 0x38
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80031f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	623b      	str	r3, [r7, #32]
}
 800320a:	bf00      	nop
 800320c:	bf00      	nop
 800320e:	e7fd      	b.n	800320c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00b      	beq.n	8003230 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	61fb      	str	r3, [r7, #28]
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <xQueueGiveFromISR+0x5c>
 8003238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <xQueueGiveFromISR+0x60>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <xQueueGiveFromISR+0x62>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10b      	bne.n	8003262 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	61bb      	str	r3, [r7, #24]
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	e7fd      	b.n	800325e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003262:	f002 f9e1 	bl	8005628 <vPortValidateInterruptPriority>
	__asm volatile
 8003266:	f3ef 8211 	mrs	r2, BASEPRI
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	617a      	str	r2, [r7, #20]
 800327c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800327e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003280:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003286:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800328e:	429a      	cmp	r2, r3
 8003290:	d22b      	bcs.n	80032ea <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003294:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	1c5a      	adds	r2, r3, #1
 80032a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d112      	bne.n	80032d4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b8:	3324      	adds	r3, #36	@ 0x24
 80032ba:	4618      	mov	r0, r3
 80032bc:	f001 f8a0 	bl	8004400 <xTaskRemoveFromEventList>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00e      	beq.n	80032e4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e007      	b.n	80032e4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032d8:	3301      	adds	r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	b25a      	sxtb	r2, r3
 80032de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80032e4:	2301      	movs	r3, #1
 80032e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80032e8:	e001      	b.n	80032ee <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f383 8811 	msr	BASEPRI, r3
}
 80032f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3738      	adds	r7, #56	@ 0x38
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08c      	sub	sp, #48	@ 0x30
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003310:	2300      	movs	r3, #0
 8003312:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <xQueueReceive+0x32>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	623b      	str	r3, [r7, #32]
}
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <xQueueReceive+0x40>
 800333c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <xQueueReceive+0x44>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <xQueueReceive+0x46>
 8003348:	2300      	movs	r3, #0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10b      	bne.n	8003366 <xQueueReceive+0x62>
	__asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	61fb      	str	r3, [r7, #28]
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	e7fd      	b.n	8003362 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003366:	f001 fa11 	bl	800478c <xTaskGetSchedulerState>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <xQueueReceive+0x72>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <xQueueReceive+0x76>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <xQueueReceive+0x78>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <xQueueReceive+0x94>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	61bb      	str	r3, [r7, #24]
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003398:	f002 f866 	bl	8005468 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800339c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01f      	beq.n	80033e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033ac:	f000 fa1e 	bl	80037ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	1e5a      	subs	r2, r3, #1
 80033b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00f      	beq.n	80033e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	3310      	adds	r3, #16
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 f81b 	bl	8004400 <xTaskRemoveFromEventList>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033d0:	4b3c      	ldr	r3, [pc, #240]	@ (80034c4 <xQueueReceive+0x1c0>)
 80033d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033e0:	f002 f874 	bl	80054cc <vPortExitCritical>
				return pdPASS;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e069      	b.n	80034bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d103      	bne.n	80033f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033ee:	f002 f86d 	bl	80054cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e062      	b.n	80034bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033fc:	f107 0310 	add.w	r3, r7, #16
 8003400:	4618      	mov	r0, r3
 8003402:	f001 f861 	bl	80044c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003406:	2301      	movs	r3, #1
 8003408:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800340a:	f002 f85f 	bl	80054cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800340e:	f000 fdc9 	bl	8003fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003412:	f002 f829 	bl	8005468 <vPortEnterCritical>
 8003416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003418:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800341c:	b25b      	sxtb	r3, r3
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d103      	bne.n	800342c <xQueueReceive+0x128>
 8003424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003432:	b25b      	sxtb	r3, r3
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d103      	bne.n	8003442 <xQueueReceive+0x13e>
 800343a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003442:	f002 f843 	bl	80054cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003446:	1d3a      	adds	r2, r7, #4
 8003448:	f107 0310 	add.w	r3, r7, #16
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f001 f850 	bl	80044f4 <xTaskCheckForTimeOut>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d123      	bne.n	80034a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800345a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800345c:	f000 fa3e 	bl	80038dc <prvIsQueueEmpty>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d017      	beq.n	8003496 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003468:	3324      	adds	r3, #36	@ 0x24
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f000 ff74 	bl	800435c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003474:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003476:	f000 f9df 	bl	8003838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800347a:	f000 fda1 	bl	8003fc0 <xTaskResumeAll>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d189      	bne.n	8003398 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003484:	4b0f      	ldr	r3, [pc, #60]	@ (80034c4 <xQueueReceive+0x1c0>)
 8003486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	f3bf 8f4f 	dsb	sy
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	e780      	b.n	8003398 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003498:	f000 f9ce 	bl	8003838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800349c:	f000 fd90 	bl	8003fc0 <xTaskResumeAll>
 80034a0:	e77a      	b.n	8003398 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034a4:	f000 f9c8 	bl	8003838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034a8:	f000 fd8a 	bl	8003fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034ae:	f000 fa15 	bl	80038dc <prvIsQueueEmpty>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f43f af6f 	beq.w	8003398 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3730      	adds	r7, #48	@ 0x30
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	e000ed04 	.word	0xe000ed04

080034c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b08e      	sub	sp, #56	@ 0x38
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80034da:	2300      	movs	r3, #0
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80034e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	623b      	str	r3, [r7, #32]
}
 80034f6:	bf00      	nop
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	61fb      	str	r3, [r7, #28]
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	e7fd      	b.n	8003518 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800351c:	f001 f936 	bl	800478c <xTaskGetSchedulerState>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d102      	bne.n	800352c <xQueueSemaphoreTake+0x64>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <xQueueSemaphoreTake+0x68>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <xQueueSemaphoreTake+0x6a>
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10b      	bne.n	800354e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	61bb      	str	r3, [r7, #24]
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	e7fd      	b.n	800354a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800354e:	f001 ff8b 	bl	8005468 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003556:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d024      	beq.n	80035a8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800355e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003560:	1e5a      	subs	r2, r3, #1
 8003562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003564:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800356e:	f001 fa87 	bl	8004a80 <pvTaskIncrementMutexHeldCount>
 8003572:	4602      	mov	r2, r0
 8003574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003576:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00f      	beq.n	80035a0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003582:	3310      	adds	r3, #16
 8003584:	4618      	mov	r0, r3
 8003586:	f000 ff3b 	bl	8004400 <xTaskRemoveFromEventList>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003590:	4b54      	ldr	r3, [pc, #336]	@ (80036e4 <xQueueSemaphoreTake+0x21c>)
 8003592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035a0:	f001 ff94 	bl	80054cc <vPortExitCritical>
				return pdPASS;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e098      	b.n	80036da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d112      	bne.n	80035d4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80035ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	617b      	str	r3, [r7, #20]
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80035cc:	f001 ff7e 	bl	80054cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e082      	b.n	80036da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035da:	f107 030c 	add.w	r3, r7, #12
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 ff72 	bl	80044c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035e8:	f001 ff70 	bl	80054cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ec:	f000 fcda 	bl	8003fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035f0:	f001 ff3a 	bl	8005468 <vPortEnterCritical>
 80035f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d103      	bne.n	800360a <xQueueSemaphoreTake+0x142>
 8003602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800360a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800360c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003610:	b25b      	sxtb	r3, r3
 8003612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003616:	d103      	bne.n	8003620 <xQueueSemaphoreTake+0x158>
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003620:	f001 ff54 	bl	80054cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003624:	463a      	mov	r2, r7
 8003626:	f107 030c 	add.w	r3, r7, #12
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f000 ff61 	bl	80044f4 <xTaskCheckForTimeOut>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d132      	bne.n	800369e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003638:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800363a:	f000 f94f 	bl	80038dc <prvIsQueueEmpty>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d026      	beq.n	8003692 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d109      	bne.n	8003660 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800364c:	f001 ff0c 	bl	8005468 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f001 f8b7 	bl	80047c8 <xTaskPriorityInherit>
 800365a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800365c:	f001 ff36 	bl	80054cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003662:	3324      	adds	r3, #36	@ 0x24
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fe77 	bl	800435c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800366e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003670:	f000 f8e2 	bl	8003838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003674:	f000 fca4 	bl	8003fc0 <xTaskResumeAll>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	f47f af67 	bne.w	800354e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <xQueueSemaphoreTake+0x21c>)
 8003682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	e75d      	b.n	800354e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003692:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003694:	f000 f8d0 	bl	8003838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003698:	f000 fc92 	bl	8003fc0 <xTaskResumeAll>
 800369c:	e757      	b.n	800354e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800369e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036a0:	f000 f8ca 	bl	8003838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036a4:	f000 fc8c 	bl	8003fc0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036aa:	f000 f917 	bl	80038dc <prvIsQueueEmpty>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f43f af4c 	beq.w	800354e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80036bc:	f001 fed4 	bl	8005468 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80036c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80036c2:	f000 f811 	bl	80036e8 <prvGetDisinheritPriorityAfterTimeout>
 80036c6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80036c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 f952 	bl	8004978 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80036d4:	f001 fefa 	bl	80054cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3738      	adds	r7, #56	@ 0x38
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	e000ed04 	.word	0xe000ed04

080036e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d006      	beq.n	8003706 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e001      	b.n	800370a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800370a:	68fb      	ldr	r3, [r7, #12]
	}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d14d      	bne.n	80037da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f8a8 	bl	8004898 <xTaskPriorityDisinherit>
 8003748:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e043      	b.n	80037da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d119      	bne.n	800378c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6858      	ldr	r0, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	461a      	mov	r2, r3
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	f002 fa3a 	bl	8005bdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	441a      	add	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d32b      	bcc.n	80037da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	e026      	b.n	80037da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68d8      	ldr	r0, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	461a      	mov	r2, r3
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	f002 fa20 	bl	8005bdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	425b      	negs	r3, r3
 80037a6:	441a      	add	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d207      	bcs.n	80037c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	425b      	negs	r3, r3
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d105      	bne.n	80037da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80037e2:	697b      	ldr	r3, [r7, #20]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	441a      	add	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d303      	bcc.n	8003820 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68d9      	ldr	r1, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	461a      	mov	r2, r3
 800382a:	6838      	ldr	r0, [r7, #0]
 800382c:	f002 f9d6 	bl	8005bdc <memcpy>
	}
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003840:	f001 fe12 	bl	8005468 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800384a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800384c:	e011      	b.n	8003872 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	d012      	beq.n	800387c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3324      	adds	r3, #36	@ 0x24
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fdd0 	bl	8004400 <xTaskRemoveFromEventList>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003866:	f000 fea9 	bl	80045bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	3b01      	subs	r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	dce9      	bgt.n	800384e <prvUnlockQueue+0x16>
 800387a:	e000      	b.n	800387e <prvUnlockQueue+0x46>
					break;
 800387c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	22ff      	movs	r2, #255	@ 0xff
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003886:	f001 fe21 	bl	80054cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800388a:	f001 fded 	bl	8005468 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003894:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003896:	e011      	b.n	80038bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3310      	adds	r3, #16
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fdab 	bl	8004400 <xTaskRemoveFromEventList>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038b0:	f000 fe84 	bl	80045bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038b4:	7bbb      	ldrb	r3, [r7, #14]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dce9      	bgt.n	8003898 <prvUnlockQueue+0x60>
 80038c4:	e000      	b.n	80038c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	22ff      	movs	r2, #255	@ 0xff
 80038cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80038d0:	f001 fdfc 	bl	80054cc <vPortExitCritical>
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e4:	f001 fdc0 	bl	8005468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e001      	b.n	80038fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038fa:	f001 fde7 	bl	80054cc <vPortExitCritical>

	return xReturn;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003910:	f001 fdaa 	bl	8005468 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	429a      	cmp	r2, r3
 800391e:	d102      	bne.n	8003926 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003920:	2301      	movs	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e001      	b.n	800392a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800392a:	f001 fdcf 	bl	80054cc <vPortExitCritical>

	return xReturn;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e014      	b.n	8003972 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003948:	4a0f      	ldr	r2, [pc, #60]	@ (8003988 <vQueueAddToRegistry+0x50>)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003954:	490c      	ldr	r1, [pc, #48]	@ (8003988 <vQueueAddToRegistry+0x50>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800395e:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <vQueueAddToRegistry+0x50>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800396a:	e006      	b.n	800397a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b07      	cmp	r3, #7
 8003976:	d9e7      	bls.n	8003948 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	2000094c 	.word	0x2000094c

0800398c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800399c:	f001 fd64 	bl	8005468 <vPortEnterCritical>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d103      	bne.n	80039b6 <vQueueWaitForMessageRestricted+0x2a>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039bc:	b25b      	sxtb	r3, r3
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d103      	bne.n	80039cc <vQueueWaitForMessageRestricted+0x40>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039cc:	f001 fd7e 	bl	80054cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3324      	adds	r3, #36	@ 0x24
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fce1 	bl	80043a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039e6:	6978      	ldr	r0, [r7, #20]
 80039e8:	f7ff ff26 	bl	8003838 <prvUnlockQueue>
	}
 80039ec:	bf00      	nop
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08e      	sub	sp, #56	@ 0x38
 80039f8:	af04      	add	r7, sp, #16
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	623b      	str	r3, [r7, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	e7fd      	b.n	8003a1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10b      	bne.n	8003a3e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	61fb      	str	r3, [r7, #28]
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	e7fd      	b.n	8003a3a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a3e:	23a8      	movs	r3, #168	@ 0xa8
 8003a40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2ba8      	cmp	r3, #168	@ 0xa8
 8003a46:	d00b      	beq.n	8003a60 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	61bb      	str	r3, [r7, #24]
}
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	e7fd      	b.n	8003a5c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01e      	beq.n	8003aa6 <xTaskCreateStatic+0xb2>
 8003a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01b      	beq.n	8003aa6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a80:	2300      	movs	r3, #0
 8003a82:	9303      	str	r3, [sp, #12]
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	9302      	str	r3, [sp, #8]
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f851 	bl	8003b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003aa0:	f000 f8f6 	bl	8003c90 <prvAddNewTaskToReadyList>
 8003aa4:	e001      	b.n	8003aaa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003aaa:	697b      	ldr	r3, [r7, #20]
	}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3728      	adds	r7, #40	@ 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	@ 0x30
 8003ab8:	af04      	add	r7, sp, #16
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fdef 	bl	80056ac <pvPortMalloc>
 8003ace:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00e      	beq.n	8003af4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ad6:	20a8      	movs	r0, #168	@ 0xa8
 8003ad8:	f001 fde8 	bl	80056ac <pvPortMalloc>
 8003adc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aea:	e005      	b.n	8003af8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003aec:	6978      	ldr	r0, [r7, #20]
 8003aee:	f001 feab 	bl	8005848 <vPortFree>
 8003af2:	e001      	b.n	8003af8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d017      	beq.n	8003b2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9303      	str	r3, [sp, #12]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	9302      	str	r3, [sp, #8]
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f80f 	bl	8003b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b22:	69f8      	ldr	r0, [r7, #28]
 8003b24:	f000 f8b4 	bl	8003c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e002      	b.n	8003b34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b34:	69bb      	ldr	r3, [r7, #24]
	}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	21a5      	movs	r1, #165	@ 0xa5
 8003b5a:	f001 ffb5 	bl	8005ac8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f023 0307 	bic.w	r3, r3, #7
 8003b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	617b      	str	r3, [r7, #20]
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01f      	beq.n	8003be0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	e012      	b.n	8003bcc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	7819      	ldrb	r1, [r3, #0]
 8003bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3334      	adds	r3, #52	@ 0x34
 8003bb6:	460a      	mov	r2, r1
 8003bb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	d9e9      	bls.n	8003ba6 <prvInitialiseNewTask+0x66>
 8003bd2:	e000      	b.n	8003bd6 <prvInitialiseNewTask+0x96>
			{
				break;
 8003bd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bde:	e003      	b.n	8003be8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	2b37      	cmp	r3, #55	@ 0x37
 8003bec:	d901      	bls.n	8003bf2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bee:	2337      	movs	r3, #55	@ 0x37
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c00:	2200      	movs	r2, #0
 8003c02:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c06:	3304      	adds	r3, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe ff3f 	bl	8002a8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	3318      	adds	r3, #24
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe ff3a 	bl	8002a8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	3354      	adds	r3, #84	@ 0x54
 8003c42:	224c      	movs	r2, #76	@ 0x4c
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 ff3e 	bl	8005ac8 <memset>
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c84 <prvInitialiseNewTask+0x144>)
 8003c50:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	4a0c      	ldr	r2, [pc, #48]	@ (8003c88 <prvInitialiseNewTask+0x148>)
 8003c56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c8c <prvInitialiseNewTask+0x14c>)
 8003c5c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	69b8      	ldr	r0, [r7, #24]
 8003c64:	f001 face 	bl	8005204 <pxPortInitialiseStack>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c7a:	bf00      	nop
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20001b98 	.word	0x20001b98
 8003c88:	20001c00 	.word	0x20001c00
 8003c8c:	20001c68 	.word	0x20001c68

08003c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c98:	f001 fbe6 	bl	8005468 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <prvAddNewTaskToReadyList+0xc4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d54 <prvAddNewTaskToReadyList+0xc4>)
 8003ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cae:	4a2a      	ldr	r2, [pc, #168]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cb4:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <prvAddNewTaskToReadyList+0xc4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d110      	bne.n	8003cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cbc:	f000 fca2 	bl	8004604 <prvInitialiseTaskLists>
 8003cc0:	e00d      	b.n	8003cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cc2:	4b26      	ldr	r3, [pc, #152]	@ (8003d5c <prvAddNewTaskToReadyList+0xcc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cca:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d802      	bhi.n	8003cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <prvAddNewTaskToReadyList+0xd0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d60 <prvAddNewTaskToReadyList+0xd0>)
 8003ce6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <prvAddNewTaskToReadyList+0xd0>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <prvAddNewTaskToReadyList+0xd4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d903      	bls.n	8003d04 <prvAddNewTaskToReadyList+0x74>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <prvAddNewTaskToReadyList+0xd4>)
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4a15      	ldr	r2, [pc, #84]	@ (8003d68 <prvAddNewTaskToReadyList+0xd8>)
 8003d12:	441a      	add	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f7fe fec3 	bl	8002aa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d20:	f001 fbd4 	bl	80054cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d24:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <prvAddNewTaskToReadyList+0xcc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d207      	bcs.n	8003d4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d6c <prvAddNewTaskToReadyList+0xdc>)
 8003d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000e60 	.word	0x20000e60
 8003d58:	2000098c 	.word	0x2000098c
 8003d5c:	20000e6c 	.word	0x20000e6c
 8003d60:	20000e7c 	.word	0x20000e7c
 8003d64:	20000e68 	.word	0x20000e68
 8003d68:	20000990 	.word	0x20000990
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003d78:	f001 fb76 	bl	8005468 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <vTaskDelete+0x18>
 8003d82:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <vTaskDelete+0xc8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	e000      	b.n	8003d8a <vTaskDelete+0x1a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fe fee5 	bl	8002b60 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d004      	beq.n	8003da8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3318      	adds	r3, #24
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fe fedc 	bl	8002b60 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003da8:	4b24      	ldr	r3, [pc, #144]	@ (8003e3c <vTaskDelete+0xcc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3301      	adds	r3, #1
 8003dae:	4a23      	ldr	r2, [pc, #140]	@ (8003e3c <vTaskDelete+0xcc>)
 8003db0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003db2:	4b21      	ldr	r3, [pc, #132]	@ (8003e38 <vTaskDelete+0xc8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d10b      	bne.n	8003dd4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	481f      	ldr	r0, [pc, #124]	@ (8003e40 <vTaskDelete+0xd0>)
 8003dc4:	f7fe fe6f 	bl	8002aa6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <vTaskDelete+0xd4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <vTaskDelete+0xd4>)
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e009      	b.n	8003de8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <vTaskDelete+0xd8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	4a1b      	ldr	r2, [pc, #108]	@ (8003e48 <vTaskDelete+0xd8>)
 8003ddc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fc7e 	bl	80046e0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003de4:	f000 fcb2 	bl	800474c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003de8:	f001 fb70 	bl	80054cc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003dec:	4b17      	ldr	r3, [pc, #92]	@ (8003e4c <vTaskDelete+0xdc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d01c      	beq.n	8003e2e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8003df4:	4b10      	ldr	r3, [pc, #64]	@ (8003e38 <vTaskDelete+0xc8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d117      	bne.n	8003e2e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003dfe:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <vTaskDelete+0xe0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <vTaskDelete+0xae>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	60bb      	str	r3, [r7, #8]
}
 8003e18:	bf00      	nop
 8003e1a:	bf00      	nop
 8003e1c:	e7fd      	b.n	8003e1a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <vTaskDelete+0xe4>)
 8003e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000098c 	.word	0x2000098c
 8003e3c:	20000e7c 	.word	0x20000e7c
 8003e40:	20000e34 	.word	0x20000e34
 8003e44:	20000e48 	.word	0x20000e48
 8003e48:	20000e60 	.word	0x20000e60
 8003e4c:	20000e6c 	.word	0x20000e6c
 8003e50:	20000e88 	.word	0x20000e88
 8003e54:	e000ed04 	.word	0xe000ed04

08003e58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d018      	beq.n	8003e9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e6a:	4b14      	ldr	r3, [pc, #80]	@ (8003ebc <vTaskDelay+0x64>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <vTaskDelay+0x32>
	__asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	60bb      	str	r3, [r7, #8]
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e8a:	f000 f88b 	bl	8003fa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e8e:	2100      	movs	r1, #0
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 fe09 	bl	8004aa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e96:	f000 f893 	bl	8003fc0 <xTaskResumeAll>
 8003e9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d107      	bne.n	8003eb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ea2:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <vTaskDelay+0x68>)
 8003ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000e88 	.word	0x20000e88
 8003ec0:	e000ed04 	.word	0xe000ed04

08003ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08a      	sub	sp, #40	@ 0x28
 8003ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ed2:	463a      	mov	r2, r7
 8003ed4:	1d39      	adds	r1, r7, #4
 8003ed6:	f107 0308 	add.w	r3, r7, #8
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fe fd82 	bl	80029e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ee0:	6839      	ldr	r1, [r7, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	9202      	str	r2, [sp, #8]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	2300      	movs	r3, #0
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	460a      	mov	r2, r1
 8003ef2:	4924      	ldr	r1, [pc, #144]	@ (8003f84 <vTaskStartScheduler+0xc0>)
 8003ef4:	4824      	ldr	r0, [pc, #144]	@ (8003f88 <vTaskStartScheduler+0xc4>)
 8003ef6:	f7ff fd7d 	bl	80039f4 <xTaskCreateStatic>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4a23      	ldr	r2, [pc, #140]	@ (8003f8c <vTaskStartScheduler+0xc8>)
 8003efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f00:	4b22      	ldr	r3, [pc, #136]	@ (8003f8c <vTaskStartScheduler+0xc8>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
 8003f0c:	e001      	b.n	8003f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d102      	bne.n	8003f1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f18:	f000 fe1a 	bl	8004b50 <xTimerCreateTimerTask>
 8003f1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d11b      	bne.n	8003f5c <vTaskStartScheduler+0x98>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	613b      	str	r3, [r7, #16]
}
 8003f36:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f38:	4b15      	ldr	r3, [pc, #84]	@ (8003f90 <vTaskStartScheduler+0xcc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3354      	adds	r3, #84	@ 0x54
 8003f3e:	4a15      	ldr	r2, [pc, #84]	@ (8003f94 <vTaskStartScheduler+0xd0>)
 8003f40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f42:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <vTaskStartScheduler+0xd4>)
 8003f44:	f04f 32ff 	mov.w	r2, #4294967295
 8003f48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f4a:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <vTaskStartScheduler+0xd8>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f50:	4b13      	ldr	r3, [pc, #76]	@ (8003fa0 <vTaskStartScheduler+0xdc>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f56:	f001 f9e3 	bl	8005320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f5a:	e00f      	b.n	8003f7c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d10b      	bne.n	8003f7c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	60fb      	str	r3, [r7, #12]
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	e7fd      	b.n	8003f78 <vTaskStartScheduler+0xb4>
}
 8003f7c:	bf00      	nop
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	08006550 	.word	0x08006550
 8003f88:	080045d5 	.word	0x080045d5
 8003f8c:	20000e84 	.word	0x20000e84
 8003f90:	2000098c 	.word	0x2000098c
 8003f94:	20000010 	.word	0x20000010
 8003f98:	20000e80 	.word	0x20000e80
 8003f9c:	20000e6c 	.word	0x20000e6c
 8003fa0:	20000e64 	.word	0x20000e64

08003fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fa8:	4b04      	ldr	r3, [pc, #16]	@ (8003fbc <vTaskSuspendAll+0x18>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	4a03      	ldr	r2, [pc, #12]	@ (8003fbc <vTaskSuspendAll+0x18>)
 8003fb0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20000e88 	.word	0x20000e88

08003fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fce:	4b42      	ldr	r3, [pc, #264]	@ (80040d8 <xTaskResumeAll+0x118>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <xTaskResumeAll+0x2e>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	603b      	str	r3, [r7, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	bf00      	nop
 8003fec:	e7fd      	b.n	8003fea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fee:	f001 fa3b 	bl	8005468 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ff2:	4b39      	ldr	r3, [pc, #228]	@ (80040d8 <xTaskResumeAll+0x118>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	4a37      	ldr	r2, [pc, #220]	@ (80040d8 <xTaskResumeAll+0x118>)
 8003ffa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ffc:	4b36      	ldr	r3, [pc, #216]	@ (80040d8 <xTaskResumeAll+0x118>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d162      	bne.n	80040ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004004:	4b35      	ldr	r3, [pc, #212]	@ (80040dc <xTaskResumeAll+0x11c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d05e      	beq.n	80040ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800400c:	e02f      	b.n	800406e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400e:	4b34      	ldr	r3, [pc, #208]	@ (80040e0 <xTaskResumeAll+0x120>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3318      	adds	r3, #24
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe fda0 	bl	8002b60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	3304      	adds	r3, #4
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe fd9b 	bl	8002b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402e:	4b2d      	ldr	r3, [pc, #180]	@ (80040e4 <xTaskResumeAll+0x124>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d903      	bls.n	800403e <xTaskResumeAll+0x7e>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	4a2a      	ldr	r2, [pc, #168]	@ (80040e4 <xTaskResumeAll+0x124>)
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4a27      	ldr	r2, [pc, #156]	@ (80040e8 <xTaskResumeAll+0x128>)
 800404c:	441a      	add	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3304      	adds	r3, #4
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f7fe fd26 	bl	8002aa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800405e:	4b23      	ldr	r3, [pc, #140]	@ (80040ec <xTaskResumeAll+0x12c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004068:	4b21      	ldr	r3, [pc, #132]	@ (80040f0 <xTaskResumeAll+0x130>)
 800406a:	2201      	movs	r2, #1
 800406c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800406e:	4b1c      	ldr	r3, [pc, #112]	@ (80040e0 <xTaskResumeAll+0x120>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1cb      	bne.n	800400e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800407c:	f000 fb66 	bl	800474c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004080:	4b1c      	ldr	r3, [pc, #112]	@ (80040f4 <xTaskResumeAll+0x134>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800408c:	f000 f846 	bl	800411c <xTaskIncrementTick>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004096:	4b16      	ldr	r3, [pc, #88]	@ (80040f0 <xTaskResumeAll+0x130>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3b01      	subs	r3, #1
 80040a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f1      	bne.n	800408c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80040a8:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <xTaskResumeAll+0x134>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <xTaskResumeAll+0x130>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040ba:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <xTaskResumeAll+0x138>)
 80040bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040ca:	f001 f9ff 	bl	80054cc <vPortExitCritical>

	return xAlreadyYielded;
 80040ce:	68bb      	ldr	r3, [r7, #8]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000e88 	.word	0x20000e88
 80040dc:	20000e60 	.word	0x20000e60
 80040e0:	20000e20 	.word	0x20000e20
 80040e4:	20000e68 	.word	0x20000e68
 80040e8:	20000990 	.word	0x20000990
 80040ec:	2000098c 	.word	0x2000098c
 80040f0:	20000e74 	.word	0x20000e74
 80040f4:	20000e70 	.word	0x20000e70
 80040f8:	e000ed04 	.word	0xe000ed04

080040fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004102:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <xTaskGetTickCount+0x1c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004108:	687b      	ldr	r3, [r7, #4]
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000e64 	.word	0x20000e64

0800411c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004126:	4b4f      	ldr	r3, [pc, #316]	@ (8004264 <xTaskIncrementTick+0x148>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f040 8090 	bne.w	8004250 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004130:	4b4d      	ldr	r3, [pc, #308]	@ (8004268 <xTaskIncrementTick+0x14c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004138:	4a4b      	ldr	r2, [pc, #300]	@ (8004268 <xTaskIncrementTick+0x14c>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d121      	bne.n	8004188 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004144:	4b49      	ldr	r3, [pc, #292]	@ (800426c <xTaskIncrementTick+0x150>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <xTaskIncrementTick+0x4a>
	__asm volatile
 800414e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	603b      	str	r3, [r7, #0]
}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	e7fd      	b.n	8004162 <xTaskIncrementTick+0x46>
 8004166:	4b41      	ldr	r3, [pc, #260]	@ (800426c <xTaskIncrementTick+0x150>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	4b40      	ldr	r3, [pc, #256]	@ (8004270 <xTaskIncrementTick+0x154>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a3e      	ldr	r2, [pc, #248]	@ (800426c <xTaskIncrementTick+0x150>)
 8004172:	6013      	str	r3, [r2, #0]
 8004174:	4a3e      	ldr	r2, [pc, #248]	@ (8004270 <xTaskIncrementTick+0x154>)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	4b3e      	ldr	r3, [pc, #248]	@ (8004274 <xTaskIncrementTick+0x158>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a3c      	ldr	r2, [pc, #240]	@ (8004274 <xTaskIncrementTick+0x158>)
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	f000 fae2 	bl	800474c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004188:	4b3b      	ldr	r3, [pc, #236]	@ (8004278 <xTaskIncrementTick+0x15c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	429a      	cmp	r2, r3
 8004190:	d349      	bcc.n	8004226 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004192:	4b36      	ldr	r3, [pc, #216]	@ (800426c <xTaskIncrementTick+0x150>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d104      	bne.n	80041a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800419c:	4b36      	ldr	r3, [pc, #216]	@ (8004278 <xTaskIncrementTick+0x15c>)
 800419e:	f04f 32ff 	mov.w	r2, #4294967295
 80041a2:	601a      	str	r2, [r3, #0]
					break;
 80041a4:	e03f      	b.n	8004226 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a6:	4b31      	ldr	r3, [pc, #196]	@ (800426c <xTaskIncrementTick+0x150>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d203      	bcs.n	80041c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041be:	4a2e      	ldr	r2, [pc, #184]	@ (8004278 <xTaskIncrementTick+0x15c>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041c4:	e02f      	b.n	8004226 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fcc8 	bl	8002b60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d004      	beq.n	80041e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	3318      	adds	r3, #24
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fcbf 	bl	8002b60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e6:	4b25      	ldr	r3, [pc, #148]	@ (800427c <xTaskIncrementTick+0x160>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d903      	bls.n	80041f6 <xTaskIncrementTick+0xda>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	4a22      	ldr	r2, [pc, #136]	@ (800427c <xTaskIncrementTick+0x160>)
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4a1f      	ldr	r2, [pc, #124]	@ (8004280 <xTaskIncrementTick+0x164>)
 8004204:	441a      	add	r2, r3
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3304      	adds	r3, #4
 800420a:	4619      	mov	r1, r3
 800420c:	4610      	mov	r0, r2
 800420e:	f7fe fc4a 	bl	8002aa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004216:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <xTaskIncrementTick+0x168>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	429a      	cmp	r2, r3
 800421e:	d3b8      	bcc.n	8004192 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004220:	2301      	movs	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004224:	e7b5      	b.n	8004192 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004226:	4b17      	ldr	r3, [pc, #92]	@ (8004284 <xTaskIncrementTick+0x168>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422c:	4914      	ldr	r1, [pc, #80]	@ (8004280 <xTaskIncrementTick+0x164>)
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d901      	bls.n	8004242 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800423e:	2301      	movs	r3, #1
 8004240:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004242:	4b11      	ldr	r3, [pc, #68]	@ (8004288 <xTaskIncrementTick+0x16c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800424a:	2301      	movs	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	e004      	b.n	800425a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004250:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <xTaskIncrementTick+0x170>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a0d      	ldr	r2, [pc, #52]	@ (800428c <xTaskIncrementTick+0x170>)
 8004258:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800425a:	697b      	ldr	r3, [r7, #20]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20000e88 	.word	0x20000e88
 8004268:	20000e64 	.word	0x20000e64
 800426c:	20000e18 	.word	0x20000e18
 8004270:	20000e1c 	.word	0x20000e1c
 8004274:	20000e78 	.word	0x20000e78
 8004278:	20000e80 	.word	0x20000e80
 800427c:	20000e68 	.word	0x20000e68
 8004280:	20000990 	.word	0x20000990
 8004284:	2000098c 	.word	0x2000098c
 8004288:	20000e74 	.word	0x20000e74
 800428c:	20000e70 	.word	0x20000e70

08004290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004296:	4b2b      	ldr	r3, [pc, #172]	@ (8004344 <vTaskSwitchContext+0xb4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800429e:	4b2a      	ldr	r3, [pc, #168]	@ (8004348 <vTaskSwitchContext+0xb8>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042a4:	e047      	b.n	8004336 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80042a6:	4b28      	ldr	r3, [pc, #160]	@ (8004348 <vTaskSwitchContext+0xb8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ac:	4b27      	ldr	r3, [pc, #156]	@ (800434c <vTaskSwitchContext+0xbc>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e011      	b.n	80042d8 <vTaskSwitchContext+0x48>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <vTaskSwitchContext+0x42>
	__asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	607b      	str	r3, [r7, #4]
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	e7fd      	b.n	80042ce <vTaskSwitchContext+0x3e>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3b01      	subs	r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	491d      	ldr	r1, [pc, #116]	@ (8004350 <vTaskSwitchContext+0xc0>)
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0e3      	beq.n	80042b4 <vTaskSwitchContext+0x24>
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <vTaskSwitchContext+0xc0>)
 80042f8:	4413      	add	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	3308      	adds	r3, #8
 800430e:	429a      	cmp	r2, r3
 8004310:	d104      	bne.n	800431c <vTaskSwitchContext+0x8c>
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4a0c      	ldr	r2, [pc, #48]	@ (8004354 <vTaskSwitchContext+0xc4>)
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4a09      	ldr	r2, [pc, #36]	@ (800434c <vTaskSwitchContext+0xbc>)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800432c:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <vTaskSwitchContext+0xc4>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3354      	adds	r3, #84	@ 0x54
 8004332:	4a09      	ldr	r2, [pc, #36]	@ (8004358 <vTaskSwitchContext+0xc8>)
 8004334:	6013      	str	r3, [r2, #0]
}
 8004336:	bf00      	nop
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000e88 	.word	0x20000e88
 8004348:	20000e74 	.word	0x20000e74
 800434c:	20000e68 	.word	0x20000e68
 8004350:	20000990 	.word	0x20000990
 8004354:	2000098c 	.word	0x2000098c
 8004358:	20000010 	.word	0x20000010

0800435c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10b      	bne.n	8004384 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60fb      	str	r3, [r7, #12]
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004384:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <vTaskPlaceOnEventList+0x48>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3318      	adds	r3, #24
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7fe fbae 	bl	8002aee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004392:	2101      	movs	r1, #1
 8004394:	6838      	ldr	r0, [r7, #0]
 8004396:	f000 fb87 	bl	8004aa8 <prvAddCurrentTaskToDelayedList>
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2000098c 	.word	0x2000098c

080043a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10b      	bne.n	80043d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	617b      	str	r3, [r7, #20]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043d2:	4b0a      	ldr	r3, [pc, #40]	@ (80043fc <vTaskPlaceOnEventListRestricted+0x54>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3318      	adds	r3, #24
 80043d8:	4619      	mov	r1, r3
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7fe fb63 	bl	8002aa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	68b8      	ldr	r0, [r7, #8]
 80043f0:	f000 fb5a 	bl	8004aa8 <prvAddCurrentTaskToDelayedList>
	}
 80043f4:	bf00      	nop
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	2000098c 	.word	0x2000098c

08004400 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10b      	bne.n	800442e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	60fb      	str	r3, [r7, #12]
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	e7fd      	b.n	800442a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3318      	adds	r3, #24
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fb94 	bl	8002b60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004438:	4b1d      	ldr	r3, [pc, #116]	@ (80044b0 <xTaskRemoveFromEventList+0xb0>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11d      	bne.n	800447c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe fb8b 	bl	8002b60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444e:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <xTaskRemoveFromEventList+0xb4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d903      	bls.n	800445e <xTaskRemoveFromEventList+0x5e>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	4a16      	ldr	r2, [pc, #88]	@ (80044b4 <xTaskRemoveFromEventList+0xb4>)
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004462:	4613      	mov	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4a13      	ldr	r2, [pc, #76]	@ (80044b8 <xTaskRemoveFromEventList+0xb8>)
 800446c:	441a      	add	r2, r3
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	3304      	adds	r3, #4
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	f7fe fb16 	bl	8002aa6 <vListInsertEnd>
 800447a:	e005      	b.n	8004488 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	3318      	adds	r3, #24
 8004480:	4619      	mov	r1, r3
 8004482:	480e      	ldr	r0, [pc, #56]	@ (80044bc <xTaskRemoveFromEventList+0xbc>)
 8004484:	f7fe fb0f 	bl	8002aa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448c:	4b0c      	ldr	r3, [pc, #48]	@ (80044c0 <xTaskRemoveFromEventList+0xc0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	429a      	cmp	r2, r3
 8004494:	d905      	bls.n	80044a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004496:	2301      	movs	r3, #1
 8004498:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800449a:	4b0a      	ldr	r3, [pc, #40]	@ (80044c4 <xTaskRemoveFromEventList+0xc4>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e001      	b.n	80044a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044a6:	697b      	ldr	r3, [r7, #20]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000e88 	.word	0x20000e88
 80044b4:	20000e68 	.word	0x20000e68
 80044b8:	20000990 	.word	0x20000990
 80044bc:	20000e20 	.word	0x20000e20
 80044c0:	2000098c 	.word	0x2000098c
 80044c4:	20000e74 	.word	0x20000e74

080044c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044d0:	4b06      	ldr	r3, [pc, #24]	@ (80044ec <vTaskInternalSetTimeOutState+0x24>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <vTaskInternalSetTimeOutState+0x28>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	605a      	str	r2, [r3, #4]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	20000e78 	.word	0x20000e78
 80044f0:	20000e64 	.word	0x20000e64

080044f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	613b      	str	r3, [r7, #16]
}
 8004516:	bf00      	nop
 8004518:	bf00      	nop
 800451a:	e7fd      	b.n	8004518 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10b      	bne.n	800453a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60fb      	str	r3, [r7, #12]
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	e7fd      	b.n	8004536 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800453a:	f000 ff95 	bl	8005468 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800453e:	4b1d      	ldr	r3, [pc, #116]	@ (80045b4 <xTaskCheckForTimeOut+0xc0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d102      	bne.n	800455e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004558:	2300      	movs	r3, #0
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	e023      	b.n	80045a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b15      	ldr	r3, [pc, #84]	@ (80045b8 <xTaskCheckForTimeOut+0xc4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d007      	beq.n	800457a <xTaskCheckForTimeOut+0x86>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	429a      	cmp	r2, r3
 8004572:	d302      	bcc.n	800457a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004574:	2301      	movs	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	e015      	b.n	80045a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	429a      	cmp	r2, r3
 8004582:	d20b      	bcs.n	800459c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	1ad2      	subs	r2, r2, r3
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff99 	bl	80044c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	e004      	b.n	80045a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045a2:	2301      	movs	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045a6:	f000 ff91 	bl	80054cc <vPortExitCritical>

	return xReturn;
 80045aa:	69fb      	ldr	r3, [r7, #28]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3720      	adds	r7, #32
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000e64 	.word	0x20000e64
 80045b8:	20000e78 	.word	0x20000e78

080045bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045c0:	4b03      	ldr	r3, [pc, #12]	@ (80045d0 <vTaskMissedYield+0x14>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	20000e74 	.word	0x20000e74

080045d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045dc:	f000 f852 	bl	8004684 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <prvIdleTask+0x28>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d9f9      	bls.n	80045dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <prvIdleTask+0x2c>)
 80045ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045f8:	e7f0      	b.n	80045dc <prvIdleTask+0x8>
 80045fa:	bf00      	nop
 80045fc:	20000990 	.word	0x20000990
 8004600:	e000ed04 	.word	0xe000ed04

08004604 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800460a:	2300      	movs	r3, #0
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	e00c      	b.n	800462a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4a12      	ldr	r2, [pc, #72]	@ (8004664 <prvInitialiseTaskLists+0x60>)
 800461c:	4413      	add	r3, r2
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fa14 	bl	8002a4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3301      	adds	r3, #1
 8004628:	607b      	str	r3, [r7, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b37      	cmp	r3, #55	@ 0x37
 800462e:	d9ef      	bls.n	8004610 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004630:	480d      	ldr	r0, [pc, #52]	@ (8004668 <prvInitialiseTaskLists+0x64>)
 8004632:	f7fe fa0b 	bl	8002a4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004636:	480d      	ldr	r0, [pc, #52]	@ (800466c <prvInitialiseTaskLists+0x68>)
 8004638:	f7fe fa08 	bl	8002a4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800463c:	480c      	ldr	r0, [pc, #48]	@ (8004670 <prvInitialiseTaskLists+0x6c>)
 800463e:	f7fe fa05 	bl	8002a4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004642:	480c      	ldr	r0, [pc, #48]	@ (8004674 <prvInitialiseTaskLists+0x70>)
 8004644:	f7fe fa02 	bl	8002a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004648:	480b      	ldr	r0, [pc, #44]	@ (8004678 <prvInitialiseTaskLists+0x74>)
 800464a:	f7fe f9ff 	bl	8002a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <prvInitialiseTaskLists+0x78>)
 8004650:	4a05      	ldr	r2, [pc, #20]	@ (8004668 <prvInitialiseTaskLists+0x64>)
 8004652:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004654:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <prvInitialiseTaskLists+0x7c>)
 8004656:	4a05      	ldr	r2, [pc, #20]	@ (800466c <prvInitialiseTaskLists+0x68>)
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20000990 	.word	0x20000990
 8004668:	20000df0 	.word	0x20000df0
 800466c:	20000e04 	.word	0x20000e04
 8004670:	20000e20 	.word	0x20000e20
 8004674:	20000e34 	.word	0x20000e34
 8004678:	20000e4c 	.word	0x20000e4c
 800467c:	20000e18 	.word	0x20000e18
 8004680:	20000e1c 	.word	0x20000e1c

08004684 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800468a:	e019      	b.n	80046c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800468c:	f000 feec 	bl	8005468 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004690:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <prvCheckTasksWaitingTermination+0x50>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4618      	mov	r0, r3
 800469e:	f7fe fa5f 	bl	8002b60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <prvCheckTasksWaitingTermination+0x54>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	4a0b      	ldr	r2, [pc, #44]	@ (80046d8 <prvCheckTasksWaitingTermination+0x54>)
 80046aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046ac:	4b0b      	ldr	r3, [pc, #44]	@ (80046dc <prvCheckTasksWaitingTermination+0x58>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	4a0a      	ldr	r2, [pc, #40]	@ (80046dc <prvCheckTasksWaitingTermination+0x58>)
 80046b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046b6:	f000 ff09 	bl	80054cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f810 	bl	80046e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046c0:	4b06      	ldr	r3, [pc, #24]	@ (80046dc <prvCheckTasksWaitingTermination+0x58>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e1      	bne.n	800468c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000e34 	.word	0x20000e34
 80046d8:	20000e60 	.word	0x20000e60
 80046dc:	20000e48 	.word	0x20000e48

080046e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3354      	adds	r3, #84	@ 0x54
 80046ec:	4618      	mov	r0, r3
 80046ee:	f001 f9f3 	bl	8005ad8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	4618      	mov	r0, r3
 8004702:	f001 f8a1 	bl	8005848 <vPortFree>
				vPortFree( pxTCB );
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f001 f89e 	bl	8005848 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800470c:	e019      	b.n	8004742 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004714:	2b01      	cmp	r3, #1
 8004716:	d103      	bne.n	8004720 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f001 f895 	bl	8005848 <vPortFree>
	}
 800471e:	e010      	b.n	8004742 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004726:	2b02      	cmp	r3, #2
 8004728:	d00b      	beq.n	8004742 <prvDeleteTCB+0x62>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60fb      	str	r3, [r7, #12]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <prvDeleteTCB+0x5e>
	}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004752:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <prvResetNextTaskUnblockTime+0x38>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <prvResetNextTaskUnblockTime+0x3c>)
 800475e:	f04f 32ff 	mov.w	r2, #4294967295
 8004762:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004764:	e008      	b.n	8004778 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004766:	4b07      	ldr	r3, [pc, #28]	@ (8004784 <prvResetNextTaskUnblockTime+0x38>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4a04      	ldr	r2, [pc, #16]	@ (8004788 <prvResetNextTaskUnblockTime+0x3c>)
 8004776:	6013      	str	r3, [r2, #0]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	20000e18 	.word	0x20000e18
 8004788:	20000e80 	.word	0x20000e80

0800478c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004792:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <xTaskGetSchedulerState+0x34>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800479a:	2301      	movs	r3, #1
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	e008      	b.n	80047b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047a0:	4b08      	ldr	r3, [pc, #32]	@ (80047c4 <xTaskGetSchedulerState+0x38>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047a8:	2302      	movs	r3, #2
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	e001      	b.n	80047b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047b2:	687b      	ldr	r3, [r7, #4]
	}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	20000e6c 	.word	0x20000e6c
 80047c4:	20000e88 	.word	0x20000e88

080047c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d051      	beq.n	8004882 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	4b2a      	ldr	r3, [pc, #168]	@ (800488c <xTaskPriorityInherit+0xc4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d241      	bcs.n	8004870 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	db06      	blt.n	8004802 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <xTaskPriorityInherit+0xc4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	6959      	ldr	r1, [r3, #20]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4a1f      	ldr	r2, [pc, #124]	@ (8004890 <xTaskPriorityInherit+0xc8>)
 8004814:	4413      	add	r3, r2
 8004816:	4299      	cmp	r1, r3
 8004818:	d122      	bne.n	8004860 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3304      	adds	r3, #4
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe f99e 	bl	8002b60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004824:	4b19      	ldr	r3, [pc, #100]	@ (800488c <xTaskPriorityInherit+0xc4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004832:	4b18      	ldr	r3, [pc, #96]	@ (8004894 <xTaskPriorityInherit+0xcc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d903      	bls.n	8004842 <xTaskPriorityInherit+0x7a>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483e:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <xTaskPriorityInherit+0xcc>)
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4a10      	ldr	r2, [pc, #64]	@ (8004890 <xTaskPriorityInherit+0xc8>)
 8004850:	441a      	add	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	3304      	adds	r3, #4
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f7fe f924 	bl	8002aa6 <vListInsertEnd>
 800485e:	e004      	b.n	800486a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004860:	4b0a      	ldr	r3, [pc, #40]	@ (800488c <xTaskPriorityInherit+0xc4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800486a:	2301      	movs	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	e008      	b.n	8004882 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004874:	4b05      	ldr	r3, [pc, #20]	@ (800488c <xTaskPriorityInherit+0xc4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487a:	429a      	cmp	r2, r3
 800487c:	d201      	bcs.n	8004882 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800487e:	2301      	movs	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004882:	68fb      	ldr	r3, [r7, #12]
	}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	2000098c 	.word	0x2000098c
 8004890:	20000990 	.word	0x20000990
 8004894:	20000e68 	.word	0x20000e68

08004898 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d058      	beq.n	8004960 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048ae:	4b2f      	ldr	r3, [pc, #188]	@ (800496c <xTaskPriorityDisinherit+0xd4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d00b      	beq.n	80048d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80048b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048bc:	f383 8811 	msr	BASEPRI, r3
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	f3bf 8f4f 	dsb	sy
 80048c8:	60fb      	str	r3, [r7, #12]
}
 80048ca:	bf00      	nop
 80048cc:	bf00      	nop
 80048ce:	e7fd      	b.n	80048cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10b      	bne.n	80048f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	60bb      	str	r3, [r7, #8]
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	e7fd      	b.n	80048ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f4:	1e5a      	subs	r2, r3, #1
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004902:	429a      	cmp	r2, r3
 8004904:	d02c      	beq.n	8004960 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800490a:	2b00      	cmp	r3, #0
 800490c:	d128      	bne.n	8004960 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	3304      	adds	r3, #4
 8004912:	4618      	mov	r0, r3
 8004914:	f7fe f924 	bl	8002b60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004930:	4b0f      	ldr	r3, [pc, #60]	@ (8004970 <xTaskPriorityDisinherit+0xd8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d903      	bls.n	8004940 <xTaskPriorityDisinherit+0xa8>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	4a0c      	ldr	r2, [pc, #48]	@ (8004970 <xTaskPriorityDisinherit+0xd8>)
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4a09      	ldr	r2, [pc, #36]	@ (8004974 <xTaskPriorityDisinherit+0xdc>)
 800494e:	441a      	add	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f7fe f8a5 	bl	8002aa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800495c:	2301      	movs	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004960:	697b      	ldr	r3, [r7, #20]
	}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	2000098c 	.word	0x2000098c
 8004970:	20000e68 	.word	0x20000e68
 8004974:	20000990 	.word	0x20000990

08004978 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004986:	2301      	movs	r3, #1
 8004988:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d06c      	beq.n	8004a6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10b      	bne.n	80049b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	60fb      	str	r3, [r7, #12]
}
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d902      	bls.n	80049c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	61fb      	str	r3, [r7, #28]
 80049be:	e002      	b.n	80049c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	69fa      	ldr	r2, [r7, #28]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d04c      	beq.n	8004a6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d147      	bne.n	8004a6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80049da:	4b26      	ldr	r3, [pc, #152]	@ (8004a74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d10b      	bne.n	80049fc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	60bb      	str	r3, [r7, #8]
}
 80049f6:	bf00      	nop
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	69fa      	ldr	r2, [r7, #28]
 8004a06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	db04      	blt.n	8004a1a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	6959      	ldr	r1, [r3, #20]
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4a13      	ldr	r2, [pc, #76]	@ (8004a78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004a2a:	4413      	add	r3, r2
 8004a2c:	4299      	cmp	r1, r3
 8004a2e:	d11c      	bne.n	8004a6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe f893 	bl	8002b60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d903      	bls.n	8004a4e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4a07      	ldr	r2, [pc, #28]	@ (8004a78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004a5c:	441a      	add	r2, r3
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f7fe f81e 	bl	8002aa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a6a:	bf00      	nop
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	2000098c 	.word	0x2000098c
 8004a78:	20000990 	.word	0x20000990
 8004a7c:	20000e68 	.word	0x20000e68

08004a80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a84:	4b07      	ldr	r3, [pc, #28]	@ (8004aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a8c:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a92:	3201      	adds	r2, #1
 8004a94:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004a96:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a98:	681b      	ldr	r3, [r3, #0]
	}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	2000098c 	.word	0x2000098c

08004aa8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ab2:	4b21      	ldr	r3, [pc, #132]	@ (8004b38 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ab8:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe f84e 	bl	8002b60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d10a      	bne.n	8004ae2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4819      	ldr	r0, [pc, #100]	@ (8004b40 <prvAddCurrentTaskToDelayedList+0x98>)
 8004adc:	f7fd ffe3 	bl	8002aa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ae0:	e026      	b.n	8004b30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004aea:	4b14      	ldr	r3, [pc, #80]	@ (8004b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d209      	bcs.n	8004b0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004afa:	4b12      	ldr	r3, [pc, #72]	@ (8004b44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b0f      	ldr	r3, [pc, #60]	@ (8004b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f7fd fff1 	bl	8002aee <vListInsert>
}
 8004b0c:	e010      	b.n	8004b30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b0a      	ldr	r3, [pc, #40]	@ (8004b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f7fd ffe7 	bl	8002aee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b20:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d202      	bcs.n	8004b30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b2a:	4a08      	ldr	r2, [pc, #32]	@ (8004b4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6013      	str	r3, [r2, #0]
}
 8004b30:	bf00      	nop
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20000e64 	.word	0x20000e64
 8004b3c:	2000098c 	.word	0x2000098c
 8004b40:	20000e4c 	.word	0x20000e4c
 8004b44:	20000e1c 	.word	0x20000e1c
 8004b48:	20000e18 	.word	0x20000e18
 8004b4c:	20000e80 	.word	0x20000e80

08004b50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	@ 0x28
 8004b54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b5a:	f000 fb13 	bl	8005184 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd4 <xTimerCreateTimerTask+0x84>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d021      	beq.n	8004baa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b6e:	1d3a      	adds	r2, r7, #4
 8004b70:	f107 0108 	add.w	r1, r7, #8
 8004b74:	f107 030c 	add.w	r3, r7, #12
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fd ff4d 	bl	8002a18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	9202      	str	r2, [sp, #8]
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	2302      	movs	r3, #2
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	460a      	mov	r2, r1
 8004b90:	4911      	ldr	r1, [pc, #68]	@ (8004bd8 <xTimerCreateTimerTask+0x88>)
 8004b92:	4812      	ldr	r0, [pc, #72]	@ (8004bdc <xTimerCreateTimerTask+0x8c>)
 8004b94:	f7fe ff2e 	bl	80039f4 <xTaskCreateStatic>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4a11      	ldr	r2, [pc, #68]	@ (8004be0 <xTimerCreateTimerTask+0x90>)
 8004b9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b9e:	4b10      	ldr	r3, [pc, #64]	@ (8004be0 <xTimerCreateTimerTask+0x90>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10b      	bne.n	8004bc8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	f383 8811 	msr	BASEPRI, r3
 8004bb8:	f3bf 8f6f 	isb	sy
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	613b      	str	r3, [r7, #16]
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	e7fd      	b.n	8004bc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bc8:	697b      	ldr	r3, [r7, #20]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3718      	adds	r7, #24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000ebc 	.word	0x20000ebc
 8004bd8:	08006558 	.word	0x08006558
 8004bdc:	08004d1d 	.word	0x08004d1d
 8004be0:	20000ec0 	.word	0x20000ec0

08004be4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	@ 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <xTimerGenericCommand+0x30>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	623b      	str	r3, [r7, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c14:	4b19      	ldr	r3, [pc, #100]	@ (8004c7c <xTimerGenericCommand+0x98>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d02a      	beq.n	8004c72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b05      	cmp	r3, #5
 8004c2c:	dc18      	bgt.n	8004c60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c2e:	f7ff fdad 	bl	800478c <xTaskGetSchedulerState>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d109      	bne.n	8004c4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c38:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <xTimerGenericCommand+0x98>)
 8004c3a:	6818      	ldr	r0, [r3, #0]
 8004c3c:	f107 0110 	add.w	r1, r7, #16
 8004c40:	2300      	movs	r3, #0
 8004c42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c44:	f7fe f92e 	bl	8002ea4 <xQueueGenericSend>
 8004c48:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c4a:	e012      	b.n	8004c72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c7c <xTimerGenericCommand+0x98>)
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	f107 0110 	add.w	r1, r7, #16
 8004c54:	2300      	movs	r3, #0
 8004c56:	2200      	movs	r2, #0
 8004c58:	f7fe f924 	bl	8002ea4 <xQueueGenericSend>
 8004c5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004c5e:	e008      	b.n	8004c72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c60:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <xTimerGenericCommand+0x98>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	f107 0110 	add.w	r1, r7, #16
 8004c68:	2300      	movs	r3, #0
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	f7fe fa1c 	bl	80030a8 <xQueueGenericSendFromISR>
 8004c70:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3728      	adds	r7, #40	@ 0x28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000ebc 	.word	0x20000ebc

08004c80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b088      	sub	sp, #32
 8004c84:	af02      	add	r7, sp, #8
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c8a:	4b23      	ldr	r3, [pc, #140]	@ (8004d18 <prvProcessExpiredTimer+0x98>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fd ff61 	bl	8002b60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d023      	beq.n	8004cf4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	699a      	ldr	r2, [r3, #24]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	18d1      	adds	r1, r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	6978      	ldr	r0, [r7, #20]
 8004cba:	f000 f8d5 	bl	8004e68 <prvInsertTimerInActiveList>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d020      	beq.n	8004d06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	2100      	movs	r1, #0
 8004cce:	6978      	ldr	r0, [r7, #20]
 8004cd0:	f7ff ff88 	bl	8004be4 <xTimerGenericCommand>
 8004cd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d114      	bne.n	8004d06 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	60fb      	str	r3, [r7, #12]
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	6978      	ldr	r0, [r7, #20]
 8004d0c:	4798      	blx	r3
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000eb4 	.word	0x20000eb4

08004d1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d24:	f107 0308 	add.w	r3, r7, #8
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f859 	bl	8004de0 <prvGetNextExpireTime>
 8004d2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4619      	mov	r1, r3
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 f805 	bl	8004d44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d3a:	f000 f8d7 	bl	8004eec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d3e:	bf00      	nop
 8004d40:	e7f0      	b.n	8004d24 <prvTimerTask+0x8>
	...

08004d44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d4e:	f7ff f929 	bl	8003fa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d52:	f107 0308 	add.w	r3, r7, #8
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f866 	bl	8004e28 <prvSampleTimeNow>
 8004d5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d130      	bne.n	8004dc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <prvProcessTimerOrBlockTask+0x3c>
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d806      	bhi.n	8004d80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d72:	f7ff f925 	bl	8003fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff ff81 	bl	8004c80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d7e:	e024      	b.n	8004dca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d86:	4b13      	ldr	r3, [pc, #76]	@ (8004dd4 <prvProcessTimerOrBlockTask+0x90>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <prvProcessTimerOrBlockTask+0x50>
 8004d90:	2301      	movs	r3, #1
 8004d92:	e000      	b.n	8004d96 <prvProcessTimerOrBlockTask+0x52>
 8004d94:	2300      	movs	r3, #0
 8004d96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d98:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd8 <prvProcessTimerOrBlockTask+0x94>)
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	4619      	mov	r1, r3
 8004da6:	f7fe fdf1 	bl	800398c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004daa:	f7ff f909 	bl	8003fc0 <xTaskResumeAll>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004db4:	4b09      	ldr	r3, [pc, #36]	@ (8004ddc <prvProcessTimerOrBlockTask+0x98>)
 8004db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	f3bf 8f6f 	isb	sy
}
 8004dc4:	e001      	b.n	8004dca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004dc6:	f7ff f8fb 	bl	8003fc0 <xTaskResumeAll>
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000eb8 	.word	0x20000eb8
 8004dd8:	20000ebc 	.word	0x20000ebc
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004de8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e24 <prvGetNextExpireTime+0x44>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <prvGetNextExpireTime+0x16>
 8004df2:	2201      	movs	r2, #1
 8004df4:	e000      	b.n	8004df8 <prvGetNextExpireTime+0x18>
 8004df6:	2200      	movs	r2, #0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e04:	4b07      	ldr	r3, [pc, #28]	@ (8004e24 <prvGetNextExpireTime+0x44>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	e001      	b.n	8004e14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e14:	68fb      	ldr	r3, [r7, #12]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	20000eb4 	.word	0x20000eb4

08004e28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e30:	f7ff f964 	bl	80040fc <xTaskGetTickCount>
 8004e34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e36:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <prvSampleTimeNow+0x3c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d205      	bcs.n	8004e4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e40:	f000 f93a 	bl	80050b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e002      	b.n	8004e52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e52:	4a04      	ldr	r2, [pc, #16]	@ (8004e64 <prvSampleTimeNow+0x3c>)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e58:	68fb      	ldr	r3, [r7, #12]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000ec4 	.word	0x20000ec4

08004e68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
 8004e74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d812      	bhi.n	8004eb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	1ad2      	subs	r2, r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d302      	bcc.n	8004ea2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e01b      	b.n	8004eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ea2:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <prvInsertTimerInActiveList+0x7c>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f7fd fe1e 	bl	8002aee <vListInsert>
 8004eb2:	e012      	b.n	8004eda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d206      	bcs.n	8004eca <prvInsertTimerInActiveList+0x62>
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d302      	bcc.n	8004eca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	e007      	b.n	8004eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eca:	4b07      	ldr	r3, [pc, #28]	@ (8004ee8 <prvInsertTimerInActiveList+0x80>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	f7fd fe0a 	bl	8002aee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004eda:	697b      	ldr	r3, [r7, #20]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	20000eb8 	.word	0x20000eb8
 8004ee8:	20000eb4 	.word	0x20000eb4

08004eec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08e      	sub	sp, #56	@ 0x38
 8004ef0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ef2:	e0ce      	b.n	8005092 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da19      	bge.n	8004f2e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004efa:	1d3b      	adds	r3, r7, #4
 8004efc:	3304      	adds	r3, #4
 8004efe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10b      	bne.n	8004f1e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	61fb      	str	r3, [r7, #28]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f24:	6850      	ldr	r0, [r2, #4]
 8004f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f28:	6892      	ldr	r2, [r2, #8]
 8004f2a:	4611      	mov	r1, r2
 8004f2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f2c0 80ae 	blt.w	8005092 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f44:	3304      	adds	r3, #4
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd fe0a 	bl	8002b60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff ff6a 	bl	8004e28 <prvSampleTimeNow>
 8004f54:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	f200 8097 	bhi.w	800508c <prvProcessReceivedCommands+0x1a0>
 8004f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f64 <prvProcessReceivedCommands+0x78>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f8d 	.word	0x08004f8d
 8004f70:	08005003 	.word	0x08005003
 8004f74:	08005017 	.word	0x08005017
 8004f78:	08005063 	.word	0x08005063
 8004f7c:	08004f8d 	.word	0x08004f8d
 8004f80:	08004f8d 	.word	0x08004f8d
 8004f84:	08005003 	.word	0x08005003
 8004f88:	08005017 	.word	0x08005017
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	18d1      	adds	r1, r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fac:	f7ff ff5c 	bl	8004e68 <prvInsertTimerInActiveList>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d06c      	beq.n	8005090 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d061      	beq.n	8005090 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	441a      	add	r2, r3
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2100      	movs	r1, #0
 8004fdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fde:	f7ff fe01 	bl	8004be4 <xTimerGenericCommand>
 8004fe2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d152      	bne.n	8005090 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	61bb      	str	r3, [r7, #24]
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	e7fd      	b.n	8004ffe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	b2da      	uxtb	r2, r3
 800500e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005010:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005014:	e03d      	b.n	8005092 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	b2da      	uxtb	r2, r3
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800502e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10b      	bne.n	800504e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	617b      	str	r3, [r7, #20]
}
 8005048:	bf00      	nop
 800504a:	bf00      	nop
 800504c:	e7fd      	b.n	800504a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005054:	18d1      	adds	r1, r2, r3
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800505c:	f7ff ff04 	bl	8004e68 <prvInsertTimerInActiveList>
					break;
 8005060:	e017      	b.n	8005092 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005064:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005070:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005072:	f000 fbe9 	bl	8005848 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005076:	e00c      	b.n	8005092 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	b2da      	uxtb	r2, r3
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800508a:	e002      	b.n	8005092 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800508c:	bf00      	nop
 800508e:	e000      	b.n	8005092 <prvProcessReceivedCommands+0x1a6>
					break;
 8005090:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005092:	4b08      	ldr	r3, [pc, #32]	@ (80050b4 <prvProcessReceivedCommands+0x1c8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	1d39      	adds	r1, r7, #4
 8005098:	2200      	movs	r2, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe f932 	bl	8003304 <xQueueReceive>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f47f af26 	bne.w	8004ef4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	3730      	adds	r7, #48	@ 0x30
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000ebc 	.word	0x20000ebc

080050b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050be:	e049      	b.n	8005154 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80050c0:	4b2e      	ldr	r3, [pc, #184]	@ (800517c <prvSwitchTimerLists+0xc4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ca:	4b2c      	ldr	r3, [pc, #176]	@ (800517c <prvSwitchTimerLists+0xc4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fd fd41 	bl	8002b60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02f      	beq.n	8005154 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	429a      	cmp	r2, r3
 8005104:	d90e      	bls.n	8005124 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005112:	4b1a      	ldr	r3, [pc, #104]	@ (800517c <prvSwitchTimerLists+0xc4>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f7fd fce6 	bl	8002aee <vListInsert>
 8005122:	e017      	b.n	8005154 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005124:	2300      	movs	r3, #0
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2300      	movs	r3, #0
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	2100      	movs	r1, #0
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f7ff fd58 	bl	8004be4 <xTimerGenericCommand>
 8005134:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	603b      	str	r3, [r7, #0]
}
 800514e:	bf00      	nop
 8005150:	bf00      	nop
 8005152:	e7fd      	b.n	8005150 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005154:	4b09      	ldr	r3, [pc, #36]	@ (800517c <prvSwitchTimerLists+0xc4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1b0      	bne.n	80050c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800515e:	4b07      	ldr	r3, [pc, #28]	@ (800517c <prvSwitchTimerLists+0xc4>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005164:	4b06      	ldr	r3, [pc, #24]	@ (8005180 <prvSwitchTimerLists+0xc8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a04      	ldr	r2, [pc, #16]	@ (800517c <prvSwitchTimerLists+0xc4>)
 800516a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800516c:	4a04      	ldr	r2, [pc, #16]	@ (8005180 <prvSwitchTimerLists+0xc8>)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	6013      	str	r3, [r2, #0]
}
 8005172:	bf00      	nop
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	20000eb4 	.word	0x20000eb4
 8005180:	20000eb8 	.word	0x20000eb8

08005184 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800518a:	f000 f96d 	bl	8005468 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800518e:	4b15      	ldr	r3, [pc, #84]	@ (80051e4 <prvCheckForValidListAndQueue+0x60>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d120      	bne.n	80051d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005196:	4814      	ldr	r0, [pc, #80]	@ (80051e8 <prvCheckForValidListAndQueue+0x64>)
 8005198:	f7fd fc58 	bl	8002a4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800519c:	4813      	ldr	r0, [pc, #76]	@ (80051ec <prvCheckForValidListAndQueue+0x68>)
 800519e:	f7fd fc55 	bl	8002a4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051a2:	4b13      	ldr	r3, [pc, #76]	@ (80051f0 <prvCheckForValidListAndQueue+0x6c>)
 80051a4:	4a10      	ldr	r2, [pc, #64]	@ (80051e8 <prvCheckForValidListAndQueue+0x64>)
 80051a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051a8:	4b12      	ldr	r3, [pc, #72]	@ (80051f4 <prvCheckForValidListAndQueue+0x70>)
 80051aa:	4a10      	ldr	r2, [pc, #64]	@ (80051ec <prvCheckForValidListAndQueue+0x68>)
 80051ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80051ae:	2300      	movs	r3, #0
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	4b11      	ldr	r3, [pc, #68]	@ (80051f8 <prvCheckForValidListAndQueue+0x74>)
 80051b4:	4a11      	ldr	r2, [pc, #68]	@ (80051fc <prvCheckForValidListAndQueue+0x78>)
 80051b6:	2110      	movs	r1, #16
 80051b8:	200a      	movs	r0, #10
 80051ba:	f7fd fd65 	bl	8002c88 <xQueueGenericCreateStatic>
 80051be:	4603      	mov	r3, r0
 80051c0:	4a08      	ldr	r2, [pc, #32]	@ (80051e4 <prvCheckForValidListAndQueue+0x60>)
 80051c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051c4:	4b07      	ldr	r3, [pc, #28]	@ (80051e4 <prvCheckForValidListAndQueue+0x60>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d005      	beq.n	80051d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <prvCheckForValidListAndQueue+0x60>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	490b      	ldr	r1, [pc, #44]	@ (8005200 <prvCheckForValidListAndQueue+0x7c>)
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fbb0 	bl	8003938 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051d8:	f000 f978 	bl	80054cc <vPortExitCritical>
}
 80051dc:	bf00      	nop
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000ebc 	.word	0x20000ebc
 80051e8:	20000e8c 	.word	0x20000e8c
 80051ec:	20000ea0 	.word	0x20000ea0
 80051f0:	20000eb4 	.word	0x20000eb4
 80051f4:	20000eb8 	.word	0x20000eb8
 80051f8:	20000f68 	.word	0x20000f68
 80051fc:	20000ec8 	.word	0x20000ec8
 8005200:	08006560 	.word	0x08006560

08005204 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3b04      	subs	r3, #4
 8005214:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800521c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3b04      	subs	r3, #4
 8005222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f023 0201 	bic.w	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3b04      	subs	r3, #4
 8005232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005234:	4a0c      	ldr	r2, [pc, #48]	@ (8005268 <pxPortInitialiseStack+0x64>)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	3b14      	subs	r3, #20
 800523e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3b04      	subs	r3, #4
 800524a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f06f 0202 	mvn.w	r2, #2
 8005252:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3b20      	subs	r3, #32
 8005258:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800525a:	68fb      	ldr	r3, [r7, #12]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	0800526d 	.word	0x0800526d

0800526c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005276:	4b13      	ldr	r3, [pc, #76]	@ (80052c4 <prvTaskExitError+0x58>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527e:	d00b      	beq.n	8005298 <prvTaskExitError+0x2c>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	60fb      	str	r3, [r7, #12]
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <prvTaskExitError+0x28>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	60bb      	str	r3, [r7, #8]
}
 80052aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052ac:	bf00      	nop
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0fc      	beq.n	80052ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	2000000c 	.word	0x2000000c
	...

080052d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052d0:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <pxCurrentTCBConst2>)
 80052d2:	6819      	ldr	r1, [r3, #0]
 80052d4:	6808      	ldr	r0, [r1, #0]
 80052d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052da:	f380 8809 	msr	PSP, r0
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f380 8811 	msr	BASEPRI, r0
 80052ea:	4770      	bx	lr
 80052ec:	f3af 8000 	nop.w

080052f0 <pxCurrentTCBConst2>:
 80052f0:	2000098c 	.word	0x2000098c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop

080052f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052f8:	4808      	ldr	r0, [pc, #32]	@ (800531c <prvPortStartFirstTask+0x24>)
 80052fa:	6800      	ldr	r0, [r0, #0]
 80052fc:	6800      	ldr	r0, [r0, #0]
 80052fe:	f380 8808 	msr	MSP, r0
 8005302:	f04f 0000 	mov.w	r0, #0
 8005306:	f380 8814 	msr	CONTROL, r0
 800530a:	b662      	cpsie	i
 800530c:	b661      	cpsie	f
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	df00      	svc	0
 8005318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800531a:	bf00      	nop
 800531c:	e000ed08 	.word	0xe000ed08

08005320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005326:	4b47      	ldr	r3, [pc, #284]	@ (8005444 <xPortStartScheduler+0x124>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a47      	ldr	r2, [pc, #284]	@ (8005448 <xPortStartScheduler+0x128>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d10b      	bne.n	8005348 <xPortStartScheduler+0x28>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	613b      	str	r3, [r7, #16]
}
 8005342:	bf00      	nop
 8005344:	bf00      	nop
 8005346:	e7fd      	b.n	8005344 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005348:	4b3e      	ldr	r3, [pc, #248]	@ (8005444 <xPortStartScheduler+0x124>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a3f      	ldr	r2, [pc, #252]	@ (800544c <xPortStartScheduler+0x12c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d10b      	bne.n	800536a <xPortStartScheduler+0x4a>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60fb      	str	r3, [r7, #12]
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	e7fd      	b.n	8005366 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800536a:	4b39      	ldr	r3, [pc, #228]	@ (8005450 <xPortStartScheduler+0x130>)
 800536c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	22ff      	movs	r2, #255	@ 0xff
 800537a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800538c:	b2da      	uxtb	r2, r3
 800538e:	4b31      	ldr	r3, [pc, #196]	@ (8005454 <xPortStartScheduler+0x134>)
 8005390:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005392:	4b31      	ldr	r3, [pc, #196]	@ (8005458 <xPortStartScheduler+0x138>)
 8005394:	2207      	movs	r2, #7
 8005396:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005398:	e009      	b.n	80053ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800539a:	4b2f      	ldr	r3, [pc, #188]	@ (8005458 <xPortStartScheduler+0x138>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3b01      	subs	r3, #1
 80053a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005458 <xPortStartScheduler+0x138>)
 80053a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053a4:	78fb      	ldrb	r3, [r7, #3]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b6:	2b80      	cmp	r3, #128	@ 0x80
 80053b8:	d0ef      	beq.n	800539a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053ba:	4b27      	ldr	r3, [pc, #156]	@ (8005458 <xPortStartScheduler+0x138>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f1c3 0307 	rsb	r3, r3, #7
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d00b      	beq.n	80053de <xPortStartScheduler+0xbe>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60bb      	str	r3, [r7, #8]
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	e7fd      	b.n	80053da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053de:	4b1e      	ldr	r3, [pc, #120]	@ (8005458 <xPortStartScheduler+0x138>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <xPortStartScheduler+0x138>)
 80053e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <xPortStartScheduler+0x138>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80053f0:	4a19      	ldr	r2, [pc, #100]	@ (8005458 <xPortStartScheduler+0x138>)
 80053f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053fc:	4b17      	ldr	r3, [pc, #92]	@ (800545c <xPortStartScheduler+0x13c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a16      	ldr	r2, [pc, #88]	@ (800545c <xPortStartScheduler+0x13c>)
 8005402:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005406:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005408:	4b14      	ldr	r3, [pc, #80]	@ (800545c <xPortStartScheduler+0x13c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a13      	ldr	r2, [pc, #76]	@ (800545c <xPortStartScheduler+0x13c>)
 800540e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005412:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005414:	f000 f8da 	bl	80055cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005418:	4b11      	ldr	r3, [pc, #68]	@ (8005460 <xPortStartScheduler+0x140>)
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800541e:	f000 f8f9 	bl	8005614 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005422:	4b10      	ldr	r3, [pc, #64]	@ (8005464 <xPortStartScheduler+0x144>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a0f      	ldr	r2, [pc, #60]	@ (8005464 <xPortStartScheduler+0x144>)
 8005428:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800542c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800542e:	f7ff ff63 	bl	80052f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005432:	f7fe ff2d 	bl	8004290 <vTaskSwitchContext>
	prvTaskExitError();
 8005436:	f7ff ff19 	bl	800526c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	e000ed00 	.word	0xe000ed00
 8005448:	410fc271 	.word	0x410fc271
 800544c:	410fc270 	.word	0x410fc270
 8005450:	e000e400 	.word	0xe000e400
 8005454:	20000fb8 	.word	0x20000fb8
 8005458:	20000fbc 	.word	0x20000fbc
 800545c:	e000ed20 	.word	0xe000ed20
 8005460:	2000000c 	.word	0x2000000c
 8005464:	e000ef34 	.word	0xe000ef34

08005468 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	607b      	str	r3, [r7, #4]
}
 8005480:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005482:	4b10      	ldr	r3, [pc, #64]	@ (80054c4 <vPortEnterCritical+0x5c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3301      	adds	r3, #1
 8005488:	4a0e      	ldr	r2, [pc, #56]	@ (80054c4 <vPortEnterCritical+0x5c>)
 800548a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800548c:	4b0d      	ldr	r3, [pc, #52]	@ (80054c4 <vPortEnterCritical+0x5c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d110      	bne.n	80054b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005494:	4b0c      	ldr	r3, [pc, #48]	@ (80054c8 <vPortEnterCritical+0x60>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	603b      	str	r3, [r7, #0]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <vPortEnterCritical+0x4a>
	}
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	2000000c 	.word	0x2000000c
 80054c8:	e000ed04 	.word	0xe000ed04

080054cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054d2:	4b12      	ldr	r3, [pc, #72]	@ (800551c <vPortExitCritical+0x50>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10b      	bne.n	80054f2 <vPortExitCritical+0x26>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	607b      	str	r3, [r7, #4]
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	e7fd      	b.n	80054ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054f2:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <vPortExitCritical+0x50>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	4a08      	ldr	r2, [pc, #32]	@ (800551c <vPortExitCritical+0x50>)
 80054fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054fc:	4b07      	ldr	r3, [pc, #28]	@ (800551c <vPortExitCritical+0x50>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <vPortExitCritical+0x44>
 8005504:	2300      	movs	r3, #0
 8005506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f383 8811 	msr	BASEPRI, r3
}
 800550e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	2000000c 	.word	0x2000000c

08005520 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005520:	f3ef 8009 	mrs	r0, PSP
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <pxCurrentTCBConst>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	f01e 0f10 	tst.w	lr, #16
 8005530:	bf08      	it	eq
 8005532:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005536:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553a:	6010      	str	r0, [r2, #0]
 800553c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005540:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005544:	f380 8811 	msr	BASEPRI, r0
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f7fe fe9e 	bl	8004290 <vTaskSwitchContext>
 8005554:	f04f 0000 	mov.w	r0, #0
 8005558:	f380 8811 	msr	BASEPRI, r0
 800555c:	bc09      	pop	{r0, r3}
 800555e:	6819      	ldr	r1, [r3, #0]
 8005560:	6808      	ldr	r0, [r1, #0]
 8005562:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005566:	f01e 0f10 	tst.w	lr, #16
 800556a:	bf08      	it	eq
 800556c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005570:	f380 8809 	msr	PSP, r0
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	f3af 8000 	nop.w

08005580 <pxCurrentTCBConst>:
 8005580:	2000098c 	.word	0x2000098c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80055a2:	f7fe fdbb 	bl	800411c <xTaskIncrementTick>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80055ac:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <xPortSysTickHandler+0x40>)
 80055ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	2300      	movs	r3, #0
 80055b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	f383 8811 	msr	BASEPRI, r3
}
 80055be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80055d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <vPortSetupTimerInterrupt+0x34>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80055d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <vPortSetupTimerInterrupt+0x38>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80055dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005608 <vPortSetupTimerInterrupt+0x3c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a0a      	ldr	r2, [pc, #40]	@ (800560c <vPortSetupTimerInterrupt+0x40>)
 80055e2:	fba2 2303 	umull	r2, r3, r2, r3
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	4a09      	ldr	r2, [pc, #36]	@ (8005610 <vPortSetupTimerInterrupt+0x44>)
 80055ea:	3b01      	subs	r3, #1
 80055ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ee:	4b04      	ldr	r3, [pc, #16]	@ (8005600 <vPortSetupTimerInterrupt+0x34>)
 80055f0:	2207      	movs	r2, #7
 80055f2:	601a      	str	r2, [r3, #0]
}
 80055f4:	bf00      	nop
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	e000e010 	.word	0xe000e010
 8005604:	e000e018 	.word	0xe000e018
 8005608:	20000000 	.word	0x20000000
 800560c:	10624dd3 	.word	0x10624dd3
 8005610:	e000e014 	.word	0xe000e014

08005614 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005614:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005624 <vPortEnableVFP+0x10>
 8005618:	6801      	ldr	r1, [r0, #0]
 800561a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800561e:	6001      	str	r1, [r0, #0]
 8005620:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005622:	bf00      	nop
 8005624:	e000ed88 	.word	0xe000ed88

08005628 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800562e:	f3ef 8305 	mrs	r3, IPSR
 8005632:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2b0f      	cmp	r3, #15
 8005638:	d915      	bls.n	8005666 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800563a:	4a18      	ldr	r2, [pc, #96]	@ (800569c <vPortValidateInterruptPriority+0x74>)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005644:	4b16      	ldr	r3, [pc, #88]	@ (80056a0 <vPortValidateInterruptPriority+0x78>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	7afa      	ldrb	r2, [r7, #11]
 800564a:	429a      	cmp	r2, r3
 800564c:	d20b      	bcs.n	8005666 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	607b      	str	r3, [r7, #4]
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	e7fd      	b.n	8005662 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005666:	4b0f      	ldr	r3, [pc, #60]	@ (80056a4 <vPortValidateInterruptPriority+0x7c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800566e:	4b0e      	ldr	r3, [pc, #56]	@ (80056a8 <vPortValidateInterruptPriority+0x80>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d90b      	bls.n	800568e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	603b      	str	r3, [r7, #0]
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <vPortValidateInterruptPriority+0x62>
	}
 800568e:	bf00      	nop
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	e000e3f0 	.word	0xe000e3f0
 80056a0:	20000fb8 	.word	0x20000fb8
 80056a4:	e000ed0c 	.word	0xe000ed0c
 80056a8:	20000fbc 	.word	0x20000fbc

080056ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08a      	sub	sp, #40	@ 0x28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80056b8:	f7fe fc74 	bl	8003fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80056bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005830 <pvPortMalloc+0x184>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80056c4:	f000 f924 	bl	8005910 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80056c8:	4b5a      	ldr	r3, [pc, #360]	@ (8005834 <pvPortMalloc+0x188>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	f040 8095 	bne.w	8005800 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01e      	beq.n	800571a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80056dc:	2208      	movs	r2, #8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d015      	beq.n	800571a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f023 0307 	bic.w	r3, r3, #7
 80056f4:	3308      	adds	r3, #8
 80056f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00b      	beq.n	800571a <pvPortMalloc+0x6e>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	617b      	str	r3, [r7, #20]
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	e7fd      	b.n	8005716 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d06f      	beq.n	8005800 <pvPortMalloc+0x154>
 8005720:	4b45      	ldr	r3, [pc, #276]	@ (8005838 <pvPortMalloc+0x18c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	429a      	cmp	r2, r3
 8005728:	d86a      	bhi.n	8005800 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800572a:	4b44      	ldr	r3, [pc, #272]	@ (800583c <pvPortMalloc+0x190>)
 800572c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800572e:	4b43      	ldr	r3, [pc, #268]	@ (800583c <pvPortMalloc+0x190>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005734:	e004      	b.n	8005740 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	429a      	cmp	r2, r3
 8005748:	d903      	bls.n	8005752 <pvPortMalloc+0xa6>
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f1      	bne.n	8005736 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005752:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <pvPortMalloc+0x184>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005758:	429a      	cmp	r2, r3
 800575a:	d051      	beq.n	8005800 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2208      	movs	r2, #8
 8005762:	4413      	add	r3, r2
 8005764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1ad2      	subs	r2, r2, r3
 8005776:	2308      	movs	r3, #8
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	429a      	cmp	r2, r3
 800577c:	d920      	bls.n	80057c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800577e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00b      	beq.n	80057a8 <pvPortMalloc+0xfc>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	613b      	str	r3, [r7, #16]
}
 80057a2:	bf00      	nop
 80057a4:	bf00      	nop
 80057a6:	e7fd      	b.n	80057a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	1ad2      	subs	r2, r2, r3
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80057ba:	69b8      	ldr	r0, [r7, #24]
 80057bc:	f000 f90a 	bl	80059d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80057c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005838 <pvPortMalloc+0x18c>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	4a1b      	ldr	r2, [pc, #108]	@ (8005838 <pvPortMalloc+0x18c>)
 80057cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80057ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005838 <pvPortMalloc+0x18c>)
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <pvPortMalloc+0x194>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d203      	bcs.n	80057e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80057da:	4b17      	ldr	r3, [pc, #92]	@ (8005838 <pvPortMalloc+0x18c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a18      	ldr	r2, [pc, #96]	@ (8005840 <pvPortMalloc+0x194>)
 80057e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	4b13      	ldr	r3, [pc, #76]	@ (8005834 <pvPortMalloc+0x188>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80057f6:	4b13      	ldr	r3, [pc, #76]	@ (8005844 <pvPortMalloc+0x198>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	4a11      	ldr	r2, [pc, #68]	@ (8005844 <pvPortMalloc+0x198>)
 80057fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005800:	f7fe fbde 	bl	8003fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <pvPortMalloc+0x17a>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	60fb      	str	r3, [r7, #12]
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	e7fd      	b.n	8005822 <pvPortMalloc+0x176>
	return pvReturn;
 8005826:	69fb      	ldr	r3, [r7, #28]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3728      	adds	r7, #40	@ 0x28
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20001b80 	.word	0x20001b80
 8005834:	20001b94 	.word	0x20001b94
 8005838:	20001b84 	.word	0x20001b84
 800583c:	20001b78 	.word	0x20001b78
 8005840:	20001b88 	.word	0x20001b88
 8005844:	20001b8c 	.word	0x20001b8c

08005848 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d04f      	beq.n	80058fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800585a:	2308      	movs	r3, #8
 800585c:	425b      	negs	r3, r3
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4413      	add	r3, r2
 8005862:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	4b25      	ldr	r3, [pc, #148]	@ (8005904 <vPortFree+0xbc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4013      	ands	r3, r2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <vPortFree+0x46>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60fb      	str	r3, [r7, #12]
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <vPortFree+0x66>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	60bb      	str	r3, [r7, #8]
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	4b14      	ldr	r3, [pc, #80]	@ (8005904 <vPortFree+0xbc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01e      	beq.n	80058fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11a      	bne.n	80058fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005904 <vPortFree+0xbc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	401a      	ands	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80058d4:	f7fe fb66 	bl	8003fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <vPortFree+0xc0>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4413      	add	r3, r2
 80058e2:	4a09      	ldr	r2, [pc, #36]	@ (8005908 <vPortFree+0xc0>)
 80058e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80058e6:	6938      	ldr	r0, [r7, #16]
 80058e8:	f000 f874 	bl	80059d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80058ec:	4b07      	ldr	r3, [pc, #28]	@ (800590c <vPortFree+0xc4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	4a06      	ldr	r2, [pc, #24]	@ (800590c <vPortFree+0xc4>)
 80058f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80058f6:	f7fe fb63 	bl	8003fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80058fa:	bf00      	nop
 80058fc:	3718      	adds	r7, #24
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20001b94 	.word	0x20001b94
 8005908:	20001b84 	.word	0x20001b84
 800590c:	20001b90 	.word	0x20001b90

08005910 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005916:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800591a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800591c:	4b27      	ldr	r3, [pc, #156]	@ (80059bc <prvHeapInit+0xac>)
 800591e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3307      	adds	r3, #7
 800592e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	4a1f      	ldr	r2, [pc, #124]	@ (80059bc <prvHeapInit+0xac>)
 8005940:	4413      	add	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005948:	4a1d      	ldr	r2, [pc, #116]	@ (80059c0 <prvHeapInit+0xb0>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800594e:	4b1c      	ldr	r3, [pc, #112]	@ (80059c0 <prvHeapInit+0xb0>)
 8005950:	2200      	movs	r2, #0
 8005952:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4413      	add	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800595c:	2208      	movs	r2, #8
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	1a9b      	subs	r3, r3, r2
 8005962:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0307 	bic.w	r3, r3, #7
 800596a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	4a15      	ldr	r2, [pc, #84]	@ (80059c4 <prvHeapInit+0xb4>)
 8005970:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005972:	4b14      	ldr	r3, [pc, #80]	@ (80059c4 <prvHeapInit+0xb4>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2200      	movs	r2, #0
 8005978:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800597a:	4b12      	ldr	r3, [pc, #72]	@ (80059c4 <prvHeapInit+0xb4>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005990:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <prvHeapInit+0xb4>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a0a      	ldr	r2, [pc, #40]	@ (80059c8 <prvHeapInit+0xb8>)
 800599e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4a09      	ldr	r2, [pc, #36]	@ (80059cc <prvHeapInit+0xbc>)
 80059a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059a8:	4b09      	ldr	r3, [pc, #36]	@ (80059d0 <prvHeapInit+0xc0>)
 80059aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80059ae:	601a      	str	r2, [r3, #0]
}
 80059b0:	bf00      	nop
 80059b2:	3714      	adds	r7, #20
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	20000fc0 	.word	0x20000fc0
 80059c0:	20001b78 	.word	0x20001b78
 80059c4:	20001b80 	.word	0x20001b80
 80059c8:	20001b88 	.word	0x20001b88
 80059cc:	20001b84 	.word	0x20001b84
 80059d0:	20001b94 	.word	0x20001b94

080059d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80059dc:	4b28      	ldr	r3, [pc, #160]	@ (8005a80 <prvInsertBlockIntoFreeList+0xac>)
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	e002      	b.n	80059e8 <prvInsertBlockIntoFreeList+0x14>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d8f7      	bhi.n	80059e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	4413      	add	r3, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d108      	bne.n	8005a16 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	441a      	add	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	441a      	add	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d118      	bne.n	8005a5c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b15      	ldr	r3, [pc, #84]	@ (8005a84 <prvInsertBlockIntoFreeList+0xb0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d00d      	beq.n	8005a52 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	441a      	add	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	e008      	b.n	8005a64 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a52:	4b0c      	ldr	r3, [pc, #48]	@ (8005a84 <prvInsertBlockIntoFreeList+0xb0>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e003      	b.n	8005a64 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d002      	beq.n	8005a72 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20001b78 	.word	0x20001b78
 8005a84:	20001b80 	.word	0x20001b80

08005a88 <siprintf>:
 8005a88:	b40e      	push	{r1, r2, r3}
 8005a8a:	b500      	push	{lr}
 8005a8c:	b09c      	sub	sp, #112	@ 0x70
 8005a8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a90:	9002      	str	r0, [sp, #8]
 8005a92:	9006      	str	r0, [sp, #24]
 8005a94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a98:	4809      	ldr	r0, [pc, #36]	@ (8005ac0 <siprintf+0x38>)
 8005a9a:	9107      	str	r1, [sp, #28]
 8005a9c:	9104      	str	r1, [sp, #16]
 8005a9e:	4909      	ldr	r1, [pc, #36]	@ (8005ac4 <siprintf+0x3c>)
 8005aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa4:	9105      	str	r1, [sp, #20]
 8005aa6:	6800      	ldr	r0, [r0, #0]
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	a902      	add	r1, sp, #8
 8005aac:	f000 f9f8 	bl	8005ea0 <_svfiprintf_r>
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	701a      	strb	r2, [r3, #0]
 8005ab6:	b01c      	add	sp, #112	@ 0x70
 8005ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005abc:	b003      	add	sp, #12
 8005abe:	4770      	bx	lr
 8005ac0:	20000010 	.word	0x20000010
 8005ac4:	ffff0208 	.word	0xffff0208

08005ac8 <memset>:
 8005ac8:	4402      	add	r2, r0
 8005aca:	4603      	mov	r3, r0
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d100      	bne.n	8005ad2 <memset+0xa>
 8005ad0:	4770      	bx	lr
 8005ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ad6:	e7f9      	b.n	8005acc <memset+0x4>

08005ad8 <_reclaim_reent>:
 8005ad8:	4b29      	ldr	r3, [pc, #164]	@ (8005b80 <_reclaim_reent+0xa8>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4283      	cmp	r3, r0
 8005ade:	b570      	push	{r4, r5, r6, lr}
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	d04b      	beq.n	8005b7c <_reclaim_reent+0xa4>
 8005ae4:	69c3      	ldr	r3, [r0, #28]
 8005ae6:	b1ab      	cbz	r3, 8005b14 <_reclaim_reent+0x3c>
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	b16b      	cbz	r3, 8005b08 <_reclaim_reent+0x30>
 8005aec:	2500      	movs	r5, #0
 8005aee:	69e3      	ldr	r3, [r4, #28]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	5959      	ldr	r1, [r3, r5]
 8005af4:	2900      	cmp	r1, #0
 8005af6:	d13b      	bne.n	8005b70 <_reclaim_reent+0x98>
 8005af8:	3504      	adds	r5, #4
 8005afa:	2d80      	cmp	r5, #128	@ 0x80
 8005afc:	d1f7      	bne.n	8005aee <_reclaim_reent+0x16>
 8005afe:	69e3      	ldr	r3, [r4, #28]
 8005b00:	4620      	mov	r0, r4
 8005b02:	68d9      	ldr	r1, [r3, #12]
 8005b04:	f000 f878 	bl	8005bf8 <_free_r>
 8005b08:	69e3      	ldr	r3, [r4, #28]
 8005b0a:	6819      	ldr	r1, [r3, #0]
 8005b0c:	b111      	cbz	r1, 8005b14 <_reclaim_reent+0x3c>
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f000 f872 	bl	8005bf8 <_free_r>
 8005b14:	6961      	ldr	r1, [r4, #20]
 8005b16:	b111      	cbz	r1, 8005b1e <_reclaim_reent+0x46>
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 f86d 	bl	8005bf8 <_free_r>
 8005b1e:	69e1      	ldr	r1, [r4, #28]
 8005b20:	b111      	cbz	r1, 8005b28 <_reclaim_reent+0x50>
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 f868 	bl	8005bf8 <_free_r>
 8005b28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005b2a:	b111      	cbz	r1, 8005b32 <_reclaim_reent+0x5a>
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	f000 f863 	bl	8005bf8 <_free_r>
 8005b32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b34:	b111      	cbz	r1, 8005b3c <_reclaim_reent+0x64>
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 f85e 	bl	8005bf8 <_free_r>
 8005b3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b3e:	b111      	cbz	r1, 8005b46 <_reclaim_reent+0x6e>
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 f859 	bl	8005bf8 <_free_r>
 8005b46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b48:	b111      	cbz	r1, 8005b50 <_reclaim_reent+0x78>
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 f854 	bl	8005bf8 <_free_r>
 8005b50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005b52:	b111      	cbz	r1, 8005b5a <_reclaim_reent+0x82>
 8005b54:	4620      	mov	r0, r4
 8005b56:	f000 f84f 	bl	8005bf8 <_free_r>
 8005b5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005b5c:	b111      	cbz	r1, 8005b64 <_reclaim_reent+0x8c>
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 f84a 	bl	8005bf8 <_free_r>
 8005b64:	6a23      	ldr	r3, [r4, #32]
 8005b66:	b14b      	cbz	r3, 8005b7c <_reclaim_reent+0xa4>
 8005b68:	4620      	mov	r0, r4
 8005b6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b6e:	4718      	bx	r3
 8005b70:	680e      	ldr	r6, [r1, #0]
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 f840 	bl	8005bf8 <_free_r>
 8005b78:	4631      	mov	r1, r6
 8005b7a:	e7bb      	b.n	8005af4 <_reclaim_reent+0x1c>
 8005b7c:	bd70      	pop	{r4, r5, r6, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000010 	.word	0x20000010

08005b84 <__errno>:
 8005b84:	4b01      	ldr	r3, [pc, #4]	@ (8005b8c <__errno+0x8>)
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	20000010 	.word	0x20000010

08005b90 <__libc_init_array>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	4d0d      	ldr	r5, [pc, #52]	@ (8005bc8 <__libc_init_array+0x38>)
 8005b94:	4c0d      	ldr	r4, [pc, #52]	@ (8005bcc <__libc_init_array+0x3c>)
 8005b96:	1b64      	subs	r4, r4, r5
 8005b98:	10a4      	asrs	r4, r4, #2
 8005b9a:	2600      	movs	r6, #0
 8005b9c:	42a6      	cmp	r6, r4
 8005b9e:	d109      	bne.n	8005bb4 <__libc_init_array+0x24>
 8005ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8005bd0 <__libc_init_array+0x40>)
 8005ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8005bd4 <__libc_init_array+0x44>)
 8005ba4:	f000 fc66 	bl	8006474 <_init>
 8005ba8:	1b64      	subs	r4, r4, r5
 8005baa:	10a4      	asrs	r4, r4, #2
 8005bac:	2600      	movs	r6, #0
 8005bae:	42a6      	cmp	r6, r4
 8005bb0:	d105      	bne.n	8005bbe <__libc_init_array+0x2e>
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
 8005bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb8:	4798      	blx	r3
 8005bba:	3601      	adds	r6, #1
 8005bbc:	e7ee      	b.n	8005b9c <__libc_init_array+0xc>
 8005bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc2:	4798      	blx	r3
 8005bc4:	3601      	adds	r6, #1
 8005bc6:	e7f2      	b.n	8005bae <__libc_init_array+0x1e>
 8005bc8:	080065ec 	.word	0x080065ec
 8005bcc:	080065ec 	.word	0x080065ec
 8005bd0:	080065ec 	.word	0x080065ec
 8005bd4:	080065f0 	.word	0x080065f0

08005bd8 <__retarget_lock_acquire_recursive>:
 8005bd8:	4770      	bx	lr

08005bda <__retarget_lock_release_recursive>:
 8005bda:	4770      	bx	lr

08005bdc <memcpy>:
 8005bdc:	440a      	add	r2, r1
 8005bde:	4291      	cmp	r1, r2
 8005be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005be4:	d100      	bne.n	8005be8 <memcpy+0xc>
 8005be6:	4770      	bx	lr
 8005be8:	b510      	push	{r4, lr}
 8005bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bf2:	4291      	cmp	r1, r2
 8005bf4:	d1f9      	bne.n	8005bea <memcpy+0xe>
 8005bf6:	bd10      	pop	{r4, pc}

08005bf8 <_free_r>:
 8005bf8:	b538      	push	{r3, r4, r5, lr}
 8005bfa:	4605      	mov	r5, r0
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	d041      	beq.n	8005c84 <_free_r+0x8c>
 8005c00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c04:	1f0c      	subs	r4, r1, #4
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bfb8      	it	lt
 8005c0a:	18e4      	addlt	r4, r4, r3
 8005c0c:	f000 f8e0 	bl	8005dd0 <__malloc_lock>
 8005c10:	4a1d      	ldr	r2, [pc, #116]	@ (8005c88 <_free_r+0x90>)
 8005c12:	6813      	ldr	r3, [r2, #0]
 8005c14:	b933      	cbnz	r3, 8005c24 <_free_r+0x2c>
 8005c16:	6063      	str	r3, [r4, #4]
 8005c18:	6014      	str	r4, [r2, #0]
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c20:	f000 b8dc 	b.w	8005ddc <__malloc_unlock>
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	d908      	bls.n	8005c3a <_free_r+0x42>
 8005c28:	6820      	ldr	r0, [r4, #0]
 8005c2a:	1821      	adds	r1, r4, r0
 8005c2c:	428b      	cmp	r3, r1
 8005c2e:	bf01      	itttt	eq
 8005c30:	6819      	ldreq	r1, [r3, #0]
 8005c32:	685b      	ldreq	r3, [r3, #4]
 8005c34:	1809      	addeq	r1, r1, r0
 8005c36:	6021      	streq	r1, [r4, #0]
 8005c38:	e7ed      	b.n	8005c16 <_free_r+0x1e>
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	b10b      	cbz	r3, 8005c44 <_free_r+0x4c>
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	d9fa      	bls.n	8005c3a <_free_r+0x42>
 8005c44:	6811      	ldr	r1, [r2, #0]
 8005c46:	1850      	adds	r0, r2, r1
 8005c48:	42a0      	cmp	r0, r4
 8005c4a:	d10b      	bne.n	8005c64 <_free_r+0x6c>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	4401      	add	r1, r0
 8005c50:	1850      	adds	r0, r2, r1
 8005c52:	4283      	cmp	r3, r0
 8005c54:	6011      	str	r1, [r2, #0]
 8005c56:	d1e0      	bne.n	8005c1a <_free_r+0x22>
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	6053      	str	r3, [r2, #4]
 8005c5e:	4408      	add	r0, r1
 8005c60:	6010      	str	r0, [r2, #0]
 8005c62:	e7da      	b.n	8005c1a <_free_r+0x22>
 8005c64:	d902      	bls.n	8005c6c <_free_r+0x74>
 8005c66:	230c      	movs	r3, #12
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	e7d6      	b.n	8005c1a <_free_r+0x22>
 8005c6c:	6820      	ldr	r0, [r4, #0]
 8005c6e:	1821      	adds	r1, r4, r0
 8005c70:	428b      	cmp	r3, r1
 8005c72:	bf04      	itt	eq
 8005c74:	6819      	ldreq	r1, [r3, #0]
 8005c76:	685b      	ldreq	r3, [r3, #4]
 8005c78:	6063      	str	r3, [r4, #4]
 8005c7a:	bf04      	itt	eq
 8005c7c:	1809      	addeq	r1, r1, r0
 8005c7e:	6021      	streq	r1, [r4, #0]
 8005c80:	6054      	str	r4, [r2, #4]
 8005c82:	e7ca      	b.n	8005c1a <_free_r+0x22>
 8005c84:	bd38      	pop	{r3, r4, r5, pc}
 8005c86:	bf00      	nop
 8005c88:	20001cdc 	.word	0x20001cdc

08005c8c <sbrk_aligned>:
 8005c8c:	b570      	push	{r4, r5, r6, lr}
 8005c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8005ccc <sbrk_aligned+0x40>)
 8005c90:	460c      	mov	r4, r1
 8005c92:	6831      	ldr	r1, [r6, #0]
 8005c94:	4605      	mov	r5, r0
 8005c96:	b911      	cbnz	r1, 8005c9e <sbrk_aligned+0x12>
 8005c98:	f000 fba6 	bl	80063e8 <_sbrk_r>
 8005c9c:	6030      	str	r0, [r6, #0]
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f000 fba1 	bl	80063e8 <_sbrk_r>
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	d103      	bne.n	8005cb2 <sbrk_aligned+0x26>
 8005caa:	f04f 34ff 	mov.w	r4, #4294967295
 8005cae:	4620      	mov	r0, r4
 8005cb0:	bd70      	pop	{r4, r5, r6, pc}
 8005cb2:	1cc4      	adds	r4, r0, #3
 8005cb4:	f024 0403 	bic.w	r4, r4, #3
 8005cb8:	42a0      	cmp	r0, r4
 8005cba:	d0f8      	beq.n	8005cae <sbrk_aligned+0x22>
 8005cbc:	1a21      	subs	r1, r4, r0
 8005cbe:	4628      	mov	r0, r5
 8005cc0:	f000 fb92 	bl	80063e8 <_sbrk_r>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d1f2      	bne.n	8005cae <sbrk_aligned+0x22>
 8005cc8:	e7ef      	b.n	8005caa <sbrk_aligned+0x1e>
 8005cca:	bf00      	nop
 8005ccc:	20001cd8 	.word	0x20001cd8

08005cd0 <_malloc_r>:
 8005cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cd4:	1ccd      	adds	r5, r1, #3
 8005cd6:	f025 0503 	bic.w	r5, r5, #3
 8005cda:	3508      	adds	r5, #8
 8005cdc:	2d0c      	cmp	r5, #12
 8005cde:	bf38      	it	cc
 8005ce0:	250c      	movcc	r5, #12
 8005ce2:	2d00      	cmp	r5, #0
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	db01      	blt.n	8005cec <_malloc_r+0x1c>
 8005ce8:	42a9      	cmp	r1, r5
 8005cea:	d904      	bls.n	8005cf6 <_malloc_r+0x26>
 8005cec:	230c      	movs	r3, #12
 8005cee:	6033      	str	r3, [r6, #0]
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005dcc <_malloc_r+0xfc>
 8005cfa:	f000 f869 	bl	8005dd0 <__malloc_lock>
 8005cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8005d02:	461c      	mov	r4, r3
 8005d04:	bb44      	cbnz	r4, 8005d58 <_malloc_r+0x88>
 8005d06:	4629      	mov	r1, r5
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f7ff ffbf 	bl	8005c8c <sbrk_aligned>
 8005d0e:	1c43      	adds	r3, r0, #1
 8005d10:	4604      	mov	r4, r0
 8005d12:	d158      	bne.n	8005dc6 <_malloc_r+0xf6>
 8005d14:	f8d8 4000 	ldr.w	r4, [r8]
 8005d18:	4627      	mov	r7, r4
 8005d1a:	2f00      	cmp	r7, #0
 8005d1c:	d143      	bne.n	8005da6 <_malloc_r+0xd6>
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	d04b      	beq.n	8005dba <_malloc_r+0xea>
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	4639      	mov	r1, r7
 8005d26:	4630      	mov	r0, r6
 8005d28:	eb04 0903 	add.w	r9, r4, r3
 8005d2c:	f000 fb5c 	bl	80063e8 <_sbrk_r>
 8005d30:	4581      	cmp	r9, r0
 8005d32:	d142      	bne.n	8005dba <_malloc_r+0xea>
 8005d34:	6821      	ldr	r1, [r4, #0]
 8005d36:	1a6d      	subs	r5, r5, r1
 8005d38:	4629      	mov	r1, r5
 8005d3a:	4630      	mov	r0, r6
 8005d3c:	f7ff ffa6 	bl	8005c8c <sbrk_aligned>
 8005d40:	3001      	adds	r0, #1
 8005d42:	d03a      	beq.n	8005dba <_malloc_r+0xea>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	442b      	add	r3, r5
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	bb62      	cbnz	r2, 8005dac <_malloc_r+0xdc>
 8005d52:	f8c8 7000 	str.w	r7, [r8]
 8005d56:	e00f      	b.n	8005d78 <_malloc_r+0xa8>
 8005d58:	6822      	ldr	r2, [r4, #0]
 8005d5a:	1b52      	subs	r2, r2, r5
 8005d5c:	d420      	bmi.n	8005da0 <_malloc_r+0xd0>
 8005d5e:	2a0b      	cmp	r2, #11
 8005d60:	d917      	bls.n	8005d92 <_malloc_r+0xc2>
 8005d62:	1961      	adds	r1, r4, r5
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	6025      	str	r5, [r4, #0]
 8005d68:	bf18      	it	ne
 8005d6a:	6059      	strne	r1, [r3, #4]
 8005d6c:	6863      	ldr	r3, [r4, #4]
 8005d6e:	bf08      	it	eq
 8005d70:	f8c8 1000 	streq.w	r1, [r8]
 8005d74:	5162      	str	r2, [r4, r5]
 8005d76:	604b      	str	r3, [r1, #4]
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 f82f 	bl	8005ddc <__malloc_unlock>
 8005d7e:	f104 000b 	add.w	r0, r4, #11
 8005d82:	1d23      	adds	r3, r4, #4
 8005d84:	f020 0007 	bic.w	r0, r0, #7
 8005d88:	1ac2      	subs	r2, r0, r3
 8005d8a:	bf1c      	itt	ne
 8005d8c:	1a1b      	subne	r3, r3, r0
 8005d8e:	50a3      	strne	r3, [r4, r2]
 8005d90:	e7af      	b.n	8005cf2 <_malloc_r+0x22>
 8005d92:	6862      	ldr	r2, [r4, #4]
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	bf0c      	ite	eq
 8005d98:	f8c8 2000 	streq.w	r2, [r8]
 8005d9c:	605a      	strne	r2, [r3, #4]
 8005d9e:	e7eb      	b.n	8005d78 <_malloc_r+0xa8>
 8005da0:	4623      	mov	r3, r4
 8005da2:	6864      	ldr	r4, [r4, #4]
 8005da4:	e7ae      	b.n	8005d04 <_malloc_r+0x34>
 8005da6:	463c      	mov	r4, r7
 8005da8:	687f      	ldr	r7, [r7, #4]
 8005daa:	e7b6      	b.n	8005d1a <_malloc_r+0x4a>
 8005dac:	461a      	mov	r2, r3
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	42a3      	cmp	r3, r4
 8005db2:	d1fb      	bne.n	8005dac <_malloc_r+0xdc>
 8005db4:	2300      	movs	r3, #0
 8005db6:	6053      	str	r3, [r2, #4]
 8005db8:	e7de      	b.n	8005d78 <_malloc_r+0xa8>
 8005dba:	230c      	movs	r3, #12
 8005dbc:	6033      	str	r3, [r6, #0]
 8005dbe:	4630      	mov	r0, r6
 8005dc0:	f000 f80c 	bl	8005ddc <__malloc_unlock>
 8005dc4:	e794      	b.n	8005cf0 <_malloc_r+0x20>
 8005dc6:	6005      	str	r5, [r0, #0]
 8005dc8:	e7d6      	b.n	8005d78 <_malloc_r+0xa8>
 8005dca:	bf00      	nop
 8005dcc:	20001cdc 	.word	0x20001cdc

08005dd0 <__malloc_lock>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	@ (8005dd8 <__malloc_lock+0x8>)
 8005dd2:	f7ff bf01 	b.w	8005bd8 <__retarget_lock_acquire_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20001cd4 	.word	0x20001cd4

08005ddc <__malloc_unlock>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	@ (8005de4 <__malloc_unlock+0x8>)
 8005dde:	f7ff befc 	b.w	8005bda <__retarget_lock_release_recursive>
 8005de2:	bf00      	nop
 8005de4:	20001cd4 	.word	0x20001cd4

08005de8 <__ssputs_r>:
 8005de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dec:	688e      	ldr	r6, [r1, #8]
 8005dee:	461f      	mov	r7, r3
 8005df0:	42be      	cmp	r6, r7
 8005df2:	680b      	ldr	r3, [r1, #0]
 8005df4:	4682      	mov	sl, r0
 8005df6:	460c      	mov	r4, r1
 8005df8:	4690      	mov	r8, r2
 8005dfa:	d82d      	bhi.n	8005e58 <__ssputs_r+0x70>
 8005dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e04:	d026      	beq.n	8005e54 <__ssputs_r+0x6c>
 8005e06:	6965      	ldr	r5, [r4, #20]
 8005e08:	6909      	ldr	r1, [r1, #16]
 8005e0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e0e:	eba3 0901 	sub.w	r9, r3, r1
 8005e12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e16:	1c7b      	adds	r3, r7, #1
 8005e18:	444b      	add	r3, r9
 8005e1a:	106d      	asrs	r5, r5, #1
 8005e1c:	429d      	cmp	r5, r3
 8005e1e:	bf38      	it	cc
 8005e20:	461d      	movcc	r5, r3
 8005e22:	0553      	lsls	r3, r2, #21
 8005e24:	d527      	bpl.n	8005e76 <__ssputs_r+0x8e>
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7ff ff52 	bl	8005cd0 <_malloc_r>
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	b360      	cbz	r0, 8005e8a <__ssputs_r+0xa2>
 8005e30:	6921      	ldr	r1, [r4, #16]
 8005e32:	464a      	mov	r2, r9
 8005e34:	f7ff fed2 	bl	8005bdc <memcpy>
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e42:	81a3      	strh	r3, [r4, #12]
 8005e44:	6126      	str	r6, [r4, #16]
 8005e46:	6165      	str	r5, [r4, #20]
 8005e48:	444e      	add	r6, r9
 8005e4a:	eba5 0509 	sub.w	r5, r5, r9
 8005e4e:	6026      	str	r6, [r4, #0]
 8005e50:	60a5      	str	r5, [r4, #8]
 8005e52:	463e      	mov	r6, r7
 8005e54:	42be      	cmp	r6, r7
 8005e56:	d900      	bls.n	8005e5a <__ssputs_r+0x72>
 8005e58:	463e      	mov	r6, r7
 8005e5a:	6820      	ldr	r0, [r4, #0]
 8005e5c:	4632      	mov	r2, r6
 8005e5e:	4641      	mov	r1, r8
 8005e60:	f000 faa8 	bl	80063b4 <memmove>
 8005e64:	68a3      	ldr	r3, [r4, #8]
 8005e66:	1b9b      	subs	r3, r3, r6
 8005e68:	60a3      	str	r3, [r4, #8]
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	4433      	add	r3, r6
 8005e6e:	6023      	str	r3, [r4, #0]
 8005e70:	2000      	movs	r0, #0
 8005e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e76:	462a      	mov	r2, r5
 8005e78:	f000 fac6 	bl	8006408 <_realloc_r>
 8005e7c:	4606      	mov	r6, r0
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d1e0      	bne.n	8005e44 <__ssputs_r+0x5c>
 8005e82:	6921      	ldr	r1, [r4, #16]
 8005e84:	4650      	mov	r0, sl
 8005e86:	f7ff feb7 	bl	8005bf8 <_free_r>
 8005e8a:	230c      	movs	r3, #12
 8005e8c:	f8ca 3000 	str.w	r3, [sl]
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	f04f 30ff 	mov.w	r0, #4294967295
 8005e9c:	e7e9      	b.n	8005e72 <__ssputs_r+0x8a>
	...

08005ea0 <_svfiprintf_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	4698      	mov	r8, r3
 8005ea6:	898b      	ldrh	r3, [r1, #12]
 8005ea8:	061b      	lsls	r3, r3, #24
 8005eaa:	b09d      	sub	sp, #116	@ 0x74
 8005eac:	4607      	mov	r7, r0
 8005eae:	460d      	mov	r5, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	d510      	bpl.n	8005ed6 <_svfiprintf_r+0x36>
 8005eb4:	690b      	ldr	r3, [r1, #16]
 8005eb6:	b973      	cbnz	r3, 8005ed6 <_svfiprintf_r+0x36>
 8005eb8:	2140      	movs	r1, #64	@ 0x40
 8005eba:	f7ff ff09 	bl	8005cd0 <_malloc_r>
 8005ebe:	6028      	str	r0, [r5, #0]
 8005ec0:	6128      	str	r0, [r5, #16]
 8005ec2:	b930      	cbnz	r0, 8005ed2 <_svfiprintf_r+0x32>
 8005ec4:	230c      	movs	r3, #12
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ecc:	b01d      	add	sp, #116	@ 0x74
 8005ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed2:	2340      	movs	r3, #64	@ 0x40
 8005ed4:	616b      	str	r3, [r5, #20]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eda:	2320      	movs	r3, #32
 8005edc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ee0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ee4:	2330      	movs	r3, #48	@ 0x30
 8005ee6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006084 <_svfiprintf_r+0x1e4>
 8005eea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005eee:	f04f 0901 	mov.w	r9, #1
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	469a      	mov	sl, r3
 8005ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005efa:	b10a      	cbz	r2, 8005f00 <_svfiprintf_r+0x60>
 8005efc:	2a25      	cmp	r2, #37	@ 0x25
 8005efe:	d1f9      	bne.n	8005ef4 <_svfiprintf_r+0x54>
 8005f00:	ebba 0b04 	subs.w	fp, sl, r4
 8005f04:	d00b      	beq.n	8005f1e <_svfiprintf_r+0x7e>
 8005f06:	465b      	mov	r3, fp
 8005f08:	4622      	mov	r2, r4
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	4638      	mov	r0, r7
 8005f0e:	f7ff ff6b 	bl	8005de8 <__ssputs_r>
 8005f12:	3001      	adds	r0, #1
 8005f14:	f000 80a7 	beq.w	8006066 <_svfiprintf_r+0x1c6>
 8005f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f1a:	445a      	add	r2, fp
 8005f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 809f 	beq.w	8006066 <_svfiprintf_r+0x1c6>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f32:	f10a 0a01 	add.w	sl, sl, #1
 8005f36:	9304      	str	r3, [sp, #16]
 8005f38:	9307      	str	r3, [sp, #28]
 8005f3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f40:	4654      	mov	r4, sl
 8005f42:	2205      	movs	r2, #5
 8005f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f48:	484e      	ldr	r0, [pc, #312]	@ (8006084 <_svfiprintf_r+0x1e4>)
 8005f4a:	f7fa f941 	bl	80001d0 <memchr>
 8005f4e:	9a04      	ldr	r2, [sp, #16]
 8005f50:	b9d8      	cbnz	r0, 8005f8a <_svfiprintf_r+0xea>
 8005f52:	06d0      	lsls	r0, r2, #27
 8005f54:	bf44      	itt	mi
 8005f56:	2320      	movmi	r3, #32
 8005f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f5c:	0711      	lsls	r1, r2, #28
 8005f5e:	bf44      	itt	mi
 8005f60:	232b      	movmi	r3, #43	@ 0x2b
 8005f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f66:	f89a 3000 	ldrb.w	r3, [sl]
 8005f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f6c:	d015      	beq.n	8005f9a <_svfiprintf_r+0xfa>
 8005f6e:	9a07      	ldr	r2, [sp, #28]
 8005f70:	4654      	mov	r4, sl
 8005f72:	2000      	movs	r0, #0
 8005f74:	f04f 0c0a 	mov.w	ip, #10
 8005f78:	4621      	mov	r1, r4
 8005f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f7e:	3b30      	subs	r3, #48	@ 0x30
 8005f80:	2b09      	cmp	r3, #9
 8005f82:	d94b      	bls.n	800601c <_svfiprintf_r+0x17c>
 8005f84:	b1b0      	cbz	r0, 8005fb4 <_svfiprintf_r+0x114>
 8005f86:	9207      	str	r2, [sp, #28]
 8005f88:	e014      	b.n	8005fb4 <_svfiprintf_r+0x114>
 8005f8a:	eba0 0308 	sub.w	r3, r0, r8
 8005f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f92:	4313      	orrs	r3, r2
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	46a2      	mov	sl, r4
 8005f98:	e7d2      	b.n	8005f40 <_svfiprintf_r+0xa0>
 8005f9a:	9b03      	ldr	r3, [sp, #12]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	9103      	str	r1, [sp, #12]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bfbb      	ittet	lt
 8005fa6:	425b      	neglt	r3, r3
 8005fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8005fac:	9307      	strge	r3, [sp, #28]
 8005fae:	9307      	strlt	r3, [sp, #28]
 8005fb0:	bfb8      	it	lt
 8005fb2:	9204      	strlt	r2, [sp, #16]
 8005fb4:	7823      	ldrb	r3, [r4, #0]
 8005fb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fb8:	d10a      	bne.n	8005fd0 <_svfiprintf_r+0x130>
 8005fba:	7863      	ldrb	r3, [r4, #1]
 8005fbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fbe:	d132      	bne.n	8006026 <_svfiprintf_r+0x186>
 8005fc0:	9b03      	ldr	r3, [sp, #12]
 8005fc2:	1d1a      	adds	r2, r3, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	9203      	str	r2, [sp, #12]
 8005fc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fcc:	3402      	adds	r4, #2
 8005fce:	9305      	str	r3, [sp, #20]
 8005fd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006094 <_svfiprintf_r+0x1f4>
 8005fd4:	7821      	ldrb	r1, [r4, #0]
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	4650      	mov	r0, sl
 8005fda:	f7fa f8f9 	bl	80001d0 <memchr>
 8005fde:	b138      	cbz	r0, 8005ff0 <_svfiprintf_r+0x150>
 8005fe0:	9b04      	ldr	r3, [sp, #16]
 8005fe2:	eba0 000a 	sub.w	r0, r0, sl
 8005fe6:	2240      	movs	r2, #64	@ 0x40
 8005fe8:	4082      	lsls	r2, r0
 8005fea:	4313      	orrs	r3, r2
 8005fec:	3401      	adds	r4, #1
 8005fee:	9304      	str	r3, [sp, #16]
 8005ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff4:	4824      	ldr	r0, [pc, #144]	@ (8006088 <_svfiprintf_r+0x1e8>)
 8005ff6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005ffa:	2206      	movs	r2, #6
 8005ffc:	f7fa f8e8 	bl	80001d0 <memchr>
 8006000:	2800      	cmp	r0, #0
 8006002:	d036      	beq.n	8006072 <_svfiprintf_r+0x1d2>
 8006004:	4b21      	ldr	r3, [pc, #132]	@ (800608c <_svfiprintf_r+0x1ec>)
 8006006:	bb1b      	cbnz	r3, 8006050 <_svfiprintf_r+0x1b0>
 8006008:	9b03      	ldr	r3, [sp, #12]
 800600a:	3307      	adds	r3, #7
 800600c:	f023 0307 	bic.w	r3, r3, #7
 8006010:	3308      	adds	r3, #8
 8006012:	9303      	str	r3, [sp, #12]
 8006014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006016:	4433      	add	r3, r6
 8006018:	9309      	str	r3, [sp, #36]	@ 0x24
 800601a:	e76a      	b.n	8005ef2 <_svfiprintf_r+0x52>
 800601c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006020:	460c      	mov	r4, r1
 8006022:	2001      	movs	r0, #1
 8006024:	e7a8      	b.n	8005f78 <_svfiprintf_r+0xd8>
 8006026:	2300      	movs	r3, #0
 8006028:	3401      	adds	r4, #1
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	4619      	mov	r1, r3
 800602e:	f04f 0c0a 	mov.w	ip, #10
 8006032:	4620      	mov	r0, r4
 8006034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006038:	3a30      	subs	r2, #48	@ 0x30
 800603a:	2a09      	cmp	r2, #9
 800603c:	d903      	bls.n	8006046 <_svfiprintf_r+0x1a6>
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0c6      	beq.n	8005fd0 <_svfiprintf_r+0x130>
 8006042:	9105      	str	r1, [sp, #20]
 8006044:	e7c4      	b.n	8005fd0 <_svfiprintf_r+0x130>
 8006046:	fb0c 2101 	mla	r1, ip, r1, r2
 800604a:	4604      	mov	r4, r0
 800604c:	2301      	movs	r3, #1
 800604e:	e7f0      	b.n	8006032 <_svfiprintf_r+0x192>
 8006050:	ab03      	add	r3, sp, #12
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	462a      	mov	r2, r5
 8006056:	4b0e      	ldr	r3, [pc, #56]	@ (8006090 <_svfiprintf_r+0x1f0>)
 8006058:	a904      	add	r1, sp, #16
 800605a:	4638      	mov	r0, r7
 800605c:	f3af 8000 	nop.w
 8006060:	1c42      	adds	r2, r0, #1
 8006062:	4606      	mov	r6, r0
 8006064:	d1d6      	bne.n	8006014 <_svfiprintf_r+0x174>
 8006066:	89ab      	ldrh	r3, [r5, #12]
 8006068:	065b      	lsls	r3, r3, #25
 800606a:	f53f af2d 	bmi.w	8005ec8 <_svfiprintf_r+0x28>
 800606e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006070:	e72c      	b.n	8005ecc <_svfiprintf_r+0x2c>
 8006072:	ab03      	add	r3, sp, #12
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	462a      	mov	r2, r5
 8006078:	4b05      	ldr	r3, [pc, #20]	@ (8006090 <_svfiprintf_r+0x1f0>)
 800607a:	a904      	add	r1, sp, #16
 800607c:	4638      	mov	r0, r7
 800607e:	f000 f879 	bl	8006174 <_printf_i>
 8006082:	e7ed      	b.n	8006060 <_svfiprintf_r+0x1c0>
 8006084:	080065b0 	.word	0x080065b0
 8006088:	080065ba 	.word	0x080065ba
 800608c:	00000000 	.word	0x00000000
 8006090:	08005de9 	.word	0x08005de9
 8006094:	080065b6 	.word	0x080065b6

08006098 <_printf_common>:
 8006098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800609c:	4616      	mov	r6, r2
 800609e:	4698      	mov	r8, r3
 80060a0:	688a      	ldr	r2, [r1, #8]
 80060a2:	690b      	ldr	r3, [r1, #16]
 80060a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060a8:	4293      	cmp	r3, r2
 80060aa:	bfb8      	it	lt
 80060ac:	4613      	movlt	r3, r2
 80060ae:	6033      	str	r3, [r6, #0]
 80060b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060b4:	4607      	mov	r7, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	b10a      	cbz	r2, 80060be <_printf_common+0x26>
 80060ba:	3301      	adds	r3, #1
 80060bc:	6033      	str	r3, [r6, #0]
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	0699      	lsls	r1, r3, #26
 80060c2:	bf42      	ittt	mi
 80060c4:	6833      	ldrmi	r3, [r6, #0]
 80060c6:	3302      	addmi	r3, #2
 80060c8:	6033      	strmi	r3, [r6, #0]
 80060ca:	6825      	ldr	r5, [r4, #0]
 80060cc:	f015 0506 	ands.w	r5, r5, #6
 80060d0:	d106      	bne.n	80060e0 <_printf_common+0x48>
 80060d2:	f104 0a19 	add.w	sl, r4, #25
 80060d6:	68e3      	ldr	r3, [r4, #12]
 80060d8:	6832      	ldr	r2, [r6, #0]
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	42ab      	cmp	r3, r5
 80060de:	dc26      	bgt.n	800612e <_printf_common+0x96>
 80060e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80060e4:	6822      	ldr	r2, [r4, #0]
 80060e6:	3b00      	subs	r3, #0
 80060e8:	bf18      	it	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	0692      	lsls	r2, r2, #26
 80060ee:	d42b      	bmi.n	8006148 <_printf_common+0xb0>
 80060f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80060f4:	4641      	mov	r1, r8
 80060f6:	4638      	mov	r0, r7
 80060f8:	47c8      	blx	r9
 80060fa:	3001      	adds	r0, #1
 80060fc:	d01e      	beq.n	800613c <_printf_common+0xa4>
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	6922      	ldr	r2, [r4, #16]
 8006102:	f003 0306 	and.w	r3, r3, #6
 8006106:	2b04      	cmp	r3, #4
 8006108:	bf02      	ittt	eq
 800610a:	68e5      	ldreq	r5, [r4, #12]
 800610c:	6833      	ldreq	r3, [r6, #0]
 800610e:	1aed      	subeq	r5, r5, r3
 8006110:	68a3      	ldr	r3, [r4, #8]
 8006112:	bf0c      	ite	eq
 8006114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006118:	2500      	movne	r5, #0
 800611a:	4293      	cmp	r3, r2
 800611c:	bfc4      	itt	gt
 800611e:	1a9b      	subgt	r3, r3, r2
 8006120:	18ed      	addgt	r5, r5, r3
 8006122:	2600      	movs	r6, #0
 8006124:	341a      	adds	r4, #26
 8006126:	42b5      	cmp	r5, r6
 8006128:	d11a      	bne.n	8006160 <_printf_common+0xc8>
 800612a:	2000      	movs	r0, #0
 800612c:	e008      	b.n	8006140 <_printf_common+0xa8>
 800612e:	2301      	movs	r3, #1
 8006130:	4652      	mov	r2, sl
 8006132:	4641      	mov	r1, r8
 8006134:	4638      	mov	r0, r7
 8006136:	47c8      	blx	r9
 8006138:	3001      	adds	r0, #1
 800613a:	d103      	bne.n	8006144 <_printf_common+0xac>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006144:	3501      	adds	r5, #1
 8006146:	e7c6      	b.n	80060d6 <_printf_common+0x3e>
 8006148:	18e1      	adds	r1, r4, r3
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	2030      	movs	r0, #48	@ 0x30
 800614e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006152:	4422      	add	r2, r4
 8006154:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006158:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800615c:	3302      	adds	r3, #2
 800615e:	e7c7      	b.n	80060f0 <_printf_common+0x58>
 8006160:	2301      	movs	r3, #1
 8006162:	4622      	mov	r2, r4
 8006164:	4641      	mov	r1, r8
 8006166:	4638      	mov	r0, r7
 8006168:	47c8      	blx	r9
 800616a:	3001      	adds	r0, #1
 800616c:	d0e6      	beq.n	800613c <_printf_common+0xa4>
 800616e:	3601      	adds	r6, #1
 8006170:	e7d9      	b.n	8006126 <_printf_common+0x8e>
	...

08006174 <_printf_i>:
 8006174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	7e0f      	ldrb	r7, [r1, #24]
 800617a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800617c:	2f78      	cmp	r7, #120	@ 0x78
 800617e:	4691      	mov	r9, r2
 8006180:	4680      	mov	r8, r0
 8006182:	460c      	mov	r4, r1
 8006184:	469a      	mov	sl, r3
 8006186:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800618a:	d807      	bhi.n	800619c <_printf_i+0x28>
 800618c:	2f62      	cmp	r7, #98	@ 0x62
 800618e:	d80a      	bhi.n	80061a6 <_printf_i+0x32>
 8006190:	2f00      	cmp	r7, #0
 8006192:	f000 80d2 	beq.w	800633a <_printf_i+0x1c6>
 8006196:	2f58      	cmp	r7, #88	@ 0x58
 8006198:	f000 80b9 	beq.w	800630e <_printf_i+0x19a>
 800619c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061a4:	e03a      	b.n	800621c <_printf_i+0xa8>
 80061a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061aa:	2b15      	cmp	r3, #21
 80061ac:	d8f6      	bhi.n	800619c <_printf_i+0x28>
 80061ae:	a101      	add	r1, pc, #4	@ (adr r1, 80061b4 <_printf_i+0x40>)
 80061b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061b4:	0800620d 	.word	0x0800620d
 80061b8:	08006221 	.word	0x08006221
 80061bc:	0800619d 	.word	0x0800619d
 80061c0:	0800619d 	.word	0x0800619d
 80061c4:	0800619d 	.word	0x0800619d
 80061c8:	0800619d 	.word	0x0800619d
 80061cc:	08006221 	.word	0x08006221
 80061d0:	0800619d 	.word	0x0800619d
 80061d4:	0800619d 	.word	0x0800619d
 80061d8:	0800619d 	.word	0x0800619d
 80061dc:	0800619d 	.word	0x0800619d
 80061e0:	08006321 	.word	0x08006321
 80061e4:	0800624b 	.word	0x0800624b
 80061e8:	080062db 	.word	0x080062db
 80061ec:	0800619d 	.word	0x0800619d
 80061f0:	0800619d 	.word	0x0800619d
 80061f4:	08006343 	.word	0x08006343
 80061f8:	0800619d 	.word	0x0800619d
 80061fc:	0800624b 	.word	0x0800624b
 8006200:	0800619d 	.word	0x0800619d
 8006204:	0800619d 	.word	0x0800619d
 8006208:	080062e3 	.word	0x080062e3
 800620c:	6833      	ldr	r3, [r6, #0]
 800620e:	1d1a      	adds	r2, r3, #4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6032      	str	r2, [r6, #0]
 8006214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006218:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800621c:	2301      	movs	r3, #1
 800621e:	e09d      	b.n	800635c <_printf_i+0x1e8>
 8006220:	6833      	ldr	r3, [r6, #0]
 8006222:	6820      	ldr	r0, [r4, #0]
 8006224:	1d19      	adds	r1, r3, #4
 8006226:	6031      	str	r1, [r6, #0]
 8006228:	0606      	lsls	r6, r0, #24
 800622a:	d501      	bpl.n	8006230 <_printf_i+0xbc>
 800622c:	681d      	ldr	r5, [r3, #0]
 800622e:	e003      	b.n	8006238 <_printf_i+0xc4>
 8006230:	0645      	lsls	r5, r0, #25
 8006232:	d5fb      	bpl.n	800622c <_printf_i+0xb8>
 8006234:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006238:	2d00      	cmp	r5, #0
 800623a:	da03      	bge.n	8006244 <_printf_i+0xd0>
 800623c:	232d      	movs	r3, #45	@ 0x2d
 800623e:	426d      	negs	r5, r5
 8006240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006244:	4859      	ldr	r0, [pc, #356]	@ (80063ac <_printf_i+0x238>)
 8006246:	230a      	movs	r3, #10
 8006248:	e011      	b.n	800626e <_printf_i+0xfa>
 800624a:	6821      	ldr	r1, [r4, #0]
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	0608      	lsls	r0, r1, #24
 8006250:	f853 5b04 	ldr.w	r5, [r3], #4
 8006254:	d402      	bmi.n	800625c <_printf_i+0xe8>
 8006256:	0649      	lsls	r1, r1, #25
 8006258:	bf48      	it	mi
 800625a:	b2ad      	uxthmi	r5, r5
 800625c:	2f6f      	cmp	r7, #111	@ 0x6f
 800625e:	4853      	ldr	r0, [pc, #332]	@ (80063ac <_printf_i+0x238>)
 8006260:	6033      	str	r3, [r6, #0]
 8006262:	bf14      	ite	ne
 8006264:	230a      	movne	r3, #10
 8006266:	2308      	moveq	r3, #8
 8006268:	2100      	movs	r1, #0
 800626a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800626e:	6866      	ldr	r6, [r4, #4]
 8006270:	60a6      	str	r6, [r4, #8]
 8006272:	2e00      	cmp	r6, #0
 8006274:	bfa2      	ittt	ge
 8006276:	6821      	ldrge	r1, [r4, #0]
 8006278:	f021 0104 	bicge.w	r1, r1, #4
 800627c:	6021      	strge	r1, [r4, #0]
 800627e:	b90d      	cbnz	r5, 8006284 <_printf_i+0x110>
 8006280:	2e00      	cmp	r6, #0
 8006282:	d04b      	beq.n	800631c <_printf_i+0x1a8>
 8006284:	4616      	mov	r6, r2
 8006286:	fbb5 f1f3 	udiv	r1, r5, r3
 800628a:	fb03 5711 	mls	r7, r3, r1, r5
 800628e:	5dc7      	ldrb	r7, [r0, r7]
 8006290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006294:	462f      	mov	r7, r5
 8006296:	42bb      	cmp	r3, r7
 8006298:	460d      	mov	r5, r1
 800629a:	d9f4      	bls.n	8006286 <_printf_i+0x112>
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10b      	bne.n	80062b8 <_printf_i+0x144>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07df      	lsls	r7, r3, #31
 80062a4:	d508      	bpl.n	80062b8 <_printf_i+0x144>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	4299      	cmp	r1, r3
 80062ac:	bfde      	ittt	le
 80062ae:	2330      	movle	r3, #48	@ 0x30
 80062b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062b8:	1b92      	subs	r2, r2, r6
 80062ba:	6122      	str	r2, [r4, #16]
 80062bc:	f8cd a000 	str.w	sl, [sp]
 80062c0:	464b      	mov	r3, r9
 80062c2:	aa03      	add	r2, sp, #12
 80062c4:	4621      	mov	r1, r4
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff fee6 	bl	8006098 <_printf_common>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d14a      	bne.n	8006366 <_printf_i+0x1f2>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	b004      	add	sp, #16
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	f043 0320 	orr.w	r3, r3, #32
 80062e0:	6023      	str	r3, [r4, #0]
 80062e2:	4833      	ldr	r0, [pc, #204]	@ (80063b0 <_printf_i+0x23c>)
 80062e4:	2778      	movs	r7, #120	@ 0x78
 80062e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	6831      	ldr	r1, [r6, #0]
 80062ee:	061f      	lsls	r7, r3, #24
 80062f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80062f4:	d402      	bmi.n	80062fc <_printf_i+0x188>
 80062f6:	065f      	lsls	r7, r3, #25
 80062f8:	bf48      	it	mi
 80062fa:	b2ad      	uxthmi	r5, r5
 80062fc:	6031      	str	r1, [r6, #0]
 80062fe:	07d9      	lsls	r1, r3, #31
 8006300:	bf44      	itt	mi
 8006302:	f043 0320 	orrmi.w	r3, r3, #32
 8006306:	6023      	strmi	r3, [r4, #0]
 8006308:	b11d      	cbz	r5, 8006312 <_printf_i+0x19e>
 800630a:	2310      	movs	r3, #16
 800630c:	e7ac      	b.n	8006268 <_printf_i+0xf4>
 800630e:	4827      	ldr	r0, [pc, #156]	@ (80063ac <_printf_i+0x238>)
 8006310:	e7e9      	b.n	80062e6 <_printf_i+0x172>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f023 0320 	bic.w	r3, r3, #32
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	e7f6      	b.n	800630a <_printf_i+0x196>
 800631c:	4616      	mov	r6, r2
 800631e:	e7bd      	b.n	800629c <_printf_i+0x128>
 8006320:	6833      	ldr	r3, [r6, #0]
 8006322:	6825      	ldr	r5, [r4, #0]
 8006324:	6961      	ldr	r1, [r4, #20]
 8006326:	1d18      	adds	r0, r3, #4
 8006328:	6030      	str	r0, [r6, #0]
 800632a:	062e      	lsls	r6, r5, #24
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	d501      	bpl.n	8006334 <_printf_i+0x1c0>
 8006330:	6019      	str	r1, [r3, #0]
 8006332:	e002      	b.n	800633a <_printf_i+0x1c6>
 8006334:	0668      	lsls	r0, r5, #25
 8006336:	d5fb      	bpl.n	8006330 <_printf_i+0x1bc>
 8006338:	8019      	strh	r1, [r3, #0]
 800633a:	2300      	movs	r3, #0
 800633c:	6123      	str	r3, [r4, #16]
 800633e:	4616      	mov	r6, r2
 8006340:	e7bc      	b.n	80062bc <_printf_i+0x148>
 8006342:	6833      	ldr	r3, [r6, #0]
 8006344:	1d1a      	adds	r2, r3, #4
 8006346:	6032      	str	r2, [r6, #0]
 8006348:	681e      	ldr	r6, [r3, #0]
 800634a:	6862      	ldr	r2, [r4, #4]
 800634c:	2100      	movs	r1, #0
 800634e:	4630      	mov	r0, r6
 8006350:	f7f9 ff3e 	bl	80001d0 <memchr>
 8006354:	b108      	cbz	r0, 800635a <_printf_i+0x1e6>
 8006356:	1b80      	subs	r0, r0, r6
 8006358:	6060      	str	r0, [r4, #4]
 800635a:	6863      	ldr	r3, [r4, #4]
 800635c:	6123      	str	r3, [r4, #16]
 800635e:	2300      	movs	r3, #0
 8006360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006364:	e7aa      	b.n	80062bc <_printf_i+0x148>
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	4632      	mov	r2, r6
 800636a:	4649      	mov	r1, r9
 800636c:	4640      	mov	r0, r8
 800636e:	47d0      	blx	sl
 8006370:	3001      	adds	r0, #1
 8006372:	d0ad      	beq.n	80062d0 <_printf_i+0x15c>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	079b      	lsls	r3, r3, #30
 8006378:	d413      	bmi.n	80063a2 <_printf_i+0x22e>
 800637a:	68e0      	ldr	r0, [r4, #12]
 800637c:	9b03      	ldr	r3, [sp, #12]
 800637e:	4298      	cmp	r0, r3
 8006380:	bfb8      	it	lt
 8006382:	4618      	movlt	r0, r3
 8006384:	e7a6      	b.n	80062d4 <_printf_i+0x160>
 8006386:	2301      	movs	r3, #1
 8006388:	4632      	mov	r2, r6
 800638a:	4649      	mov	r1, r9
 800638c:	4640      	mov	r0, r8
 800638e:	47d0      	blx	sl
 8006390:	3001      	adds	r0, #1
 8006392:	d09d      	beq.n	80062d0 <_printf_i+0x15c>
 8006394:	3501      	adds	r5, #1
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	9903      	ldr	r1, [sp, #12]
 800639a:	1a5b      	subs	r3, r3, r1
 800639c:	42ab      	cmp	r3, r5
 800639e:	dcf2      	bgt.n	8006386 <_printf_i+0x212>
 80063a0:	e7eb      	b.n	800637a <_printf_i+0x206>
 80063a2:	2500      	movs	r5, #0
 80063a4:	f104 0619 	add.w	r6, r4, #25
 80063a8:	e7f5      	b.n	8006396 <_printf_i+0x222>
 80063aa:	bf00      	nop
 80063ac:	080065c1 	.word	0x080065c1
 80063b0:	080065d2 	.word	0x080065d2

080063b4 <memmove>:
 80063b4:	4288      	cmp	r0, r1
 80063b6:	b510      	push	{r4, lr}
 80063b8:	eb01 0402 	add.w	r4, r1, r2
 80063bc:	d902      	bls.n	80063c4 <memmove+0x10>
 80063be:	4284      	cmp	r4, r0
 80063c0:	4623      	mov	r3, r4
 80063c2:	d807      	bhi.n	80063d4 <memmove+0x20>
 80063c4:	1e43      	subs	r3, r0, #1
 80063c6:	42a1      	cmp	r1, r4
 80063c8:	d008      	beq.n	80063dc <memmove+0x28>
 80063ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063d2:	e7f8      	b.n	80063c6 <memmove+0x12>
 80063d4:	4402      	add	r2, r0
 80063d6:	4601      	mov	r1, r0
 80063d8:	428a      	cmp	r2, r1
 80063da:	d100      	bne.n	80063de <memmove+0x2a>
 80063dc:	bd10      	pop	{r4, pc}
 80063de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063e6:	e7f7      	b.n	80063d8 <memmove+0x24>

080063e8 <_sbrk_r>:
 80063e8:	b538      	push	{r3, r4, r5, lr}
 80063ea:	4d06      	ldr	r5, [pc, #24]	@ (8006404 <_sbrk_r+0x1c>)
 80063ec:	2300      	movs	r3, #0
 80063ee:	4604      	mov	r4, r0
 80063f0:	4608      	mov	r0, r1
 80063f2:	602b      	str	r3, [r5, #0]
 80063f4:	f7fa ff96 	bl	8001324 <_sbrk>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_sbrk_r+0x1a>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_sbrk_r+0x1a>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	20001cd0 	.word	0x20001cd0

08006408 <_realloc_r>:
 8006408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800640c:	4680      	mov	r8, r0
 800640e:	4615      	mov	r5, r2
 8006410:	460c      	mov	r4, r1
 8006412:	b921      	cbnz	r1, 800641e <_realloc_r+0x16>
 8006414:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006418:	4611      	mov	r1, r2
 800641a:	f7ff bc59 	b.w	8005cd0 <_malloc_r>
 800641e:	b92a      	cbnz	r2, 800642c <_realloc_r+0x24>
 8006420:	f7ff fbea 	bl	8005bf8 <_free_r>
 8006424:	2400      	movs	r4, #0
 8006426:	4620      	mov	r0, r4
 8006428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800642c:	f000 f81a 	bl	8006464 <_malloc_usable_size_r>
 8006430:	4285      	cmp	r5, r0
 8006432:	4606      	mov	r6, r0
 8006434:	d802      	bhi.n	800643c <_realloc_r+0x34>
 8006436:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800643a:	d8f4      	bhi.n	8006426 <_realloc_r+0x1e>
 800643c:	4629      	mov	r1, r5
 800643e:	4640      	mov	r0, r8
 8006440:	f7ff fc46 	bl	8005cd0 <_malloc_r>
 8006444:	4607      	mov	r7, r0
 8006446:	2800      	cmp	r0, #0
 8006448:	d0ec      	beq.n	8006424 <_realloc_r+0x1c>
 800644a:	42b5      	cmp	r5, r6
 800644c:	462a      	mov	r2, r5
 800644e:	4621      	mov	r1, r4
 8006450:	bf28      	it	cs
 8006452:	4632      	movcs	r2, r6
 8006454:	f7ff fbc2 	bl	8005bdc <memcpy>
 8006458:	4621      	mov	r1, r4
 800645a:	4640      	mov	r0, r8
 800645c:	f7ff fbcc 	bl	8005bf8 <_free_r>
 8006460:	463c      	mov	r4, r7
 8006462:	e7e0      	b.n	8006426 <_realloc_r+0x1e>

08006464 <_malloc_usable_size_r>:
 8006464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006468:	1f18      	subs	r0, r3, #4
 800646a:	2b00      	cmp	r3, #0
 800646c:	bfbc      	itt	lt
 800646e:	580b      	ldrlt	r3, [r1, r0]
 8006470:	18c0      	addlt	r0, r0, r3
 8006472:	4770      	bx	lr

08006474 <_init>:
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	bf00      	nop
 8006478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800647a:	bc08      	pop	{r3}
 800647c:	469e      	mov	lr, r3
 800647e:	4770      	bx	lr

08006480 <_fini>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr
