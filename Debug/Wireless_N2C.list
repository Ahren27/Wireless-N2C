
Wireless_N2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d30  08009d30  0000b068  2**0
                  CONTENTS
  4 .ARM          00000000  08009d30  08009d30  0000b068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d30  08009d30  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d30  08009d30  0000ad30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d34  08009d34  0000ad34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08009d38  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000068  08009da0  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00001e04  20001c4c  08009da0  0000bc4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000205df  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005106  00000000  00000000  0002b677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f50  00000000  00000000  00030780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d6  00000000  00000000  000326d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ec1  00000000  00000000  00033ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ecf  00000000  00000000  0003ad67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001096e3  00000000  00000000  0005cc36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084fc  00000000  00000000  0016635c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0016e858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b24 	.word	0x08009b24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08009b24 	.word	0x08009b24

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a32      	ldr	r2, [pc, #200]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a2c      	ldr	r2, [pc, #176]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b27      	ldr	r3, [pc, #156]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a26      	ldr	r2, [pc, #152]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b24      	ldr	r3, [pc, #144]	@ (8000a90 <MX_GPIO_Init+0xe4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a14:	f003 fef8 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2140      	movs	r1, #64	@ 0x40
 8000a1c:	481d      	ldr	r0, [pc, #116]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a1e:	f003 fef3 	bl	8004808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a26:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 030c 	add.w	r3, r7, #12
 8000a34:	4619      	mov	r1, r3
 8000a36:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <MX_GPIO_Init+0xec>)
 8000a38:	f003 fd3c 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8000a3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a58:	f003 fd2c 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000a5c:	2340      	movs	r3, #64	@ 0x40
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	4808      	ldr	r0, [pc, #32]	@ (8000a94 <MX_GPIO_Init+0xe8>)
 8000a74:	f003 fd1e 	bl	80044b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2105      	movs	r1, #5
 8000a7c:	2017      	movs	r0, #23
 8000a7e:	f003 fce1 	bl	8004444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a82:	2017      	movs	r0, #23
 8000a84:	f003 fcfa 	bl	800447c <HAL_NVIC_EnableIRQ>

}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000400 	.word	0x48000400
 8000a98:	48000800 	.word	0x48000800

08000a9c <I2C_GPIO_Init1>:
#include "FreeRTOS.h"                   // ARM.FreeRTOS::RTOS:Core
#include "task.h"                       // ARM.FreeRTOS::RTOS:Core
#include "event_groups.h"               // ARM.FreeRTOS::RTOS:Event Groups
#include "semphr.h"                     // ARM.FreeRTOS::RTOS:Core

void I2C_GPIO_Init1(void) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8000aa0:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <I2C_GPIO_Init1+0x88>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8000b24 <I2C_GPIO_Init1+0x88>)
 8000aa6:	f043 0302 	orr.w	r3, r3, #2
 8000aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C1EN);
 8000aac:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <I2C_GPIO_Init1+0x88>)
 8000aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <I2C_GPIO_Init1+0x88>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab6:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 8 and 9 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000abe:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000ac2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1);
 8000ac4:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000aca:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000ace:	6013      	str	r3, [r2, #0]

	// Set Pins 8 and 9 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4a14      	ldr	r2, [pc, #80]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ad6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ada:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a11      	ldr	r2, [pc, #68]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000ae2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000ae6:	6053      	str	r3, [r2, #4]

	// Set pints 8 and 9 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED9);
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	4a0e      	ldr	r2, [pc, #56]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000aee:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000af2:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED8_1 | GPIO_OSPEEDR_OSPEED9_1);
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000afa:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000afe:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL8 | GPIO_AFRH_AFSEL9);
 8000b00:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b04:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000b06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000b0a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= ((4 << GPIO_AFRH_AFSEL8_Pos) | 4 << GPIO_AFRH_AFSEL9_Pos);
 8000b0c:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b10:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <I2C_GPIO_Init1+0x8c>)
 8000b12:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000b16:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400

08000b2c <I2C_GPIO_Init2>:

void I2C_GPIO_Init2(void) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	// Configure GPIOC for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);
 8000b30:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <I2C_GPIO_Init2+0x88>)
 8000b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b34:	4a1f      	ldr	r2, [pc, #124]	@ (8000bb4 <I2C_GPIO_Init2+0x88>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C3EN);
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <I2C_GPIO_Init2+0x88>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b40:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb4 <I2C_GPIO_Init2+0x88>)
 8000b42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b46:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 0 and 1 to AF mode
	GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b4e:	f023 030f 	bic.w	r3, r3, #15
 8000b52:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1);
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b5a:	f043 030a 	orr.w	r3, r3, #10
 8000b5e:	6013      	str	r3, [r2, #0]

	// Set Pins 0 and 1 to open drain
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b66:	f023 0303 	bic.w	r3, r3, #3
 8000b6a:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER |= (GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b72:	f043 0303 	orr.w	r3, r3, #3
 8000b76:	6053      	str	r3, [r2, #4]

	// Set pints 0 and 1 to high speed
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1);
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b7a:	689b      	ldr	r3, [r3, #8]
 8000b7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b7e:	f023 030f 	bic.w	r3, r3, #15
 8000b82:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER |= (GPIO_OSPEEDR_OSPEED0_1 | GPIO_OSPEEDR_OSPEED1_1);
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b8a:	f043 030a 	orr.w	r3, r3, #10
 8000b8e:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOC->AFR[0] &= ~(GPIO_AFRL_AFSEL0 | GPIO_AFRL_AFSEL1);
 8000b90:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b92:	6a1b      	ldr	r3, [r3, #32]
 8000b94:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b96:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000b9a:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |=
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <I2C_GPIO_Init2+0x8c>)
 8000ba2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000ba6:	6213      	str	r3, [r2, #32]
			((4 << GPIO_AFRL_AFSEL0_Pos) | 4 << GPIO_AFRL_AFSEL1_Pos);
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000800 	.word	0x48000800

08000bbc <I2C_init1>:

void I2C_init1() {
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <I2C_init1+0x44>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000c00 <I2C_init1+0x44>)
 8000bc6:	f023 0301 	bic.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <I2C_init1+0x44>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <I2C_init1+0x44>)
 8000bd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bd6:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <I2C_init1+0x44>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a08      	ldr	r2, [pc, #32]	@ (8000c00 <I2C_init1+0x44>)
 8000bde:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000be2:	6013      	str	r3, [r2, #0]

	I2C1->TIMINGR = 0x10909CEC;
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <I2C_init1+0x44>)
 8000be6:	4a07      	ldr	r2, [pc, #28]	@ (8000c04 <I2C_init1+0x48>)
 8000be8:	611a      	str	r2, [r3, #16]

	I2C1->CR1 |= I2C_CR1_PE;
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <I2C_init1+0x44>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <I2C_init1+0x44>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40005400 	.word	0x40005400
 8000c04:	10909cec 	.word	0x10909cec

08000c08 <I2C_init2>:

void I2C_init2() {
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	I2C3->CR1 &= ~I2C_CR1_PE;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <I2C_init2+0x44>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0e      	ldr	r2, [pc, #56]	@ (8000c4c <I2C_init2+0x44>)
 8000c12:	f023 0301 	bic.w	r3, r3, #1
 8000c16:	6013      	str	r3, [r2, #0]

	I2C3->CR1 &= ~I2C_CR1_ANFOFF;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <I2C_init2+0x44>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <I2C_init2+0x44>)
 8000c1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c22:	6013      	str	r3, [r2, #0]
	I2C3->CR1 &= ~I2C_CR1_NOSTRETCH;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <I2C_init2+0x44>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a08      	ldr	r2, [pc, #32]	@ (8000c4c <I2C_init2+0x44>)
 8000c2a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000c2e:	6013      	str	r3, [r2, #0]

	I2C3->TIMINGR = 0x10909CEC;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <I2C_init2+0x44>)
 8000c32:	4a07      	ldr	r2, [pc, #28]	@ (8000c50 <I2C_init2+0x48>)
 8000c34:	611a      	str	r2, [r3, #16]

	I2C3->CR1 |= I2C_CR1_PE;
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <I2C_init2+0x44>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <I2C_init2+0x44>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40005c00 	.word	0x40005c00
 8000c50:	10909cec 	.word	0x10909cec

08000c54 <N2C_Config1>:

/******************************* NUNCHUCK #1 ********************************/

void N2C_Config1() {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000c66:	2300      	movs	r3, #0
 8000c68:	71bb      	strb	r3, [r7, #6]
 8000c6a:	e060      	b.n	8000d2e <N2C_Config1+0xda>
		I2C_init1();
 8000c6c:	f7ff ffa6 	bl	8000bbc <I2C_init1>

		/* Clear and then set AUTOEND bit to 1 */
		I2C1->CR2 &= ~(I2C_CR2_AUTOEND);
 8000c70:	4b33      	ldr	r3, [pc, #204]	@ (8000d40 <N2C_Config1+0xec>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	4a32      	ldr	r2, [pc, #200]	@ (8000d40 <N2C_Config1+0xec>)
 8000c76:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000c7a:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (I2C_CR2_AUTOEND);
 8000c7c:	4b30      	ldr	r3, [pc, #192]	@ (8000d40 <N2C_Config1+0xec>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	4a2f      	ldr	r2, [pc, #188]	@ (8000d40 <N2C_Config1+0xec>)
 8000c82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c86:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000c88:	4b2d      	ldr	r3, [pc, #180]	@ (8000d40 <N2C_Config1+0xec>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000d40 <N2C_Config1+0xec>)
 8000c8e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000c96:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000c98:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <N2C_Config1+0xec>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <N2C_Config1+0xec>)
 8000c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca2:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 8000ca4:	4b26      	ldr	r3, [pc, #152]	@ (8000d40 <N2C_Config1+0xec>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	4a25      	ldr	r2, [pc, #148]	@ (8000d40 <N2C_Config1+0xec>)
 8000caa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000cae:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C1->CR2 |= (N2C_ADDR << 1);
 8000cb0:	4b23      	ldr	r3, [pc, #140]	@ (8000d40 <N2C_Config1+0xec>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	4a22      	ldr	r2, [pc, #136]	@ (8000d40 <N2C_Config1+0xec>)
 8000cb6:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000cba:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C1->CR2 |= I2C_CR2_START;
 8000cbc:	4b20      	ldr	r3, [pc, #128]	@ (8000d40 <N2C_Config1+0xec>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d40 <N2C_Config1+0xec>)
 8000cc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000cc6:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000cc8:	bf00      	nop
 8000cca:	4b1d      	ldr	r3, [pc, #116]	@ (8000d40 <N2C_Config1+0xec>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0f9      	beq.n	8000cca <N2C_Config1+0x76>
			;

		/* Get Data */
		data = N2C_data(step);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f9e3 	bl	80010a4 <N2C_data>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 8000ce2:	4a17      	ldr	r2, [pc, #92]	@ (8000d40 <N2C_Config1+0xec>)
 8000ce4:	797b      	ldrb	r3, [r7, #5]
 8000ce6:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000ce8:	bf00      	nop
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <N2C_Config1+0xec>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0f9      	beq.n	8000cea <N2C_Config1+0x96>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f9d0 	bl	80010a4 <N2C_data>
 8000d04:	4603      	mov	r3, r0
 8000d06:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <N2C_Config1+0xec>)
 8000d0a:	797b      	ldrb	r3, [r7, #5]
 8000d0c:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C1->ISR & I2C_ISR_STOPF))
 8000d0e:	bf00      	nop
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <N2C_Config1+0xec>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0320 	and.w	r3, r3, #32
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f9      	beq.n	8000d10 <N2C_Config1+0xbc>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	71fb      	strb	r3, [r7, #7]

		/* Delay for 1ms */
		vTaskDelay(pdMS_TO_TICKS(10));
 8000d22:	200a      	movs	r0, #10
 8000d24:	f006 ffbc 	bl	8007ca0 <vTaskDelay>
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	79bb      	ldrb	r3, [r7, #6]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d99b      	bls.n	8000c6c <N2C_Config1+0x18>
	}
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40005400 	.word	0x40005400

08000d44 <N2C_Read1>:

void N2C_Read1(uint8_t *measurments) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8000d4c:	2305      	movs	r3, #5
 8000d4e:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C_init1();
 8000d54:	f7ff ff32 	bl	8000bbc <I2C_init1>

	I2C1->CR2 = 0;
 8000d58:	4b47      	ldr	r3, [pc, #284]	@ (8000e78 <N2C_Read1+0x134>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C1->CR2 |= I2C_CR2_AUTOEND;
 8000d5e:	4b46      	ldr	r3, [pc, #280]	@ (8000e78 <N2C_Read1+0x134>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	4a45      	ldr	r2, [pc, #276]	@ (8000e78 <N2C_Read1+0x134>)
 8000d64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d68:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000d6a:	4b43      	ldr	r3, [pc, #268]	@ (8000e78 <N2C_Read1+0x134>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	4a42      	ldr	r2, [pc, #264]	@ (8000e78 <N2C_Read1+0x134>)
 8000d70:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d78:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8000d7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e78 <N2C_Read1+0x134>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e78 <N2C_Read1+0x134>)
 8000d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d84:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 8000d86:	4b3c      	ldr	r3, [pc, #240]	@ (8000e78 <N2C_Read1+0x134>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8000e78 <N2C_Read1+0x134>)
 8000d8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d90:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 8000d92:	4b39      	ldr	r3, [pc, #228]	@ (8000e78 <N2C_Read1+0x134>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4a38      	ldr	r2, [pc, #224]	@ (8000e78 <N2C_Read1+0x134>)
 8000d98:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000d9c:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8000d9e:	4b36      	ldr	r3, [pc, #216]	@ (8000e78 <N2C_Read1+0x134>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	4a35      	ldr	r2, [pc, #212]	@ (8000e78 <N2C_Read1+0x134>)
 8000da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000da8:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000daa:	bf00      	nop
 8000dac:	4b32      	ldr	r3, [pc, #200]	@ (8000e78 <N2C_Read1+0x134>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f9      	beq.n	8000dac <N2C_Read1+0x68>
		;

	/* Get Data */
	data = N2C_data(step);
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f972 	bl	80010a4 <N2C_data>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C1->TXDR |= data;
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8000e78 <N2C_Read1+0x134>)
 8000dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000dc8:	7b7b      	ldrb	r3, [r7, #13]
 8000dca:	492b      	ldr	r1, [pc, #172]	@ (8000e78 <N2C_Read1+0x134>)
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C1->ISR & I2C_ISR_STOPF))
 8000dd0:	bf00      	nop
 8000dd2:	4b29      	ldr	r3, [pc, #164]	@ (8000e78 <N2C_Read1+0x134>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f003 0320 	and.w	r3, r3, #32
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f9      	beq.n	8000dd2 <N2C_Read1+0x8e>
		;

	/* Delay for 1ms */
	vTaskDelay(pdMS_TO_TICKS(10));
 8000dde:	200a      	movs	r0, #10
 8000de0:	f006 ff5e 	bl	8007ca0 <vTaskDelay>

	///// Read Measurements /////

	I2C1->CR2 &= ~I2C_CR2_AUTOEND;
 8000de4:	4b24      	ldr	r3, [pc, #144]	@ (8000e78 <N2C_Read1+0x134>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a23      	ldr	r2, [pc, #140]	@ (8000e78 <N2C_Read1+0x134>)
 8000dea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000dee:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C1 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000df0:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <N2C_Read1+0x134>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <N2C_Read1+0x134>)
 8000df6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000dfe:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C1->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <N2C_Read1+0x134>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	4a1c      	ldr	r2, [pc, #112]	@ (8000e78 <N2C_Read1+0x134>)
 8000e06:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8000e0a:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C1->CR2 |= I2C_CR2_RD_WRN;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <N2C_Read1+0x134>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <N2C_Read1+0x134>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e16:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 8000e18:	4b17      	ldr	r3, [pc, #92]	@ (8000e78 <N2C_Read1+0x134>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a16      	ldr	r2, [pc, #88]	@ (8000e78 <N2C_Read1+0x134>)
 8000e1e:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000e22:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8000e24:	4b14      	ldr	r3, [pc, #80]	@ (8000e78 <N2C_Read1+0x134>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	4a13      	ldr	r2, [pc, #76]	@ (8000e78 <N2C_Read1+0x134>)
 8000e2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e2e:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e010      	b.n	8000e58 <N2C_Read1+0x114>
		/* Wait until byte is received */
		while (!(I2C1->ISR & I2C_ISR_RXNE))
 8000e36:	bf00      	nop
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <N2C_Read1+0x134>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d0f9      	beq.n	8000e38 <N2C_Read1+0xf4>
			;

		/* Receive byte */
		measurments[i] = I2C1->RXDR;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <N2C_Read1+0x134>)
 8000e46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b05      	cmp	r3, #5
 8000e5c:	d9eb      	bls.n	8000e36 <N2C_Read1+0xf2>
	}

	I2C1->CR2 |= (I2C_CR2_STOP);
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <N2C_Read1+0x134>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <N2C_Read1+0x134>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e68:	6053      	str	r3, [r2, #4]

	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f006 ff18 	bl	8007ca0 <vTaskDelay>
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40005400 	.word	0x40005400

08000e7c <N2C_Config2>:

/******************************* NUNCHUCK #2 ********************************/

void N2C_Config2() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	e060      	b.n	8000f56 <N2C_Config2+0xda>
		I2C_init2();
 8000e94:	f7ff feb8 	bl	8000c08 <I2C_init2>

		/* Clear and then set AUTOEND bit to 1 */
		I2C3->CR2 &= ~(I2C_CR2_AUTOEND);
 8000e98:	4b33      	ldr	r3, [pc, #204]	@ (8000f68 <N2C_Config2+0xec>)
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	4a32      	ldr	r2, [pc, #200]	@ (8000f68 <N2C_Config2+0xec>)
 8000e9e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000ea2:	6053      	str	r3, [r2, #4]
		I2C3->CR2 |= (I2C_CR2_AUTOEND);
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <N2C_Config2+0xec>)
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4a2f      	ldr	r2, [pc, #188]	@ (8000f68 <N2C_Config2+0xec>)
 8000eaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eae:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <N2C_Config2+0xec>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f68 <N2C_Config2+0xec>)
 8000eb6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000eba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000ebe:	6053      	str	r3, [r2, #4]
		I2C3->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000ec0:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <N2C_Config2+0xec>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4a28      	ldr	r2, [pc, #160]	@ (8000f68 <N2C_Config2+0xec>)
 8000ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eca:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C3->CR2 &= ~I2C_CR2_RD_WRN;
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <N2C_Config2+0xec>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	4a25      	ldr	r2, [pc, #148]	@ (8000f68 <N2C_Config2+0xec>)
 8000ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000ed6:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C3->CR2 |= (N2C_ADDR << 1);
 8000ed8:	4b23      	ldr	r3, [pc, #140]	@ (8000f68 <N2C_Config2+0xec>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4a22      	ldr	r2, [pc, #136]	@ (8000f68 <N2C_Config2+0xec>)
 8000ede:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000ee2:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C3->CR2 |= I2C_CR2_START;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <N2C_Config2+0xec>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f68 <N2C_Config2+0xec>)
 8000eea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000eee:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C3->ISR & I2C_ISR_TXIS))
 8000ef0:	bf00      	nop
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <N2C_Config2+0xec>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0f9      	beq.n	8000ef2 <N2C_Config2+0x76>
			;

		/* Get Data */
		data = N2C_data(step);
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f8cf 	bl	80010a4 <N2C_data>
 8000f06:	4603      	mov	r3, r0
 8000f08:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C3->TXDR = data;
 8000f0a:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <N2C_Config2+0xec>)
 8000f0c:	797b      	ldrb	r3, [r7, #5]
 8000f0e:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C3->ISR & I2C_ISR_TXIS))
 8000f10:	bf00      	nop
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <N2C_Config2+0xec>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f9      	beq.n	8000f12 <N2C_Config2+0x96>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	3301      	adds	r3, #1
 8000f22:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f8bc 	bl	80010a4 <N2C_data>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C3->TXDR = data;
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <N2C_Config2+0xec>)
 8000f32:	797b      	ldrb	r3, [r7, #5]
 8000f34:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C3->ISR & I2C_ISR_STOPF))
 8000f36:	bf00      	nop
 8000f38:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <N2C_Config2+0xec>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0f9      	beq.n	8000f38 <N2C_Config2+0xbc>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	3301      	adds	r3, #1
 8000f48:	71fb      	strb	r3, [r7, #7]

		/* Delay for 1ms */
		//HAL_Delay(1);
		vTaskDelay(pdMS_TO_TICKS(10));
 8000f4a:	200a      	movs	r0, #10
 8000f4c:	f006 fea8 	bl	8007ca0 <vTaskDelay>
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	3301      	adds	r3, #1
 8000f54:	71bb      	strb	r3, [r7, #6]
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d99b      	bls.n	8000e94 <N2C_Config2+0x18>
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40005c00 	.word	0x40005c00

08000f6c <N2C_Read2>:

void N2C_Read2(uint8_t *measurments) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8000f74:	2305      	movs	r3, #5
 8000f76:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C_init2();
 8000f7c:	f7ff fe44 	bl	8000c08 <I2C_init2>

	I2C3->CR2 = 0;
 8000f80:	4b47      	ldr	r3, [pc, #284]	@ (80010a0 <N2C_Read2+0x134>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C3->CR2 |= I2C_CR2_AUTOEND;
 8000f86:	4b46      	ldr	r3, [pc, #280]	@ (80010a0 <N2C_Read2+0x134>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a45      	ldr	r2, [pc, #276]	@ (80010a0 <N2C_Read2+0x134>)
 8000f8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f90:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000f92:	4b43      	ldr	r3, [pc, #268]	@ (80010a0 <N2C_Read2+0x134>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4a42      	ldr	r2, [pc, #264]	@ (80010a0 <N2C_Read2+0x134>)
 8000f98:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000f9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000fa0:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C3->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8000fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80010a0 <N2C_Read2+0x134>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80010a0 <N2C_Read2+0x134>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fac:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C3->CR2 &= ~I2C_CR2_RD_WRN;
 8000fae:	4b3c      	ldr	r3, [pc, #240]	@ (80010a0 <N2C_Read2+0x134>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80010a0 <N2C_Read2+0x134>)
 8000fb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fb8:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C3->CR2 |= (N2C_ADDR << 1);
 8000fba:	4b39      	ldr	r3, [pc, #228]	@ (80010a0 <N2C_Read2+0x134>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	4a38      	ldr	r2, [pc, #224]	@ (80010a0 <N2C_Read2+0x134>)
 8000fc0:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000fc4:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C3->CR2 |= I2C_CR2_START;
 8000fc6:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <N2C_Read2+0x134>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a35      	ldr	r2, [pc, #212]	@ (80010a0 <N2C_Read2+0x134>)
 8000fcc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fd0:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C3->ISR & I2C_ISR_TXIS))
 8000fd2:	bf00      	nop
 8000fd4:	4b32      	ldr	r3, [pc, #200]	@ (80010a0 <N2C_Read2+0x134>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f9      	beq.n	8000fd4 <N2C_Read2+0x68>
		;

	/* Get Data */
	data = N2C_data(step);
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f85e 	bl	80010a4 <N2C_data>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C3->TXDR |= data;
 8000fec:	4b2c      	ldr	r3, [pc, #176]	@ (80010a0 <N2C_Read2+0x134>)
 8000fee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ff0:	7b7b      	ldrb	r3, [r7, #13]
 8000ff2:	492b      	ldr	r1, [pc, #172]	@ (80010a0 <N2C_Read2+0x134>)
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C3->ISR & I2C_ISR_STOPF))
 8000ff8:	bf00      	nop
 8000ffa:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <N2C_Read2+0x134>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f9      	beq.n	8000ffa <N2C_Read2+0x8e>
		;

	/* Delay for 1ms */
	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8001006:	200a      	movs	r0, #10
 8001008:	f006 fe4a 	bl	8007ca0 <vTaskDelay>

	///// Read Measurements /////

	I2C3->CR2 &= ~I2C_CR2_AUTOEND;
 800100c:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <N2C_Read2+0x134>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a23      	ldr	r2, [pc, #140]	@ (80010a0 <N2C_Read2+0x134>)
 8001012:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001016:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C3 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <N2C_Read2+0x134>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	4a20      	ldr	r2, [pc, #128]	@ (80010a0 <N2C_Read2+0x134>)
 800101e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001026:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C3->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 8001028:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <N2C_Read2+0x134>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <N2C_Read2+0x134>)
 800102e:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8001032:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C3->CR2 |= I2C_CR2_RD_WRN;
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <N2C_Read2+0x134>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4a19      	ldr	r2, [pc, #100]	@ (80010a0 <N2C_Read2+0x134>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800103e:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C3->CR2 |= (N2C_ADDR << 1);
 8001040:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <N2C_Read2+0x134>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a16      	ldr	r2, [pc, #88]	@ (80010a0 <N2C_Read2+0x134>)
 8001046:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 800104a:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C3->CR2 |= I2C_CR2_START;
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <N2C_Read2+0x134>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	4a13      	ldr	r2, [pc, #76]	@ (80010a0 <N2C_Read2+0x134>)
 8001052:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001056:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 8001058:	2300      	movs	r3, #0
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	e010      	b.n	8001080 <N2C_Read2+0x114>
		/* Wait until byte is received */
		while (!(I2C3->ISR & I2C_ISR_RXNE))
 800105e:	bf00      	nop
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <N2C_Read2+0x134>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f9      	beq.n	8001060 <N2C_Read2+0xf4>
			;

		/* Receive byte */
		measurments[i] = I2C3->RXDR;
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <N2C_Read2+0x134>)
 800106e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	2b05      	cmp	r3, #5
 8001084:	d9eb      	bls.n	800105e <N2C_Read2+0xf2>
	}

	I2C3->CR2 |= (I2C_CR2_STOP);
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <N2C_Read2+0x134>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <N2C_Read2+0x134>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001090:	6053      	str	r3, [r2, #4]

	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8001092:	200a      	movs	r0, #10
 8001094:	f006 fe04 	bl	8007ca0 <vTaskDelay>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40005c00 	.word	0x40005c00

080010a4 <N2C_data>:

/* Returns the appropriate byte to be sent over I2C */
uint8_t N2C_data(uint8_t step) {
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (step) {
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d818      	bhi.n	80010e8 <N2C_data+0x44>
 80010b6:	a201      	add	r2, pc, #4	@ (adr r2, 80010bc <N2C_data+0x18>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	080010d1 	.word	0x080010d1
 80010c0:	080010d7 	.word	0x080010d7
 80010c4:	080010dd 	.word	0x080010dd
 80010c8:	080010e3 	.word	0x080010e3
 80010cc:	080010e3 	.word	0x080010e3
	case 1:
		data = 0xF0;
 80010d0:	23f0      	movs	r3, #240	@ 0xf0
 80010d2:	73fb      	strb	r3, [r7, #15]
		break;
 80010d4:	e008      	b.n	80010e8 <N2C_data+0x44>
	case 2:
		data = 0x55;
 80010d6:	2355      	movs	r3, #85	@ 0x55
 80010d8:	73fb      	strb	r3, [r7, #15]
		break;
 80010da:	e005      	b.n	80010e8 <N2C_data+0x44>
	case 3:
		data = 0xFB;
 80010dc:	23fb      	movs	r3, #251	@ 0xfb
 80010de:	73fb      	strb	r3, [r7, #15]
		break;
 80010e0:	e002      	b.n	80010e8 <N2C_data+0x44>
	case 4:
	case 5:
		data = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
		break;
 80010e6:	bf00      	nop
	}

	return data;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop

080010f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010fe:	f003 f88d 	bl	800421c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001102:	f000 f931 	bl	8001368 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001106:	f7ff fc51 	bl	80009ac <MX_GPIO_Init>
	MX_SPI1_Init();
 800110a:	f000 f997 	bl	800143c <MX_SPI1_Init>

	/* Set up Spirit */
	SPSGRF_Init();
 800110e:	f000 fa33 	bl	8001578 <SPSGRF_Init>

	/* Set up RTOS */

	/* Create the tasks */
	retVal = xTaskCreate(Task1, "Set Up Program", configMINIMAL_STACK_SIZE,
 8001112:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <main+0x7c>)
 8001114:	9301      	str	r3, [sp, #4]
 8001116:	2328      	movs	r3, #40	@ 0x28
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	4916      	ldr	r1, [pc, #88]	@ (8001178 <main+0x80>)
 8001120:	4816      	ldr	r0, [pc, #88]	@ (800117c <main+0x84>)
 8001122:	f006 fbeb 	bl	80078fc <xTaskCreate>
 8001126:	4603      	mov	r3, r0
 8001128:	4a15      	ldr	r2, [pc, #84]	@ (8001180 <main+0x88>)
 800112a:	6013      	str	r3, [r2, #0]
	NULL, osPriorityHigh, &task1Handler);
	if (retVal != pdPASS) {
 800112c:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <main+0x88>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d001      	beq.n	8001138 <main+0x40>
		while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <main+0x3c>
			;
	} // check if task creation failed

	sendDataSema = xSemaphoreCreateBinary();
 8001138:	2203      	movs	r2, #3
 800113a:	2100      	movs	r1, #0
 800113c:	2001      	movs	r0, #1
 800113e:	f005 fdd4 	bl	8006cea <xQueueGenericCreate>
 8001142:	4603      	mov	r3, r0
 8001144:	4a0f      	ldr	r2, [pc, #60]	@ (8001184 <main+0x8c>)
 8001146:	6013      	str	r3, [r2, #0]
	if (sendDataSema == NULL) {
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <main+0x8c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <main+0x5c>
		while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <main+0x58>
			;
	} // check if binary semaphore creation failed

	radioMutex = xSemaphoreCreateMutex();
 8001154:	2001      	movs	r0, #1
 8001156:	f005 fe40 	bl	8006dda <xQueueCreateMutex>
 800115a:	4603      	mov	r3, r0
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <main+0x90>)
 800115e:	6013      	str	r3, [r2, #0]
	if (radioMutex == NULL) {
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <main+0x90>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <main+0x74>
		while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <main+0x70>
			;
	} // check if mutex creation failed

	/* Start scheduler */
	vTaskStartScheduler();
 800116c:	f006 fdce 	bl	8007d0c <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <main+0x78>
 8001174:	20000084 	.word	0x20000084
 8001178:	08009b3c 	.word	0x08009b3c
 800117c:	0800118d 	.word	0x0800118d
 8001180:	20000098 	.word	0x20000098
 8001184:	20000090 	.word	0x20000090
 8001188:	20000094 	.word	0x20000094

0800118c <Task1>:
}

/* Define Tasks --------------------------------------------------------------*/

/* Configure Device */
void Task1(void *argument) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af02      	add	r7, sp, #8
 8001192:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Configure Peripherals
		UART_Init();
 8001194:	f000 fbd4 	bl	8001940 <UART_Init>
		I2C_GPIO_Init1();
 8001198:	f7ff fc80 	bl	8000a9c <I2C_GPIO_Init1>
		I2C_GPIO_Init2();
 800119c:	f7ff fcc6 	bl	8000b2c <I2C_GPIO_Init2>
		N2C_Config1();
 80011a0:	f7ff fd58 	bl	8000c54 <N2C_Config1>
		N2C_Config2();
 80011a4:	f7ff fe6a 	bl	8000e7c <N2C_Config2>

		retVal = xTaskCreate(Task2, "Read and Decode Data",
 80011a8:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <Task1+0x70>)
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2318      	movs	r3, #24
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	2280      	movs	r2, #128	@ 0x80
 80011b4:	4912      	ldr	r1, [pc, #72]	@ (8001200 <Task1+0x74>)
 80011b6:	4813      	ldr	r0, [pc, #76]	@ (8001204 <Task1+0x78>)
 80011b8:	f006 fba0 	bl	80078fc <xTaskCreate>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <Task1+0x7c>)
 80011c0:	6013      	str	r3, [r2, #0]
		configMINIMAL_STACK_SIZE,
		NULL, osPriorityNormal, &task2Handler);
		if (retVal != pdPASS) {
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <Task1+0x7c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <Task1+0x42>
			while (1)
 80011ca:	bf00      	nop
 80011cc:	e7fd      	b.n	80011ca <Task1+0x3e>
				;
		} // check if task creation failed

		retVal = xTaskCreate(Task3, "Transmit Data",
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <Task1+0x80>)
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	2318      	movs	r3, #24
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2300      	movs	r3, #0
 80011d8:	2280      	movs	r2, #128	@ 0x80
 80011da:	490d      	ldr	r1, [pc, #52]	@ (8001210 <Task1+0x84>)
 80011dc:	480d      	ldr	r0, [pc, #52]	@ (8001214 <Task1+0x88>)
 80011de:	f006 fb8d 	bl	80078fc <xTaskCreate>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4a08      	ldr	r2, [pc, #32]	@ (8001208 <Task1+0x7c>)
 80011e6:	6013      	str	r3, [r2, #0]
		configMINIMAL_STACK_SIZE,
		NULL, osPriorityNormal, &task3Handler);
		if (retVal != pdPASS) {
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <Task1+0x7c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d001      	beq.n	80011f4 <Task1+0x68>
			while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Task1+0x64>
				;
		} // check if task creation failed

		// Task not needed for rest of program duration, so delete it
		vTaskDelete(NULL);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f006 fcdf 	bl	8007bb8 <vTaskDelete>
		UART_Init();
 80011fa:	e7cb      	b.n	8001194 <Task1+0x8>
 80011fc:	20000088 	.word	0x20000088
 8001200:	08009b4c 	.word	0x08009b4c
 8001204:	08001219 	.word	0x08001219
 8001208:	20000098 	.word	0x20000098
 800120c:	2000008c 	.word	0x2000008c
 8001210:	08009b64 	.word	0x08009b64
 8001214:	08001265 	.word	0x08001265

08001218 <Task2>:
	}
}

/* Read and Decode Data */
void Task2(void *argument) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Take the mutex before starting the transmission
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001220:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <Task2+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	4618      	mov	r0, r3
 800122a:	f006 f871 	bl	8007310 <xQueueSemaphoreTake>
 800122e:	4603      	mov	r3, r0
 8001230:	2b01      	cmp	r3, #1
 8001232:	d10c      	bne.n	800124e <Task2+0x36>
			// Get measurements for Nunchuck #1
			N2C_Read1(measurments1);
 8001234:	4809      	ldr	r0, [pc, #36]	@ (800125c <Task2+0x44>)
 8001236:	f7ff fd85 	bl	8000d44 <N2C_Read1>

			// Get measurements for Nunchuck #2
			N2C_Read2(measurments2);
 800123a:	4809      	ldr	r0, [pc, #36]	@ (8001260 <Task2+0x48>)
 800123c:	f7ff fe96 	bl	8000f6c <N2C_Read2>

			// Release the mutex after transmission
			xSemaphoreGive(radioMutex);
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <Task2+0x40>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	2300      	movs	r3, #0
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	f005 fddf 	bl	8006e0c <xQueueGenericSend>

		// Uploads data to serial port
		// print_data();

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 800124e:	2005      	movs	r0, #5
 8001250:	f006 fd26 	bl	8007ca0 <vTaskDelay>
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001254:	e7e4      	b.n	8001220 <Task2+0x8>
 8001256:	bf00      	nop
 8001258:	20000094 	.word	0x20000094
 800125c:	2000009c 	.word	0x2000009c
 8001260:	200000a4 	.word	0x200000a4

08001264 <Task3>:
	}
}

/* Transmit Data */
void Task3(void *argument) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b09a      	sub	sp, #104	@ 0x68
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	uint8_t payload[MAX_PAYLOAD_SIZE];

	// Infinite Loop
	for (;;) {
		// Reset Tx flag
		xTxDoneFlag = S_RESET;
 800126c:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <Task3+0x80>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]

		// Take the mutex before starting the transmission
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001272:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <Task3+0x84>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f04f 31ff 	mov.w	r1, #4294967295
 800127a:	4618      	mov	r0, r3
 800127c:	f006 f848 	bl	8007310 <xQueueSemaphoreTake>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d12a      	bne.n	80012dc <Task3+0x78>
			// Pack the raw measurements data into the payload
			memcpy(payload, measurments1, sizeof(measurments1));
 8001286:	4a19      	ldr	r2, [pc, #100]	@ (80012ec <Task3+0x88>)
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001290:	6018      	str	r0, [r3, #0]
 8001292:	3304      	adds	r3, #4
 8001294:	8019      	strh	r1, [r3, #0]
			memcpy(payload + sizeof(measurments1), measurments2,
 8001296:	f107 0308 	add.w	r3, r7, #8
 800129a:	3306      	adds	r3, #6
 800129c:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <Task3+0x8c>)
 800129e:	6810      	ldr	r0, [r2, #0]
 80012a0:	6018      	str	r0, [r3, #0]
 80012a2:	8892      	ldrh	r2, [r2, #4]
 80012a4:	809a      	strh	r2, [r3, #4]
					sizeof(measurments2));

			// Force the Spirit to go into a ready state
			SpiritGotoReadyState();
 80012a6:	f000 fa23 	bl	80016f0 <SpiritGotoReadyState>

			// Set source and destination addresses
			SpiritPktStackSetMyAddress(NODE_ADDRESS);
 80012aa:	2077      	movs	r0, #119	@ 0x77
 80012ac:	f001 f880 	bl	80023b0 <SpiritPktCommonSetMyAddress>
			SpiritPktStackSetDestinationAddress(TARGET_ADDRESS);
 80012b0:	2078      	movs	r0, #120	@ 0x78
 80012b2:	f001 f863 	bl	800237c <SpiritPktCommonSetDestinationAddress>

			SPSGRF_StartTx(payload, sizeof(payload));
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	2160      	movs	r1, #96	@ 0x60
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fa45 	bl	800174c <SPSGRF_StartTx>
			while (!xTxDoneFlag)
 80012c2:	bf00      	nop
 80012c4:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <Task3+0x80>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0fa      	beq.n	80012c4 <Task3+0x60>
				;

			// Release the mutex after transmission
			xSemaphoreGive(radioMutex);
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <Task3+0x84>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	2300      	movs	r3, #0
 80012d4:	2200      	movs	r2, #0
 80012d6:	2100      	movs	r1, #0
 80012d8:	f005 fd98 	bl	8006e0c <xQueueGenericSend>
		}

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 80012dc:	2005      	movs	r0, #5
 80012de:	f006 fcdf 	bl	8007ca0 <vTaskDelay>
		xTxDoneFlag = S_RESET;
 80012e2:	e7c3      	b.n	800126c <Task3+0x8>
 80012e4:	200000aa 	.word	0x200000aa
 80012e8:	20000094 	.word	0x20000094
 80012ec:	2000009c 	.word	0x2000009c
 80012f0:	200000a4 	.word	0x200000a4

080012f4 <HAL_GPIO_EXTI_Callback>:
	}
}

/* Callback to handle external interrupts */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin) {
 80012fe:	88fb      	ldrh	r3, [r7, #6]
 8001300:	2b80      	cmp	r3, #128	@ 0x80
 8001302:	d128      	bne.n	8001356 <HAL_GPIO_EXTI_Callback+0x62>
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fd49 	bl	8001da0 <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT) {
 800130e:	7b3b      	ldrb	r3, [r7, #12]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <HAL_GPIO_EXTI_Callback+0x2c>
		xTxDoneFlag = S_SET;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <HAL_GPIO_EXTI_Callback+0x6c>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY) {
 8001320:	7b3b      	ldrb	r3, [r7, #12]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <HAL_GPIO_EXTI_Callback+0x3e>
		xRxDoneFlag = S_SET;
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_GPIO_EXTI_Callback+0x70>)
 800132e:	2201      	movs	r2, #1
 8001330:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC || xIrqStatus.IRQ_RX_TIMEOUT) {
 8001332:	7b3b      	ldrb	r3, [r7, #12]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <HAL_GPIO_EXTI_Callback+0x56>
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_GPIO_EXTI_Callback+0x64>
		SpiritCmdStrobeRx();
 800134a:	f000 ff6d 	bl	8002228 <SpiritManagementWaCmdStrobeRx>
 800134e:	2061      	movs	r0, #97	@ 0x61
 8001350:	f000 fc58 	bl	8001c04 <SpiritCmdStrobeCommand>
 8001354:	e000      	b.n	8001358 <HAL_GPIO_EXTI_Callback+0x64>
		return;
 8001356:	bf00      	nop
	}
}
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200000aa 	.word	0x200000aa
 8001364:	200000ab 	.word	0x200000ab

08001368 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	@ 0x58
 800136c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	2244      	movs	r2, #68	@ 0x44
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f008 faa6 	bl	80098c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 800138a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800138e:	f003 fa79 	bl	8004884 <HAL_PWREx_ControlVoltageScaling>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001398:	f000 f84a 	bl	8001430 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800139c:	2302      	movs	r3, #2
 800139e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a6:	2310      	movs	r3, #16
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013aa:	2302      	movs	r3, #2
 80013ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ae:	2302      	movs	r3, #2
 80013b0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80013b6:	230a      	movs	r3, #10
 80013b8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ba:	2307      	movs	r3, #7
 80013bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013be:	2302      	movs	r3, #2
 80013c0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c2:	2302      	movs	r3, #2
 80013c4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fab0 	bl	8004930 <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x72>
		Error_Handler();
 80013d6:	f000 f82b 	bl	8001430 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013da:	230f      	movs	r3, #15
 80013dc:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013de:	2303      	movs	r3, #3
 80013e0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80013ee:	463b      	mov	r3, r7
 80013f0:	2104      	movs	r1, #4
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fe78 	bl	80050e8 <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x9a>
		Error_Handler();
 80013fe:	f000 f817 	bl	8001430 <Error_Handler>
	}
}
 8001402:	bf00      	nop
 8001404:	3758      	adds	r7, #88	@ 0x58
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800141e:	f002 ff15 	bl	800424c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40014800 	.word	0x40014800

08001430 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <Error_Handler+0x8>

0800143c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001442:	4a1c      	ldr	r2, [pc, #112]	@ (80014b4 <MX_SPI1_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800144c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001454:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001456:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800145a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145c:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_SPI1_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001462:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_SPI1_Init+0x74>)
 800146a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800146e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001472:	2210      	movs	r2, #16
 8001474:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_SPI1_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_SPI1_Init+0x74>)
 800148a:	2207      	movs	r2, #7
 800148c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_SPI1_Init+0x74>)
 8001496:	2208      	movs	r2, #8
 8001498:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_SPI1_Init+0x74>)
 800149c:	f004 f864 	bl	8005568 <HAL_SPI_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f7ff ffc3 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000ac 	.word	0x200000ac
 80014b4:	40013000 	.word	0x40013000

080014b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a25      	ldr	r2, [pc, #148]	@ (800156c <HAL_SPI_MspInit+0xb4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d144      	bne.n	8001564 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014da:	4b25      	ldr	r3, [pc, #148]	@ (8001570 <HAL_SPI_MspInit+0xb8>)
 80014dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014de:	4a24      	ldr	r2, [pc, #144]	@ (8001570 <HAL_SPI_MspInit+0xb8>)
 80014e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e6:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <HAL_SPI_MspInit+0xb8>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <HAL_SPI_MspInit+0xb8>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001570 <HAL_SPI_MspInit+0xb8>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001570 <HAL_SPI_MspInit+0xb8>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	4b19      	ldr	r3, [pc, #100]	@ (8001570 <HAL_SPI_MspInit+0xb8>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <HAL_SPI_MspInit+0xb8>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b16      	ldr	r3, [pc, #88]	@ (8001570 <HAL_SPI_MspInit+0xb8>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001522:	23c0      	movs	r3, #192	@ 0xc0
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001532:	2305      	movs	r3, #5
 8001534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001540:	f002 ffb8 	bl	80044b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001544:	2308      	movs	r3, #8
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001554:	2305      	movs	r3, #5
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4805      	ldr	r0, [pc, #20]	@ (8001574 <HAL_SPI_MspInit+0xbc>)
 8001560:	f002 ffa8 	bl	80044b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	@ 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40013000 	.word	0x40013000
 8001570:	40021000 	.word	0x40021000
 8001574:	48000400 	.word	0x48000400

08001578 <SPSGRF_Init>:
/**
 * @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
 * @param  None
 * @retval None
 */
void SPSGRF_Init(void) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b090      	sub	sp, #64	@ 0x40
 800157c:	af00      	add	r7, sp, #0
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlpInit;
	SGpioInit xGpioInit;

	SpiritSpiInit();
 800157e:	f002 fcf9 	bl	8003f74 <RadioSpiInit>

	// restart the radio
	SpiritEnterShutdown();
 8001582:	f002 fe27 	bl	80041d4 <RadioEnterShutdown>
	SpiritExitShutdown();
 8001586:	f002 fe30 	bl	80041ea <RadioExitShutdown>
	SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 800158a:	f000 fe7d 	bl	8002288 <SpiritManagementWaExtraCurrent>

	// wait for the radio to enter the ready state
	do {
		for (volatile uint8_t i = 0; i != 0xFF; i++)
 800158e:	2300      	movs	r3, #0
 8001590:	70fb      	strb	r3, [r7, #3]
 8001592:	e004      	b.n	800159e <SPSGRF_Init+0x26>
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	b2db      	uxtb	r3, r3
 8001598:	3301      	adds	r3, #1
 800159a:	b2db      	uxtb	r3, r3
 800159c:	70fb      	strb	r3, [r7, #3]
 800159e:	78fb      	ldrb	r3, [r7, #3]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2bff      	cmp	r3, #255	@ 0xff
 80015a4:	d1f6      	bne.n	8001594 <SPSGRF_Init+0x1c>
			; // delay for state transition
		SpiritRefreshStatus(); // reads the MC_STATUS register
 80015a6:	f002 fcc3 	bl	8003f30 <SpiritRefreshStatus>
	} while (g_xStatus.MC_STATE != MC_STATE_READY);
 80015aa:	4b4b      	ldr	r3, [pc, #300]	@ (80016d8 <SPSGRF_Init+0x160>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d1ea      	bne.n	800158e <SPSGRF_Init+0x16>

	// Initialize radio RF parameters
	xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 80015b8:	2300      	movs	r3, #0
 80015ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
	xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 80015bc:	4b47      	ldr	r3, [pc, #284]	@ (80016dc <SPSGRF_Init+0x164>)
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
	xRadioInit.nChannelSpace = CHANNEL_SPACE;
 80015c0:	4b47      	ldr	r3, [pc, #284]	@ (80016e0 <SPSGRF_Init+0x168>)
 80015c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	xRadioInit.xModulationSelect = MODULATION_SELECT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	xRadioInit.lDatarate = DATARATE;
 80015d0:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 80015d4:	637b      	str	r3, [r7, #52]	@ 0x34
	xRadioInit.lFreqDev = FREQ_DEVIATION;
 80015d6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015da:	63bb      	str	r3, [r7, #56]	@ 0x38
	xRadioInit.lBandwidth = BANDWIDTH;
 80015dc:	4b40      	ldr	r3, [pc, #256]	@ (80016e0 <SPSGRF_Init+0x168>)
 80015de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 80015e0:	4840      	ldr	r0, [pc, #256]	@ (80016e4 <SPSGRF_Init+0x16c>)
 80015e2:	f002 faf3 	bl	8003bcc <SpiritRadioSetXtalFrequency>
	SpiritRadioInit(&xRadioInit);
 80015e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 f942 	bl	8002874 <SpiritRadioInit>

	// Set the transmitter power level
	SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 80015f0:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 80016e8 <SPSGRF_Init+0x170>
 80015f4:	2007      	movs	r0, #7
 80015f6:	f002 f985 	bl	8003904 <SpiritRadioSetPALeveldBm>
	SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 80015fa:	2007      	movs	r0, #7
 80015fc:	f002 f9d8 	bl	80039b0 <SpiritRadioSetPALevelMaxIndex>

	// Configure packet handler to use the Basic packet format
	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
 8001600:	2318      	movs	r3, #24
 8001602:	753b      	strb	r3, [r7, #20]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001604:	2306      	movs	r3, #6
 8001606:	757b      	strb	r3, [r7, #21]
	xSTackInit.lSyncWords = SYNC_WORD;
 8001608:	f04f 3388 	mov.w	r3, #2290649224	@ 0x88888888
 800160c:	61bb      	str	r3, [r7, #24]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 800160e:	2301      	movs	r3, #1
 8001610:	773b      	strb	r3, [r7, #28]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001612:	2307      	movs	r3, #7
 8001614:	777b      	strb	r3, [r7, #29]
	xSTackInit.xCrcMode = CRC_MODE;
 8001616:	2320      	movs	r3, #32
 8001618:	77bb      	strb	r3, [r7, #30]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 800161a:	2300      	movs	r3, #0
 800161c:	77fb      	strb	r3, [r7, #31]
	// xSTackInit.xAddressField = EN_ADDRESS;
	xSTackInit.xFec = EN_FEC;
 800161e:	2300      	movs	r3, #0
 8001620:	f887 3020 	strb.w	r3, [r7, #32]
	xSTackInit.xDataWhitening = EN_WHITENING;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	SpiritPktStackInit(&xSTackInit);
 800162a:	f107 0314 	add.w	r3, r7, #20
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fed8 	bl	80023e4 <SpiritPktStackInit>

	// Configure destination address criteria for automatic packet filtering
	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001634:	2301      	movs	r3, #1
 8001636:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 8001638:	2377      	movs	r3, #119	@ 0x77
 800163a:	737b      	strb	r3, [r7, #13]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 800163c:	2301      	movs	r3, #1
 800163e:	73bb      	strb	r3, [r7, #14]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001640:	23ee      	movs	r3, #238	@ 0xee
 8001642:	73fb      	strb	r3, [r7, #15]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001644:	2301      	movs	r3, #1
 8001646:	743b      	strb	r3, [r7, #16]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001648:	23ff      	movs	r3, #255	@ 0xff
 800164a:	747b      	strb	r3, [r7, #17]
	SpiritPktStackAddressesInit(&xSTackAddress);
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	4618      	mov	r0, r3
 8001652:	f000 ff97 	bl	8002584 <SpiritPktStackAddressesInit>

	// Configure the spirit LLP registers
	xSTackLlpInit.xAutoAck = S_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	723b      	strb	r3, [r7, #8]
	xSTackLlpInit.xNMaxRetx = S_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	72bb      	strb	r3, [r7, #10]
	xSTackLlpInit.xPiggybacking = PKT_DISABLE_RETX;
 800165e:	2300      	movs	r3, #0
 8001660:	727b      	strb	r3, [r7, #9]
	SpiritPktStackLlpInit(&xSTackLlpInit);
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fffa 	bl	8002660 <SpiritPktStackLlpInit>

	// Configure GPIO3 as interrupt request pin (active low)
	xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 800166c:	2302      	movs	r3, #2
 800166e:	713b      	strb	r3, [r7, #4]
	xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001670:	2302      	movs	r3, #2
 8001672:	717b      	strb	r3, [r7, #5]
	xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 8001674:	2300      	movs	r3, #0
 8001676:	71bb      	strb	r3, [r7, #6]
	SpiritGpioInit(&xGpioInit);
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fada 	bl	8001c34 <SpiritGpioInit>

	// Generate an interrupt request for the following IRQs
	SpiritIrqDeInit(NULL);
 8001680:	2000      	movs	r0, #0
 8001682:	f000 fafb 	bl	8001c7c <SpiritIrqDeInit>
	SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8001686:	2101      	movs	r1, #1
 8001688:	2004      	movs	r0, #4
 800168a:	f000 fb23 	bl	8001cd4 <SpiritIrq>
	SpiritIrq(RX_DATA_READY, S_ENABLE);
 800168e:	2101      	movs	r1, #1
 8001690:	2001      	movs	r0, #1
 8001692:	f000 fb1f 	bl	8001cd4 <SpiritIrq>
	SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8001696:	2101      	movs	r1, #1
 8001698:	2002      	movs	r0, #2
 800169a:	f000 fb1b 	bl	8001cd4 <SpiritIrq>
	SpiritIrq(RX_TIMEOUT, S_ENABLE);
 800169e:	2101      	movs	r1, #1
 80016a0:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 80016a4:	f000 fb16 	bl	8001cd4 <SpiritIrq>
	SpiritIrqClearStatus();
 80016a8:	f000 fbac 	bl	8001e04 <SpiritIrqClearStatus>

	// Enable the synchronization quality indicator check (perfect match required)
	// NOTE: 9.10.4: "It is recommended to always enable the SQI check."
	SpiritQiSetSqiThreshold(SQI_TH_0);
 80016ac:	2000      	movs	r0, #0
 80016ae:	f001 f88d 	bl	80027cc <SpiritQiSetSqiThreshold>
	SpiritQiSqiCheck(S_ENABLE);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f001 f852 	bl	800275c <SpiritQiSqiCheck>

	// Set the RSSI Threshold for Carrier Sense (9.10.2)
	// NOTE: CS_MODE = 0 at reset
	SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80016b8:	f06f 0077 	mvn.w	r0, #119	@ 0x77
 80016bc:	f001 f8ba 	bl	8002834 <SpiritQiSetRssiThresholddBm>

	// Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
	SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 80016c0:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80016ec <SPSGRF_Init+0x174>
 80016c4:	f002 fa92 	bl	8003bec <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
	SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 80016c8:	2002      	movs	r0, #2
 80016ca:	f002 fbe9 	bl	8003ea0 <SpiritTimerSetRxTimeoutStopCondition>
}
 80016ce:	bf00      	nop
 80016d0:	3740      	adds	r7, #64	@ 0x40
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000168 	.word	0x20000168
 80016dc:	3689cac0 	.word	0x3689cac0
 80016e0:	000186a0 	.word	0x000186a0
 80016e4:	02faf080 	.word	0x02faf080
 80016e8:	4139999a 	.word	0x4139999a
 80016ec:	42480000 	.word	0x42480000

080016f0 <SpiritGotoReadyState>:

void SpiritGotoReadyState(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

	/* Wait for the radio to enter the ready state */
	do {

		/* Go to the ready state */
		if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <SpiritGotoReadyState+0x54>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b0f      	cmp	r3, #15
 8001700:	d103      	bne.n	800170a <SpiritGotoReadyState+0x1a>
			SpiritCmdStrobeReady();
 8001702:	2062      	movs	r0, #98	@ 0x62
 8001704:	f000 fa7e 	bl	8001c04 <SpiritCmdStrobeCommand>
 8001708:	e002      	b.n	8001710 <SpiritGotoReadyState+0x20>
		} else {
			SpiritCmdStrobeSabort();
 800170a:	2067      	movs	r0, #103	@ 0x67
 800170c:	f000 fa7a 	bl	8001c04 <SpiritCmdStrobeCommand>
		}

		/* Delay for state transition */
		for (i = 0; i != 0xFF; i++)
 8001710:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <SpiritGotoReadyState+0x58>)
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e004      	b.n	8001722 <SpiritGotoReadyState+0x32>
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <SpiritGotoReadyState+0x58>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <SpiritGotoReadyState+0x58>)
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <SpiritGotoReadyState+0x58>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2bff      	cmp	r3, #255	@ 0xff
 8001728:	d1f6      	bne.n	8001718 <SpiritGotoReadyState+0x28>
			;

		/* Update the global status register variable */
		SpiritRefreshStatus();
 800172a:	f002 fc01 	bl	8003f30 <SpiritRefreshStatus>

	} while (g_xStatus.MC_STATE != MC_STATE_READY);
 800172e:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <SpiritGotoReadyState+0x54>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b03      	cmp	r3, #3
 800173a:	d1db      	bne.n	80016f4 <SpiritGotoReadyState+0x4>
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000168 	.word	0x20000168
 8001748:	20000110 	.word	0x20000110

0800174c <SPSGRF_StartTx>:
 *         sent, setting the payload length, and strobing the TX command.
 * @param  txBuff: pointer to the data to transmit
 * @param  txLen: number of bytes to transmit
 * @retval None
 */
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
	SpiritGotoReadyState();
 8001758:	f7ff ffca 	bl	80016f0 <SpiritGotoReadyState>
	// flush the TX FIFO
	SpiritCmdStrobeFlushTxFifo();
 800175c:	2072      	movs	r0, #114	@ 0x72
 800175e:	f000 fa51 	bl	8001c04 <SpiritCmdStrobeCommand>

	// Avoid TX FIFO overflow
	txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8001762:	78fb      	ldrb	r3, [r7, #3]
 8001764:	2b60      	cmp	r3, #96	@ 0x60
 8001766:	bf28      	it	cs
 8001768:	2360      	movcs	r3, #96	@ 0x60
 800176a:	70fb      	strb	r3, [r7, #3]

	// start TX operation
	SpiritSpiWriteLinearFifo(txLen, txBuff);
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f002 fce7 	bl	8004144 <RadioSpiWriteFifo>
	SpiritPktStackSetPayloadLength(txLen);
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 ffc2 	bl	8002704 <SpiritPktStackSetPayloadLength>
	SpiritCmdStrobeTx();
 8001780:	f000 fd1a 	bl	80021b8 <SpiritManagementWaCmdStrobeTx>
 8001784:	2060      	movs	r0, #96	@ 0x60
 8001786:	f000 fa3d 	bl	8001c04 <SpiritCmdStrobeCommand>

	SpiritRefreshStatus();
 800178a:	f002 fbd1 	bl	8003f30 <SpiritRefreshStatus>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <HAL_MspInit+0x4c>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a2:	4a10      	ldr	r2, [pc, #64]	@ (80017e4 <HAL_MspInit+0x4c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <HAL_MspInit+0x4c>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <HAL_MspInit+0x4c>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a0a      	ldr	r2, [pc, #40]	@ (80017e4 <HAL_MspInit+0x4c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <HAL_MspInit+0x4c>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	210f      	movs	r1, #15
 80017d2:	f06f 0001 	mvn.w	r0, #1
 80017d6:	f002 fe35 	bl	8004444 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08c      	sub	sp, #48	@ 0x30
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80017f6:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <HAL_InitTick+0xc8>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fa:	4a2d      	ldr	r2, [pc, #180]	@ (80018b0 <HAL_InitTick+0xc8>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001800:	6613      	str	r3, [r2, #96]	@ 0x60
 8001802:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <HAL_InitTick+0xc8>)
 8001804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800180e:	f107 020c 	add.w	r2, r7, #12
 8001812:	f107 0310 	add.w	r3, r7, #16
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f003 fe13 	bl	8005444 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800181e:	f003 fdfb 	bl	8005418 <HAL_RCC_GetPCLK2Freq>
 8001822:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001826:	4a23      	ldr	r2, [pc, #140]	@ (80018b4 <HAL_InitTick+0xcc>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	0c9b      	lsrs	r3, r3, #18
 800182e:	3b01      	subs	r3, #1
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <HAL_InitTick+0xd0>)
 8001834:	4a21      	ldr	r2, [pc, #132]	@ (80018bc <HAL_InitTick+0xd4>)
 8001836:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <HAL_InitTick+0xd0>)
 800183a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800183e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001840:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <HAL_InitTick+0xd0>)
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001846:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <HAL_InitTick+0xd0>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <HAL_InitTick+0xd0>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <HAL_InitTick+0xd0>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001858:	4817      	ldr	r0, [pc, #92]	@ (80018b8 <HAL_InitTick+0xd0>)
 800185a:	f004 fdb3 	bl	80063c4 <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001864:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001868:	2b00      	cmp	r3, #0
 800186a:	d11b      	bne.n	80018a4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800186c:	4812      	ldr	r0, [pc, #72]	@ (80018b8 <HAL_InitTick+0xd0>)
 800186e:	f004 fe0b 	bl	8006488 <HAL_TIM_Base_Start_IT>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001878:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800187c:	2b00      	cmp	r3, #0
 800187e:	d111      	bne.n	80018a4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001880:	201a      	movs	r0, #26
 8001882:	f002 fdfb 	bl	800447c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d808      	bhi.n	800189e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	201a      	movs	r0, #26
 8001892:	f002 fdd7 	bl	8004444 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_InitTick+0xd8>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e002      	b.n	80018a4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3730      	adds	r7, #48	@ 0x30
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	431bde83 	.word	0x431bde83
 80018b8:	20000114 	.word	0x20000114
 80018bc:	40014800 	.word	0x40014800
 80018c0:	2000000c 	.word	0x2000000c

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <NMI_Handler+0x4>

080018cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <MemManage_Handler+0x4>

080018dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 80018fe:	2080      	movs	r0, #128	@ 0x80
 8001900:	f002 ff9a 	bl	8004838 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}

08001908 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800190e:	f004 fe2b 	bl	8006568 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000114 	.word	0x20000114

0800191c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001920:	4b06      	ldr	r3, [pc, #24]	@ (800193c <SystemInit+0x20>)
 8001922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001926:	4a05      	ldr	r2, [pc, #20]	@ (800193c <SystemInit+0x20>)
 8001928:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800192c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <UART_Init>:
 */

#include "main.h"
#include "uart.h"

void UART_Init(void) {
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
	// Configure GPIOA for USART2
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8001944:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <UART_Init+0x98>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001948:	4a23      	ldr	r2, [pc, #140]	@ (80019d8 <UART_Init+0x98>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN);
 8001950:	4b21      	ldr	r3, [pc, #132]	@ (80019d8 <UART_Init+0x98>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <UART_Init+0x98>)
 8001956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800195a:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 2 and 3 to AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 800195c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800196a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 800196c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001976:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800197a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 800197c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001986:	f423 43ee 	bic.w	r3, r3, #30464	@ 0x7700
 800198a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 800198c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001996:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800199a:	6213      	str	r3, [r2, #32]
	 * TE		1
	 * RE		1
	 * USEM		0
	 * UE		1
	 */
	USART2->CR1 |= (0b000100000);
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <UART_Init+0x9c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0e      	ldr	r2, [pc, #56]	@ (80019dc <UART_Init+0x9c>)
 80019a2:	f043 0320 	orr.w	r3, r3, #32
 80019a6:	6013      	str	r3, [r2, #0]

	// Configure BR
	USART2->BRR = (694);
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <UART_Init+0x9c>)
 80019aa:	f240 22b6 	movw	r2, #694	@ 0x2b6
 80019ae:	60da      	str	r2, [r3, #12]

	// Enable  bits
	USART2->CR1 |= (0b1101);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <UART_Init+0x9c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a09      	ldr	r2, [pc, #36]	@ (80019dc <UART_Init+0x9c>)
 80019b6:	f043 030d 	orr.w	r3, r3, #13
 80019ba:	6013      	str	r3, [r2, #0]

	// Enable interupts
	NVIC->ISER[1] |= (1 << (USART2_IRQn & 0X1F));
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <UART_Init+0xa0>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <UART_Init+0xa0>)
 80019c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019c6:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80019c8:	b662      	cpsie	i
}
 80019ca:	bf00      	nop
	__enable_irq();

}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40004400 	.word	0x40004400
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e8:	f7ff ff98 	bl	800191c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ec:	480c      	ldr	r0, [pc, #48]	@ (8001a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80019ee:	490d      	ldr	r1, [pc, #52]	@ (8001a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a28 <LoopForever+0xe>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a04:	4c0a      	ldr	r4, [pc, #40]	@ (8001a30 <LoopForever+0x16>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a12:	f007 ffb7 	bl	8009984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a16:	f7ff fb6f 	bl	80010f8 <main>

08001a1a <LoopForever>:

LoopForever:
    b LoopForever
 8001a1a:	e7fe      	b.n	8001a1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001a28:	08009d38 	.word	0x08009d38
  ldr r2, =_sbss
 8001a2c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001a30:	20001c4c 	.word	0x20001c4c

08001a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC1_2_IRQHandler>
	...

08001a38 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001a42:	f107 030f 	add.w	r3, r7, #15
 8001a46:	461a      	mov	r2, r3
 8001a48:	2101      	movs	r1, #1
 8001a4a:	2050      	movs	r0, #80	@ 0x50
 8001a4c:	f002 faee 	bl	800402c <RadioSpiReadRegisters>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <SpiritCalibrationVco+0x6c>)
 8001a54:	b212      	sxth	r2, r2
 8001a56:	4611      	mov	r1, r2
 8001a58:	7019      	strb	r1, [r3, #0]
 8001a5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001a5e:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d105      	bne.n	8001a72 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e004      	b.n	8001a7c <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	f023 0302 	bic.w	r3, r3, #2
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001a7c:	f107 030f 	add.w	r3, r7, #15
 8001a80:	461a      	mov	r2, r3
 8001a82:	2101      	movs	r1, #1
 8001a84:	2050      	movs	r0, #80	@ 0x50
 8001a86:	f002 fa85 	bl	8003f94 <RadioSpiWriteRegisters>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <SpiritCalibrationVco+0x6c>)
 8001a8e:	b212      	sxth	r2, r2
 8001a90:	4611      	mov	r1, r2
 8001a92:	7019      	strb	r1, [r3, #0]
 8001a94:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001a98:	705a      	strb	r2, [r3, #1]

}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000168 	.word	0x20000168

08001aa8 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001aae:	1dfb      	adds	r3, r7, #7
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	20e5      	movs	r0, #229	@ 0xe5
 8001ab6:	f002 fab9 	bl	800402c <RadioSpiReadRegisters>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <SpiritCalibrationGetVcoCalData+0x34>)
 8001abe:	b212      	sxth	r2, r2
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	7019      	strb	r1, [r3, #0]
 8001ac4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ac8:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ad0:	b2db      	uxtb	r3, r3

}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000168 	.word	0x20000168

08001ae0 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001aea:	f107 030f 	add.w	r3, r7, #15
 8001aee:	461a      	mov	r2, r3
 8001af0:	2101      	movs	r1, #1
 8001af2:	206e      	movs	r0, #110	@ 0x6e
 8001af4:	f002 fa9a 	bl	800402c <RadioSpiReadRegisters>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001afc:	b212      	sxth	r2, r2
 8001afe:	4611      	mov	r1, r2
 8001b00:	7019      	strb	r1, [r3, #0]
 8001b02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b06:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001b08:	7bfb      	ldrb	r3, [r7, #15]
 8001b0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001b1c:	f107 030f 	add.w	r3, r7, #15
 8001b20:	461a      	mov	r2, r3
 8001b22:	2101      	movs	r1, #1
 8001b24:	206e      	movs	r0, #110	@ 0x6e
 8001b26:	f002 fa35 	bl	8003f94 <RadioSpiWriteRegisters>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001b2e:	b212      	sxth	r2, r2
 8001b30:	4611      	mov	r1, r2
 8001b32:	7019      	strb	r1, [r3, #0]
 8001b34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b38:	705a      	strb	r2, [r3, #1]

}
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000168 	.word	0x20000168

08001b48 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001b52:	f107 030f 	add.w	r3, r7, #15
 8001b56:	461a      	mov	r2, r3
 8001b58:	2101      	movs	r1, #1
 8001b5a:	206f      	movs	r0, #111	@ 0x6f
 8001b5c:	f002 fa66 	bl	800402c <RadioSpiReadRegisters>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001b64:	b212      	sxth	r2, r2
 8001b66:	4611      	mov	r1, r2
 8001b68:	7019      	strb	r1, [r3, #0]
 8001b6a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b6e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001b84:	f107 030f 	add.w	r3, r7, #15
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	206f      	movs	r0, #111	@ 0x6f
 8001b8e:	f002 fa01 	bl	8003f94 <RadioSpiWriteRegisters>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001b96:	b212      	sxth	r2, r2
 8001b98:	4611      	mov	r1, r2
 8001b9a:	7019      	strb	r1, [r3, #0]
 8001b9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ba0:	705a      	strb	r2, [r3, #1]

}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000168 	.word	0x20000168

08001bb0 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001bba:	f107 030f 	add.w	r3, r7, #15
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	209e      	movs	r0, #158	@ 0x9e
 8001bc4:	f002 fa32 	bl	800402c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	f023 0306 	bic.w	r3, r3, #6
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	f043 0302 	orr.w	r3, r3, #2
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	e004      	b.n	8001bee <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001bee:	f107 030f 	add.w	r3, r7, #15
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	209e      	movs	r0, #158	@ 0x9e
 8001bf8:	f002 f9cc 	bl	8003f94 <RadioSpiWriteRegisters>
  
}
 8001bfc:	bf00      	nop
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f002 fa57 	bl	80040c4 <RadioSpiCommandStrobes>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <SpiritCmdStrobeCommand+0x2c>)
 8001c1a:	b212      	sxth	r2, r2
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	7019      	strb	r1, [r3, #0]
 8001c20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c24:	705a      	strb	r2, [r3, #1]
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000168 	.word	0x20000168

08001c34 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	785a      	ldrb	r2, [r3, #1]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	789b      	ldrb	r3, [r3, #2]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	f107 020f 	add.w	r2, r7, #15
 8001c56:	2101      	movs	r1, #1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 f99b 	bl	8003f94 <RadioSpiWriteRegisters>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SpiritGpioInit+0x44>)
 8001c62:	b212      	sxth	r2, r2
 8001c64:	4611      	mov	r1, r2
 8001c66:	7019      	strb	r1, [r3, #0]
 8001c68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c6c:	705a      	strb	r2, [r3, #1]

}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000168 	.word	0x20000168

08001c7c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00c      	beq.n	8001ca8 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	2204      	movs	r2, #4
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f007 fe16 	bl	80098c8 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	461a      	mov	r2, r3
 8001cae:	2104      	movs	r1, #4
 8001cb0:	2090      	movs	r0, #144	@ 0x90
 8001cb2:	f002 f96f 	bl	8003f94 <RadioSpiWriteRegisters>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4b05      	ldr	r3, [pc, #20]	@ (8001cd0 <SpiritIrqDeInit+0x54>)
 8001cba:	b212      	sxth	r2, r2
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	7019      	strb	r1, [r3, #0]
 8001cc0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cc4:	705a      	strb	r2, [r3, #1]
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000168 	.word	0x20000168

08001cd4 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2104      	movs	r1, #4
 8001cec:	2090      	movs	r0, #144	@ 0x90
 8001cee:	f002 f99d 	bl	800402c <RadioSpiReadRegisters>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b29      	ldr	r3, [pc, #164]	@ (8001d9c <SpiritIrq+0xc8>)
 8001cf6:	b212      	sxth	r2, r2
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	7019      	strb	r1, [r3, #0]
 8001cfc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d00:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	74fb      	strb	r3, [r7, #19]
 8001d06:	e011      	b.n	8001d2c <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001d08:	7cfb      	ldrb	r3, [r7, #19]
 8001d0a:	3318      	adds	r3, #24
 8001d0c:	443b      	add	r3, r7
 8001d0e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001d12:	461a      	mov	r2, r3
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	f1c3 0303 	rsb	r3, r3, #3
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4413      	add	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001d26:	7cfb      	ldrb	r3, [r7, #19]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	74fb      	strb	r3, [r7, #19]
 8001d2c:	7cfb      	ldrb	r3, [r7, #19]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d9ea      	bls.n	8001d08 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e003      	b.n	8001d4c <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	74bb      	strb	r3, [r7, #18]
 8001d50:	e00e      	b.n	8001d70 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001d52:	7cbb      	ldrb	r3, [r7, #18]
 8001d54:	f1c3 0303 	rsb	r3, r3, #3
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	40da      	lsrs	r2, r3
 8001d5e:	7cbb      	ldrb	r3, [r7, #18]
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	3318      	adds	r3, #24
 8001d64:	443b      	add	r3, r7
 8001d66:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001d6a:	7cbb      	ldrb	r3, [r7, #18]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	74bb      	strb	r3, [r7, #18]
 8001d70:	7cbb      	ldrb	r3, [r7, #18]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d9ed      	bls.n	8001d52 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2104      	movs	r1, #4
 8001d7e:	2090      	movs	r0, #144	@ 0x90
 8001d80:	f002 f908 	bl	8003f94 <RadioSpiWriteRegisters>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <SpiritIrq+0xc8>)
 8001d88:	b212      	sxth	r2, r2
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	7019      	strb	r1, [r3, #0]
 8001d8e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d92:	705a      	strb	r2, [r3, #1]

}
 8001d94:	bf00      	nop
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000168 	.word	0x20000168

08001da0 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	461a      	mov	r2, r3
 8001db2:	2104      	movs	r1, #4
 8001db4:	20fa      	movs	r0, #250	@ 0xfa
 8001db6:	f002 f939 	bl	800402c <RadioSpiReadRegisters>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4b10      	ldr	r3, [pc, #64]	@ (8001e00 <SpiritIrqGetStatus+0x60>)
 8001dbe:	b212      	sxth	r2, r2
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	7019      	strb	r1, [r3, #0]
 8001dc4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001dc8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	74fb      	strb	r3, [r7, #19]
 8001dce:	e00e      	b.n	8001dee <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	f1c3 0303 	rsb	r3, r3, #3
 8001dd6:	3318      	adds	r3, #24
 8001dd8:	443b      	add	r3, r7
 8001dda:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001de8:	7cfb      	ldrb	r3, [r7, #19]
 8001dea:	3301      	adds	r3, #1
 8001dec:	74fb      	strb	r3, [r7, #19]
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d9ed      	bls.n	8001dd0 <SpiritIrqGetStatus+0x30>
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000168 	.word	0x20000168

08001e04 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2104      	movs	r1, #4
 8001e10:	20fa      	movs	r0, #250	@ 0xfa
 8001e12:	f002 f90b 	bl	800402c <RadioSpiReadRegisters>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <SpiritIrqClearStatus+0x2c>)
 8001e1a:	b212      	sxth	r2, r2
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	7019      	strb	r1, [r3, #0]
 8001e20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e24:	705a      	strb	r2, [r3, #1]

}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000168 	.word	0x20000168

08001e34 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8001e34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e38:	b08a      	sub	sp, #40	@ 0x28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a70      	ldr	r2, [pc, #448]	@ (8002004 <SpiritManagementSetFrequencyBase+0x1d0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d307      	bcc.n	8001e56 <SpiritManagementSetFrequencyBase+0x22>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a6f      	ldr	r2, [pc, #444]	@ (8002008 <SpiritManagementSetFrequencyBase+0x1d4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d803      	bhi.n	8001e56 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e54:	e01a      	b.n	8001e8c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a6c      	ldr	r2, [pc, #432]	@ (800200c <SpiritManagementSetFrequencyBase+0x1d8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d907      	bls.n	8001e6e <SpiritManagementSetFrequencyBase+0x3a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a6b      	ldr	r2, [pc, #428]	@ (8002010 <SpiritManagementSetFrequencyBase+0x1dc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d803      	bhi.n	8001e6e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8001e66:	2301      	movs	r3, #1
 8001e68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e6c:	e00e      	b.n	8001e8c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a68      	ldr	r2, [pc, #416]	@ (8002014 <SpiritManagementSetFrequencyBase+0x1e0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d907      	bls.n	8001e86 <SpiritManagementSetFrequencyBase+0x52>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a67      	ldr	r2, [pc, #412]	@ (8002018 <SpiritManagementSetFrequencyBase+0x1e4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d803      	bhi.n	8001e86 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001e84:	e002      	b.n	8001e8c <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8001e86:	2303      	movs	r3, #3
 8001e88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8001e8c:	f001 f830 	bl	8002ef0 <SpiritRadioGetFrequencyOffset>
 8001e90:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8001e92:	f001 f80d 	bl	8002eb0 <SpiritRadioGetChannelSpace>
 8001e96:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8001e98:	f000 fff2 	bl	8002e80 <SpiritRadioGetChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8001ea0:	6a3a      	ldr	r2, [r7, #32]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	7efb      	ldrb	r3, [r7, #27]
 8001ea8:	69f9      	ldr	r1, [r7, #28]
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8001eb2:	f001 fe0b 	bl	8003acc <SpiritRadioGetRefDiv>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	3301      	adds	r3, #1
 8001eba:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8001ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d83a      	bhi.n	8001f3a <SpiritManagementSetFrequencyBase+0x106>
 8001ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ecc <SpiritManagementSetFrequencyBase+0x98>)
 8001ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eca:	bf00      	nop
 8001ecc:	08001f25 	.word	0x08001f25
 8001ed0:	08001f0d 	.word	0x08001f0d
 8001ed4:	08001ef5 	.word	0x08001ef5
 8001ed8:	08001edd 	.word	0x08001edd
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	4a4f      	ldr	r2, [pc, #316]	@ (800201c <SpiritManagementSetFrequencyBase+0x1e8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d803      	bhi.n	8001eec <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fe63 	bl	8001bb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001eea:	e026      	b.n	8001f3a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff fe5f 	bl	8001bb0 <SpiritCalibrationSelectVco>
    break;
 8001ef2:	e022      	b.n	8001f3a <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8002020 <SpiritManagementSetFrequencyBase+0x1ec>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d803      	bhi.n	8001f04 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff fe57 	bl	8001bb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001f02:	e01a      	b.n	8001f3a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001f04:	2001      	movs	r0, #1
 8001f06:	f7ff fe53 	bl	8001bb0 <SpiritCalibrationSelectVco>
    break;
 8001f0a:	e016      	b.n	8001f3a <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	4a45      	ldr	r2, [pc, #276]	@ (8002024 <SpiritManagementSetFrequencyBase+0x1f0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d803      	bhi.n	8001f1c <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff fe4b 	bl	8001bb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001f1a:	e00e      	b.n	8001f3a <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f7ff fe47 	bl	8001bb0 <SpiritCalibrationSelectVco>
    break;
 8001f22:	e00a      	b.n	8001f3a <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	4a40      	ldr	r2, [pc, #256]	@ (8002028 <SpiritManagementSetFrequencyBase+0x1f4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d803      	bhi.n	8001f34 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f7ff fe3f 	bl	8001bb0 <SpiritCalibrationSelectVco>
 8001f32:	e002      	b.n	8001f3a <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff fe3b 	bl	8001bb0 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8001f3a:	6978      	ldr	r0, [r7, #20]
 8001f3c:	f000 feb8 	bl	8002cb0 <SpiritRadioSearchWCP>
 8001f40:	4603      	mov	r3, r0
 8001f42:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7fe fa85 	bl	8000454 <__aeabi_ui2d>
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	460d      	mov	r5, r1
 8001f4e:	7cfb      	ldrb	r3, [r7, #19]
 8001f50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001f54:	4935      	ldr	r1, [pc, #212]	@ (800202c <SpiritManagementSetFrequencyBase+0x1f8>)
 8001f56:	5c8a      	ldrb	r2, [r1, r2]
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	049b      	lsls	r3, r3, #18
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fa88 	bl	8000474 <__aeabi_i2d>
 8001f64:	4680      	mov	r8, r0
 8001f66:	4689      	mov	r9, r1
 8001f68:	f001 fe24 	bl	8003bb4 <SpiritRadioGetXtalFrequency>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fa70 	bl	8000454 <__aeabi_ui2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4640      	mov	r0, r8
 8001f7a:	4649      	mov	r1, r9
 8001f7c:	f7fe fc0e 	bl	800079c <__aeabi_ddiv>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4620      	mov	r0, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	f7fe fade 	bl	8000548 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fcea 	bl	800096c <__aeabi_d2uiz>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	0d5b      	lsrs	r3, r3, #21
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	7cbb      	ldrb	r3, [r7, #18]
 8001faa:	015b      	lsls	r3, r3, #5
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	0b5b      	lsrs	r3, r3, #13
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fd0:	4917      	ldr	r1, [pc, #92]	@ (8002030 <SpiritManagementSetFrequencyBase+0x1fc>)
 8001fd2:	5ccb      	ldrb	r3, [r1, r3]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	2008      	movs	r0, #8
 8001fe4:	f001 ffd6 	bl	8003f94 <RadioSpiWriteRegisters>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <SpiritManagementSetFrequencyBase+0x200>)
 8001fec:	b212      	sxth	r2, r2
 8001fee:	4611      	mov	r1, r2
 8001ff0:	7019      	strb	r1, [r3, #0]
 8001ff2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ff6:	705a      	strb	r2, [r3, #1]
}
 8001ff8:	bf00      	nop
 8001ffa:	3728      	adds	r7, #40	@ 0x28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002002:	bf00      	nop
 8002004:	2e5f5680 	.word	0x2e5f5680
 8002008:	390c2fe0 	.word	0x390c2fe0
 800200c:	1701e47f 	.word	0x1701e47f
 8002010:	1c146a60 	.word	0x1c146a60
 8002014:	11d260bf 	.word	0x11d260bf
 8002018:	14ced7e0 	.word	0x14ced7e0
 800201c:	099cf4e1 	.word	0x099cf4e1
 8002020:	1339e9c3 	.word	0x1339e9c3
 8002024:	19a28d05 	.word	0x19a28d05
 8002028:	33451a0a 	.word	0x33451a0a
 800202c:	08009bd8 	.word	0x08009bd8
 8002030:	08009bd4 	.word	0x08009bd4
 8002034:	20000168 	.word	0x20000168

08002038 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002046:	f001 fdb5 	bl	8003bb4 <SpiritRadioGetXtalFrequency>
 800204a:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 800204c:	2300      	movs	r3, #0
 800204e:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4a57      	ldr	r2, [pc, #348]	@ (80021b0 <SpiritManagementWaVcoCalibration+0x178>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d90f      	bls.n	8002078 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002058:	f001 fd38 	bl	8003acc <SpiritRadioGetRefDiv>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10a      	bne.n	8002078 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002066:	f001 f8a3 	bl	80031b0 <SpiritRadioGetFrequencyBase>
 800206a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 800206c:	2001      	movs	r0, #1
 800206e:	f001 fcfd 	bl	8003a6c <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fede 	bl	8001e34 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002078:	f001 f89a 	bl	80031b0 <SpiritRadioGetFrequencyBase>
 800207c:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800207e:	2325      	movs	r3, #37	@ 0x25
 8002080:	707b      	strb	r3, [r7, #1]
 8002082:	1c7b      	adds	r3, r7, #1
 8002084:	461a      	mov	r2, r3
 8002086:	2101      	movs	r1, #1
 8002088:	20a1      	movs	r0, #161	@ 0xa1
 800208a:	f001 ff83 	bl	8003f94 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 800208e:	2001      	movs	r0, #1
 8002090:	f7ff fcd2 	bl	8001a38 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002094:	f001 ff4c 	bl	8003f30 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002098:	4b46      	ldr	r3, [pc, #280]	@ (80021b4 <SpiritManagementWaVcoCalibration+0x17c>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b40      	cmp	r3, #64	@ 0x40
 80020a4:	d10d      	bne.n	80020c2 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 80020aa:	2062      	movs	r0, #98	@ 0x62
 80020ac:	f7ff fdaa 	bl	8001c04 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 80020b0:	f001 ff3e 	bl	8003f30 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80020b4:	4b3f      	ldr	r3, [pc, #252]	@ (80021b4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d1f6      	bne.n	80020b0 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80020c2:	2066      	movs	r0, #102	@ 0x66
 80020c4:	f7ff fd9e 	bl	8001c04 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80020cc:	f001 ff30 	bl	8003f30 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80020d0:	4b38      	ldr	r3, [pc, #224]	@ (80021b4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b13      	cmp	r3, #19
 80020dc:	d106      	bne.n	80020ec <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80020de:	7b7b      	ldrb	r3, [r7, #13]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	737a      	strb	r2, [r7, #13]
 80020e4:	2b05      	cmp	r3, #5
 80020e6:	d101      	bne.n	80020ec <SpiritManagementWaVcoCalibration+0xb4>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e05d      	b.n	80021a8 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80020ec:	4b31      	ldr	r3, [pc, #196]	@ (80021b4 <SpiritManagementWaVcoCalibration+0x17c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	d1e8      	bne.n	80020cc <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80020fa:	f7ff fcd5 	bl	8001aa8 <SpiritCalibrationGetVcoCalData>
 80020fe:	4603      	mov	r3, r0
 8002100:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8002102:	2062      	movs	r0, #98	@ 0x62
 8002104:	f7ff fd7e 	bl	8001c04 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002108:	f001 ff12 	bl	8003f30 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800210c:	4b29      	ldr	r3, [pc, #164]	@ (80021b4 <SpiritManagementWaVcoCalibration+0x17c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b03      	cmp	r3, #3
 8002118:	d1f6      	bne.n	8002108 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 800211a:	2065      	movs	r0, #101	@ 0x65
 800211c:	f7ff fd72 	bl	8001c04 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002120:	2300      	movs	r3, #0
 8002122:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002124:	f001 ff04 	bl	8003f30 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002128:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <SpiritManagementWaVcoCalibration+0x17c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b13      	cmp	r3, #19
 8002134:	d106      	bne.n	8002144 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002136:	7b7b      	ldrb	r3, [r7, #13]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	737a      	strb	r2, [r7, #13]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d101      	bne.n	8002144 <SpiritManagementWaVcoCalibration+0x10c>
 8002140:	2301      	movs	r3, #1
 8002142:	e031      	b.n	80021a8 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002144:	4b1b      	ldr	r3, [pc, #108]	@ (80021b4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b0f      	cmp	r3, #15
 8002150:	d1e8      	bne.n	8002124 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8002152:	f7ff fca9 	bl	8001aa8 <SpiritCalibrationGetVcoCalData>
 8002156:	4603      	mov	r3, r0
 8002158:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 800215a:	2062      	movs	r0, #98	@ 0x62
 800215c:	f7ff fd52 	bl	8001c04 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002160:	f001 fee6 	bl	8003f30 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002164:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <SpiritManagementWaVcoCalibration+0x17c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b03      	cmp	r3, #3
 8002170:	d1f6      	bne.n	8002160 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8002172:	7bbb      	ldrb	r3, [r7, #14]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d102      	bne.n	800217e <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002178:	2063      	movs	r0, #99	@ 0x63
 800217a:	f7ff fd43 	bl	8001c04 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800217e:	2000      	movs	r0, #0
 8002180:	f7ff fc5a 	bl	8001a38 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d005      	beq.n	8002196 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 800218a:	2000      	movs	r0, #0
 800218c:	f001 fc6e 	bl	8003a6c <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff fe4f 	bl	8001e34 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fca1 	bl	8001ae0 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 800219e:	78bb      	ldrb	r3, [r7, #2]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fcd1 	bl	8001b48 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	01c9c380 	.word	0x01c9c380
 80021b4:	20000168 	.word	0x20000168

080021b8 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80021be:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <SpiritManagementWaCmdStrobeTx+0x60>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d023      	beq.n	8002210 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <SpiritManagementWaCmdStrobeTx+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a14      	ldr	r2, [pc, #80]	@ (8002220 <SpiritManagementWaCmdStrobeTx+0x68>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d908      	bls.n	80021e4 <SpiritManagementWaCmdStrobeTx+0x2c>
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <SpiritManagementWaCmdStrobeTx+0x64>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <SpiritManagementWaCmdStrobeTx+0x6c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d803      	bhi.n	80021e4 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80021dc:	20c0      	movs	r0, #192	@ 0xc0
 80021de:	f001 fbbb 	bl	8003958 <SpiritRadioSetPACwc>
 80021e2:	e002      	b.n	80021ea <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80021e4:	2000      	movs	r0, #0
 80021e6:	f001 fbb7 	bl	8003958 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80021ea:	2311      	movs	r3, #17
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	461a      	mov	r2, r3
 80021f2:	2101      	movs	r1, #1
 80021f4:	20a9      	movs	r0, #169	@ 0xa9
 80021f6:	f001 fecd 	bl	8003f94 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80021fa:	2320      	movs	r3, #32
 80021fc:	71fb      	strb	r3, [r7, #7]
 80021fe:	1dfb      	adds	r3, r7, #7
 8002200:	461a      	mov	r2, r3
 8002202:	2101      	movs	r1, #1
 8002204:	20a5      	movs	r0, #165	@ 0xa5
 8002206:	f001 fec5 	bl	8003f94 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 800220a:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <SpiritManagementWaCmdStrobeTx+0x60>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
  }
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000004 	.word	0x20000004
 800221c:	20000160 	.word	0x20000160
 8002220:	08f0d17f 	.word	0x08f0d17f
 8002224:	1c03a180 	.word	0x1c03a180

08002228 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 800222e:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d00d      	beq.n	8002254 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002238:	2398      	movs	r3, #152	@ 0x98
 800223a:	71fb      	strb	r3, [r7, #7]
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	461a      	mov	r2, r3
 8002240:	2101      	movs	r1, #1
 8002242:	20a5      	movs	r0, #165	@ 0xa5
 8002244:	f001 fea6 	bl	8003f94 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002248:	2000      	movs	r0, #0
 800224a:	f001 fb85 	bl	8003958 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 800224e:	4b03      	ldr	r3, [pc, #12]	@ (800225c <SpiritManagementWaCmdStrobeRx+0x34>)
 8002250:	2201      	movs	r2, #1
 8002252:	701a      	strb	r2, [r3, #0]
  }
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000004 	.word	0x20000004

08002260 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <SpiritManagementWaTRxFcMem+0x20>)
 800226a:	2202      	movs	r2, #2
 800226c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <SpiritManagementWaTRxFcMem+0x24>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20000004 	.word	0x20000004
 8002284:	20000160 	.word	0x20000160

08002288 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 800228e:	23ca      	movs	r3, #202	@ 0xca
 8002290:	71fb      	strb	r3, [r7, #7]
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	461a      	mov	r2, r3
 8002296:	2101      	movs	r1, #1
 8002298:	20b2      	movs	r0, #178	@ 0xb2
 800229a:	f001 fe7b 	bl	8003f94 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 800229e:	2304      	movs	r3, #4
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	461a      	mov	r2, r3
 80022a6:	2101      	movs	r1, #1
 80022a8:	20a8      	movs	r0, #168	@ 0xa8
 80022aa:	f001 fe73 	bl	8003f94 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	461a      	mov	r2, r3
 80022b2:	2101      	movs	r1, #1
 80022b4:	20a8      	movs	r0, #168	@ 0xa8
 80022b6:	f001 feb9 	bl	800402c <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80022ba:	2300      	movs	r3, #0
 80022bc:	71fb      	strb	r3, [r7, #7]
 80022be:	1dfb      	adds	r3, r7, #7
 80022c0:	461a      	mov	r2, r3
 80022c2:	2101      	movs	r1, #1
 80022c4:	20a8      	movs	r0, #168	@ 0xa8
 80022c6:	f001 fe65 	bl	8003f94 <RadioSpiWriteRegisters>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	461a      	mov	r2, r3
 80022de:	2101      	movs	r1, #1
 80022e0:	2030      	movs	r0, #48	@ 0x30
 80022e2:	f001 fea3 	bl	800402c <RadioSpiReadRegisters>
 80022e6:	4602      	mov	r2, r0
 80022e8:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <SpiritPktCommonGetControlLength+0x34>)
 80022ea:	b212      	sxth	r2, r2
 80022ec:	4611      	mov	r1, r2
 80022ee:	7019      	strb	r1, [r3, #0]
 80022f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022f4:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	b2db      	uxtb	r3, r3

}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000168 	.word	0x20000168

0800230c <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002316:	f107 030f 	add.w	r3, r7, #15
 800231a:	461a      	mov	r2, r3
 800231c:	2101      	movs	r1, #1
 800231e:	204f      	movs	r0, #79	@ 0x4f
 8002320:	f001 fe84 	bl	800402c <RadioSpiReadRegisters>
 8002324:	4602      	mov	r2, r0
 8002326:	4b14      	ldr	r3, [pc, #80]	@ (8002378 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002328:	b212      	sxth	r2, r2
 800232a:	4611      	mov	r1, r2
 800232c:	7019      	strb	r1, [r3, #0]
 800232e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002332:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e004      	b.n	8002350 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	f023 0301 	bic.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002350:	f107 030f 	add.w	r3, r7, #15
 8002354:	461a      	mov	r2, r3
 8002356:	2101      	movs	r1, #1
 8002358:	204f      	movs	r0, #79	@ 0x4f
 800235a:	f001 fe1b 	bl	8003f94 <RadioSpiWriteRegisters>
 800235e:	4602      	mov	r2, r0
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <SpiritPktCommonFilterOnCrc+0x6c>)
 8002362:	b212      	sxth	r2, r2
 8002364:	4611      	mov	r1, r2
 8002366:	7019      	strb	r1, [r3, #0]
 8002368:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800236c:	705a      	strb	r2, [r3, #1]

}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000168 	.word	0x20000168

0800237c <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002386:	1dfb      	adds	r3, r7, #7
 8002388:	461a      	mov	r2, r3
 800238a:	2101      	movs	r1, #1
 800238c:	204b      	movs	r0, #75	@ 0x4b
 800238e:	f001 fe01 	bl	8003f94 <RadioSpiWriteRegisters>
 8002392:	4602      	mov	r2, r0
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <SpiritPktCommonSetDestinationAddress+0x30>)
 8002396:	b212      	sxth	r2, r2
 8002398:	4611      	mov	r1, r2
 800239a:	7019      	strb	r1, [r3, #0]
 800239c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023a0:	705a      	strb	r2, [r3, #1]

}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000168 	.word	0x20000168

080023b0 <SpiritPktCommonSetMyAddress>:
 * @param  cAddress Address of the present node.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetMyAddress(uint8_t cAddress)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  /* Writes value on the PCKT_FLT_GOALS_TX_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_TX_ADDR_BASE, 1, &cAddress);
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	461a      	mov	r2, r3
 80023be:	2101      	movs	r1, #1
 80023c0:	204e      	movs	r0, #78	@ 0x4e
 80023c2:	f001 fde7 	bl	8003f94 <RadioSpiWriteRegisters>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <SpiritPktCommonSetMyAddress+0x30>)
 80023ca:	b212      	sxth	r2, r2
 80023cc:	4611      	mov	r1, r2
 80023ce:	7019      	strb	r1, [r3, #0]
 80023d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023d4:	705a      	strb	r2, [r3, #1]

}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000168 	.word	0x20000168

080023e4 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80023ec:	f107 0308 	add.w	r3, r7, #8
 80023f0:	461a      	mov	r2, r3
 80023f2:	2101      	movs	r1, #1
 80023f4:	2051      	movs	r0, #81	@ 0x51
 80023f6:	f001 fe19 	bl	800402c <RadioSpiReadRegisters>
 80023fa:	4602      	mov	r2, r0
 80023fc:	4b60      	ldr	r3, [pc, #384]	@ (8002580 <SpiritPktStackInit+0x19c>)
 80023fe:	b212      	sxth	r2, r2
 8002400:	4611      	mov	r1, r2
 8002402:	7019      	strb	r1, [r3, #0]
 8002404:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002408:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 800240a:	7a3b      	ldrb	r3, [r7, #8]
 800240c:	f023 0320 	bic.w	r3, r3, #32
 8002410:	b2db      	uxtb	r3, r3
 8002412:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002414:	7a3b      	ldrb	r3, [r7, #8]
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	461a      	mov	r2, r3
 8002424:	2101      	movs	r1, #1
 8002426:	2051      	movs	r0, #81	@ 0x51
 8002428:	f001 fdb4 	bl	8003f94 <RadioSpiWriteRegisters>
 800242c:	4602      	mov	r2, r0
 800242e:	4b54      	ldr	r3, [pc, #336]	@ (8002580 <SpiritPktStackInit+0x19c>)
 8002430:	b212      	sxth	r2, r2
 8002432:	4611      	mov	r1, r2
 8002434:	7019      	strb	r1, [r3, #0]
 8002436:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800243a:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800243c:	f107 0308 	add.w	r3, r7, #8
 8002440:	461a      	mov	r2, r3
 8002442:	2101      	movs	r1, #1
 8002444:	204f      	movs	r0, #79	@ 0x4f
 8002446:	f001 fdf1 	bl	800402c <RadioSpiReadRegisters>
 800244a:	4602      	mov	r2, r0
 800244c:	4b4c      	ldr	r3, [pc, #304]	@ (8002580 <SpiritPktStackInit+0x19c>)
 800244e:	b212      	sxth	r2, r2
 8002450:	4611      	mov	r1, r2
 8002452:	7019      	strb	r1, [r3, #0]
 8002454:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002458:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 800245a:	7a3b      	ldrb	r3, [r7, #8]
 800245c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002460:	b2db      	uxtb	r3, r3
 8002462:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002464:	f107 0308 	add.w	r3, r7, #8
 8002468:	461a      	mov	r2, r3
 800246a:	2101      	movs	r1, #1
 800246c:	204f      	movs	r0, #79	@ 0x4f
 800246e:	f001 fd91 	bl	8003f94 <RadioSpiWriteRegisters>
 8002472:	4602      	mov	r2, r0
 8002474:	4b42      	ldr	r3, [pc, #264]	@ (8002580 <SpiritPktStackInit+0x19c>)
 8002476:	b212      	sxth	r2, r2
 8002478:	4611      	mov	r1, r2
 800247a:	7019      	strb	r1, [r3, #0]
 800247c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002480:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7adb      	ldrb	r3, [r3, #11]
 8002486:	f043 0310 	orr.w	r3, r3, #16
 800248a:	b2db      	uxtb	r3, r3
 800248c:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7a5b      	ldrb	r3, [r3, #9]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <SpiritPktStackInit+0xb8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7a5b      	ldrb	r3, [r3, #9]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	785b      	ldrb	r3, [r3, #1]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 80024bc:	4313      	orrs	r3, r2
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7a9b      	ldrb	r3, [r3, #10]
 80024c6:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7b5b      	ldrb	r3, [r3, #13]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d104      	bne.n	80024da <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 80024d0:	7afb      	ldrb	r3, [r7, #11]
 80024d2:	f043 0310 	orr.w	r3, r3, #16
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7b1b      	ldrb	r3, [r3, #12]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d104      	bne.n	80024ec <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 80024e2:	7afb      	ldrb	r3, [r7, #11]
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 80024ec:	f107 0308 	add.w	r3, r7, #8
 80024f0:	461a      	mov	r2, r3
 80024f2:	2104      	movs	r1, #4
 80024f4:	2030      	movs	r0, #48	@ 0x30
 80024f6:	f001 fd4d 	bl	8003f94 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e01d      	b.n	800253c <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	785b      	ldrb	r3, [r3, #1]
 8002506:	085b      	lsrs	r3, r3, #1
 8002508:	b2db      	uxtb	r3, r3
 800250a:	f1c3 0303 	rsb	r3, r3, #3
 800250e:	429a      	cmp	r2, r3
 8002510:	da06      	bge.n	8002520 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	3310      	adds	r3, #16
 8002516:	443b      	add	r3, r7
 8002518:	2200      	movs	r2, #0
 800251a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800251e:	e00a      	b.n	8002536 <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	40da      	lsrs	r2, r3
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	3310      	adds	r3, #16
 8002530:	443b      	add	r3, r7
 8002532:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	3301      	adds	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d9de      	bls.n	8002500 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	7a9b      	ldrb	r3, [r3, #10]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d103      	bne.n	8002552 <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 800254a:	2000      	movs	r0, #0
 800254c:	f7ff fede 	bl	800230c <SpiritPktCommonFilterOnCrc>
 8002550:	e002      	b.n	8002558 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002552:	2001      	movs	r0, #1
 8002554:	f7ff feda 	bl	800230c <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002558:	f107 0308 	add.w	r3, r7, #8
 800255c:	461a      	mov	r2, r3
 800255e:	2104      	movs	r1, #4
 8002560:	2036      	movs	r0, #54	@ 0x36
 8002562:	f001 fd17 	bl	8003f94 <RadioSpiWriteRegisters>
 8002566:	4602      	mov	r2, r0
 8002568:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <SpiritPktStackInit+0x19c>)
 800256a:	b212      	sxth	r2, r2
 800256c:	4611      	mov	r1, r2
 800256e:	7019      	strb	r1, [r3, #0]
 8002570:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002574:	705a      	strb	r2, [r3, #1]

}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000168 	.word	0x20000168

08002584 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	461a      	mov	r2, r3
 8002592:	2101      	movs	r1, #1
 8002594:	204f      	movs	r0, #79	@ 0x4f
 8002596:	f001 fd49 	bl	800402c <RadioSpiReadRegisters>
 800259a:	4602      	mov	r2, r0
 800259c:	4b2f      	ldr	r3, [pc, #188]	@ (800265c <SpiritPktStackAddressesInit+0xd8>)
 800259e:	b212      	sxth	r2, r2
 80025a0:	4611      	mov	r1, r2
 80025a2:	7019      	strb	r1, [r3, #0]
 80025a4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025a8:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80025b2:	7b3b      	ldrb	r3, [r7, #12]
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	733b      	strb	r3, [r7, #12]
 80025bc:	e004      	b.n	80025c8 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80025be:	7b3b      	ldrb	r3, [r7, #12]
 80025c0:	f023 0308 	bic.w	r3, r3, #8
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	789b      	ldrb	r3, [r3, #2]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d105      	bne.n	80025dc <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80025d0:	7b3b      	ldrb	r3, [r7, #12]
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	733b      	strb	r3, [r7, #12]
 80025da:	e004      	b.n	80025e6 <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80025dc:	7b3b      	ldrb	r3, [r7, #12]
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	791b      	ldrb	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80025ee:	7b3b      	ldrb	r3, [r7, #12]
 80025f0:	f043 0302 	orr.w	r3, r3, #2
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	733b      	strb	r3, [r7, #12]
 80025f8:	e004      	b.n	8002604 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 80025fa:	7b3b      	ldrb	r3, [r7, #12]
 80025fc:	f023 0302 	bic.w	r3, r3, #2
 8002600:	b2db      	uxtb	r3, r3
 8002602:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	461a      	mov	r2, r3
 800260a:	2101      	movs	r1, #1
 800260c:	204f      	movs	r0, #79	@ 0x4f
 800260e:	f001 fcc1 	bl	8003f94 <RadioSpiWriteRegisters>
 8002612:	4602      	mov	r2, r0
 8002614:	4b11      	ldr	r3, [pc, #68]	@ (800265c <SpiritPktStackAddressesInit+0xd8>)
 8002616:	b212      	sxth	r2, r2
 8002618:	4611      	mov	r1, r2
 800261a:	7019      	strb	r1, [r3, #0]
 800261c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002620:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	795b      	ldrb	r3, [r3, #5]
 8002626:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	78db      	ldrb	r3, [r3, #3]
 800262c:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	461a      	mov	r2, r3
 800263a:	2103      	movs	r1, #3
 800263c:	204c      	movs	r0, #76	@ 0x4c
 800263e:	f001 fca9 	bl	8003f94 <RadioSpiWriteRegisters>
 8002642:	4602      	mov	r2, r0
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <SpiritPktStackAddressesInit+0xd8>)
 8002646:	b212      	sxth	r2, r2
 8002648:	4611      	mov	r1, r2
 800264a:	7019      	strb	r1, [r3, #0]
 800264c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002650:	705a      	strb	r2, [r3, #1]
  
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000168 	.word	0x20000168

08002660 <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	461a      	mov	r2, r3
 800266e:	2102      	movs	r1, #2
 8002670:	2051      	movs	r0, #81	@ 0x51
 8002672:	f001 fcdb 	bl	800402c <RadioSpiReadRegisters>
 8002676:	4602      	mov	r2, r0
 8002678:	4b21      	ldr	r3, [pc, #132]	@ (8002700 <SpiritPktStackLlpInit+0xa0>)
 800267a:	b212      	sxth	r2, r2
 800267c:	4611      	mov	r1, r2
 800267e:	7019      	strb	r1, [r3, #0]
 8002680:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002684:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	785b      	ldrb	r3, [r3, #1]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 800268e:	7b3b      	ldrb	r3, [r7, #12]
 8002690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002694:	b2db      	uxtb	r3, r3
 8002696:	733b      	strb	r3, [r7, #12]
 8002698:	e004      	b.n	80026a4 <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 800269a:	7b3b      	ldrb	r3, [r7, #12]
 800269c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d105      	bne.n	80026b8 <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 80026ac:	7b7b      	ldrb	r3, [r7, #13]
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	737b      	strb	r3, [r7, #13]
 80026b6:	e004      	b.n	80026c2 <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 80026b8:	7b7b      	ldrb	r3, [r7, #13]
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 80026c2:	7b7b      	ldrb	r3, [r7, #13]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 80026cc:	7b7a      	ldrb	r2, [r7, #13]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	789b      	ldrb	r3, [r3, #2]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	461a      	mov	r2, r3
 80026de:	2102      	movs	r1, #2
 80026e0:	2051      	movs	r0, #81	@ 0x51
 80026e2:	f001 fc57 	bl	8003f94 <RadioSpiWriteRegisters>
 80026e6:	4602      	mov	r2, r0
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <SpiritPktStackLlpInit+0xa0>)
 80026ea:	b212      	sxth	r2, r2
 80026ec:	4611      	mov	r1, r2
 80026ee:	7019      	strb	r1, [r3, #0]
 80026f0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026f4:	705a      	strb	r2, [r3, #1]

}
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000168 	.word	0x20000168

08002704 <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 800270e:	f7ff fde1 	bl	80022d4 <SpiritPktCommonGetControlLength>
 8002712:	4603      	mov	r3, r0
 8002714:	3302      	adds	r3, #2
 8002716:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	89fb      	ldrh	r3, [r7, #14]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	4413      	add	r3, r2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	89fb      	ldrh	r3, [r7, #14]
 800272a:	4413      	add	r3, r2
 800272c:	121b      	asrs	r3, r3, #8
 800272e:	b2db      	uxtb	r3, r3
 8002730:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002732:	f107 030c 	add.w	r3, r7, #12
 8002736:	461a      	mov	r2, r3
 8002738:	2102      	movs	r1, #2
 800273a:	2034      	movs	r0, #52	@ 0x34
 800273c:	f001 fc2a 	bl	8003f94 <RadioSpiWriteRegisters>
 8002740:	4602      	mov	r2, r0
 8002742:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <SpiritPktStackSetPayloadLength+0x54>)
 8002744:	b212      	sxth	r2, r2
 8002746:	4611      	mov	r1, r2
 8002748:	7019      	strb	r1, [r3, #0]
 800274a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800274e:	705a      	strb	r2, [r3, #1]

}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000168 	.word	0x20000168

0800275c <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002766:	f107 030f 	add.w	r3, r7, #15
 800276a:	461a      	mov	r2, r3
 800276c:	2101      	movs	r1, #1
 800276e:	203a      	movs	r0, #58	@ 0x3a
 8002770:	f001 fc5c 	bl	800402c <RadioSpiReadRegisters>
 8002774:	4602      	mov	r2, r0
 8002776:	4b14      	ldr	r3, [pc, #80]	@ (80027c8 <SpiritQiSqiCheck+0x6c>)
 8002778:	b212      	sxth	r2, r2
 800277a:	4611      	mov	r1, r2
 800277c:	7019      	strb	r1, [r3, #0]
 800277e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002782:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d105      	bne.n	8002796 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	b2db      	uxtb	r3, r3
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	e004      	b.n	80027a0 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	f023 0302 	bic.w	r3, r3, #2
 800279c:	b2db      	uxtb	r3, r3
 800279e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80027a0:	f107 030f 	add.w	r3, r7, #15
 80027a4:	461a      	mov	r2, r3
 80027a6:	2101      	movs	r1, #1
 80027a8:	203a      	movs	r0, #58	@ 0x3a
 80027aa:	f001 fbf3 	bl	8003f94 <RadioSpiWriteRegisters>
 80027ae:	4602      	mov	r2, r0
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <SpiritQiSqiCheck+0x6c>)
 80027b2:	b212      	sxth	r2, r2
 80027b4:	4611      	mov	r1, r2
 80027b6:	7019      	strb	r1, [r3, #0]
 80027b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027bc:	705a      	strb	r2, [r3, #1]

}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000168 	.word	0x20000168

080027cc <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80027d6:	f107 030f 	add.w	r3, r7, #15
 80027da:	461a      	mov	r2, r3
 80027dc:	2101      	movs	r1, #1
 80027de:	203a      	movs	r0, #58	@ 0x3a
 80027e0:	f001 fc24 	bl	800402c <RadioSpiReadRegisters>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <SpiritQiSetSqiThreshold+0x64>)
 80027e8:	b212      	sxth	r2, r2
 80027ea:	4611      	mov	r1, r2
 80027ec:	7019      	strb	r1, [r3, #0]
 80027ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027f2:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4313      	orrs	r3, r2
 8002804:	b2db      	uxtb	r3, r3
 8002806:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002808:	f107 030f 	add.w	r3, r7, #15
 800280c:	461a      	mov	r2, r3
 800280e:	2101      	movs	r1, #1
 8002810:	203a      	movs	r0, #58	@ 0x3a
 8002812:	f001 fbbf 	bl	8003f94 <RadioSpiWriteRegisters>
 8002816:	4602      	mov	r2, r0
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <SpiritQiSetSqiThreshold+0x64>)
 800281a:	b212      	sxth	r2, r2
 800281c:	4611      	mov	r1, r2
 800281e:	7019      	strb	r1, [r3, #0]
 8002820:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002824:	705a      	strb	r2, [r3, #1]

}
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000168 	.word	0x20000168

08002834 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3382      	adds	r3, #130	@ 0x82
 8002840:	b2db      	uxtb	r3, r3
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	b2db      	uxtb	r3, r3
 8002846:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002848:	f107 030f 	add.w	r3, r7, #15
 800284c:	461a      	mov	r2, r3
 800284e:	2101      	movs	r1, #1
 8002850:	2022      	movs	r0, #34	@ 0x22
 8002852:	f001 fb9f 	bl	8003f94 <RadioSpiWriteRegisters>
 8002856:	4602      	mov	r2, r0
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <SpiritQiSetRssiThresholddBm+0x3c>)
 800285a:	b212      	sxth	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	7019      	strb	r1, [r3, #0]
 8002860:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002864:	705a      	strb	r2, [r3, #1]

}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000168 	.word	0x20000168

08002874 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08c      	sub	sp, #48	@ 0x30
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 800287c:	23a0      	movs	r3, #160	@ 0xa0
 800287e:	747b      	strb	r3, [r7, #17]
 8002880:	f107 0311 	add.w	r3, r7, #17
 8002884:	461a      	mov	r2, r3
 8002886:	2101      	movs	r1, #1
 8002888:	209f      	movs	r0, #159	@ 0x9f
 800288a:	f001 fb83 	bl	8003f94 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002894:	ee07 3a90 	vmov	s15, r3
 8002898:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028ac:	eddf 6aae 	vldr	s13, [pc, #696]	@ 8002b68 <SpiritRadioInit+0x2f4>
 80028b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028b8:	ee17 3a90 	vmov	r3, s15
 80028bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 80028be:	2063      	movs	r0, #99	@ 0x63
 80028c0:	f001 fc00 	bl	80040c4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80028c4:	2300      	movs	r3, #0
 80028c6:	73bb      	strb	r3, [r7, #14]
 80028c8:	e004      	b.n	80028d4 <SpiritRadioInit+0x60>
 80028ca:	7bbb      	ldrb	r3, [r7, #14]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	73bb      	strb	r3, [r7, #14]
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2bff      	cmp	r3, #255	@ 0xff
 80028da:	d1f6      	bne.n	80028ca <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80028dc:	f001 fb28 	bl	8003f30 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 80028e0:	4ba2      	ldr	r3, [pc, #648]	@ (8002b6c <SpiritRadioInit+0x2f8>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b40      	cmp	r3, #64	@ 0x40
 80028ec:	d1ea      	bne.n	80028c4 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80028ee:	4ba0      	ldr	r3, [pc, #640]	@ (8002b70 <SpiritRadioInit+0x2fc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4aa0      	ldr	r2, [pc, #640]	@ (8002b74 <SpiritRadioInit+0x300>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d803      	bhi.n	8002900 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f001 f909 	bl	8003b10 <SpiritRadioSetDigDiv>
 80028fe:	e002      	b.n	8002906 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002900:	2001      	movs	r0, #1
 8002902:	f001 f905 	bl	8003b10 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002906:	2062      	movs	r0, #98	@ 0x62
 8002908:	f001 fbdc 	bl	80040c4 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 800290c:	2300      	movs	r3, #0
 800290e:	737b      	strb	r3, [r7, #13]
 8002910:	e004      	b.n	800291c <SpiritRadioInit+0xa8>
 8002912:	7b7b      	ldrb	r3, [r7, #13]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3301      	adds	r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	737b      	strb	r3, [r7, #13]
 800291c:	7b7b      	ldrb	r3, [r7, #13]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2bff      	cmp	r3, #255	@ 0xff
 8002922:	d1f6      	bne.n	8002912 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002924:	f001 fb04 	bl	8003f30 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002928:	4b90      	ldr	r3, [pc, #576]	@ (8002b6c <SpiritRadioInit+0x2f8>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b03      	cmp	r3, #3
 8002934:	d1ea      	bne.n	800290c <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002940:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8002b78 <SpiritRadioInit+0x304>
 8002944:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002948:	4b89      	ldr	r3, [pc, #548]	@ (8002b70 <SpiritRadioInit+0x2fc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002954:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295c:	ee17 3a90 	vmov	r3, s15
 8002960:	857b      	strh	r3, [r7, #42]	@ 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002962:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	b29b      	uxth	r3, r3
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	b2db      	uxtb	r3, r3
 8002970:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002972:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002974:	b2db      	uxtb	r3, r3
 8002976:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	025a      	lsls	r2, r3, #9
 800297e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b70 <SpiritRadioInit+0x2fc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	099b      	lsrs	r3, r3, #6
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3301      	adds	r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fc63 	bl	8002260 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 800299a:	f107 0310 	add.w	r3, r7, #16
 800299e:	461a      	mov	r2, r3
 80029a0:	2101      	movs	r1, #1
 80029a2:	20a3      	movs	r0, #163	@ 0xa3
 80029a4:	f001 fb42 	bl	800402c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 80029a8:	7c3b      	ldrb	r3, [r7, #16]
 80029aa:	f023 0302 	bic.w	r3, r3, #2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	743b      	strb	r3, [r7, #16]
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	461a      	mov	r2, r3
 80029b8:	2101      	movs	r1, #1
 80029ba:	20a3      	movs	r0, #163	@ 0xa3
 80029bc:	f001 faea 	bl	8003f94 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f107 0216 	add.w	r2, r7, #22
 80029c8:	f107 0117 	add.w	r1, r7, #23
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fc3b 	bl	8003248 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	7b5a      	ldrb	r2, [r3, #13]
 80029da:	7dbb      	ldrb	r3, [r7, #22]
 80029dc:	4313      	orrs	r3, r2
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	461a      	mov	r2, r3
 80029e8:	2101      	movs	r1, #1
 80029ea:	201c      	movs	r0, #28
 80029ec:	f001 fb1e 	bl	800402c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f107 0214 	add.w	r2, r7, #20
 80029f8:	f107 0115 	add.w	r1, r7, #21
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fdbb 	bl	8003578 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002a02:	7d3b      	ldrb	r3, [r7, #20]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	b25a      	sxtb	r2, r3
 8002a08:	7c3b      	ldrb	r3, [r7, #16]
 8002a0a:	b25b      	sxtb	r3, r3
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	b25a      	sxtb	r2, r3
 8002a16:	7d7b      	ldrb	r3, [r7, #21]
 8002a18:	b25b      	sxtb	r3, r3
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	b25b      	sxtb	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	f107 0212 	add.w	r2, r7, #18
 8002a2a:	f107 0113 	add.w	r1, r7, #19
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fcbc 	bl	80033ac <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	b25a      	sxtb	r2, r3
 8002a3a:	7cbb      	ldrb	r3, [r7, #18]
 8002a3c:	b25b      	sxtb	r3, r3
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002a46:	4b4a      	ldr	r3, [pc, #296]	@ (8002b70 <SpiritRadioInit+0x2fc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0b1b      	lsrs	r3, r3, #12
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a54:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8002b7c <SpiritRadioInit+0x308>
 8002a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a5c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002b80 <SpiritRadioInit+0x30c>
 8002a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a64:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002a68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a74:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a88:	dd09      	ble.n	8002a9e <SpiritRadioInit+0x22a>
 8002a8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a92:	edc7 7a00 	vstr	s15, [r7]
 8002a96:	783b      	ldrb	r3, [r7, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e006      	b.n	8002aac <SpiritRadioInit+0x238>
 8002a9e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aa6:	edc7 7a00 	vstr	s15, [r7]
 8002aaa:	783b      	ldrb	r3, [r7, #0]
 8002aac:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002aae:	4b30      	ldr	r3, [pc, #192]	@ (8002b70 <SpiritRadioInit+0x2fc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a30      	ldr	r2, [pc, #192]	@ (8002b74 <SpiritRadioInit+0x300>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d802      	bhi.n	8002abe <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
 8002aba:	777b      	strb	r3, [r7, #29]
 8002abc:	e033      	b.n	8002b26 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002abe:	4b2c      	ldr	r3, [pc, #176]	@ (8002b70 <SpiritRadioInit+0x2fc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0b5b      	lsrs	r3, r3, #13
 8002ac4:	ee07 3a90 	vmov	s15, r3
 8002ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002acc:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002b7c <SpiritRadioInit+0x308>
 8002ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002b80 <SpiritRadioInit+0x30c>
 8002ad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002adc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002ae0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aec:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	dd09      	ble.n	8002b16 <SpiritRadioInit+0x2a2>
 8002b02:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b0a:	edc7 7a00 	vstr	s15, [r7]
 8002b0e:	783b      	ldrb	r3, [r7, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	e006      	b.n	8002b24 <SpiritRadioInit+0x2b0>
 8002b16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b1e:	edc7 7a00 	vstr	s15, [r7]
 8002b22:	783b      	ldrb	r3, [r7, #0]
 8002b24:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002b26:	f107 030f 	add.w	r3, r7, #15
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	2007      	movs	r0, #7
 8002b30:	f001 fa30 	bl	8003f94 <RadioSpiWriteRegisters>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <SpiritRadioInit+0x2f8>)
 8002b38:	b212      	sxth	r2, r2
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	7019      	strb	r1, [r3, #0]
 8002b3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b42:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002b44:	4b0a      	ldr	r3, [pc, #40]	@ (8002b70 <SpiritRadioInit+0x2fc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0e      	ldr	r2, [pc, #56]	@ (8002b84 <SpiritRadioInit+0x310>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d91e      	bls.n	8002b8c <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002b4e:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <SpiritRadioInit+0x2fc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a0d      	ldr	r2, [pc, #52]	@ (8002b88 <SpiritRadioInit+0x314>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bf8c      	ite	hi
 8002b58:	2301      	movhi	r3, #1
 8002b5a:	2300      	movls	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f86c 	bl	8002c3c <SpiritRadioSetXtalFlag>
 8002b64:	e01d      	b.n	8002ba2 <SpiritRadioInit+0x32e>
 8002b66:	bf00      	nop
 8002b68:	49742400 	.word	0x49742400
 8002b6c:	20000168 	.word	0x20000168
 8002b70:	20000164 	.word	0x20000164
 8002b74:	01c9c37f 	.word	0x01c9c37f
 8002b78:	48800000 	.word	0x48800000
 8002b7c:	49afd520 	.word	0x49afd520
 8002b80:	42800000 	.word	0x42800000
 8002b84:	01c9c380 	.word	0x01c9c380
 8002b88:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002b8c:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <SpiritRadioInit+0x3bc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a28      	ldr	r2, [pc, #160]	@ (8002c34 <SpiritRadioInit+0x3c0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	bf8c      	ite	hi
 8002b96:	2301      	movhi	r3, #1
 8002b98:	2300      	movls	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f84d 	bl	8002c3c <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2101      	movs	r1, #1
 8002baa:	206c      	movs	r0, #108	@ 0x6c
 8002bac:	f001 f9f2 	bl	8003f94 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	200c      	movs	r0, #12
 8002bba:	f001 f9eb 	bl	8003f94 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002bbe:	f107 0318 	add.w	r3, r7, #24
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	201a      	movs	r0, #26
 8002bc8:	f001 f9e4 	bl	8003f94 <RadioSpiWriteRegisters>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b1a      	ldr	r3, [pc, #104]	@ (8002c38 <SpiritRadioInit+0x3c4>)
 8002bd0:	b212      	sxth	r2, r2
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	7019      	strb	r1, [r3, #0]
 8002bd6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bda:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f000 ff13 	bl	8003a08 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002be6:	23e3      	movs	r3, #227	@ 0xe3
 8002be8:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002bea:	f107 031c 	add.w	r3, r7, #28
 8002bee:	461a      	mov	r2, r3
 8002bf0:	2102      	movs	r1, #2
 8002bf2:	2099      	movs	r0, #153	@ 0x99
 8002bf4:	f001 f9ce 	bl	8003f94 <RadioSpiWriteRegisters>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002c38 <SpiritRadioInit+0x3c4>)
 8002bfc:	b212      	sxth	r2, r2
 8002bfe:	4611      	mov	r1, r2
 8002c00:	7019      	strb	r1, [r3, #0]
 8002c02:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c06:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002c08:	2322      	movs	r3, #34	@ 0x22
 8002c0a:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	461a      	mov	r2, r3
 8002c12:	2101      	movs	r1, #1
 8002c14:	20bc      	movs	r0, #188	@ 0xbc
 8002c16:	f001 f9bd 	bl	8003f94 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f9a8 	bl	8002f74 <SpiritRadioSetFrequencyBase>
 8002c24:	4603      	mov	r3, r0
  
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3730      	adds	r7, #48	@ 0x30
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000164 	.word	0x20000164
 8002c34:	017d783f 	.word	0x017d783f
 8002c38:	20000168 	.word	0x20000168

08002c3c <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002c4a:	f107 030f 	add.w	r3, r7, #15
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2101      	movs	r1, #1
 8002c52:	2001      	movs	r0, #1
 8002c54:	f001 f9ea 	bl	800402c <RadioSpiReadRegisters>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <SpiritRadioSetXtalFlag+0x70>)
 8002c5c:	b212      	sxth	r2, r2
 8002c5e:	4611      	mov	r1, r2
 8002c60:	7019      	strb	r1, [r3, #0]
 8002c62:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c66:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	73fb      	strb	r3, [r7, #15]
 8002c78:	e004      	b.n	8002c84 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002c84:	f107 030f 	add.w	r3, r7, #15
 8002c88:	461a      	mov	r2, r3
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f001 f981 	bl	8003f94 <RadioSpiWriteRegisters>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <SpiritRadioSetXtalFlag+0x70>)
 8002c96:	b212      	sxth	r2, r2
 8002c98:	4611      	mov	r1, r2
 8002c9a:	7019      	strb	r1, [r3, #0]
 8002c9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ca0:	705a      	strb	r2, [r3, #1]
  
}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000168 	.word	0x20000168

08002cb0 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8002db0 <SpiritRadioSearchWCP+0x100>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d306      	bcc.n	8002cda <SpiritRadioSearchWCP+0x2a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a39      	ldr	r2, [pc, #228]	@ (8002db4 <SpiritRadioSearchWCP+0x104>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d802      	bhi.n	8002cda <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002cd4:	2306      	movs	r3, #6
 8002cd6:	73bb      	strb	r3, [r7, #14]
 8002cd8:	e01f      	b.n	8002d1a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a36      	ldr	r2, [pc, #216]	@ (8002db8 <SpiritRadioSearchWCP+0x108>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d906      	bls.n	8002cf0 <SpiritRadioSearchWCP+0x40>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a35      	ldr	r2, [pc, #212]	@ (8002dbc <SpiritRadioSearchWCP+0x10c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d802      	bhi.n	8002cf0 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002cea:	230c      	movs	r3, #12
 8002cec:	73bb      	strb	r3, [r7, #14]
 8002cee:	e014      	b.n	8002d1a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a33      	ldr	r2, [pc, #204]	@ (8002dc0 <SpiritRadioSearchWCP+0x110>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d906      	bls.n	8002d06 <SpiritRadioSearchWCP+0x56>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a32      	ldr	r2, [pc, #200]	@ (8002dc4 <SpiritRadioSearchWCP+0x114>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d802      	bhi.n	8002d06 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002d00:	2310      	movs	r3, #16
 8002d02:	73bb      	strb	r3, [r7, #14]
 8002d04:	e009      	b.n	8002d1a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc8 <SpiritRadioSearchWCP+0x118>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d905      	bls.n	8002d1a <SpiritRadioSearchWCP+0x6a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a2e      	ldr	r2, [pc, #184]	@ (8002dcc <SpiritRadioSearchWCP+0x11c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d801      	bhi.n	8002d1a <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002d16:	2320      	movs	r3, #32
 8002d18:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd0 <SpiritRadioSearchWCP+0x120>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	099b      	lsrs	r3, r3, #6
 8002d24:	7bba      	ldrb	r2, [r7, #14]
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002d2c:	f241 631f 	movw	r3, #5663	@ 0x161f
 8002d30:	461a      	mov	r2, r3
 8002d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d302      	bcc.n	8002d46 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002d40:	230f      	movs	r3, #15
 8002d42:	73fb      	strb	r3, [r7, #15]
 8002d44:	e023      	b.n	8002d8e <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
 8002d4a:	e005      	b.n	8002d58 <SpiritRadioSearchWCP+0xa8>
 8002d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5c:	2b0e      	cmp	r3, #14
 8002d5e:	dc0c      	bgt.n	8002d7a <SpiritRadioSearchWCP+0xca>
 8002d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d64:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd4 <SpiritRadioSearchWCP+0x124>)
 8002d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d8e8      	bhi.n	8002d4c <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <SpiritRadioSearchWCP+0xde>
      i--;
 8002d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	425a      	negs	r2, r3
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	f002 0207 	and.w	r2, r2, #7
 8002d9c:	bf58      	it	pl
 8002d9e:	4253      	negpl	r3, r2
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	b2db      	uxtb	r3, r3
  
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	2e5f5680 	.word	0x2e5f5680
 8002db4:	390c2fe0 	.word	0x390c2fe0
 8002db8:	1701e47f 	.word	0x1701e47f
 8002dbc:	1c146a60 	.word	0x1c146a60
 8002dc0:	11d260bf 	.word	0x11d260bf
 8002dc4:	14ced7e0 	.word	0x14ced7e0
 8002dc8:	08e18f3f 	.word	0x08e18f3f
 8002dcc:	0a6fd060 	.word	0x0a6fd060
 8002dd0:	10624dd3 	.word	0x10624dd3
 8002dd4:	08009c98 	.word	0x08009c98

08002dd8 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	461a      	mov	r2, r3
 8002de2:	2104      	movs	r1, #4
 8002de4:	2008      	movs	r0, #8
 8002de6:	f001 f921 	bl	800402c <RadioSpiReadRegisters>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b0c      	ldr	r3, [pc, #48]	@ (8002e20 <SpiritRadioGetSynthWord+0x48>)
 8002dee:	b212      	sxth	r2, r2
 8002df0:	4611      	mov	r1, r2
 8002df2:	7019      	strb	r1, [r3, #0]
 8002df4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002df8:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002dfa:	793b      	ldrb	r3, [r7, #4]
 8002dfc:	055b      	lsls	r3, r3, #21
 8002dfe:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 8002e02:	797b      	ldrb	r3, [r7, #5]
 8002e04:	035b      	lsls	r3, r3, #13
 8002e06:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002e08:	79bb      	ldrb	r3, [r7, #6]
 8002e0a:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002e0c:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002e0e:	79fa      	ldrb	r2, [r7, #7]
 8002e10:	08d2      	lsrs	r2, r2, #3
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	4413      	add	r3, r2
  
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000168 	.word	0x20000168

08002e24 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002e2a:	1dfb      	adds	r3, r7, #7
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	2101      	movs	r1, #1
 8002e30:	200b      	movs	r0, #11
 8002e32:	f001 f8fb 	bl	800402c <RadioSpiReadRegisters>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b10      	ldr	r3, [pc, #64]	@ (8002e7c <SpiritRadioGetBand+0x58>)
 8002e3a:	b212      	sxth	r2, r2
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	7019      	strb	r1, [r3, #0]
 8002e40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e44:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e00e      	b.n	8002e72 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d101      	bne.n	8002e62 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e007      	b.n	8002e72 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	2b04      	cmp	r3, #4
 8002e6a:	d101      	bne.n	8002e70 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e000      	b.n	8002e72 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002e70:	2303      	movs	r3, #3
  }
  
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000168 	.word	0x20000168

08002e80 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8002e86:	1dfb      	adds	r3, r7, #7
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	206c      	movs	r0, #108	@ 0x6c
 8002e8e:	f001 f8cd 	bl	800402c <RadioSpiReadRegisters>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b05      	ldr	r3, [pc, #20]	@ (8002eac <SpiritRadioGetChannel+0x2c>)
 8002e96:	b212      	sxth	r2, r2
 8002e98:	4611      	mov	r1, r2
 8002e9a:	7019      	strb	r1, [r3, #0]
 8002e9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ea0:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000168 	.word	0x20000168

08002eb0 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2101      	movs	r1, #1
 8002ebc:	200c      	movs	r0, #12
 8002ebe:	f001 f8b5 	bl	800402c <RadioSpiReadRegisters>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <SpiritRadioGetChannelSpace+0x38>)
 8002ec6:	b212      	sxth	r2, r2
 8002ec8:	4611      	mov	r1, r2
 8002eca:	7019      	strb	r1, [r3, #0]
 8002ecc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ed0:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <SpiritRadioGetChannelSpace+0x3c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	0bdb      	lsrs	r3, r3, #15
  
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000168 	.word	0x20000168
 8002eec:	20000164 	.word	0x20000164

08002ef0 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2102      	movs	r1, #2
 8002efc:	200e      	movs	r0, #14
 8002efe:	f001 f895 	bl	800402c <RadioSpiReadRegisters>
 8002f02:	4602      	mov	r2, r0
 8002f04:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <SpiritRadioGetFrequencyOffset+0x7c>)
 8002f06:	b212      	sxth	r2, r2
 8002f08:	4611      	mov	r1, r2
 8002f0a:	7019      	strb	r1, [r3, #0]
 8002f0c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f10:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8002f12:	793b      	ldrb	r3, [r7, #4]
 8002f14:	021b      	lsls	r3, r3, #8
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	797a      	ldrb	r2, [r7, #5]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8002f20:	887b      	ldrh	r3, [r7, #2]
 8002f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <SpiritRadioGetFrequencyOffset+0x4a>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002f30:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	807b      	strh	r3, [r7, #2]
 8002f38:	e004      	b.n	8002f44 <SpiritRadioGetFrequencyOffset+0x54>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8002f44:	1cbb      	adds	r3, r7, #2
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8002f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4e:	4a08      	ldr	r2, [pc, #32]	@ (8002f70 <SpiritRadioGetFrequencyOffset+0x80>)
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	da03      	bge.n	8002f62 <SpiritRadioGetFrequencyOffset+0x72>
 8002f5a:	f503 337f 	add.w	r3, r3, #261120	@ 0x3fc00
 8002f5e:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002f62:	149b      	asrs	r3, r3, #18
  
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000168 	.word	0x20000168
 8002f70:	20000164 	.word	0x20000164

08002f74 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8002f74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f78:	b08a      	sub	sp, #40	@ 0x28
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a79      	ldr	r2, [pc, #484]	@ (800316c <SpiritRadioSetFrequencyBase+0x1f8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d307      	bcc.n	8002f9c <SpiritRadioSetFrequencyBase+0x28>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a78      	ldr	r2, [pc, #480]	@ (8003170 <SpiritRadioSetFrequencyBase+0x1fc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d803      	bhi.n	8002f9c <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002f9a:	e022      	b.n	8002fe2 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a75      	ldr	r2, [pc, #468]	@ (8003174 <SpiritRadioSetFrequencyBase+0x200>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d907      	bls.n	8002fb4 <SpiritRadioSetFrequencyBase+0x40>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a74      	ldr	r2, [pc, #464]	@ (8003178 <SpiritRadioSetFrequencyBase+0x204>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d803      	bhi.n	8002fb4 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fb2:	e016      	b.n	8002fe2 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a71      	ldr	r2, [pc, #452]	@ (800317c <SpiritRadioSetFrequencyBase+0x208>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d907      	bls.n	8002fcc <SpiritRadioSetFrequencyBase+0x58>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a70      	ldr	r2, [pc, #448]	@ (8003180 <SpiritRadioSetFrequencyBase+0x20c>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d803      	bhi.n	8002fcc <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002fca:	e00a      	b.n	8002fe2 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a6d      	ldr	r2, [pc, #436]	@ (8003184 <SpiritRadioSetFrequencyBase+0x210>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d906      	bls.n	8002fe2 <SpiritRadioSetFrequencyBase+0x6e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a6c      	ldr	r2, [pc, #432]	@ (8003188 <SpiritRadioSetFrequencyBase+0x214>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d802      	bhi.n	8002fe2 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002fe2:	f7ff ff85 	bl	8002ef0 <SpiritRadioGetFrequencyOffset>
 8002fe6:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002fe8:	f7ff ff62 	bl	8002eb0 <SpiritRadioGetChannelSpace>
 8002fec:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002fee:	f7ff ff47 	bl	8002e80 <SpiritRadioGetChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	441a      	add	r2, r3
 8002ffc:	7efb      	ldrb	r3, [r7, #27]
 8002ffe:	69f9      	ldr	r1, [r7, #28]
 8003000:	fb01 f303 	mul.w	r3, r1, r3
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003008:	f000 fd60 	bl	8003acc <SpiritRadioGetRefDiv>
 800300c:	4603      	mov	r3, r0
 800300e:	3301      	adds	r3, #1
 8003010:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8003012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003016:	2b03      	cmp	r3, #3
 8003018:	d839      	bhi.n	800308e <SpiritRadioSetFrequencyBase+0x11a>
 800301a:	a201      	add	r2, pc, #4	@ (adr r2, 8003020 <SpiritRadioSetFrequencyBase+0xac>)
 800301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003020:	08003079 	.word	0x08003079
 8003024:	08003061 	.word	0x08003061
 8003028:	08003049 	.word	0x08003049
 800302c:	08003031 	.word	0x08003031
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	4a56      	ldr	r2, [pc, #344]	@ (800318c <SpiritRadioSetFrequencyBase+0x218>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d803      	bhi.n	8003040 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fe fdb9 	bl	8001bb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800303e:	e026      	b.n	800308e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003040:	2001      	movs	r0, #1
 8003042:	f7fe fdb5 	bl	8001bb0 <SpiritCalibrationSelectVco>
    break;
 8003046:	e022      	b.n	800308e <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4a51      	ldr	r2, [pc, #324]	@ (8003190 <SpiritRadioSetFrequencyBase+0x21c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d803      	bhi.n	8003058 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003050:	2000      	movs	r0, #0
 8003052:	f7fe fdad 	bl	8001bb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003056:	e01a      	b.n	800308e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003058:	2001      	movs	r0, #1
 800305a:	f7fe fda9 	bl	8001bb0 <SpiritCalibrationSelectVco>
    break;
 800305e:	e016      	b.n	800308e <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	4a4c      	ldr	r2, [pc, #304]	@ (8003194 <SpiritRadioSetFrequencyBase+0x220>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d803      	bhi.n	8003070 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003068:	2000      	movs	r0, #0
 800306a:	f7fe fda1 	bl	8001bb0 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800306e:	e00e      	b.n	800308e <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003070:	2001      	movs	r0, #1
 8003072:	f7fe fd9d 	bl	8001bb0 <SpiritCalibrationSelectVco>
    break;
 8003076:	e00a      	b.n	800308e <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	4a47      	ldr	r2, [pc, #284]	@ (8003198 <SpiritRadioSetFrequencyBase+0x224>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d803      	bhi.n	8003088 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003080:	2000      	movs	r0, #0
 8003082:	f7fe fd95 	bl	8001bb0 <SpiritCalibrationSelectVco>
 8003086:	e002      	b.n	800308e <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003088:	2001      	movs	r0, #1
 800308a:	f7fe fd91 	bl	8001bb0 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7ff fe0e 	bl	8002cb0 <SpiritRadioSearchWCP>
 8003094:	4603      	mov	r3, r0
 8003096:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800309c:	4a3f      	ldr	r2, [pc, #252]	@ (800319c <SpiritRadioSetFrequencyBase+0x228>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	461a      	mov	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fd f9d3 	bl	8000454 <__aeabi_ui2d>
 80030ae:	4604      	mov	r4, r0
 80030b0:	460d      	mov	r5, r1
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	049b      	lsls	r3, r3, #18
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd f9dc 	bl	8000474 <__aeabi_i2d>
 80030bc:	4680      	mov	r8, r0
 80030be:	4689      	mov	r9, r1
 80030c0:	4b37      	ldr	r3, [pc, #220]	@ (80031a0 <SpiritRadioSetFrequencyBase+0x22c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd f9c5 	bl	8000454 <__aeabi_ui2d>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4640      	mov	r0, r8
 80030d0:	4649      	mov	r1, r9
 80030d2:	f7fd fb63 	bl	800079c <__aeabi_ddiv>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4620      	mov	r0, r4
 80030dc:	4629      	mov	r1, r5
 80030de:	f7fd fa33 	bl	8000548 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	f7fd fc3f 	bl	800096c <__aeabi_d2uiz>
 80030ee:	4603      	mov	r3, r0
 80030f0:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	0d5b      	lsrs	r3, r3, #21
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	7cbb      	ldrb	r3, [r7, #18]
 8003100:	015b      	lsls	r3, r3, #5
 8003102:	b2db      	uxtb	r3, r3
 8003104:	4313      	orrs	r3, r2
 8003106:	b2db      	uxtb	r3, r3
 8003108:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	0b5b      	lsrs	r3, r3, #13
 800310e:	b2db      	uxtb	r3, r3
 8003110:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	b2db      	uxtb	r3, r3
 8003118:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	b2da      	uxtb	r2, r3
 8003122:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003126:	491f      	ldr	r1, [pc, #124]	@ (80031a4 <SpiritRadioSetFrequencyBase+0x230>)
 8003128:	5ccb      	ldrb	r3, [r1, r3]
 800312a:	4313      	orrs	r3, r2
 800312c:	b2db      	uxtb	r3, r3
 800312e:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8003130:	f107 0308 	add.w	r3, r7, #8
 8003134:	461a      	mov	r2, r3
 8003136:	2104      	movs	r1, #4
 8003138:	2008      	movs	r0, #8
 800313a:	f000 ff2b 	bl	8003f94 <RadioSpiWriteRegisters>
 800313e:	4602      	mov	r2, r0
 8003140:	4b19      	ldr	r3, [pc, #100]	@ (80031a8 <SpiritRadioSetFrequencyBase+0x234>)
 8003142:	b212      	sxth	r2, r2
 8003144:	4611      	mov	r1, r2
 8003146:	7019      	strb	r1, [r3, #0]
 8003148:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800314c:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 800314e:	4b17      	ldr	r3, [pc, #92]	@ (80031ac <SpiritRadioSetFrequencyBase+0x238>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d103      	bne.n	800315e <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8003156:	f7fe ff6f 	bl	8002038 <SpiritManagementWaVcoCalibration>
 800315a:	4603      	mov	r3, r0
 800315c:	e000      	b.n	8003160 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3728      	adds	r7, #40	@ 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800316a:	bf00      	nop
 800316c:	2e5f5680 	.word	0x2e5f5680
 8003170:	390c2fe0 	.word	0x390c2fe0
 8003174:	1701e47f 	.word	0x1701e47f
 8003178:	1c146a60 	.word	0x1c146a60
 800317c:	11d260bf 	.word	0x11d260bf
 8003180:	14ced7e0 	.word	0x14ced7e0
 8003184:	08e18f3f 	.word	0x08e18f3f
 8003188:	0a6fd060 	.word	0x0a6fd060
 800318c:	099cf4e1 	.word	0x099cf4e1
 8003190:	1339e9c3 	.word	0x1339e9c3
 8003194:	19a28d05 	.word	0x19a28d05
 8003198:	33451a0a 	.word	0x33451a0a
 800319c:	08009bdc 	.word	0x08009bdc
 80031a0:	20000164 	.word	0x20000164
 80031a4:	08009be0 	.word	0x08009be0
 80031a8:	20000168 	.word	0x20000168
 80031ac:	20000005 	.word	0x20000005

080031b0 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 80031b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 80031b8:	f7ff fe0e 	bl	8002dd8 <SpiritRadioGetSynthWord>
 80031bc:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 80031be:	f7ff fe31 	bl	8002e24 <SpiritRadioGetBand>
 80031c2:	4603      	mov	r3, r0
 80031c4:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 80031c6:	f000 fc81 	bl	8003acc <SpiritRadioGetRefDiv>
 80031ca:	4603      	mov	r3, r0
 80031cc:	3301      	adds	r3, #1
 80031ce:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7fd f93f 	bl	8000454 <__aeabi_ui2d>
 80031d6:	4604      	mov	r4, r0
 80031d8:	460d      	mov	r5, r1
 80031da:	4b19      	ldr	r3, [pc, #100]	@ (8003240 <SpiritRadioGetFrequencyBase+0x90>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f938 	bl	8000454 <__aeabi_ui2d>
 80031e4:	4680      	mov	r8, r0
 80031e6:	4689      	mov	r9, r1
 80031e8:	78bb      	ldrb	r3, [r7, #2]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	4915      	ldr	r1, [pc, #84]	@ (8003244 <SpiritRadioGetFrequencyBase+0x94>)
 80031ee:	5c8a      	ldrb	r2, [r1, r2]
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	049b      	lsls	r3, r3, #18
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f93c 	bl	8000474 <__aeabi_i2d>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4640      	mov	r0, r8
 8003202:	4649      	mov	r1, r9
 8003204:	f7fd faca 	bl	800079c <__aeabi_ddiv>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4620      	mov	r0, r4
 800320e:	4629      	mov	r1, r5
 8003210:	f7fd f99a 	bl	8000548 <__aeabi_dmul>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	ec43 2b17 	vmov	d7, r2, r3
 800321c:	eeb0 0a47 	vmov.f32	s0, s14
 8003220:	eef0 0a67 	vmov.f32	s1, s15
 8003224:	f006 fc38 	bl	8009a98 <round>
 8003228:	ec53 2b10 	vmov	r2, r3, d0
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f7fd fb9c 	bl	800096c <__aeabi_d2uiz>
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003240:	20000164 	.word	0x20000164
 8003244:	08009bdc 	.word	0x08009bdc

08003248 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003254:	2300      	movs	r3, #0
 8003256:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003258:	230f      	movs	r3, #15
 800325a:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003260:	f000 fc86 	bl	8003b70 <SpiritRadioGetDigDiv>
 8003264:	4603      	mov	r3, r0
 8003266:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003268:	e015      	b.n	8003296 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 800326a:	4b4f      	ldr	r3, [pc, #316]	@ (80033a8 <SpiritRadioSearchDatarateME+0x160>)
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003272:	f1c3 0114 	rsb	r1, r3, #20
 8003276:	7ebb      	ldrb	r3, [r7, #26]
 8003278:	440b      	add	r3, r1
 800327a:	fa22 f303 	lsr.w	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d302      	bcc.n	800328a <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8003284:	2301      	movs	r3, #1
 8003286:	763b      	strb	r3, [r7, #24]
 8003288:	e005      	b.n	8003296 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 800328a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8003296:	7e3b      	ldrb	r3, [r7, #24]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <SpiritRadioSearchDatarateME+0x5e>
 800329e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	dae1      	bge.n	800326a <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 80032a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	da01      	bge.n	80032b2 <SpiritRadioSearchDatarateME+0x6a>
 80032ae:	2300      	movs	r3, #0
 80032b0:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 80032b2:	7ffa      	ldrb	r2, [r7, #31]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 80032b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80032bc:	f1c3 0317 	rsb	r3, r3, #23
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	409a      	lsls	r2, r3
 80032c4:	4b38      	ldr	r3, [pc, #224]	@ (80033a8 <SpiritRadioSearchDatarateME+0x160>)
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	7ebb      	ldrb	r3, [r7, #26]
 80032ca:	3305      	adds	r3, #5
 80032cc:	fa21 f303 	lsr.w	r3, r1, r3
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 80032d6:	2300      	movs	r3, #0
 80032d8:	77bb      	strb	r3, [r7, #30]
 80032da:	e031      	b.n	8003340 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 80032dc:	7e7a      	ldrb	r2, [r7, #25]
 80032de:	7fbb      	ldrb	r3, [r7, #30]
 80032e0:	4413      	add	r3, r2
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d021      	beq.n	800332a <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	7e7b      	ldrb	r3, [r7, #25]
 80032ec:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 80032f0:	7fbb      	ldrb	r3, [r7, #30]
 80032f2:	440b      	add	r3, r1
 80032f4:	3b01      	subs	r3, #1
 80032f6:	4618      	mov	r0, r3
 80032f8:	4b2b      	ldr	r3, [pc, #172]	@ (80033a8 <SpiritRadioSearchDatarateME+0x160>)
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	7ebb      	ldrb	r3, [r7, #26]
 80032fe:	3305      	adds	r3, #5
 8003300:	fa21 f303 	lsr.w	r3, r1, r3
 8003304:	fb03 f100 	mul.w	r1, r3, r0
 8003308:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800330c:	f1c3 0317 	rsb	r3, r3, #23
 8003310:	fa21 f303 	lsr.w	r3, r1, r3
 8003314:	b29b      	uxth	r3, r3
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	b29a      	uxth	r2, r3
 800331a:	7fbb      	ldrb	r3, [r7, #30]
 800331c:	b212      	sxth	r2, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	3320      	adds	r3, #32
 8003322:	443b      	add	r3, r7
 8003324:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003328:	e007      	b.n	800333a <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800332a:	7fbb      	ldrb	r3, [r7, #30]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	3320      	adds	r3, #32
 8003330:	443b      	add	r3, r7
 8003332:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003336:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 800333a:	7fbb      	ldrb	r3, [r7, #30]
 800333c:	3301      	adds	r3, #1
 800333e:	77bb      	strb	r3, [r7, #30]
 8003340:	7fbb      	ldrb	r3, [r7, #30]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d9ca      	bls.n	80032dc <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003346:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800334a:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 800334c:	2300      	movs	r3, #0
 800334e:	76fb      	strb	r3, [r7, #27]
 8003350:	e021      	b.n	8003396 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003352:	7efb      	ldrb	r3, [r7, #27]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	3320      	adds	r3, #32
 8003358:	443b      	add	r3, r7
 800335a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	bfb8      	it	lt
 8003362:	425b      	neglt	r3, r3
 8003364:	b29b      	uxth	r3, r3
 8003366:	8bba      	ldrh	r2, [r7, #28]
 8003368:	429a      	cmp	r2, r3
 800336a:	d911      	bls.n	8003390 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 800336c:	7efb      	ldrb	r3, [r7, #27]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	3320      	adds	r3, #32
 8003372:	443b      	add	r3, r7
 8003374:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	bfb8      	it	lt
 800337c:	425b      	neglt	r3, r3
 800337e:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003380:	7e7a      	ldrb	r2, [r7, #25]
 8003382:	7efb      	ldrb	r3, [r7, #27]
 8003384:	4413      	add	r3, r2
 8003386:	b2db      	uxtb	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003390:	7efb      	ldrb	r3, [r7, #27]
 8003392:	3301      	adds	r3, #1
 8003394:	76fb      	strb	r3, [r7, #27]
 8003396:	7efb      	ldrb	r3, [r7, #27]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d9da      	bls.n	8003352 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000164 	.word	0x20000164

080033ac <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	@ 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 80033be:	f000 fbd7 	bl	8003b70 <SpiritRadioGetDigDiv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 80033c8:	2302      	movs	r3, #2
 80033ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80033ce:	e002      	b.n	80033d6 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 80033d6:	4b63      	ldr	r3, [pc, #396]	@ (8003564 <SpiritRadioSearchChannelBwME+0x1b8>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80033de:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e2:	4a61      	ldr	r2, [pc, #388]	@ (8003568 <SpiritRadioSearchChannelBwME+0x1bc>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80033f2:	e006      	b.n	8003402 <SpiritRadioSearchChannelBwME+0x56>
 80033f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003402:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003406:	2b59      	cmp	r3, #89	@ 0x59
 8003408:	dc0f      	bgt.n	800342a <SpiritRadioSearchChannelBwME+0x7e>
 800340a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800340e:	4a57      	ldr	r2, [pc, #348]	@ (800356c <SpiritRadioSearchChannelBwME+0x1c0>)
 8003410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003414:	461a      	mov	r2, r3
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	fb02 f303 	mul.w	r3, r2, r3
 800341c:	4a54      	ldr	r2, [pc, #336]	@ (8003570 <SpiritRadioSearchChannelBwME+0x1c4>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0adb      	lsrs	r3, r3, #11
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	429a      	cmp	r2, r3
 8003428:	d3e4      	bcc.n	80033f4 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 800342a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800342e:	2b00      	cmp	r3, #0
 8003430:	d077      	beq.n	8003522 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003432:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003436:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800343e:	e03a      	b.n	80034b6 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003440:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003444:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003448:	4413      	add	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	dc06      	bgt.n	800345c <SpiritRadioSearchChannelBwME+0xb0>
 800344e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003452:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003456:	4413      	add	r3, r2
 8003458:	2b5a      	cmp	r3, #90	@ 0x5a
 800345a:	dc1e      	bgt.n	800349a <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	b29a      	uxth	r2, r3
 8003460:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003464:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003468:	440b      	add	r3, r1
 800346a:	3b01      	subs	r3, #1
 800346c:	493f      	ldr	r1, [pc, #252]	@ (800356c <SpiritRadioSearchChannelBwME+0x1c0>)
 800346e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003472:	4619      	mov	r1, r3
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	493d      	ldr	r1, [pc, #244]	@ (8003570 <SpiritRadioSearchChannelBwME+0x1c4>)
 800347c:	fba1 1303 	umull	r1, r3, r1, r3
 8003480:	0adb      	lsrs	r3, r3, #11
 8003482:	b29b      	uxth	r3, r3
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	b29a      	uxth	r2, r3
 8003488:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800348c:	b212      	sxth	r2, r2
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	3328      	adds	r3, #40	@ 0x28
 8003492:	443b      	add	r3, r7
 8003494:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003498:	e008      	b.n	80034ac <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 800349a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	3328      	adds	r3, #40	@ 0x28
 80034a2:	443b      	add	r3, r7
 80034a4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80034a8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 80034ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034b0:	3301      	adds	r3, #1
 80034b2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80034b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d9c0      	bls.n	8003440 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 80034be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034c2:	847b      	strh	r3, [r7, #34]	@ 0x22
    
    for(uint8_t j=0;j<3;j++)
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80034ca:	e026      	b.n	800351a <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 80034cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	3328      	adds	r3, #40	@ 0x28
 80034d4:	443b      	add	r3, r7
 80034d6:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bfb8      	it	lt
 80034de:	425b      	neglt	r3, r3
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d913      	bls.n	8003510 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 80034e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	3328      	adds	r3, #40	@ 0x28
 80034f0:	443b      	add	r3, r7
 80034f2:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bfb8      	it	lt
 80034fa:	425b      	neglt	r3, r3
 80034fc:	847b      	strh	r3, [r7, #34]	@ 0x22
        i=i_tmp+j-1;
 80034fe:	7efa      	ldrb	r2, [r7, #27]
 8003500:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003504:	4413      	add	r3, r2
 8003506:	b2db      	uxtb	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for(uint8_t j=0;j<3;j++)
 8003510:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003514:	3301      	adds	r3, #1
 8003516:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800351a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800351e:	2b02      	cmp	r3, #2
 8003520:	d9d4      	bls.n	80034cc <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003522:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003526:	4a13      	ldr	r2, [pc, #76]	@ (8003574 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003528:	fb82 1203 	smull	r1, r2, r2, r3
 800352c:	1052      	asrs	r2, r2, #1
 800352e:	17db      	asrs	r3, r3, #31
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	b25b      	sxtb	r3, r3
 8003534:	b2da      	uxtb	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 800353a:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 800353e:	4b0d      	ldr	r3, [pc, #52]	@ (8003574 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003540:	fb83 1302 	smull	r1, r3, r3, r2
 8003544:	1059      	asrs	r1, r3, #1
 8003546:	17d3      	asrs	r3, r2, #31
 8003548:	1ac9      	subs	r1, r1, r3
 800354a:	460b      	mov	r3, r1
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	b25b      	sxtb	r3, r3
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	701a      	strb	r2, [r3, #0]
  
}
 800355a:	bf00      	nop
 800355c:	3728      	adds	r7, #40	@ 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000164 	.word	0x20000164
 8003568:	51eb851f 	.word	0x51eb851f
 800356c:	08009be4 	.word	0x08009be4
 8003570:	c9a633fd 	.word	0xc9a633fd
 8003574:	38e38e39 	.word	0x38e38e39

08003578 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003578:	b5b0      	push	{r4, r5, r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003584:	2300      	movs	r3, #0
 8003586:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003588:	4b53      	ldr	r3, [pc, #332]	@ (80036d8 <SpiritRadioSearchFreqDevME+0x160>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003594:	eddf 6a51 	vldr	s13, [pc, #324]	@ 80036dc <SpiritRadioSearchFreqDevME+0x164>
 8003598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800359c:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80035a6:	e028      	b.n	80035fa <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 80035a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035ac:	2201      	movs	r2, #1
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fc ff5e 	bl	8000474 <__aeabi_i2d>
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	4b48      	ldr	r3, [pc, #288]	@ (80036e0 <SpiritRadioSearchFreqDevME+0x168>)
 80035be:	f7fc ffc3 	bl	8000548 <__aeabi_dmul>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4610      	mov	r0, r2
 80035c8:	4619      	mov	r1, r3
 80035ca:	f7fd f9cf 	bl	800096c <__aeabi_d2uiz>
 80035ce:	ee07 0a90 	vmov	s15, r0
 80035d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e2:	ee17 3a90 	vmov	r3, s15
 80035e6:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d309      	bcc.n	8003604 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 80035f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035f4:	3301      	adds	r3, #1
 80035f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80035fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035fe:	2b09      	cmp	r3, #9
 8003600:	d9d2      	bls.n	80035a8 <SpiritRadioSearchFreqDevME+0x30>
 8003602:	e000      	b.n	8003606 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003604:	bf00      	nop
  }
  (*pcE) = i;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800360c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 800360e:	2300      	movs	r3, #0
 8003610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003614:	e043      	b.n	800369e <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 800361a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc ff28 	bl	8000474 <__aeabi_i2d>
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	4b2e      	ldr	r3, [pc, #184]	@ (80036e4 <SpiritRadioSearchFreqDevME+0x16c>)
 800362a:	f7fc fdd7 	bl	80001dc <__adddf3>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800363e:	f7fd f8ad 	bl	800079c <__aeabi_ddiv>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4614      	mov	r4, r2
 8003648:	461d      	mov	r5, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	2301      	movs	r3, #1
 8003652:	4093      	lsls	r3, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff0d 	bl	8000474 <__aeabi_i2d>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4620      	mov	r0, r4
 8003660:	4629      	mov	r1, r5
 8003662:	f7fc ff71 	bl	8000548 <__aeabi_dmul>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	f7fd f97d 	bl	800096c <__aeabi_d2uiz>
 8003672:	ee07 0a90 	vmov	s15, r0
 8003676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800367a:	edd7 7a06 	vldr	s15, [r7, #24]
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003686:	ee17 3a90 	vmov	r3, s15
 800368a:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	429a      	cmp	r2, r3
 8003692:	d309      	bcc.n	80036a8 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003698:	3301      	adds	r3, #1
 800369a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800369e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036a2:	2b07      	cmp	r3, #7
 80036a4:	d9b7      	bls.n	8003616 <SpiritRadioSearchFreqDevME+0x9e>
 80036a6:	e000      	b.n	80036aa <SpiritRadioSearchFreqDevME+0x132>
      break;
 80036a8:	bf00      	nop
  }
  
  (*pcM)=i;
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80036b0:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	1ad2      	subs	r2, r2, r3
 80036b8:	69f9      	ldr	r1, [r7, #28]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1acb      	subs	r3, r1, r3
 80036be:	429a      	cmp	r2, r3
 80036c0:	d205      	bcs.n	80036ce <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	701a      	strb	r2, [r3, #0]
  
}
 80036ce:	bf00      	nop
 80036d0:	3728      	adds	r7, #40	@ 0x28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bdb0      	pop	{r4, r5, r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000164 	.word	0x20000164
 80036dc:	48800000 	.word	0x48800000
 80036e0:	401e0000 	.word	0x401e0000
 80036e4:	40200000 	.word	0x40200000

080036e8 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a74      	ldr	r2, [pc, #464]	@ (80038d0 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d30c      	bcc.n	800371e <SpiritRadioGetdBm2Reg+0x36>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a73      	ldr	r2, [pc, #460]	@ (80038d4 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d808      	bhi.n	800371e <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 800370c:	2300      	movs	r3, #0
 800370e:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4a71      	ldr	r2, [pc, #452]	@ (80038d8 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d822      	bhi.n	800375e <SpiritRadioGetdBm2Reg+0x76>
 8003718:	2301      	movs	r3, #1
 800371a:	75fb      	strb	r3, [r7, #23]
 800371c:	e01f      	b.n	800375e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4a6e      	ldr	r2, [pc, #440]	@ (80038dc <SpiritRadioGetdBm2Reg+0x1f4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d906      	bls.n	8003734 <SpiritRadioGetdBm2Reg+0x4c>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4a6d      	ldr	r2, [pc, #436]	@ (80038e0 <SpiritRadioGetdBm2Reg+0x1f8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d802      	bhi.n	8003734 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 800372e:	2302      	movs	r3, #2
 8003730:	75fb      	strb	r3, [r7, #23]
 8003732:	e014      	b.n	800375e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a6b      	ldr	r2, [pc, #428]	@ (80038e4 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d906      	bls.n	800374a <SpiritRadioGetdBm2Reg+0x62>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a6a      	ldr	r2, [pc, #424]	@ (80038e8 <SpiritRadioGetdBm2Reg+0x200>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d802      	bhi.n	800374a <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003744:	2303      	movs	r3, #3
 8003746:	75fb      	strb	r3, [r7, #23]
 8003748:	e009      	b.n	800375e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4a67      	ldr	r2, [pc, #412]	@ (80038ec <SpiritRadioGetdBm2Reg+0x204>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d905      	bls.n	800375e <SpiritRadioGetdBm2Reg+0x76>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a66      	ldr	r2, [pc, #408]	@ (80038f0 <SpiritRadioGetdBm2Reg+0x208>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d801      	bhi.n	800375e <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 800375a:	2304      	movs	r3, #4
 800375c:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 800375e:	2301      	movs	r3, #1
 8003760:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003762:	edd7 7a02 	vldr	s15, [r7, #8]
 8003766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800376a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376e:	dd2f      	ble.n	80037d0 <SpiritRadioGetdBm2Reg+0xe8>
 8003770:	7dfa      	ldrb	r2, [r7, #23]
 8003772:	4960      	ldr	r1, [pc, #384]	@ (80038f4 <SpiritRadioGetdBm2Reg+0x20c>)
 8003774:	4613      	mov	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	4413      	add	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	440b      	add	r3, r1
 800377e:	3308      	adds	r3, #8
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	eef2 6a0a 	vmov.f32	s13, #42	@ 0x41500000  13.0
 8003788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800378c:	7dfa      	ldrb	r2, [r7, #23]
 800378e:	4959      	ldr	r1, [pc, #356]	@ (80038f4 <SpiritRadioGetdBm2Reg+0x20c>)
 8003790:	4613      	mov	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4413      	add	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	440b      	add	r3, r1
 800379a:	330c      	adds	r3, #12
 800379c:	ed93 6a00 	vldr	s12, [r3]
 80037a0:	7dfa      	ldrb	r2, [r7, #23]
 80037a2:	4954      	ldr	r1, [pc, #336]	@ (80038f4 <SpiritRadioGetdBm2Reg+0x20c>)
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	440b      	add	r3, r1
 80037ae:	3308      	adds	r3, #8
 80037b0:	edd3 6a00 	vldr	s13, [r3]
 80037b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80037b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80037c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c8:	dd02      	ble.n	80037d0 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 80037ca:	2300      	movs	r3, #0
 80037cc:	75bb      	strb	r3, [r7, #22]
 80037ce:	e035      	b.n	800383c <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 80037d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037dc:	d82e      	bhi.n	800383c <SpiritRadioGetdBm2Reg+0x154>
 80037de:	7dfa      	ldrb	r2, [r7, #23]
 80037e0:	4944      	ldr	r1, [pc, #272]	@ (80038f4 <SpiritRadioGetdBm2Reg+0x20c>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	440b      	add	r3, r1
 80037ec:	3308      	adds	r3, #8
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80038f8 <SpiritRadioGetdBm2Reg+0x210>
 80037f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fa:	7dfa      	ldrb	r2, [r7, #23]
 80037fc:	493d      	ldr	r1, [pc, #244]	@ (80038f4 <SpiritRadioGetdBm2Reg+0x20c>)
 80037fe:	4613      	mov	r3, r2
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	4413      	add	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	440b      	add	r3, r1
 8003808:	330c      	adds	r3, #12
 800380a:	ed93 6a00 	vldr	s12, [r3]
 800380e:	7dfa      	ldrb	r2, [r7, #23]
 8003810:	4938      	ldr	r1, [pc, #224]	@ (80038f4 <SpiritRadioGetdBm2Reg+0x20c>)
 8003812:	4613      	mov	r3, r2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	440b      	add	r3, r1
 800381c:	3308      	adds	r3, #8
 800381e:	edd3 6a00 	vldr	s13, [r3]
 8003822:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800382a:	ed97 7a02 	vldr	s14, [r7, #8]
 800382e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003836:	d501      	bpl.n	800383c <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003838:	2302      	movs	r3, #2
 800383a:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 800383c:	7dfa      	ldrb	r2, [r7, #23]
 800383e:	7dbb      	ldrb	r3, [r7, #22]
 8003840:	0059      	lsls	r1, r3, #1
 8003842:	482c      	ldr	r0, [pc, #176]	@ (80038f4 <SpiritRadioGetdBm2Reg+0x20c>)
 8003844:	4613      	mov	r3, r2
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	440b      	add	r3, r1
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4403      	add	r3, r0
 8003852:	ed93 7a00 	vldr	s14, [r3]
 8003856:	edd7 7a02 	vldr	s15, [r7, #8]
 800385a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800385e:	7dfa      	ldrb	r2, [r7, #23]
 8003860:	7dbb      	ldrb	r3, [r7, #22]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	1c59      	adds	r1, r3, #1
 8003866:	4823      	ldr	r0, [pc, #140]	@ (80038f4 <SpiritRadioGetdBm2Reg+0x20c>)
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	440b      	add	r3, r1
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4403      	add	r3, r0
 8003876:	edd3 7a00 	vldr	s15, [r3]
 800387a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800387e:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003882:	edd7 7a04 	vldr	s15, [r7, #16]
 8003886:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800388a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	d503      	bpl.n	800389c <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003894:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	e00a      	b.n	80038b2 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 800389c:	edd7 7a04 	vldr	s15, [r7, #16]
 80038a0:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80038fc <SpiritRadioGetdBm2Reg+0x214>
 80038a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	dd01      	ble.n	80038b2 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 80038ae:	4b14      	ldr	r3, [pc, #80]	@ (8003900 <SpiritRadioGetdBm2Reg+0x218>)
 80038b0:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 80038b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80038b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80038be:	793b      	ldrb	r3, [r7, #4]
 80038c0:	b2db      	uxtb	r3, r3
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	2e5f5680 	.word	0x2e5f5680
 80038d4:	390c2fe0 	.word	0x390c2fe0
 80038d8:	35a4e8ff 	.word	0x35a4e8ff
 80038dc:	1701e47f 	.word	0x1701e47f
 80038e0:	1c146a60 	.word	0x1c146a60
 80038e4:	11d260bf 	.word	0x11d260bf
 80038e8:	14ced7e0 	.word	0x14ced7e0
 80038ec:	08e18f3f 	.word	0x08e18f3f
 80038f0:	0a6fd060 	.word	0x0a6fd060
 80038f4:	08009cb8 	.word	0x08009cb8
 80038f8:	42200000 	.word	0x42200000
 80038fc:	42b40000 	.word	0x42b40000
 8003900:	42b40000 	.word	0x42b40000

08003904 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	ed87 0a00 	vstr	s0, [r7]
 8003910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003912:	f7ff fc4d 	bl	80031b0 <SpiritRadioGetFrequencyBase>
 8003916:	4603      	mov	r3, r0
 8003918:	ed97 0a00 	vldr	s0, [r7]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff fee3 	bl	80036e8 <SpiritRadioGetdBm2Reg>
 8003922:	4603      	mov	r3, r0
 8003924:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f1c3 0317 	rsb	r3, r3, #23
 800392c:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 800392e:	f107 020e 	add.w	r2, r7, #14
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fb2c 	bl	8003f94 <RadioSpiWriteRegisters>
 800393c:	4602      	mov	r2, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	@ (8003954 <SpiritRadioSetPALeveldBm+0x50>)
 8003940:	b212      	sxth	r2, r2
 8003942:	4611      	mov	r1, r2
 8003944:	7019      	strb	r1, [r3, #0]
 8003946:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800394a:	705a      	strb	r2, [r3, #1]
  
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000168 	.word	0x20000168

08003958 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003962:	f107 030f 	add.w	r3, r7, #15
 8003966:	461a      	mov	r2, r3
 8003968:	2101      	movs	r1, #1
 800396a:	2018      	movs	r0, #24
 800396c:	f000 fb5e 	bl	800402c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003976:	b2db      	uxtb	r3, r3
 8003978:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	4313      	orrs	r3, r2
 8003980:	b2db      	uxtb	r3, r3
 8003982:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003984:	f107 030f 	add.w	r3, r7, #15
 8003988:	461a      	mov	r2, r3
 800398a:	2101      	movs	r1, #1
 800398c:	2018      	movs	r0, #24
 800398e:	f000 fb01 	bl	8003f94 <RadioSpiWriteRegisters>
 8003992:	4602      	mov	r2, r0
 8003994:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <SpiritRadioSetPACwc+0x54>)
 8003996:	b212      	sxth	r2, r2
 8003998:	4611      	mov	r1, r2
 800399a:	7019      	strb	r1, [r3, #0]
 800399c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039a0:	705a      	strb	r2, [r3, #1]
  
}
 80039a2:	bf00      	nop
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000168 	.word	0x20000168

080039b0 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	4603      	mov	r3, r0
 80039b8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80039ba:	f107 030f 	add.w	r3, r7, #15
 80039be:	461a      	mov	r2, r3
 80039c0:	2101      	movs	r1, #1
 80039c2:	2018      	movs	r0, #24
 80039c4:	f000 fb32 	bl	800402c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	f023 0307 	bic.w	r3, r3, #7
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80039dc:	f107 030f 	add.w	r3, r7, #15
 80039e0:	461a      	mov	r2, r3
 80039e2:	2101      	movs	r1, #1
 80039e4:	2018      	movs	r0, #24
 80039e6:	f000 fad5 	bl	8003f94 <RadioSpiWriteRegisters>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b05      	ldr	r3, [pc, #20]	@ (8003a04 <SpiritRadioSetPALevelMaxIndex+0x54>)
 80039ee:	b212      	sxth	r2, r2
 80039f0:	4611      	mov	r1, r2
 80039f2:	7019      	strb	r1, [r3, #0]
 80039f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039f8:	705a      	strb	r2, [r3, #1]
  
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000168 	.word	0x20000168

08003a08 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003a16:	f107 030f 	add.w	r3, r7, #15
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	201e      	movs	r0, #30
 8003a20:	f000 fb04 	bl	800402c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d105      	bne.n	8003a36 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	73fb      	strb	r3, [r7, #15]
 8003a34:	e004      	b.n	8003a40 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003a40:	f107 030f 	add.w	r3, r7, #15
 8003a44:	461a      	mov	r2, r3
 8003a46:	2101      	movs	r1, #1
 8003a48:	201e      	movs	r0, #30
 8003a4a:	f000 faa3 	bl	8003f94 <RadioSpiWriteRegisters>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003a52:	b212      	sxth	r2, r2
 8003a54:	4611      	mov	r1, r2
 8003a56:	7019      	strb	r1, [r3, #0]
 8003a58:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a5c:	705a      	strb	r2, [r3, #1]
  
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000168 	.word	0x20000168

08003a6c <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003a76:	f107 030f 	add.w	r3, r7, #15
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	209e      	movs	r0, #158	@ 0x9e
 8003a80:	f000 fad4 	bl	800402c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	73fb      	strb	r3, [r7, #15]
 8003a94:	e004      	b.n	8003aa0 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003aa0:	f107 030f 	add.w	r3, r7, #15
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	209e      	movs	r0, #158	@ 0x9e
 8003aaa:	f000 fa73 	bl	8003f94 <RadioSpiWriteRegisters>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <SpiritRadioSetRefDiv+0x5c>)
 8003ab2:	b212      	sxth	r2, r2
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	7019      	strb	r1, [r3, #0]
 8003ab8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003abc:	705a      	strb	r2, [r3, #1]
  
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000168 	.word	0x20000168

08003acc <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003ad2:	1dfb      	adds	r3, r7, #7
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	209e      	movs	r0, #158	@ 0x9e
 8003ada:	f000 faa7 	bl	800402c <RadioSpiReadRegisters>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8003b0c <SpiritRadioGetRefDiv+0x40>)
 8003ae2:	b212      	sxth	r2, r2
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	7019      	strb	r1, [r3, #0]
 8003ae8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003aec:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	09db      	lsrs	r3, r3, #7
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003b00:	2300      	movs	r3, #0
  }
  
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	20000168 	.word	0x20000168

08003b10 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003b1a:	f107 030f 	add.w	r3, r7, #15
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2101      	movs	r1, #1
 8003b22:	20b4      	movs	r0, #180	@ 0xb4
 8003b24:	f000 fa82 	bl	800402c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	f023 0308 	bic.w	r3, r3, #8
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	e004      	b.n	8003b44 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	f043 0308 	orr.w	r3, r3, #8
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003b44:	f107 030f 	add.w	r3, r7, #15
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	20b4      	movs	r0, #180	@ 0xb4
 8003b4e:	f000 fa21 	bl	8003f94 <RadioSpiWriteRegisters>
 8003b52:	4602      	mov	r2, r0
 8003b54:	4b05      	ldr	r3, [pc, #20]	@ (8003b6c <SpiritRadioSetDigDiv+0x5c>)
 8003b56:	b212      	sxth	r2, r2
 8003b58:	4611      	mov	r1, r2
 8003b5a:	7019      	strb	r1, [r3, #0]
 8003b5c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b60:	705a      	strb	r2, [r3, #1]
  
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000168 	.word	0x20000168

08003b70 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003b76:	1dfb      	adds	r3, r7, #7
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	20b4      	movs	r0, #180	@ 0xb4
 8003b7e:	f000 fa55 	bl	800402c <RadioSpiReadRegisters>
 8003b82:	4602      	mov	r2, r0
 8003b84:	4b0a      	ldr	r3, [pc, #40]	@ (8003bb0 <SpiritRadioGetDigDiv+0x40>)
 8003b86:	b212      	sxth	r2, r2
 8003b88:	4611      	mov	r1, r2
 8003b8a:	7019      	strb	r1, [r3, #0]
 8003b8c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b90:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	08db      	lsrs	r3, r3, #3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003ba4:	2301      	movs	r3, #1
  }
  
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000168 	.word	0x20000168

08003bb4 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003bb8:	4b03      	ldr	r3, [pc, #12]	@ (8003bc8 <SpiritRadioGetXtalFrequency+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000164 	.word	0x20000164

08003bcc <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003bd4:	4a04      	ldr	r2, [pc, #16]	@ (8003be8 <SpiritRadioSetXtalFrequency+0x1c>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6013      	str	r3, [r2, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	20000164 	.word	0x20000164

08003bec <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8003bf6:	f107 020c 	add.w	r2, r7, #12
 8003bfa:	f107 030c 	add.w	r3, r7, #12
 8003bfe:	3301      	adds	r3, #1
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	ed97 0a01 	vldr	s0, [r7, #4]
 8003c08:	f000 f816 	bl	8003c38 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8003c0c:	f107 030c 	add.w	r3, r7, #12
 8003c10:	461a      	mov	r2, r3
 8003c12:	2102      	movs	r1, #2
 8003c14:	2053      	movs	r0, #83	@ 0x53
 8003c16:	f000 f9bd 	bl	8003f94 <RadioSpiWriteRegisters>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <SpiritTimerSetRxTimeoutMs+0x48>)
 8003c1e:	b212      	sxth	r2, r2
 8003c20:	4611      	mov	r1, r2
 8003c22:	7019      	strb	r1, [r3, #0]
 8003c24:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c28:	705a      	strb	r2, [r3, #1]

}
 8003c2a:	bf00      	nop
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000168 	.word	0x20000168

08003c38 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003c42:	60b8      	str	r0, [r7, #8]
 8003c44:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8003c46:	f7ff ffb5 	bl	8003bb4 <SpiritRadioGetXtalFrequency>
 8003c4a:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4a91      	ldr	r2, [pc, #580]	@ (8003e94 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d902      	bls.n	8003c5a <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	085b      	lsrs	r3, r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c64:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c6c:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8003e98 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c78:	ee17 3a90 	vmov	r3, s15
 8003c7c:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f64f 5201 	movw	r2, #64769	@ 0xfd01
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d906      	bls.n	8003c96 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	22ff      	movs	r2, #255	@ 0xff
 8003c8c:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	22ff      	movs	r2, #255	@ 0xff
 8003c92:	701a      	strb	r2, [r3, #0]
    return;
 8003c94:	e0fa      	b.n	8003e8c <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	4a80      	ldr	r2, [pc, #512]	@ (8003e9c <SpiritTimerComputeRxTimeoutValues+0x264>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	09db      	lsrs	r3, r3, #7
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	ee07 3a90 	vmov	s15, r3
 8003cc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	ee07 3a90 	vmov	s15, r3
 8003cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd8:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8003e98 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003cdc:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfe:	dd1d      	ble.n	8003d3c <SpiritTimerComputeRxTimeoutValues+0x104>
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	ee07 3a90 	vmov	s15, r3
 8003d08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1c:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8003e98 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003d20:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d32:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d3a:	e01e      	b.n	8003d7a <SpiritTimerComputeRxTimeoutValues+0x142>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d58:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8003e98 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003d5c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d76:	eef1 7a67 	vneg.f32	s15, s15
 8003d7a:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2bff      	cmp	r3, #255	@ 0xff
 8003d84:	d06e      	beq.n	8003e64 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da4:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8003e98 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003da8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dba:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	dd1e      	ble.n	8003e0a <SpiritTimerComputeRxTimeoutValues+0x1d2>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	ee07 3a90 	vmov	s15, r3
 8003dd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8003e98 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003dee:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e00:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e08:	e01f      	b.n	8003e4a <SpiritTimerComputeRxTimeoutValues+0x212>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	ee07 3a90 	vmov	s15, r3
 8003e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e28:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003e98 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e2c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e46:	eef1 7a67 	vneg.f32	s15, s15
 8003e4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e56:	d505      	bpl.n	8003e64 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d906      	bls.n	8003e86 <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	701a      	strb	r2, [r3, #0]
 8003e84:	e002      	b.n	8003e8c <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	701a      	strb	r2, [r3, #0]
}
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	01c9c380 	.word	0x01c9c380
 8003e98:	4993b480 	.word	0x4993b480
 8003e9c:	80808081 	.word	0x80808081

08003ea0 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003eaa:	f107 030c 	add.w	r3, r7, #12
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	204f      	movs	r0, #79	@ 0x4f
 8003eb4:	f000 f8ba 	bl	800402c <RadioSpiReadRegisters>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b1c      	ldr	r3, [pc, #112]	@ (8003f2c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003ebc:	b212      	sxth	r2, r2
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	7019      	strb	r1, [r3, #0]
 8003ec2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ec6:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003ec8:	7b3b      	ldrb	r3, [r7, #12]
 8003eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003ed2:	7b3b      	ldrb	r3, [r7, #12]
 8003ed4:	b25a      	sxtb	r2, r3
 8003ed6:	79fb      	ldrb	r3, [r7, #7]
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee0:	b25b      	sxtb	r3, r3
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	b25b      	sxtb	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003eea:	7b7b      	ldrb	r3, [r7, #13]
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003ef4:	7b7b      	ldrb	r3, [r7, #13]
 8003ef6:	b25a      	sxtb	r2, r3
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	015b      	lsls	r3, r3, #5
 8003efc:	b25b      	sxtb	r3, r3
 8003efe:	4313      	orrs	r3, r2
 8003f00:	b25b      	sxtb	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003f06:	f107 030c 	add.w	r3, r7, #12
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	204f      	movs	r0, #79	@ 0x4f
 8003f10:	f000 f840 	bl	8003f94 <RadioSpiWriteRegisters>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003f18:	b212      	sxth	r2, r2
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	7019      	strb	r1, [r3, #0]
 8003f1e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f22:	705a      	strb	r2, [r3, #1]

}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000168 	.word	0x20000168

08003f30 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003f36:	1d3b      	adds	r3, r7, #4
 8003f38:	461a      	mov	r2, r3
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	20c0      	movs	r0, #192	@ 0xc0
 8003f3e:	f000 f875 	bl	800402c <RadioSpiReadRegisters>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4a09      	ldr	r2, [pc, #36]	@ (8003f6c <SpiritRefreshStatus+0x3c>)
 8003f46:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003f48:	4b08      	ldr	r3, [pc, #32]	@ (8003f6c <SpiritRefreshStatus+0x3c>)
 8003f4a:	781a      	ldrb	r2, [r3, #0]
 8003f4c:	797b      	ldrb	r3, [r7, #5]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d1f1      	bne.n	8003f36 <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003f52:	4b07      	ldr	r3, [pc, #28]	@ (8003f70 <SpiritRefreshStatus+0x40>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d1ea      	bne.n	8003f36 <SpiritRefreshStatus+0x6>

}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000168 	.word	0x20000168
 8003f70:	20000169 	.word	0x20000169

08003f74 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <RadioSpiInit+0x1c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <RadioSpiInit+0x16>
  {
    Error_Handler();
 8003f86:	f7fd fa53 	bl	8001430 <Error_Handler>
  }
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000008 	.word	0x20000008

08003f94 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	603a      	str	r2, [r7, #0]
 8003f9e:	71fb      	strb	r3, [r7, #7]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	743b      	strb	r3, [r7, #16]
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003fac:	2017      	movs	r0, #23
 8003fae:	f000 fa73 	bl	8004498 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	2140      	movs	r1, #64	@ 0x40
 8003fb6:	481b      	ldr	r0, [pc, #108]	@ (8004024 <RadioSpiWriteRegisters+0x90>)
 8003fb8:	f000 fc26 	bl	8004808 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004028 <RadioSpiWriteRegisters+0x94>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	f107 020c 	add.w	r2, r7, #12
 8003fc4:	f107 0110 	add.w	r1, r7, #16
 8003fc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2302      	movs	r3, #2
 8003fd0:	f001 fe19 	bl	8005c06 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003fd4:	4b14      	ldr	r3, [pc, #80]	@ (8004028 <RadioSpiWriteRegisters+0x94>)
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	79bb      	ldrb	r3, [r7, #6]
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fe0:	6839      	ldr	r1, [r7, #0]
 8003fe2:	f001 fb64 	bl	80056ae <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	2140      	movs	r1, #64	@ 0x40
 8003fea:	480e      	ldr	r0, [pc, #56]	@ (8004024 <RadioSpiWriteRegisters+0x90>)
 8003fec:	f000 fc0c 	bl	8004808 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003ff0:	2017      	movs	r0, #23
 8003ff2:	f000 fa43 	bl	800447c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003ff6:	f107 0308 	add.w	r3, r7, #8
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	7b3a      	ldrb	r2, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	7b7a      	ldrb	r2, [r7, #13]
 8004006:	701a      	strb	r2, [r3, #0]

  return status;
 8004008:	893b      	ldrh	r3, [r7, #8]
 800400a:	82bb      	strh	r3, [r7, #20]
 800400c:	2300      	movs	r3, #0
 800400e:	7d3a      	ldrb	r2, [r7, #20]
 8004010:	f362 0307 	bfi	r3, r2, #0, #8
 8004014:	7d7a      	ldrb	r2, [r7, #21]
 8004016:	f362 230f 	bfi	r3, r2, #8, #8

}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	48000400 	.word	0x48000400
 8004028:	20000008 	.word	0x20000008

0800402c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af02      	add	r7, sp, #8
 8004032:	4603      	mov	r3, r0
 8004034:	603a      	str	r2, [r7, #0]
 8004036:	71fb      	strb	r3, [r7, #7]
 8004038:	460b      	mov	r3, r1
 800403a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 800403c:	2301      	movs	r3, #1
 800403e:	743b      	strb	r3, [r7, #16]
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004044:	2017      	movs	r0, #23
 8004046:	f000 fa27 	bl	8004498 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800404a:	2200      	movs	r2, #0
 800404c:	2140      	movs	r1, #64	@ 0x40
 800404e:	481b      	ldr	r0, [pc, #108]	@ (80040bc <RadioSpiReadRegisters+0x90>)
 8004050:	f000 fbda 	bl	8004808 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004054:	4b1a      	ldr	r3, [pc, #104]	@ (80040c0 <RadioSpiReadRegisters+0x94>)
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	f107 020c 	add.w	r2, r7, #12
 800405c:	f107 0110 	add.w	r1, r7, #16
 8004060:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	2302      	movs	r3, #2
 8004068:	f001 fdcd 	bl	8005c06 <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800406c:	4b14      	ldr	r3, [pc, #80]	@ (80040c0 <RadioSpiReadRegisters+0x94>)
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	79bb      	ldrb	r3, [r7, #6]
 8004072:	b29a      	uxth	r2, r3
 8004074:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004078:	6839      	ldr	r1, [r7, #0]
 800407a:	f001 fc8d 	bl	8005998 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800407e:	2201      	movs	r2, #1
 8004080:	2140      	movs	r1, #64	@ 0x40
 8004082:	480e      	ldr	r0, [pc, #56]	@ (80040bc <RadioSpiReadRegisters+0x90>)
 8004084:	f000 fbc0 	bl	8004808 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004088:	2017      	movs	r0, #23
 800408a:	f000 f9f7 	bl	800447c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800408e:	f107 0308 	add.w	r3, r7, #8
 8004092:	3301      	adds	r3, #1
 8004094:	7b3a      	ldrb	r2, [r7, #12]
 8004096:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004098:	f107 0308 	add.w	r3, r7, #8
 800409c:	7b7a      	ldrb	r2, [r7, #13]
 800409e:	701a      	strb	r2, [r3, #0]

  return status;
 80040a0:	893b      	ldrh	r3, [r7, #8]
 80040a2:	82bb      	strh	r3, [r7, #20]
 80040a4:	2300      	movs	r3, #0
 80040a6:	7d3a      	ldrb	r2, [r7, #20]
 80040a8:	f362 0307 	bfi	r3, r2, #0, #8
 80040ac:	7d7a      	ldrb	r2, [r7, #21]
 80040ae:	f362 230f 	bfi	r3, r2, #8, #8
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	48000400 	.word	0x48000400
 80040c0:	20000008 	.word	0x20000008

080040c4 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	4603      	mov	r3, r0
 80040cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 80040ce:	2380      	movs	r3, #128	@ 0x80
 80040d0:	743b      	strb	r3, [r7, #16]
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80040d6:	2017      	movs	r0, #23
 80040d8:	f000 f9de 	bl	8004498 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80040dc:	2200      	movs	r2, #0
 80040de:	2140      	movs	r1, #64	@ 0x40
 80040e0:	4816      	ldr	r0, [pc, #88]	@ (800413c <RadioSpiCommandStrobes+0x78>)
 80040e2:	f000 fb91 	bl	8004808 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80040e6:	4b16      	ldr	r3, [pc, #88]	@ (8004140 <RadioSpiCommandStrobes+0x7c>)
 80040e8:	6818      	ldr	r0, [r3, #0]
 80040ea:	f107 020c 	add.w	r2, r7, #12
 80040ee:	f107 0110 	add.w	r1, r7, #16
 80040f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2302      	movs	r3, #2
 80040fa:	f001 fd84 	bl	8005c06 <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80040fe:	2201      	movs	r2, #1
 8004100:	2140      	movs	r1, #64	@ 0x40
 8004102:	480e      	ldr	r0, [pc, #56]	@ (800413c <RadioSpiCommandStrobes+0x78>)
 8004104:	f000 fb80 	bl	8004808 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004108:	2017      	movs	r0, #23
 800410a:	f000 f9b7 	bl	800447c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800410e:	f107 0308 	add.w	r3, r7, #8
 8004112:	3301      	adds	r3, #1
 8004114:	7b3a      	ldrb	r2, [r7, #12]
 8004116:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	7b7a      	ldrb	r2, [r7, #13]
 800411e:	701a      	strb	r2, [r3, #0]

  return status;
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	82bb      	strh	r3, [r7, #20]
 8004124:	2300      	movs	r3, #0
 8004126:	7d3a      	ldrb	r2, [r7, #20]
 8004128:	f362 0307 	bfi	r3, r2, #0, #8
 800412c:	7d7a      	ldrb	r2, [r7, #21]
 800412e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	48000400 	.word	0x48000400
 8004140:	20000008 	.word	0x20000008

08004144 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af02      	add	r7, sp, #8
 800414a:	4603      	mov	r3, r0
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004150:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8004154:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004156:	2017      	movs	r0, #23
 8004158:	f000 f99e 	bl	8004498 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800415c:	2200      	movs	r2, #0
 800415e:	2140      	movs	r1, #64	@ 0x40
 8004160:	481a      	ldr	r0, [pc, #104]	@ (80041cc <RadioSpiWriteFifo+0x88>)
 8004162:	f000 fb51 	bl	8004808 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004166:	4b1a      	ldr	r3, [pc, #104]	@ (80041d0 <RadioSpiWriteFifo+0x8c>)
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	f107 020c 	add.w	r2, r7, #12
 800416e:	f107 0110 	add.w	r1, r7, #16
 8004172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2302      	movs	r3, #2
 800417a:	f001 fd44 	bl	8005c06 <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800417e:	4b14      	ldr	r3, [pc, #80]	@ (80041d0 <RadioSpiWriteFifo+0x8c>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	b29a      	uxth	r2, r3
 8004186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800418a:	6839      	ldr	r1, [r7, #0]
 800418c:	f001 fa8f 	bl	80056ae <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004190:	2201      	movs	r2, #1
 8004192:	2140      	movs	r1, #64	@ 0x40
 8004194:	480d      	ldr	r0, [pc, #52]	@ (80041cc <RadioSpiWriteFifo+0x88>)
 8004196:	f000 fb37 	bl	8004808 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800419a:	2017      	movs	r0, #23
 800419c:	f000 f96e 	bl	800447c <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80041a0:	f107 0308 	add.w	r3, r7, #8
 80041a4:	3301      	adds	r3, #1
 80041a6:	7b3a      	ldrb	r2, [r7, #12]
 80041a8:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80041aa:	f107 0308 	add.w	r3, r7, #8
 80041ae:	7b7a      	ldrb	r2, [r7, #13]
 80041b0:	701a      	strb	r2, [r3, #0]

  return status;
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	82bb      	strh	r3, [r7, #20]
 80041b6:	2300      	movs	r3, #0
 80041b8:	7d3a      	ldrb	r2, [r7, #20]
 80041ba:	f362 0307 	bfi	r3, r2, #0, #8
 80041be:	7d7a      	ldrb	r2, [r7, #21]
 80041c0:	f362 230f 	bfi	r3, r2, #8, #8
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	48000400 	.word	0x48000400
 80041d0:	20000008 	.word	0x20000008

080041d4 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80041d8:	2201      	movs	r2, #1
 80041da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041e2:	f000 fb11 	bl	8004808 <HAL_GPIO_WritePin>
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}

080041ea <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80041f0:	2200      	movs	r2, #0
 80041f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041fa:	f000 fb05 	bl	8004808 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  for(volatile uint32_t i=0;i<0x1E00;i++);
 80041fe:	2300      	movs	r3, #0
 8004200:	607b      	str	r3, [r7, #4]
 8004202:	e002      	b.n	800420a <RadioExitShutdown+0x20>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3301      	adds	r3, #1
 8004208:	607b      	str	r3, [r7, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 8004210:	d3f8      	bcc.n	8004204 <RadioExitShutdown+0x1a>
  // HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004226:	2003      	movs	r0, #3
 8004228:	f000 f901 	bl	800442e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800422c:	200f      	movs	r0, #15
 800422e:	f7fd fadb 	bl	80017e8 <HAL_InitTick>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d002      	beq.n	800423e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	71fb      	strb	r3, [r7, #7]
 800423c:	e001      	b.n	8004242 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800423e:	f7fd faab 	bl	8001798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004242:	79fb      	ldrb	r3, [r7, #7]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004250:	4b06      	ldr	r3, [pc, #24]	@ (800426c <HAL_IncTick+0x20>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	461a      	mov	r2, r3
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <HAL_IncTick+0x24>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4413      	add	r3, r2
 800425c:	4a04      	ldr	r2, [pc, #16]	@ (8004270 <HAL_IncTick+0x24>)
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	20000010 	.word	0x20000010
 8004270:	2000016c 	.word	0x2000016c

08004274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return uwTick;
 8004278:	4b03      	ldr	r3, [pc, #12]	@ (8004288 <HAL_GetTick+0x14>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	2000016c 	.word	0x2000016c

0800428c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800429c:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042a8:	4013      	ands	r3, r2
 80042aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042be:	4a04      	ldr	r2, [pc, #16]	@ (80042d0 <__NVIC_SetPriorityGrouping+0x44>)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	60d3      	str	r3, [r2, #12]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	e000ed00 	.word	0xe000ed00

080042d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042d8:	4b04      	ldr	r3, [pc, #16]	@ (80042ec <__NVIC_GetPriorityGrouping+0x18>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	f003 0307 	and.w	r3, r3, #7
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	4603      	mov	r3, r0
 80042f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	db0b      	blt.n	800431a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	4907      	ldr	r1, [pc, #28]	@ (8004328 <__NVIC_EnableIRQ+0x38>)
 800430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2001      	movs	r0, #1
 8004312:	fa00 f202 	lsl.w	r2, r0, r2
 8004316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	e000e100 	.word	0xe000e100

0800432c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	db12      	blt.n	8004364 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	f003 021f 	and.w	r2, r3, #31
 8004344:	490a      	ldr	r1, [pc, #40]	@ (8004370 <__NVIC_DisableIRQ+0x44>)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2001      	movs	r0, #1
 800434e:	fa00 f202 	lsl.w	r2, r0, r2
 8004352:	3320      	adds	r3, #32
 8004354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004358:	f3bf 8f4f 	dsb	sy
}
 800435c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800435e:	f3bf 8f6f 	isb	sy
}
 8004362:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000e100 	.word	0xe000e100

08004374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	6039      	str	r1, [r7, #0]
 800437e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004384:	2b00      	cmp	r3, #0
 8004386:	db0a      	blt.n	800439e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	b2da      	uxtb	r2, r3
 800438c:	490c      	ldr	r1, [pc, #48]	@ (80043c0 <__NVIC_SetPriority+0x4c>)
 800438e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004392:	0112      	lsls	r2, r2, #4
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	440b      	add	r3, r1
 8004398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800439c:	e00a      	b.n	80043b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4908      	ldr	r1, [pc, #32]	@ (80043c4 <__NVIC_SetPriority+0x50>)
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	3b04      	subs	r3, #4
 80043ac:	0112      	lsls	r2, r2, #4
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	440b      	add	r3, r1
 80043b2:	761a      	strb	r2, [r3, #24]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	e000e100 	.word	0xe000e100
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	@ 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f1c3 0307 	rsb	r3, r3, #7
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	bf28      	it	cs
 80043e6:	2304      	movcs	r3, #4
 80043e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	3304      	adds	r3, #4
 80043ee:	2b06      	cmp	r3, #6
 80043f0:	d902      	bls.n	80043f8 <NVIC_EncodePriority+0x30>
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	3b03      	subs	r3, #3
 80043f6:	e000      	b.n	80043fa <NVIC_EncodePriority+0x32>
 80043f8:	2300      	movs	r3, #0
 80043fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	401a      	ands	r2, r3
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004410:	f04f 31ff 	mov.w	r1, #4294967295
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	43d9      	mvns	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004420:	4313      	orrs	r3, r2
         );
}
 8004422:	4618      	mov	r0, r3
 8004424:	3724      	adds	r7, #36	@ 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ff28 	bl	800428c <__NVIC_SetPriorityGrouping>
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004456:	f7ff ff3d 	bl	80042d4 <__NVIC_GetPriorityGrouping>
 800445a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	6978      	ldr	r0, [r7, #20]
 8004462:	f7ff ffb1 	bl	80043c8 <NVIC_EncodePriority>
 8004466:	4602      	mov	r2, r0
 8004468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff ff80 	bl	8004374 <__NVIC_SetPriority>
}
 8004474:	bf00      	nop
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	4603      	mov	r3, r0
 8004484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff ff30 	bl	80042f0 <__NVIC_EnableIRQ>
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff ff40 	bl	800432c <__NVIC_DisableIRQ>
}
 80044ac:	bf00      	nop
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044c2:	e17f      	b.n	80047c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	2101      	movs	r1, #1
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	fa01 f303 	lsl.w	r3, r1, r3
 80044d0:	4013      	ands	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8171 	beq.w	80047be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d005      	beq.n	80044f4 <HAL_GPIO_Init+0x40>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d130      	bne.n	8004556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	2203      	movs	r2, #3
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4013      	ands	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800452a:	2201      	movs	r2, #1
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4013      	ands	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	091b      	lsrs	r3, r3, #4
 8004540:	f003 0201 	and.w	r2, r3, #1
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b03      	cmp	r3, #3
 8004560:	d118      	bne.n	8004594 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004568:	2201      	movs	r2, #1
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	43db      	mvns	r3, r3
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4013      	ands	r3, r2
 8004576:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	08db      	lsrs	r3, r3, #3
 800457e:	f003 0201 	and.w	r2, r3, #1
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b03      	cmp	r3, #3
 800459e:	d017      	beq.n	80045d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	2203      	movs	r2, #3
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d123      	bne.n	8004624 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	08da      	lsrs	r2, r3, #3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3208      	adds	r2, #8
 80045e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	220f      	movs	r2, #15
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f003 0307 	and.w	r3, r3, #7
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4313      	orrs	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	08da      	lsrs	r2, r3, #3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3208      	adds	r2, #8
 800461e:	6939      	ldr	r1, [r7, #16]
 8004620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	2203      	movs	r2, #3
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f003 0203 	and.w	r2, r3, #3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80ac 	beq.w	80047be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004666:	4b5f      	ldr	r3, [pc, #380]	@ (80047e4 <HAL_GPIO_Init+0x330>)
 8004668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800466a:	4a5e      	ldr	r2, [pc, #376]	@ (80047e4 <HAL_GPIO_Init+0x330>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6613      	str	r3, [r2, #96]	@ 0x60
 8004672:	4b5c      	ldr	r3, [pc, #368]	@ (80047e4 <HAL_GPIO_Init+0x330>)
 8004674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	60bb      	str	r3, [r7, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800467e:	4a5a      	ldr	r2, [pc, #360]	@ (80047e8 <HAL_GPIO_Init+0x334>)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	3302      	adds	r3, #2
 8004686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800468a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	220f      	movs	r2, #15
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80046a8:	d025      	beq.n	80046f6 <HAL_GPIO_Init+0x242>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a4f      	ldr	r2, [pc, #316]	@ (80047ec <HAL_GPIO_Init+0x338>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01f      	beq.n	80046f2 <HAL_GPIO_Init+0x23e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a4e      	ldr	r2, [pc, #312]	@ (80047f0 <HAL_GPIO_Init+0x33c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d019      	beq.n	80046ee <HAL_GPIO_Init+0x23a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a4d      	ldr	r2, [pc, #308]	@ (80047f4 <HAL_GPIO_Init+0x340>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_GPIO_Init+0x236>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a4c      	ldr	r2, [pc, #304]	@ (80047f8 <HAL_GPIO_Init+0x344>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00d      	beq.n	80046e6 <HAL_GPIO_Init+0x232>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a4b      	ldr	r2, [pc, #300]	@ (80047fc <HAL_GPIO_Init+0x348>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d007      	beq.n	80046e2 <HAL_GPIO_Init+0x22e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a4a      	ldr	r2, [pc, #296]	@ (8004800 <HAL_GPIO_Init+0x34c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <HAL_GPIO_Init+0x22a>
 80046da:	2306      	movs	r3, #6
 80046dc:	e00c      	b.n	80046f8 <HAL_GPIO_Init+0x244>
 80046de:	2307      	movs	r3, #7
 80046e0:	e00a      	b.n	80046f8 <HAL_GPIO_Init+0x244>
 80046e2:	2305      	movs	r3, #5
 80046e4:	e008      	b.n	80046f8 <HAL_GPIO_Init+0x244>
 80046e6:	2304      	movs	r3, #4
 80046e8:	e006      	b.n	80046f8 <HAL_GPIO_Init+0x244>
 80046ea:	2303      	movs	r3, #3
 80046ec:	e004      	b.n	80046f8 <HAL_GPIO_Init+0x244>
 80046ee:	2302      	movs	r3, #2
 80046f0:	e002      	b.n	80046f8 <HAL_GPIO_Init+0x244>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_GPIO_Init+0x244>
 80046f6:	2300      	movs	r3, #0
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	f002 0203 	and.w	r2, r2, #3
 80046fe:	0092      	lsls	r2, r2, #2
 8004700:	4093      	lsls	r3, r2
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004708:	4937      	ldr	r1, [pc, #220]	@ (80047e8 <HAL_GPIO_Init+0x334>)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	089b      	lsrs	r3, r3, #2
 800470e:	3302      	adds	r3, #2
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004716:	4b3b      	ldr	r3, [pc, #236]	@ (8004804 <HAL_GPIO_Init+0x350>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800473a:	4a32      	ldr	r2, [pc, #200]	@ (8004804 <HAL_GPIO_Init+0x350>)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004740:	4b30      	ldr	r3, [pc, #192]	@ (8004804 <HAL_GPIO_Init+0x350>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	43db      	mvns	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004764:	4a27      	ldr	r2, [pc, #156]	@ (8004804 <HAL_GPIO_Init+0x350>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800476a:	4b26      	ldr	r3, [pc, #152]	@ (8004804 <HAL_GPIO_Init+0x350>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800478e:	4a1d      	ldr	r2, [pc, #116]	@ (8004804 <HAL_GPIO_Init+0x350>)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004794:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <HAL_GPIO_Init+0x350>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	43db      	mvns	r3, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047b8:	4a12      	ldr	r2, [pc, #72]	@ (8004804 <HAL_GPIO_Init+0x350>)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	3301      	adds	r3, #1
 80047c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	fa22 f303 	lsr.w	r3, r2, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f47f ae78 	bne.w	80044c4 <HAL_GPIO_Init+0x10>
  }
}
 80047d4:	bf00      	nop
 80047d6:	bf00      	nop
 80047d8:	371c      	adds	r7, #28
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40010000 	.word	0x40010000
 80047ec:	48000400 	.word	0x48000400
 80047f0:	48000800 	.word	0x48000800
 80047f4:	48000c00 	.word	0x48000c00
 80047f8:	48001000 	.word	0x48001000
 80047fc:	48001400 	.word	0x48001400
 8004800:	48001800 	.word	0x48001800
 8004804:	40010400 	.word	0x40010400

08004808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	807b      	strh	r3, [r7, #2]
 8004814:	4613      	mov	r3, r2
 8004816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004818:	787b      	ldrb	r3, [r7, #1]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800481e:	887a      	ldrh	r2, [r7, #2]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004824:	e002      	b.n	800482c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004826:	887a      	ldrh	r2, [r7, #2]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004842:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d006      	beq.n	800485c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800484e:	4a05      	ldr	r2, [pc, #20]	@ (8004864 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fc fd4c 	bl	80012f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800485c:	bf00      	nop
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40010400 	.word	0x40010400

08004868 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800486c:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <HAL_PWREx_GetVoltageRange+0x18>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40007000 	.word	0x40007000

08004884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004892:	d130      	bne.n	80048f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004894:	4b23      	ldr	r3, [pc, #140]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800489c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a0:	d038      	beq.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a2:	4b20      	ldr	r3, [pc, #128]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2232      	movs	r2, #50	@ 0x32
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	4a1b      	ldr	r2, [pc, #108]	@ (800492c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	0c9b      	lsrs	r3, r3, #18
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c8:	e002      	b.n	80048d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d0:	4b14      	ldr	r3, [pc, #80]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048dc:	d102      	bne.n	80048e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1f2      	bne.n	80048ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f0:	d110      	bne.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e00f      	b.n	8004916 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004902:	d007      	beq.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004904:	4b07      	ldr	r3, [pc, #28]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800490c:	4a05      	ldr	r2, [pc, #20]	@ (8004924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800490e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004912:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40007000 	.word	0x40007000
 8004928:	20000000 	.word	0x20000000
 800492c:	431bde83 	.word	0x431bde83

08004930 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b088      	sub	sp, #32
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e3ca      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004942:	4b97      	ldr	r3, [pc, #604]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
 800494a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800494c:	4b94      	ldr	r3, [pc, #592]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0303 	and.w	r3, r3, #3
 8004954:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80e4 	beq.w	8004b2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_RCC_OscConfig+0x4a>
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	f040 808b 	bne.w	8004a88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2b01      	cmp	r3, #1
 8004976:	f040 8087 	bne.w	8004a88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800497a:	4b89      	ldr	r3, [pc, #548]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_RCC_OscConfig+0x62>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e3a2      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	4b82      	ldr	r3, [pc, #520]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <HAL_RCC_OscConfig+0x7c>
 80049a2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049aa:	e005      	b.n	80049b8 <HAL_RCC_OscConfig+0x88>
 80049ac:	4b7c      	ldr	r3, [pc, #496]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049b2:	091b      	lsrs	r3, r3, #4
 80049b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d223      	bcs.n	8004a04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fd71 	bl	80054a8 <RCC_SetFlashLatencyFromMSIRange>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e383      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049d0:	4b73      	ldr	r3, [pc, #460]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a72      	ldr	r2, [pc, #456]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049d6:	f043 0308 	orr.w	r3, r3, #8
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b70      	ldr	r3, [pc, #448]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	496d      	ldr	r1, [pc, #436]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049ee:	4b6c      	ldr	r3, [pc, #432]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	4968      	ldr	r1, [pc, #416]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]
 8004a02:	e025      	b.n	8004a50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a04:	4b66      	ldr	r3, [pc, #408]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a65      	ldr	r2, [pc, #404]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	f043 0308 	orr.w	r3, r3, #8
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b63      	ldr	r3, [pc, #396]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4960      	ldr	r1, [pc, #384]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a22:	4b5f      	ldr	r3, [pc, #380]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	495b      	ldr	r1, [pc, #364]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fd31 	bl	80054a8 <RCC_SetFlashLatencyFromMSIRange>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e343      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a50:	f000 fc4a 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b52      	ldr	r3, [pc, #328]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	091b      	lsrs	r3, r3, #4
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	4950      	ldr	r1, [pc, #320]	@ (8004ba4 <HAL_RCC_OscConfig+0x274>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba8 <HAL_RCC_OscConfig+0x278>)
 8004a6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a70:	4b4e      	ldr	r3, [pc, #312]	@ (8004bac <HAL_RCC_OscConfig+0x27c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fc feb7 	bl	80017e8 <HAL_InitTick>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d052      	beq.n	8004b2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	e327      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d032      	beq.n	8004af6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a90:	4b43      	ldr	r3, [pc, #268]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a42      	ldr	r2, [pc, #264]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a9c:	f7ff fbea 	bl	8004274 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aa4:	f7ff fbe6 	bl	8004274 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e310      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac2:	4b37      	ldr	r3, [pc, #220]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a36      	ldr	r2, [pc, #216]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b34      	ldr	r3, [pc, #208]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4931      	ldr	r1, [pc, #196]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	492c      	ldr	r1, [pc, #176]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]
 8004af4:	e01a      	b.n	8004b2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004af6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a29      	ldr	r2, [pc, #164]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b02:	f7ff fbb7 	bl	8004274 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b0a:	f7ff fbb3 	bl	8004274 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e2dd      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b1c:	4b20      	ldr	r3, [pc, #128]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f0      	bne.n	8004b0a <HAL_RCC_OscConfig+0x1da>
 8004b28:	e000      	b.n	8004b2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d074      	beq.n	8004c22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d005      	beq.n	8004b4a <HAL_RCC_OscConfig+0x21a>
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b0c      	cmp	r3, #12
 8004b42:	d10e      	bne.n	8004b62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d10b      	bne.n	8004b62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4a:	4b15      	ldr	r3, [pc, #84]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d064      	beq.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d160      	bne.n	8004c20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e2ba      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6a:	d106      	bne.n	8004b7a <HAL_RCC_OscConfig+0x24a>
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0b      	ldr	r2, [pc, #44]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b76:	6013      	str	r3, [r2, #0]
 8004b78:	e026      	b.n	8004bc8 <HAL_RCC_OscConfig+0x298>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b82:	d115      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x280>
 8004b84:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a05      	ldr	r2, [pc, #20]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b03      	ldr	r3, [pc, #12]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a02      	ldr	r2, [pc, #8]	@ (8004ba0 <HAL_RCC_OscConfig+0x270>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e014      	b.n	8004bc8 <HAL_RCC_OscConfig+0x298>
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	08009b8c 	.word	0x08009b8c
 8004ba8:	20000000 	.word	0x20000000
 8004bac:	2000000c 	.word	0x2000000c
 8004bb0:	4ba0      	ldr	r3, [pc, #640]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a9f      	ldr	r2, [pc, #636]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a9c      	ldr	r2, [pc, #624]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d013      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7ff fb50 	bl	8004274 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7ff fb4c 	bl	8004274 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	@ 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e276      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bea:	4b92      	ldr	r3, [pc, #584]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x2a8>
 8004bf6:	e014      	b.n	8004c22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7ff fb3c 	bl	8004274 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c00:	f7ff fb38 	bl	8004274 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b64      	cmp	r3, #100	@ 0x64
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e262      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c12:	4b88      	ldr	r3, [pc, #544]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2d0>
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d060      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_OscConfig+0x310>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d119      	bne.n	8004c6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d116      	bne.n	8004c6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c40:	4b7c      	ldr	r3, [pc, #496]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_OscConfig+0x328>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e23f      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c58:	4b76      	ldr	r3, [pc, #472]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	061b      	lsls	r3, r3, #24
 8004c66:	4973      	ldr	r1, [pc, #460]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c6c:	e040      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d023      	beq.n	8004cbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c76:	4b6f      	ldr	r3, [pc, #444]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7ff faf7 	bl	8004274 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8a:	f7ff faf3 	bl	8004274 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e21d      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c9c:	4b65      	ldr	r3, [pc, #404]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f0      	beq.n	8004c8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	4b62      	ldr	r3, [pc, #392]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	495f      	ldr	r1, [pc, #380]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	604b      	str	r3, [r1, #4]
 8004cbc:	e018      	b.n	8004cf0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7ff fad3 	bl	8004274 <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7ff facf 	bl	8004274 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e1f9      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce4:	4b53      	ldr	r3, [pc, #332]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d03c      	beq.n	8004d76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01c      	beq.n	8004d3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d04:	4b4b      	ldr	r3, [pc, #300]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7ff faae 	bl	8004274 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7ff faaa 	bl	8004274 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e1d4      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d2e:	4b41      	ldr	r3, [pc, #260]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0ef      	beq.n	8004d1c <HAL_RCC_OscConfig+0x3ec>
 8004d3c:	e01b      	b.n	8004d76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d44:	4a3b      	ldr	r2, [pc, #236]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4e:	f7ff fa91 	bl	8004274 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d54:	e008      	b.n	8004d68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d56:	f7ff fa8d 	bl	8004274 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e1b7      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d68:	4b32      	ldr	r3, [pc, #200]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ef      	bne.n	8004d56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0304 	and.w	r3, r3, #4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80a6 	beq.w	8004ed0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d84:	2300      	movs	r3, #0
 8004d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d88:	4b2a      	ldr	r3, [pc, #168]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10d      	bne.n	8004db0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d94:	4b27      	ldr	r3, [pc, #156]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d98:	4a26      	ldr	r2, [pc, #152]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da0:	4b24      	ldr	r3, [pc, #144]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dac:	2301      	movs	r3, #1
 8004dae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db0:	4b21      	ldr	r3, [pc, #132]	@ (8004e38 <HAL_RCC_OscConfig+0x508>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d118      	bne.n	8004dee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e38 <HAL_RCC_OscConfig+0x508>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8004e38 <HAL_RCC_OscConfig+0x508>)
 8004dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc8:	f7ff fa54 	bl	8004274 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd0:	f7ff fa50 	bl	8004274 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e17a      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de2:	4b15      	ldr	r3, [pc, #84]	@ (8004e38 <HAL_RCC_OscConfig+0x508>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d108      	bne.n	8004e08 <HAL_RCC_OscConfig+0x4d8>
 8004df6:	4b0f      	ldr	r3, [pc, #60]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e06:	e029      	b.n	8004e5c <HAL_RCC_OscConfig+0x52c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d115      	bne.n	8004e3c <HAL_RCC_OscConfig+0x50c>
 8004e10:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e16:	4a07      	ldr	r2, [pc, #28]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004e18:	f043 0304 	orr.w	r3, r3, #4
 8004e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e20:	4b04      	ldr	r3, [pc, #16]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e26:	4a03      	ldr	r2, [pc, #12]	@ (8004e34 <HAL_RCC_OscConfig+0x504>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e30:	e014      	b.n	8004e5c <HAL_RCC_OscConfig+0x52c>
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40007000 	.word	0x40007000
 8004e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e42:	4a9b      	ldr	r2, [pc, #620]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e4c:	4b98      	ldr	r3, [pc, #608]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e52:	4a97      	ldr	r2, [pc, #604]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d016      	beq.n	8004e92 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e64:	f7ff fa06 	bl	8004274 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6c:	f7ff fa02 	bl	8004274 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e12a      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e82:	4b8b      	ldr	r3, [pc, #556]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ed      	beq.n	8004e6c <HAL_RCC_OscConfig+0x53c>
 8004e90:	e015      	b.n	8004ebe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7ff f9ef 	bl	8004274 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9a:	f7ff f9eb 	bl	8004274 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d901      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e113      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb0:	4b7f      	ldr	r3, [pc, #508]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1ed      	bne.n	8004e9a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec4:	4b7a      	ldr	r3, [pc, #488]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ec8:	4a79      	ldr	r2, [pc, #484]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 80fe 	beq.w	80050d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	f040 80d0 	bne.w	8005084 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ee4:	4b72      	ldr	r3, [pc, #456]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 0203 	and.w	r2, r3, #3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d130      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f02:	3b01      	subs	r3, #1
 8004f04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d127      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d11f      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f24:	2a07      	cmp	r2, #7
 8004f26:	bf14      	ite	ne
 8004f28:	2201      	movne	r2, #1
 8004f2a:	2200      	moveq	r2, #0
 8004f2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d113      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3c:	085b      	lsrs	r3, r3, #1
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d109      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	085b      	lsrs	r3, r3, #1
 8004f52:	3b01      	subs	r3, #1
 8004f54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d06e      	beq.n	8005038 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	2b0c      	cmp	r3, #12
 8004f5e:	d069      	beq.n	8005034 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f60:	4b53      	ldr	r3, [pc, #332]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d105      	bne.n	8004f78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f6c:	4b50      	ldr	r3, [pc, #320]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0ad      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f7c:	4b4c      	ldr	r3, [pc, #304]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a4b      	ldr	r2, [pc, #300]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004f82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f88:	f7ff f974 	bl	8004274 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f90:	f7ff f970 	bl	8004274 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e09a      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa2:	4b43      	ldr	r3, [pc, #268]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fae:	4b40      	ldr	r3, [pc, #256]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	4b40      	ldr	r3, [pc, #256]	@ (80050b4 <HAL_RCC_OscConfig+0x784>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004fbe:	3a01      	subs	r2, #1
 8004fc0:	0112      	lsls	r2, r2, #4
 8004fc2:	4311      	orrs	r1, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fc8:	0212      	lsls	r2, r2, #8
 8004fca:	4311      	orrs	r1, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004fd0:	0852      	lsrs	r2, r2, #1
 8004fd2:	3a01      	subs	r2, #1
 8004fd4:	0552      	lsls	r2, r2, #21
 8004fd6:	4311      	orrs	r1, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004fdc:	0852      	lsrs	r2, r2, #1
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	0652      	lsls	r2, r2, #25
 8004fe2:	4311      	orrs	r1, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fe8:	0912      	lsrs	r2, r2, #4
 8004fea:	0452      	lsls	r2, r2, #17
 8004fec:	430a      	orrs	r2, r1
 8004fee:	4930      	ldr	r1, [pc, #192]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ff4:	4b2e      	ldr	r3, [pc, #184]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8004ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ffe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005000:	4b2b      	ldr	r3, [pc, #172]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a2a      	ldr	r2, [pc, #168]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8005006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800500a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800500c:	f7ff f932 	bl	8004274 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005014:	f7ff f92e 	bl	8004274 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e058      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005026:	4b22      	ldr	r3, [pc, #136]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005032:	e050      	b.n	80050d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e04f      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005038:	4b1d      	ldr	r3, [pc, #116]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d148      	bne.n	80050d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005044:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a19      	ldr	r2, [pc, #100]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 800504a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800504e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005050:	4b17      	ldr	r3, [pc, #92]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4a16      	ldr	r2, [pc, #88]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8005056:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800505a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800505c:	f7ff f90a 	bl	8004274 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005064:	f7ff f906 	bl	8004274 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e030      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005076:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0x734>
 8005082:	e028      	b.n	80050d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b0c      	cmp	r3, #12
 8005088:	d023      	beq.n	80050d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508a:	4b09      	ldr	r3, [pc, #36]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a08      	ldr	r2, [pc, #32]	@ (80050b0 <HAL_RCC_OscConfig+0x780>)
 8005090:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005096:	f7ff f8ed 	bl	8004274 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800509c:	e00c      	b.n	80050b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800509e:	f7ff f8e9 	bl	8004274 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d905      	bls.n	80050b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e013      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
 80050b0:	40021000 	.word	0x40021000
 80050b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050b8:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <HAL_RCC_OscConfig+0x7b0>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ec      	bne.n	800509e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050c4:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <HAL_RCC_OscConfig+0x7b0>)
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	4905      	ldr	r1, [pc, #20]	@ (80050e0 <HAL_RCC_OscConfig+0x7b0>)
 80050ca:	4b06      	ldr	r3, [pc, #24]	@ (80050e4 <HAL_RCC_OscConfig+0x7b4>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	60cb      	str	r3, [r1, #12]
 80050d0:	e001      	b.n	80050d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3720      	adds	r7, #32
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40021000 	.word	0x40021000
 80050e4:	feeefffc 	.word	0xfeeefffc

080050e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e0e7      	b.n	80052cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050fc:	4b75      	ldr	r3, [pc, #468]	@ (80052d4 <HAL_RCC_ClockConfig+0x1ec>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d910      	bls.n	800512c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510a:	4b72      	ldr	r3, [pc, #456]	@ (80052d4 <HAL_RCC_ClockConfig+0x1ec>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f023 0207 	bic.w	r2, r3, #7
 8005112:	4970      	ldr	r1, [pc, #448]	@ (80052d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	4313      	orrs	r3, r2
 8005118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511a:	4b6e      	ldr	r3, [pc, #440]	@ (80052d4 <HAL_RCC_ClockConfig+0x1ec>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d001      	beq.n	800512c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0cf      	b.n	80052cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	4b66      	ldr	r3, [pc, #408]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005144:	429a      	cmp	r2, r3
 8005146:	d908      	bls.n	800515a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005148:	4b63      	ldr	r3, [pc, #396]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	4960      	ldr	r1, [pc, #384]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d04c      	beq.n	8005200 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b03      	cmp	r3, #3
 800516c:	d107      	bne.n	800517e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516e:	4b5a      	ldr	r3, [pc, #360]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d121      	bne.n	80051be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e0a6      	b.n	80052cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d107      	bne.n	8005196 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005186:	4b54      	ldr	r3, [pc, #336]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d115      	bne.n	80051be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e09a      	b.n	80052cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d107      	bne.n	80051ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800519e:	4b4e      	ldr	r3, [pc, #312]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e08e      	b.n	80052cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051ae:	4b4a      	ldr	r3, [pc, #296]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e086      	b.n	80052cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051be:	4b46      	ldr	r3, [pc, #280]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f023 0203 	bic.w	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4943      	ldr	r1, [pc, #268]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d0:	f7ff f850 	bl	8004274 <HAL_GetTick>
 80051d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d8:	f7ff f84c 	bl	8004274 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e06e      	b.n	80052cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ee:	4b3a      	ldr	r3, [pc, #232]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 020c 	and.w	r2, r3, #12
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d1eb      	bne.n	80051d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d010      	beq.n	800522e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	4b31      	ldr	r3, [pc, #196]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005218:	429a      	cmp	r2, r3
 800521a:	d208      	bcs.n	800522e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800521c:	4b2e      	ldr	r3, [pc, #184]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	492b      	ldr	r1, [pc, #172]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800522e:	4b29      	ldr	r3, [pc, #164]	@ (80052d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	429a      	cmp	r2, r3
 800523a:	d210      	bcs.n	800525e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523c:	4b25      	ldr	r3, [pc, #148]	@ (80052d4 <HAL_RCC_ClockConfig+0x1ec>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f023 0207 	bic.w	r2, r3, #7
 8005244:	4923      	ldr	r1, [pc, #140]	@ (80052d4 <HAL_RCC_ClockConfig+0x1ec>)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	4313      	orrs	r3, r2
 800524a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524c:	4b21      	ldr	r3, [pc, #132]	@ (80052d4 <HAL_RCC_ClockConfig+0x1ec>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d001      	beq.n	800525e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e036      	b.n	80052cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800526a:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	4918      	ldr	r1, [pc, #96]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005278:	4313      	orrs	r3, r2
 800527a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005288:	4b13      	ldr	r3, [pc, #76]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4910      	ldr	r1, [pc, #64]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 8005298:	4313      	orrs	r3, r2
 800529a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800529c:	f000 f824 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b0d      	ldr	r3, [pc, #52]	@ (80052d8 <HAL_RCC_ClockConfig+0x1f0>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	091b      	lsrs	r3, r3, #4
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	490b      	ldr	r1, [pc, #44]	@ (80052dc <HAL_RCC_ClockConfig+0x1f4>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	f003 031f 	and.w	r3, r3, #31
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
 80052b8:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <HAL_RCC_ClockConfig+0x1f8>)
 80052ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052bc:	4b09      	ldr	r3, [pc, #36]	@ (80052e4 <HAL_RCC_ClockConfig+0x1fc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fc fa91 	bl	80017e8 <HAL_InitTick>
 80052c6:	4603      	mov	r3, r0
 80052c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80052ca:	7afb      	ldrb	r3, [r7, #11]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40022000 	.word	0x40022000
 80052d8:	40021000 	.word	0x40021000
 80052dc:	08009b8c 	.word	0x08009b8c
 80052e0:	20000000 	.word	0x20000000
 80052e4:	2000000c 	.word	0x2000000c

080052e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b089      	sub	sp, #36	@ 0x24
 80052ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
 80052f2:	2300      	movs	r3, #0
 80052f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052f6:	4b3e      	ldr	r3, [pc, #248]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 030c 	and.w	r3, r3, #12
 80052fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005300:	4b3b      	ldr	r3, [pc, #236]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_GetSysClockFreq+0x34>
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b0c      	cmp	r3, #12
 8005314:	d121      	bne.n	800535a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d11e      	bne.n	800535a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800531c:	4b34      	ldr	r3, [pc, #208]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b00      	cmp	r3, #0
 8005326:	d107      	bne.n	8005338 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005328:	4b31      	ldr	r3, [pc, #196]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800532a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800532e:	0a1b      	lsrs	r3, r3, #8
 8005330:	f003 030f 	and.w	r3, r3, #15
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	e005      	b.n	8005344 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005338:	4b2d      	ldr	r3, [pc, #180]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	091b      	lsrs	r3, r3, #4
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005344:	4a2b      	ldr	r2, [pc, #172]	@ (80053f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10d      	bne.n	8005370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005358:	e00a      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	2b04      	cmp	r3, #4
 800535e:	d102      	bne.n	8005366 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005360:	4b25      	ldr	r3, [pc, #148]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005362:	61bb      	str	r3, [r7, #24]
 8005364:	e004      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	2b08      	cmp	r3, #8
 800536a:	d101      	bne.n	8005370 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800536c:	4b23      	ldr	r3, [pc, #140]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x114>)
 800536e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2b0c      	cmp	r3, #12
 8005374:	d134      	bne.n	80053e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005376:	4b1e      	ldr	r3, [pc, #120]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d003      	beq.n	800538e <HAL_RCC_GetSysClockFreq+0xa6>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b03      	cmp	r3, #3
 800538a:	d003      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0xac>
 800538c:	e005      	b.n	800539a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800538e:	4b1a      	ldr	r3, [pc, #104]	@ (80053f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005390:	617b      	str	r3, [r7, #20]
      break;
 8005392:	e005      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005394:	4b19      	ldr	r3, [pc, #100]	@ (80053fc <HAL_RCC_GetSysClockFreq+0x114>)
 8005396:	617b      	str	r3, [r7, #20]
      break;
 8005398:	e002      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	617b      	str	r3, [r7, #20]
      break;
 800539e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053a0:	4b13      	ldr	r3, [pc, #76]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	3301      	adds	r3, #1
 80053ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053ae:	4b10      	ldr	r3, [pc, #64]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	fb03 f202 	mul.w	r2, r3, r2
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053c6:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	0e5b      	lsrs	r3, r3, #25
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	3301      	adds	r3, #1
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	fbb2 f3f3 	udiv	r3, r2, r3
 80053de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053e0:	69bb      	ldr	r3, [r7, #24]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3724      	adds	r7, #36	@ 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40021000 	.word	0x40021000
 80053f4:	08009ba4 	.word	0x08009ba4
 80053f8:	00f42400 	.word	0x00f42400
 80053fc:	007a1200 	.word	0x007a1200

08005400 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005404:	4b03      	ldr	r3, [pc, #12]	@ (8005414 <HAL_RCC_GetHCLKFreq+0x14>)
 8005406:	681b      	ldr	r3, [r3, #0]
}
 8005408:	4618      	mov	r0, r3
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	20000000 	.word	0x20000000

08005418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800541c:	f7ff fff0 	bl	8005400 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b06      	ldr	r3, [pc, #24]	@ (800543c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0adb      	lsrs	r3, r3, #11
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4904      	ldr	r1, [pc, #16]	@ (8005440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	f003 031f 	and.w	r3, r3, #31
 8005434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40021000 	.word	0x40021000
 8005440:	08009b9c 	.word	0x08009b9c

08005444 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	220f      	movs	r2, #15
 8005452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005454:	4b12      	ldr	r3, [pc, #72]	@ (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f003 0203 	and.w	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005460:	4b0f      	ldr	r3, [pc, #60]	@ (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800546c:	4b0c      	ldr	r3, [pc, #48]	@ (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005478:	4b09      	ldr	r3, [pc, #36]	@ (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	08db      	lsrs	r3, r3, #3
 800547e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005486:	4b07      	ldr	r3, [pc, #28]	@ (80054a4 <HAL_RCC_GetClockConfig+0x60>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0207 	and.w	r2, r3, #7
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40022000 	.word	0x40022000

080054a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054c0:	f7ff f9d2 	bl	8004868 <HAL_PWREx_GetVoltageRange>
 80054c4:	6178      	str	r0, [r7, #20]
 80054c6:	e014      	b.n	80054f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c8:	4b25      	ldr	r3, [pc, #148]	@ (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054cc:	4a24      	ldr	r2, [pc, #144]	@ (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80054d4:	4b22      	ldr	r3, [pc, #136]	@ (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054e0:	f7ff f9c2 	bl	8004868 <HAL_PWREx_GetVoltageRange>
 80054e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005560 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054f0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054f8:	d10b      	bne.n	8005512 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b80      	cmp	r3, #128	@ 0x80
 80054fe:	d919      	bls.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2ba0      	cmp	r3, #160	@ 0xa0
 8005504:	d902      	bls.n	800550c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005506:	2302      	movs	r3, #2
 8005508:	613b      	str	r3, [r7, #16]
 800550a:	e013      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800550c:	2301      	movs	r3, #1
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e010      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b80      	cmp	r3, #128	@ 0x80
 8005516:	d902      	bls.n	800551e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005518:	2303      	movs	r3, #3
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	e00a      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b80      	cmp	r3, #128	@ 0x80
 8005522:	d102      	bne.n	800552a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005524:	2302      	movs	r3, #2
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e004      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b70      	cmp	r3, #112	@ 0x70
 800552e:	d101      	bne.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005530:	2301      	movs	r3, #1
 8005532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005534:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 0207 	bic.w	r2, r3, #7
 800553c:	4909      	ldr	r1, [pc, #36]	@ (8005564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005544:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d001      	beq.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000
 8005564:	40022000 	.word	0x40022000

08005568 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e095      	b.n	80056a6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800557e:	2b00      	cmp	r3, #0
 8005580:	d108      	bne.n	8005594 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800558a:	d009      	beq.n	80055a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	61da      	str	r2, [r3, #28]
 8005592:	e005      	b.n	80055a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d106      	bne.n	80055c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7fb ff7c 	bl	80014b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055e0:	d902      	bls.n	80055e8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	e002      	b.n	80055ee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055ec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80055f6:	d007      	beq.n	8005608 <HAL_SPI_Init+0xa0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005600:	d002      	beq.n	8005608 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564a:	ea42 0103 	orr.w	r1, r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005652:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	0c1b      	lsrs	r3, r3, #16
 8005664:	f003 0204 	and.w	r2, r3, #4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005684:	ea42 0103 	orr.w	r1, r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b088      	sub	sp, #32
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	4613      	mov	r3, r2
 80056bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_SPI_Transmit+0x22>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e15f      	b.n	8005990 <HAL_SPI_Transmit+0x2e2>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d8:	f7fe fdcc 	bl	8004274 <HAL_GetTick>
 80056dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d002      	beq.n	80056f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056ee:	2302      	movs	r3, #2
 80056f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056f2:	e148      	b.n	8005986 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_SPI_Transmit+0x52>
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005704:	e13f      	b.n	8005986 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2203      	movs	r2, #3
 800570a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	88fa      	ldrh	r2, [r7, #6]
 800571e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	88fa      	ldrh	r2, [r7, #6]
 8005724:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005750:	d10f      	bne.n	8005772 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005760:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005770:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577c:	2b40      	cmp	r3, #64	@ 0x40
 800577e:	d007      	beq.n	8005790 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800578e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005798:	d94f      	bls.n	800583a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_SPI_Transmit+0xfa>
 80057a2:	8afb      	ldrh	r3, [r7, #22]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d142      	bne.n	800582e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	881a      	ldrh	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	1c9a      	adds	r2, r3, #2
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057cc:	e02f      	b.n	800582e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d112      	bne.n	8005802 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e0:	881a      	ldrh	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ec:	1c9a      	adds	r2, r3, #2
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005800:	e015      	b.n	800582e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005802:	f7fe fd37 	bl	8004274 <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d803      	bhi.n	800581a <HAL_SPI_Transmit+0x16c>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d102      	bne.n	8005820 <HAL_SPI_Transmit+0x172>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800582c:	e0ab      	b.n	8005986 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ca      	bne.n	80057ce <HAL_SPI_Transmit+0x120>
 8005838:	e080      	b.n	800593c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_SPI_Transmit+0x19a>
 8005842:	8afb      	ldrh	r3, [r7, #22]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d174      	bne.n	8005932 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d912      	bls.n	8005878 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005856:	881a      	ldrh	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005862:	1c9a      	adds	r2, r3, #2
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b02      	subs	r3, #2
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005876:	e05c      	b.n	8005932 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	330c      	adds	r3, #12
 8005882:	7812      	ldrb	r2, [r2, #0]
 8005884:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800589e:	e048      	b.n	8005932 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d12b      	bne.n	8005906 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d912      	bls.n	80058de <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058bc:	881a      	ldrh	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058c8:	1c9a      	adds	r2, r3, #2
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b02      	subs	r3, #2
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058dc:	e029      	b.n	8005932 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005904:	e015      	b.n	8005932 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005906:	f7fe fcb5 	bl	8004274 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d803      	bhi.n	800591e <HAL_SPI_Transmit+0x270>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d102      	bne.n	8005924 <HAL_SPI_Transmit+0x276>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005930:	e029      	b.n	8005986 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1b1      	bne.n	80058a0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fcf9 	bl	8006338 <SPI_EndRxTxTransaction>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2220      	movs	r2, #32
 8005950:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	77fb      	strb	r3, [r7, #31]
 800597c:	e003      	b.n	8005986 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800598e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3720      	adds	r7, #32
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d002      	beq.n	80059be <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80059b8:	2302      	movs	r3, #2
 80059ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059bc:	e11a      	b.n	8005bf4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059c6:	d112      	bne.n	80059ee <HAL_SPI_Receive+0x56>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10e      	bne.n	80059ee <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2204      	movs	r2, #4
 80059d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059d8:	88fa      	ldrh	r2, [r7, #6]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	4613      	mov	r3, r2
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f90e 	bl	8005c06 <HAL_SPI_TransmitReceive>
 80059ea:	4603      	mov	r3, r0
 80059ec:	e107      	b.n	8005bfe <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_SPI_Receive+0x64>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e100      	b.n	8005bfe <HAL_SPI_Receive+0x266>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a04:	f7fe fc36 	bl	8004274 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_SPI_Receive+0x7e>
 8005a10:	88fb      	ldrh	r3, [r7, #6]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d102      	bne.n	8005a1c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a1a:	e0eb      	b.n	8005bf4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2204      	movs	r2, #4
 8005a20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	88fa      	ldrh	r2, [r7, #6]
 8005a34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a66:	d908      	bls.n	8005a7a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a76:	605a      	str	r2, [r3, #4]
 8005a78:	e007      	b.n	8005a8a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a88:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a92:	d10f      	bne.n	8005ab4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005aa2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ab2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abe:	2b40      	cmp	r3, #64	@ 0x40
 8005ac0:	d007      	beq.n	8005ad2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ad0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ada:	d86f      	bhi.n	8005bbc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005adc:	e034      	b.n	8005b48 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d117      	bne.n	8005b1c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f103 020c 	add.w	r2, r3, #12
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005b1a:	e015      	b.n	8005b48 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b1c:	f7fe fbaa 	bl	8004274 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d803      	bhi.n	8005b34 <HAL_SPI_Receive+0x19c>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d102      	bne.n	8005b3a <HAL_SPI_Receive+0x1a2>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005b46:	e055      	b.n	8005bf4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1c4      	bne.n	8005ade <HAL_SPI_Receive+0x146>
 8005b54:	e038      	b.n	8005bc8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d115      	bne.n	8005b90 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68da      	ldr	r2, [r3, #12]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	b292      	uxth	r2, r2
 8005b70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8005b8e:	e015      	b.n	8005bbc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b90:	f7fe fb70 	bl	8004274 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d803      	bhi.n	8005ba8 <HAL_SPI_Receive+0x210>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d102      	bne.n	8005bae <HAL_SPI_Receive+0x216>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005bba:	e01b      	b.n	8005bf4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1c6      	bne.n	8005b56 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fb5b 	bl	8006288 <SPI_EndRxTransaction>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	75fb      	strb	r3, [r7, #23]
 8005bea:	e003      	b.n	8005bf4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b08a      	sub	sp, #40	@ 0x28
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c14:	2301      	movs	r3, #1
 8005c16:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_SPI_TransmitReceive+0x26>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e20a      	b.n	8006042 <HAL_SPI_TransmitReceive+0x43c>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c34:	f7fe fb1e 	bl	8004274 <HAL_GetTick>
 8005c38:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c40:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c48:	887b      	ldrh	r3, [r7, #2]
 8005c4a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c4c:	887b      	ldrh	r3, [r7, #2]
 8005c4e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c50:	7efb      	ldrb	r3, [r7, #27]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d00e      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0x6e>
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c5c:	d106      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d102      	bne.n	8005c6c <HAL_SPI_TransmitReceive+0x66>
 8005c66:	7efb      	ldrb	r3, [r7, #27]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d003      	beq.n	8005c74 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005c72:	e1e0      	b.n	8006036 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d005      	beq.n	8005c86 <HAL_SPI_TransmitReceive+0x80>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <HAL_SPI_TransmitReceive+0x80>
 8005c80:	887b      	ldrh	r3, [r7, #2]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005c8c:	e1d3      	b.n	8006036 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d003      	beq.n	8005ca2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	887a      	ldrh	r2, [r7, #2]
 8005cb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	887a      	ldrh	r2, [r7, #2]
 8005cba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	887a      	ldrh	r2, [r7, #2]
 8005cc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	887a      	ldrh	r2, [r7, #2]
 8005cce:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ce4:	d802      	bhi.n	8005cec <HAL_SPI_TransmitReceive+0xe6>
 8005ce6:	8a3b      	ldrh	r3, [r7, #16]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d908      	bls.n	8005cfe <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cfa:	605a      	str	r2, [r3, #4]
 8005cfc:	e007      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d0c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d18:	2b40      	cmp	r3, #64	@ 0x40
 8005d1a:	d007      	beq.n	8005d2c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d34:	f240 8081 	bls.w	8005e3a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_SPI_TransmitReceive+0x140>
 8005d40:	8a7b      	ldrh	r3, [r7, #18]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d16d      	bne.n	8005e22 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4a:	881a      	ldrh	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d56:	1c9a      	adds	r2, r3, #2
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d6a:	e05a      	b.n	8005e22 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d11b      	bne.n	8005db2 <HAL_SPI_TransmitReceive+0x1ac>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d016      	beq.n	8005db2 <HAL_SPI_TransmitReceive+0x1ac>
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d113      	bne.n	8005db2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8e:	881a      	ldrh	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9a:	1c9a      	adds	r2, r3, #2
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d11c      	bne.n	8005dfa <HAL_SPI_TransmitReceive+0x1f4>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d016      	beq.n	8005dfa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	b292      	uxth	r2, r2
 8005dd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dde:	1c9a      	adds	r2, r3, #2
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005df6:	2301      	movs	r3, #1
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dfa:	f7fe fa3b 	bl	8004274 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d80b      	bhi.n	8005e22 <HAL_SPI_TransmitReceive+0x21c>
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d007      	beq.n	8005e22 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005e20:	e109      	b.n	8006036 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d19f      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x166>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d199      	bne.n	8005d6c <HAL_SPI_TransmitReceive+0x166>
 8005e38:	e0e3      	b.n	8006002 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_SPI_TransmitReceive+0x244>
 8005e42:	8a7b      	ldrh	r3, [r7, #18]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	f040 80cf 	bne.w	8005fe8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d912      	bls.n	8005e7a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e58:	881a      	ldrh	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e64:	1c9a      	adds	r2, r3, #2
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b02      	subs	r3, #2
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e78:	e0b6      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ea0:	e0a2      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d134      	bne.n	8005f1a <HAL_SPI_TransmitReceive+0x314>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d02f      	beq.n	8005f1a <HAL_SPI_TransmitReceive+0x314>
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d12c      	bne.n	8005f1a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d912      	bls.n	8005ef0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ece:	881a      	ldrh	r2, [r3, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	1c9a      	adds	r2, r3, #2
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	3b02      	subs	r3, #2
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eee:	e012      	b.n	8005f16 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	330c      	adds	r3, #12
 8005efa:	7812      	ldrb	r2, [r2, #0]
 8005efc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d148      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x3b4>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d042      	beq.n	8005fba <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d923      	bls.n	8005f88 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f4a:	b292      	uxth	r2, r2
 8005f4c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	1c9a      	adds	r2, r3, #2
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b02      	subs	r3, #2
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d81f      	bhi.n	8005fb6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	e016      	b.n	8005fb6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f103 020c 	add.w	r2, r3, #12
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f94:	7812      	ldrb	r2, [r2, #0]
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fba:	f7fe f95b 	bl	8004274 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d803      	bhi.n	8005fd2 <HAL_SPI_TransmitReceive+0x3cc>
 8005fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d102      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x3d2>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d107      	bne.n	8005fe8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005fe6:	e026      	b.n	8006036 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f47f af57 	bne.w	8005ea2 <HAL_SPI_TransmitReceive+0x29c>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f47f af50 	bne.w	8005ea2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f996 	bl	8006338 <SPI_EndRxTxTransaction>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800602c:	e003      	b.n	8006036 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800603e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006042:	4618      	mov	r0, r3
 8006044:	3728      	adds	r7, #40	@ 0x28
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	603b      	str	r3, [r7, #0]
 8006058:	4613      	mov	r3, r2
 800605a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800605c:	f7fe f90a 	bl	8004274 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	4413      	add	r3, r2
 800606a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800606c:	f7fe f902 	bl	8004274 <HAL_GetTick>
 8006070:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006072:	4b39      	ldr	r3, [pc, #228]	@ (8006158 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	015b      	lsls	r3, r3, #5
 8006078:	0d1b      	lsrs	r3, r3, #20
 800607a:	69fa      	ldr	r2, [r7, #28]
 800607c:	fb02 f303 	mul.w	r3, r2, r3
 8006080:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006082:	e054      	b.n	800612e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608a:	d050      	beq.n	800612e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800608c:	f7fe f8f2 	bl	8004274 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	429a      	cmp	r2, r3
 800609a:	d902      	bls.n	80060a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d13d      	bne.n	800611e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060ba:	d111      	bne.n	80060e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060c4:	d004      	beq.n	80060d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ce:	d107      	bne.n	80060e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e8:	d10f      	bne.n	800610a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e017      	b.n	800614e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3b01      	subs	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	429a      	cmp	r2, r3
 800613c:	bf0c      	ite	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	2300      	movne	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	461a      	mov	r2, r3
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	429a      	cmp	r2, r3
 800614a:	d19b      	bne.n	8006084 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3720      	adds	r7, #32
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000000 	.word	0x20000000

0800615c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08a      	sub	sp, #40	@ 0x28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800616e:	f7fe f881 	bl	8004274 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	1a9b      	subs	r3, r3, r2
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	4413      	add	r3, r2
 800617c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800617e:	f7fe f879 	bl	8004274 <HAL_GetTick>
 8006182:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800618c:	4b3d      	ldr	r3, [pc, #244]	@ (8006284 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4413      	add	r3, r2
 8006196:	00da      	lsls	r2, r3, #3
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	0d1b      	lsrs	r3, r3, #20
 800619c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061a4:	e060      	b.n	8006268 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061ac:	d107      	bne.n	80061be <SPI_WaitFifoStateUntilTimeout+0x62>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c4:	d050      	beq.n	8006268 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061c6:	f7fe f855 	bl	8004274 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d902      	bls.n	80061dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d13d      	bne.n	8006258 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061f4:	d111      	bne.n	800621a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061fe:	d004      	beq.n	800620a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006208:	d107      	bne.n	800621a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006218:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006222:	d10f      	bne.n	8006244 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006242:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e010      	b.n	800627a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	3b01      	subs	r3, #1
 8006266:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4013      	ands	r3, r2
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	d196      	bne.n	80061a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3728      	adds	r7, #40	@ 0x28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000000 	.word	0x20000000

08006288 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800629c:	d111      	bne.n	80062c2 <SPI_EndRxTransaction+0x3a>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062a6:	d004      	beq.n	80062b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062b0:	d107      	bne.n	80062c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2200      	movs	r2, #0
 80062ca:	2180      	movs	r1, #128	@ 0x80
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff febd 	bl	800604c <SPI_WaitFlagStateUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062dc:	f043 0220 	orr.w	r2, r3, #32
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e023      	b.n	8006330 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062f0:	d11d      	bne.n	800632e <SPI_EndRxTransaction+0xa6>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062fa:	d004      	beq.n	8006306 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006304:	d113      	bne.n	800632e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2200      	movs	r2, #0
 800630e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff ff22 	bl	800615c <SPI_WaitFifoStateUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d007      	beq.n	800632e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006322:	f043 0220 	orr.w	r2, r3, #32
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e000      	b.n	8006330 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af02      	add	r7, sp, #8
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2200      	movs	r2, #0
 800634c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f7ff ff03 	bl	800615c <SPI_WaitFifoStateUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d007      	beq.n	800636c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006360:	f043 0220 	orr.w	r2, r3, #32
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e027      	b.n	80063bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2200      	movs	r2, #0
 8006374:	2180      	movs	r1, #128	@ 0x80
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff fe68 	bl	800604c <SPI_WaitFlagStateUntilTimeout>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006386:	f043 0220 	orr.w	r2, r3, #32
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e014      	b.n	80063bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2200      	movs	r2, #0
 800639a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7ff fedc 	bl	800615c <SPI_WaitFifoStateUntilTimeout>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ae:	f043 0220 	orr.w	r2, r3, #32
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e000      	b.n	80063bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e049      	b.n	800646a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f841 	bl	8006472 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f000 f9da 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
	...

08006488 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b01      	cmp	r3, #1
 800649a:	d001      	beq.n	80064a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e04f      	b.n	8006540 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a23      	ldr	r2, [pc, #140]	@ (800654c <HAL_TIM_Base_Start_IT+0xc4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01d      	beq.n	80064fe <HAL_TIM_Base_Start_IT+0x76>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ca:	d018      	beq.n	80064fe <HAL_TIM_Base_Start_IT+0x76>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006550 <HAL_TIM_Base_Start_IT+0xc8>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <HAL_TIM_Base_Start_IT+0x76>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1e      	ldr	r2, [pc, #120]	@ (8006554 <HAL_TIM_Base_Start_IT+0xcc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00e      	beq.n	80064fe <HAL_TIM_Base_Start_IT+0x76>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006558 <HAL_TIM_Base_Start_IT+0xd0>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <HAL_TIM_Base_Start_IT+0x76>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1b      	ldr	r2, [pc, #108]	@ (800655c <HAL_TIM_Base_Start_IT+0xd4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_TIM_Base_Start_IT+0x76>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a19      	ldr	r2, [pc, #100]	@ (8006560 <HAL_TIM_Base_Start_IT+0xd8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d115      	bne.n	800652a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	4b17      	ldr	r3, [pc, #92]	@ (8006564 <HAL_TIM_Base_Start_IT+0xdc>)
 8006506:	4013      	ands	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b06      	cmp	r3, #6
 800650e:	d015      	beq.n	800653c <HAL_TIM_Base_Start_IT+0xb4>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006516:	d011      	beq.n	800653c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006528:	e008      	b.n	800653c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f042 0201 	orr.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e000      	b.n	800653e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800653c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40013400 	.word	0x40013400
 8006560:	40014000 	.word	0x40014000
 8006564:	00010007 	.word	0x00010007

08006568 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d020      	beq.n	80065cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0202 	mvn.w	r2, #2
 800659c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f8e4 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 80065b8:	e005      	b.n	80065c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f8d6 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 f8e7 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d020      	beq.n	8006618 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01b      	beq.n	8006618 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0204 	mvn.w	r2, #4
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f8be 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f8b0 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f8c1 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d020      	beq.n	8006664 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01b      	beq.n	8006664 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0208 	mvn.w	r2, #8
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2204      	movs	r2, #4
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f898 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f88a 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f89b 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	2b00      	cmp	r3, #0
 800666c:	d020      	beq.n	80066b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01b      	beq.n	80066b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0210 	mvn.w	r2, #16
 8006680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2208      	movs	r2, #8
 8006686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f872 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 800669c:	e005      	b.n	80066aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f864 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f875 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d007      	beq.n	80066d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f06f 0201 	mvn.w	r2, #1
 80066cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fa fe9c 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00c      	beq.n	80066f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d007      	beq.n	80066f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80066f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f906 	bl	8006904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00c      	beq.n	800671c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006708:	2b00      	cmp	r3, #0
 800670a:	d007      	beq.n	800671c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8fe 	bl	8006918 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00c      	beq.n	8006740 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f834 	bl	80067a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00c      	beq.n	8006764 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f003 0320 	and.w	r3, r3, #32
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f06f 0220 	mvn.w	r2, #32
 800675c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f8c6 	bl	80068f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006764:	bf00      	nop
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a40      	ldr	r2, [pc, #256]	@ (80068d0 <TIM_Base_SetConfig+0x114>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d013      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067da:	d00f      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a3d      	ldr	r2, [pc, #244]	@ (80068d4 <TIM_Base_SetConfig+0x118>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00b      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a3c      	ldr	r2, [pc, #240]	@ (80068d8 <TIM_Base_SetConfig+0x11c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d007      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a3b      	ldr	r2, [pc, #236]	@ (80068dc <TIM_Base_SetConfig+0x120>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d003      	beq.n	80067fc <TIM_Base_SetConfig+0x40>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a3a      	ldr	r2, [pc, #232]	@ (80068e0 <TIM_Base_SetConfig+0x124>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d108      	bne.n	800680e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2f      	ldr	r2, [pc, #188]	@ (80068d0 <TIM_Base_SetConfig+0x114>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01f      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800681c:	d01b      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2c      	ldr	r2, [pc, #176]	@ (80068d4 <TIM_Base_SetConfig+0x118>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d017      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2b      	ldr	r2, [pc, #172]	@ (80068d8 <TIM_Base_SetConfig+0x11c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d013      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2a      	ldr	r2, [pc, #168]	@ (80068dc <TIM_Base_SetConfig+0x120>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00f      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a29      	ldr	r2, [pc, #164]	@ (80068e0 <TIM_Base_SetConfig+0x124>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00b      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a28      	ldr	r2, [pc, #160]	@ (80068e4 <TIM_Base_SetConfig+0x128>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d007      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a27      	ldr	r2, [pc, #156]	@ (80068e8 <TIM_Base_SetConfig+0x12c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d003      	beq.n	8006856 <TIM_Base_SetConfig+0x9a>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a26      	ldr	r2, [pc, #152]	@ (80068ec <TIM_Base_SetConfig+0x130>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d108      	bne.n	8006868 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a10      	ldr	r2, [pc, #64]	@ (80068d0 <TIM_Base_SetConfig+0x114>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d00f      	beq.n	80068b4 <TIM_Base_SetConfig+0xf8>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a12      	ldr	r2, [pc, #72]	@ (80068e0 <TIM_Base_SetConfig+0x124>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00b      	beq.n	80068b4 <TIM_Base_SetConfig+0xf8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a11      	ldr	r2, [pc, #68]	@ (80068e4 <TIM_Base_SetConfig+0x128>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d007      	beq.n	80068b4 <TIM_Base_SetConfig+0xf8>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a10      	ldr	r2, [pc, #64]	@ (80068e8 <TIM_Base_SetConfig+0x12c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_Base_SetConfig+0xf8>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a0f      	ldr	r2, [pc, #60]	@ (80068ec <TIM_Base_SetConfig+0x130>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d103      	bne.n	80068bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	615a      	str	r2, [r3, #20]
}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	40000c00 	.word	0x40000c00
 80068e0:	40013400 	.word	0x40013400
 80068e4:	40014000 	.word	0x40014000
 80068e8:	40014400 	.word	0x40014400
 80068ec:	40014800 	.word	0x40014800

080068f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <SysTick_Handler+0x1c>)
 8006932:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006934:	f001 fe4e 	bl	80085d4 <xTaskGetSchedulerState>
 8006938:	4603      	mov	r3, r0
 800693a:	2b01      	cmp	r3, #1
 800693c:	d001      	beq.n	8006942 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800693e:	f002 fd43 	bl	80093c8 <xPortSysTickHandler>
  }
}
 8006942:	bf00      	nop
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	e000e010 	.word	0xe000e010

0800694c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4a07      	ldr	r2, [pc, #28]	@ (8006978 <vApplicationGetIdleTaskMemory+0x2c>)
 800695c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4a06      	ldr	r2, [pc, #24]	@ (800697c <vApplicationGetIdleTaskMemory+0x30>)
 8006962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2280      	movs	r2, #128	@ 0x80
 8006968:	601a      	str	r2, [r3, #0]
}
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20000170 	.word	0x20000170
 800697c:	20000218 	.word	0x20000218

08006980 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a07      	ldr	r2, [pc, #28]	@ (80069ac <vApplicationGetTimerTaskMemory+0x2c>)
 8006990:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4a06      	ldr	r2, [pc, #24]	@ (80069b0 <vApplicationGetTimerTaskMemory+0x30>)
 8006996:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800699e:	601a      	str	r2, [r3, #0]
}
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	20000418 	.word	0x20000418
 80069b0:	200004c0 	.word	0x200004c0

080069b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f103 0208 	add.w	r2, r3, #8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295
 80069cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f103 0208 	add.w	r2, r3, #8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f103 0208 	add.w	r2, r3, #8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	601a      	str	r2, [r3, #0]
}
 8006a4a:	bf00      	nop
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d103      	bne.n	8006a76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e00c      	b.n	8006a90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e002      	b.n	8006a84 <vListInsert+0x2e>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	60fb      	str	r3, [r7, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d2f6      	bcs.n	8006a7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	601a      	str	r2, [r3, #0]
}
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6892      	ldr	r2, [r2, #8]
 8006ade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6852      	ldr	r2, [r2, #4]
 8006ae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d103      	bne.n	8006afc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	1e5a      	subs	r2, r3, #1
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10b      	bne.n	8006b48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	e7fd      	b.n	8006b44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b48:	f002 fbae 	bl	80092a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b54:	68f9      	ldr	r1, [r7, #12]
 8006b56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b58:	fb01 f303 	mul.w	r3, r1, r3
 8006b5c:	441a      	add	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	68f9      	ldr	r1, [r7, #12]
 8006b7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b7e:	fb01 f303 	mul.w	r3, r1, r3
 8006b82:	441a      	add	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	22ff      	movs	r2, #255	@ 0xff
 8006b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	22ff      	movs	r2, #255	@ 0xff
 8006b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d114      	bne.n	8006bc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01a      	beq.n	8006bdc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3310      	adds	r3, #16
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 fb4c 	bl	8008248 <xTaskRemoveFromEventList>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d012      	beq.n	8006bdc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bec <xQueueGenericReset+0xd0>)
 8006bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	e009      	b.n	8006bdc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3310      	adds	r3, #16
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fef1 	bl	80069b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3324      	adds	r3, #36	@ 0x24
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff feec 	bl	80069b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bdc:	f002 fb96 	bl	800930c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006be0:	2301      	movs	r3, #1
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	e000ed04 	.word	0xe000ed04

08006bf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08e      	sub	sp, #56	@ 0x38
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10b      	bne.n	8006c3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	e7fd      	b.n	8006c36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <xQueueGenericCreateStatic+0x56>
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <xQueueGenericCreateStatic+0x5a>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <xQueueGenericCreateStatic+0x5c>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10b      	bne.n	8006c68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	623b      	str	r3, [r7, #32]
}
 8006c62:	bf00      	nop
 8006c64:	bf00      	nop
 8006c66:	e7fd      	b.n	8006c64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <xQueueGenericCreateStatic+0x84>
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <xQueueGenericCreateStatic+0x88>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <xQueueGenericCreateStatic+0x8a>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10b      	bne.n	8006c96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	61fb      	str	r3, [r7, #28]
}
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	e7fd      	b.n	8006c92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c96:	2350      	movs	r3, #80	@ 0x50
 8006c98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b50      	cmp	r3, #80	@ 0x50
 8006c9e:	d00b      	beq.n	8006cb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	61bb      	str	r3, [r7, #24]
}
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	e7fd      	b.n	8006cb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00d      	beq.n	8006ce0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ccc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	68b9      	ldr	r1, [r7, #8]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f840 	bl	8006d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3730      	adds	r7, #48	@ 0x30
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b08a      	sub	sp, #40	@ 0x28
 8006cee:	af02      	add	r7, sp, #8
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10b      	bne.n	8006d16 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	613b      	str	r3, [r7, #16]
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	e7fd      	b.n	8006d12 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	fb02 f303 	mul.w	r3, r2, r3
 8006d1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	3350      	adds	r3, #80	@ 0x50
 8006d24:	4618      	mov	r0, r3
 8006d26:	f002 fbe1 	bl	80094ec <pvPortMalloc>
 8006d2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d011      	beq.n	8006d56 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	3350      	adds	r3, #80	@ 0x50
 8006d3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d44:	79fa      	ldrb	r2, [r7, #7]
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f805 	bl	8006d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d56:	69bb      	ldr	r3, [r7, #24]
	}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3720      	adds	r7, #32
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d103      	bne.n	8006d7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	e002      	b.n	8006d82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d8e:	2101      	movs	r1, #1
 8006d90:	69b8      	ldr	r0, [r7, #24]
 8006d92:	f7ff fec3 	bl	8006b1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	78fa      	ldrb	r2, [r7, #3]
 8006d9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d9e:	bf00      	nop
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00e      	beq.n	8006dd2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2100      	movs	r1, #0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f81d 	bl	8006e0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b086      	sub	sp, #24
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	4603      	mov	r3, r0
 8006de2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006de4:	2301      	movs	r3, #1
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	2300      	movs	r3, #0
 8006dea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	461a      	mov	r2, r3
 8006df0:	6939      	ldr	r1, [r7, #16]
 8006df2:	6978      	ldr	r0, [r7, #20]
 8006df4:	f7ff ff79 	bl	8006cea <xQueueGenericCreate>
 8006df8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff ffd3 	bl	8006da6 <prvInitialiseMutex>

		return xNewQueue;
 8006e00:	68fb      	ldr	r3, [r7, #12]
	}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08e      	sub	sp, #56	@ 0x38
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10b      	bne.n	8006e40 <xQueueGenericSend+0x34>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e3a:	bf00      	nop
 8006e3c:	bf00      	nop
 8006e3e:	e7fd      	b.n	8006e3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <xQueueGenericSend+0x42>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <xQueueGenericSend+0x46>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e000      	b.n	8006e54 <xQueueGenericSend+0x48>
 8006e52:	2300      	movs	r3, #0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10b      	bne.n	8006e70 <xQueueGenericSend+0x64>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	e7fd      	b.n	8006e6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d103      	bne.n	8006e7e <xQueueGenericSend+0x72>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d101      	bne.n	8006e82 <xQueueGenericSend+0x76>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <xQueueGenericSend+0x78>
 8006e82:	2300      	movs	r3, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10b      	bne.n	8006ea0 <xQueueGenericSend+0x94>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	623b      	str	r3, [r7, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	bf00      	nop
 8006e9e:	e7fd      	b.n	8006e9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ea0:	f001 fb98 	bl	80085d4 <xTaskGetSchedulerState>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d102      	bne.n	8006eb0 <xQueueGenericSend+0xa4>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <xQueueGenericSend+0xa8>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <xQueueGenericSend+0xaa>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <xQueueGenericSend+0xc6>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	61fb      	str	r3, [r7, #28]
}
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ed2:	f002 f9e9 	bl	80092a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d302      	bcc.n	8006ee8 <xQueueGenericSend+0xdc>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d129      	bne.n	8006f3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eee:	f000 fb37 	bl	8007560 <prvCopyDataToQueue>
 8006ef2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d010      	beq.n	8006f1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	3324      	adds	r3, #36	@ 0x24
 8006f00:	4618      	mov	r0, r3
 8006f02:	f001 f9a1 	bl	8008248 <xTaskRemoveFromEventList>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d013      	beq.n	8006f34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800700c <xQueueGenericSend+0x200>)
 8006f0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	e00a      	b.n	8006f34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f24:	4b39      	ldr	r3, [pc, #228]	@ (800700c <xQueueGenericSend+0x200>)
 8006f26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f34:	f002 f9ea 	bl	800930c <vPortExitCritical>
				return pdPASS;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e063      	b.n	8007004 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d103      	bne.n	8006f4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f42:	f002 f9e3 	bl	800930c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	e05c      	b.n	8007004 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f50:	f107 0314 	add.w	r3, r7, #20
 8006f54:	4618      	mov	r0, r3
 8006f56:	f001 f9db 	bl	8008310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f5e:	f002 f9d5 	bl	800930c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f62:	f000 ff43 	bl	8007dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f66:	f002 f99f 	bl	80092a8 <vPortEnterCritical>
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f70:	b25b      	sxtb	r3, r3
 8006f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f76:	d103      	bne.n	8006f80 <xQueueGenericSend+0x174>
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f86:	b25b      	sxtb	r3, r3
 8006f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8c:	d103      	bne.n	8006f96 <xQueueGenericSend+0x18a>
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f96:	f002 f9b9 	bl	800930c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f9a:	1d3a      	adds	r2, r7, #4
 8006f9c:	f107 0314 	add.w	r3, r7, #20
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 f9ca 	bl	800833c <xTaskCheckForTimeOut>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d124      	bne.n	8006ff8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fb0:	f000 fbce 	bl	8007750 <prvIsQueueFull>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d018      	beq.n	8006fec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fbc:	3310      	adds	r3, #16
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 f8ee 	bl	80081a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fca:	f000 fb59 	bl	8007680 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fce:	f000 ff1b 	bl	8007e08 <xTaskResumeAll>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f47f af7c 	bne.w	8006ed2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006fda:	4b0c      	ldr	r3, [pc, #48]	@ (800700c <xQueueGenericSend+0x200>)
 8006fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	e772      	b.n	8006ed2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006fec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fee:	f000 fb47 	bl	8007680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ff2:	f000 ff09 	bl	8007e08 <xTaskResumeAll>
 8006ff6:	e76c      	b.n	8006ed2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ff8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ffa:	f000 fb41 	bl	8007680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ffe:	f000 ff03 	bl	8007e08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007002:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007004:	4618      	mov	r0, r3
 8007006:	3738      	adds	r7, #56	@ 0x38
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	e000ed04 	.word	0xe000ed04

08007010 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b090      	sub	sp, #64	@ 0x40
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10b      	bne.n	8007040 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800703a:	bf00      	nop
 800703c:	bf00      	nop
 800703e:	e7fd      	b.n	800703c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d103      	bne.n	800704e <xQueueGenericSendFromISR+0x3e>
 8007046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <xQueueGenericSendFromISR+0x42>
 800704e:	2301      	movs	r3, #1
 8007050:	e000      	b.n	8007054 <xQueueGenericSendFromISR+0x44>
 8007052:	2300      	movs	r3, #0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10b      	bne.n	8007070 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800706a:	bf00      	nop
 800706c:	bf00      	nop
 800706e:	e7fd      	b.n	800706c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d103      	bne.n	800707e <xQueueGenericSendFromISR+0x6e>
 8007076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <xQueueGenericSendFromISR+0x72>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <xQueueGenericSendFromISR+0x74>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10b      	bne.n	80070a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	623b      	str	r3, [r7, #32]
}
 800709a:	bf00      	nop
 800709c:	bf00      	nop
 800709e:	e7fd      	b.n	800709c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070a0:	f002 f9e2 	bl	8009468 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070a4:	f3ef 8211 	mrs	r2, BASEPRI
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	61fa      	str	r2, [r7, #28]
 80070ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d302      	bcc.n	80070d2 <xQueueGenericSendFromISR+0xc2>
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d12f      	bne.n	8007132 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	68b9      	ldr	r1, [r7, #8]
 80070e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070e8:	f000 fa3a 	bl	8007560 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d112      	bne.n	800711c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d016      	beq.n	800712c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007100:	3324      	adds	r3, #36	@ 0x24
 8007102:	4618      	mov	r0, r3
 8007104:	f001 f8a0 	bl	8008248 <xTaskRemoveFromEventList>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00b      	beq.n	800712c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	e007      	b.n	800712c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800711c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007120:	3301      	adds	r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	b25a      	sxtb	r2, r3
 8007126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800712c:	2301      	movs	r3, #1
 800712e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007130:	e001      	b.n	8007136 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007132:	2300      	movs	r3, #0
 8007134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007138:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007140:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007144:	4618      	mov	r0, r3
 8007146:	3740      	adds	r7, #64	@ 0x40
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08c      	sub	sp, #48	@ 0x30
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007158:	2300      	movs	r3, #0
 800715a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10b      	bne.n	800717e <xQueueReceive+0x32>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716a:	f383 8811 	msr	BASEPRI, r3
 800716e:	f3bf 8f6f 	isb	sy
 8007172:	f3bf 8f4f 	dsb	sy
 8007176:	623b      	str	r3, [r7, #32]
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	e7fd      	b.n	800717a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <xQueueReceive+0x40>
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d101      	bne.n	8007190 <xQueueReceive+0x44>
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <xQueueReceive+0x46>
 8007190:	2300      	movs	r3, #0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10b      	bne.n	80071ae <xQueueReceive+0x62>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	61fb      	str	r3, [r7, #28]
}
 80071a8:	bf00      	nop
 80071aa:	bf00      	nop
 80071ac:	e7fd      	b.n	80071aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ae:	f001 fa11 	bl	80085d4 <xTaskGetSchedulerState>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <xQueueReceive+0x72>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <xQueueReceive+0x76>
 80071be:	2301      	movs	r3, #1
 80071c0:	e000      	b.n	80071c4 <xQueueReceive+0x78>
 80071c2:	2300      	movs	r3, #0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10b      	bne.n	80071e0 <xQueueReceive+0x94>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	61bb      	str	r3, [r7, #24]
}
 80071da:	bf00      	nop
 80071dc:	bf00      	nop
 80071de:	e7fd      	b.n	80071dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071e0:	f002 f862 	bl	80092a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01f      	beq.n	8007230 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071f4:	f000 fa1e 	bl	8007634 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	1e5a      	subs	r2, r3, #1
 80071fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00f      	beq.n	8007228 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	3310      	adds	r3, #16
 800720c:	4618      	mov	r0, r3
 800720e:	f001 f81b 	bl	8008248 <xTaskRemoveFromEventList>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007218:	4b3c      	ldr	r3, [pc, #240]	@ (800730c <xQueueReceive+0x1c0>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007228:	f002 f870 	bl	800930c <vPortExitCritical>
				return pdPASS;
 800722c:	2301      	movs	r3, #1
 800722e:	e069      	b.n	8007304 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007236:	f002 f869 	bl	800930c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800723a:	2300      	movs	r3, #0
 800723c:	e062      	b.n	8007304 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007244:	f107 0310 	add.w	r3, r7, #16
 8007248:	4618      	mov	r0, r3
 800724a:	f001 f861 	bl	8008310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800724e:	2301      	movs	r3, #1
 8007250:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007252:	f002 f85b 	bl	800930c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007256:	f000 fdc9 	bl	8007dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800725a:	f002 f825 	bl	80092a8 <vPortEnterCritical>
 800725e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007264:	b25b      	sxtb	r3, r3
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d103      	bne.n	8007274 <xQueueReceive+0x128>
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800727a:	b25b      	sxtb	r3, r3
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d103      	bne.n	800728a <xQueueReceive+0x13e>
 8007282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800728a:	f002 f83f 	bl	800930c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800728e:	1d3a      	adds	r2, r7, #4
 8007290:	f107 0310 	add.w	r3, r7, #16
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f001 f850 	bl	800833c <xTaskCheckForTimeOut>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d123      	bne.n	80072ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072a4:	f000 fa3e 	bl	8007724 <prvIsQueueEmpty>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d017      	beq.n	80072de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b0:	3324      	adds	r3, #36	@ 0x24
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 ff74 	bl	80081a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072be:	f000 f9df 	bl	8007680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072c2:	f000 fda1 	bl	8007e08 <xTaskResumeAll>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d189      	bne.n	80071e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80072cc:	4b0f      	ldr	r3, [pc, #60]	@ (800730c <xQueueReceive+0x1c0>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	e780      	b.n	80071e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072e0:	f000 f9ce 	bl	8007680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072e4:	f000 fd90 	bl	8007e08 <xTaskResumeAll>
 80072e8:	e77a      	b.n	80071e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072ec:	f000 f9c8 	bl	8007680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072f0:	f000 fd8a 	bl	8007e08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072f6:	f000 fa15 	bl	8007724 <prvIsQueueEmpty>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f43f af6f 	beq.w	80071e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007302:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007304:	4618      	mov	r0, r3
 8007306:	3730      	adds	r7, #48	@ 0x30
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	e000ed04 	.word	0xe000ed04

08007310 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08e      	sub	sp, #56	@ 0x38
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800731a:	2300      	movs	r3, #0
 800731c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007322:	2300      	movs	r3, #0
 8007324:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	623b      	str	r3, [r7, #32]
}
 800733e:	bf00      	nop
 8007340:	bf00      	nop
 8007342:	e7fd      	b.n	8007340 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	61fb      	str	r3, [r7, #28]
}
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	e7fd      	b.n	8007360 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007364:	f001 f936 	bl	80085d4 <xTaskGetSchedulerState>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d102      	bne.n	8007374 <xQueueSemaphoreTake+0x64>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <xQueueSemaphoreTake+0x68>
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <xQueueSemaphoreTake+0x6a>
 8007378:	2300      	movs	r3, #0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10b      	bne.n	8007396 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	61bb      	str	r3, [r7, #24]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007396:	f001 ff87 	bl	80092a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800739a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d024      	beq.n	80073f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	1e5a      	subs	r2, r3, #1
 80073aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073b6:	f001 fa87 	bl	80088c8 <pvTaskIncrementMutexHeldCount>
 80073ba:	4602      	mov	r2, r0
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00f      	beq.n	80073e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ca:	3310      	adds	r3, #16
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 ff3b 	bl	8008248 <xTaskRemoveFromEventList>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d007      	beq.n	80073e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80073d8:	4b54      	ldr	r3, [pc, #336]	@ (800752c <xQueueSemaphoreTake+0x21c>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80073e8:	f001 ff90 	bl	800930c <vPortExitCritical>
				return pdPASS;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e098      	b.n	8007522 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d112      	bne.n	800741c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80073f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	617b      	str	r3, [r7, #20]
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	e7fd      	b.n	8007410 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007414:	f001 ff7a 	bl	800930c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007418:	2300      	movs	r3, #0
 800741a:	e082      	b.n	8007522 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800741c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007422:	f107 030c 	add.w	r3, r7, #12
 8007426:	4618      	mov	r0, r3
 8007428:	f000 ff72 	bl	8008310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007430:	f001 ff6c 	bl	800930c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007434:	f000 fcda 	bl	8007dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007438:	f001 ff36 	bl	80092a8 <vPortEnterCritical>
 800743c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007442:	b25b      	sxtb	r3, r3
 8007444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007448:	d103      	bne.n	8007452 <xQueueSemaphoreTake+0x142>
 800744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007458:	b25b      	sxtb	r3, r3
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d103      	bne.n	8007468 <xQueueSemaphoreTake+0x158>
 8007460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007468:	f001 ff50 	bl	800930c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800746c:	463a      	mov	r2, r7
 800746e:	f107 030c 	add.w	r3, r7, #12
 8007472:	4611      	mov	r1, r2
 8007474:	4618      	mov	r0, r3
 8007476:	f000 ff61 	bl	800833c <xTaskCheckForTimeOut>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d132      	bne.n	80074e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007480:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007482:	f000 f94f 	bl	8007724 <prvIsQueueEmpty>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d026      	beq.n	80074da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800748c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007494:	f001 ff08 	bl	80092a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	4618      	mov	r0, r3
 800749e:	f001 f8b7 	bl	8008610 <xTaskPriorityInherit>
 80074a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80074a4:	f001 ff32 	bl	800930c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074aa:	3324      	adds	r3, #36	@ 0x24
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	4611      	mov	r1, r2
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fe77 	bl	80081a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074b8:	f000 f8e2 	bl	8007680 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074bc:	f000 fca4 	bl	8007e08 <xTaskResumeAll>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f47f af67 	bne.w	8007396 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80074c8:	4b18      	ldr	r3, [pc, #96]	@ (800752c <xQueueSemaphoreTake+0x21c>)
 80074ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	e75d      	b.n	8007396 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80074da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074dc:	f000 f8d0 	bl	8007680 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074e0:	f000 fc92 	bl	8007e08 <xTaskResumeAll>
 80074e4:	e757      	b.n	8007396 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80074e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074e8:	f000 f8ca 	bl	8007680 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074ec:	f000 fc8c 	bl	8007e08 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80074f2:	f000 f917 	bl	8007724 <prvIsQueueEmpty>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f43f af4c 	beq.w	8007396 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80074fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00d      	beq.n	8007520 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007504:	f001 fed0 	bl	80092a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007508:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800750a:	f000 f811 	bl	8007530 <prvGetDisinheritPriorityAfterTimeout>
 800750e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007516:	4618      	mov	r0, r3
 8007518:	f001 f952 	bl	80087c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800751c:	f001 fef6 	bl	800930c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007520:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007522:	4618      	mov	r0, r3
 8007524:	3738      	adds	r7, #56	@ 0x38
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753c:	2b00      	cmp	r3, #0
 800753e:	d006      	beq.n	800754e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800754a:	60fb      	str	r3, [r7, #12]
 800754c:	e001      	b.n	8007552 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800754e:	2300      	movs	r3, #0
 8007550:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007552:	68fb      	ldr	r3, [r7, #12]
	}
 8007554:	4618      	mov	r0, r3
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800756c:	2300      	movs	r3, #0
 800756e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007574:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10d      	bne.n	800759a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d14d      	bne.n	8007622 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	4618      	mov	r0, r3
 800758c:	f001 f8a8 	bl	80086e0 <xTaskPriorityDisinherit>
 8007590:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	e043      	b.n	8007622 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d119      	bne.n	80075d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6858      	ldr	r0, [r3, #4]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a8:	461a      	mov	r2, r3
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	f002 fa10 	bl	80099d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b8:	441a      	add	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685a      	ldr	r2, [r3, #4]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d32b      	bcc.n	8007622 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	e026      	b.n	8007622 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68d8      	ldr	r0, [r3, #12]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075dc:	461a      	mov	r2, r3
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	f002 f9f6 	bl	80099d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68da      	ldr	r2, [r3, #12]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ec:	425b      	negs	r3, r3
 80075ee:	441a      	add	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	68da      	ldr	r2, [r3, #12]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d207      	bcs.n	8007610 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689a      	ldr	r2, [r3, #8]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007608:	425b      	negs	r3, r3
 800760a:	441a      	add	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d105      	bne.n	8007622 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3b01      	subs	r3, #1
 8007620:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800762a:	697b      	ldr	r3, [r7, #20]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3718      	adds	r7, #24
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d018      	beq.n	8007678 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68da      	ldr	r2, [r3, #12]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764e:	441a      	add	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	429a      	cmp	r2, r3
 800765e:	d303      	bcc.n	8007668 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68d9      	ldr	r1, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	461a      	mov	r2, r3
 8007672:	6838      	ldr	r0, [r7, #0]
 8007674:	f002 f9ac 	bl	80099d0 <memcpy>
	}
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007688:	f001 fe0e 	bl	80092a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007692:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007694:	e011      	b.n	80076ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	d012      	beq.n	80076c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3324      	adds	r3, #36	@ 0x24
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 fdd0 	bl	8008248 <xTaskRemoveFromEventList>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076ae:	f000 fea9 	bl	8008404 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dce9      	bgt.n	8007696 <prvUnlockQueue+0x16>
 80076c2:	e000      	b.n	80076c6 <prvUnlockQueue+0x46>
					break;
 80076c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	22ff      	movs	r2, #255	@ 0xff
 80076ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076ce:	f001 fe1d 	bl	800930c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076d2:	f001 fde9 	bl	80092a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076de:	e011      	b.n	8007704 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d012      	beq.n	800770e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3310      	adds	r3, #16
 80076ec:	4618      	mov	r0, r3
 80076ee:	f000 fdab 	bl	8008248 <xTaskRemoveFromEventList>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076f8:	f000 fe84 	bl	8008404 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	3b01      	subs	r3, #1
 8007700:	b2db      	uxtb	r3, r3
 8007702:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007708:	2b00      	cmp	r3, #0
 800770a:	dce9      	bgt.n	80076e0 <prvUnlockQueue+0x60>
 800770c:	e000      	b.n	8007710 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800770e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	22ff      	movs	r2, #255	@ 0xff
 8007714:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007718:	f001 fdf8 	bl	800930c <vPortExitCritical>
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800772c:	f001 fdbc 	bl	80092a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007734:	2b00      	cmp	r3, #0
 8007736:	d102      	bne.n	800773e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007738:	2301      	movs	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	e001      	b.n	8007742 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007742:	f001 fde3 	bl	800930c <vPortExitCritical>

	return xReturn;
 8007746:	68fb      	ldr	r3, [r7, #12]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007758:	f001 fda6 	bl	80092a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007764:	429a      	cmp	r2, r3
 8007766:	d102      	bne.n	800776e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007768:	2301      	movs	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e001      	b.n	8007772 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007772:	f001 fdcb 	bl	800930c <vPortExitCritical>

	return xReturn;
 8007776:	68fb      	ldr	r3, [r7, #12]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800778a:	2300      	movs	r3, #0
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	e014      	b.n	80077ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007790:	4a0f      	ldr	r2, [pc, #60]	@ (80077d0 <vQueueAddToRegistry+0x50>)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800779c:	490c      	ldr	r1, [pc, #48]	@ (80077d0 <vQueueAddToRegistry+0x50>)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80077a6:	4a0a      	ldr	r2, [pc, #40]	@ (80077d0 <vQueueAddToRegistry+0x50>)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4413      	add	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80077b2:	e006      	b.n	80077c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3301      	adds	r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b07      	cmp	r3, #7
 80077be:	d9e7      	bls.n	8007790 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80077c0:	bf00      	nop
 80077c2:	bf00      	nop
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	200008c0 	.word	0x200008c0

080077d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077e4:	f001 fd60 	bl	80092a8 <vPortEnterCritical>
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077ee:	b25b      	sxtb	r3, r3
 80077f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077f4:	d103      	bne.n	80077fe <vQueueWaitForMessageRestricted+0x2a>
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007804:	b25b      	sxtb	r3, r3
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	d103      	bne.n	8007814 <vQueueWaitForMessageRestricted+0x40>
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007814:	f001 fd7a 	bl	800930c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781c:	2b00      	cmp	r3, #0
 800781e:	d106      	bne.n	800782e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	3324      	adds	r3, #36	@ 0x24
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	68b9      	ldr	r1, [r7, #8]
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fce1 	bl	80081f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800782e:	6978      	ldr	r0, [r7, #20]
 8007830:	f7ff ff26 	bl	8007680 <prvUnlockQueue>
	}
 8007834:	bf00      	nop
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08e      	sub	sp, #56	@ 0x38
 8007840:	af04      	add	r7, sp, #16
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800784a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10b      	bne.n	8007868 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	623b      	str	r3, [r7, #32]
}
 8007862:	bf00      	nop
 8007864:	bf00      	nop
 8007866:	e7fd      	b.n	8007864 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10b      	bne.n	8007886 <xTaskCreateStatic+0x4a>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	61fb      	str	r3, [r7, #28]
}
 8007880:	bf00      	nop
 8007882:	bf00      	nop
 8007884:	e7fd      	b.n	8007882 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007886:	23a8      	movs	r3, #168	@ 0xa8
 8007888:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2ba8      	cmp	r3, #168	@ 0xa8
 800788e:	d00b      	beq.n	80078a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	61bb      	str	r3, [r7, #24]
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d01e      	beq.n	80078ee <xTaskCreateStatic+0xb2>
 80078b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d01b      	beq.n	80078ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078c8:	2300      	movs	r3, #0
 80078ca:	9303      	str	r3, [sp, #12]
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	9302      	str	r3, [sp, #8]
 80078d0:	f107 0314 	add.w	r3, r7, #20
 80078d4:	9301      	str	r3, [sp, #4]
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f851 	bl	8007988 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078e8:	f000 f8f6 	bl	8007ad8 <prvAddNewTaskToReadyList>
 80078ec:	e001      	b.n	80078f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80078ee:	2300      	movs	r3, #0
 80078f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078f2:	697b      	ldr	r3, [r7, #20]
	}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3728      	adds	r7, #40	@ 0x28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08c      	sub	sp, #48	@ 0x30
 8007900:	af04      	add	r7, sp, #16
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	4613      	mov	r3, r2
 800790a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800790c:	88fb      	ldrh	r3, [r7, #6]
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fdeb 	bl	80094ec <pvPortMalloc>
 8007916:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00e      	beq.n	800793c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800791e:	20a8      	movs	r0, #168	@ 0xa8
 8007920:	f001 fde4 	bl	80094ec <pvPortMalloc>
 8007924:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d003      	beq.n	8007934 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	631a      	str	r2, [r3, #48]	@ 0x30
 8007932:	e005      	b.n	8007940 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007934:	6978      	ldr	r0, [r7, #20]
 8007936:	f001 fea7 	bl	8009688 <vPortFree>
 800793a:	e001      	b.n	8007940 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d017      	beq.n	8007976 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800794e:	88fa      	ldrh	r2, [r7, #6]
 8007950:	2300      	movs	r3, #0
 8007952:	9303      	str	r3, [sp, #12]
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	9302      	str	r3, [sp, #8]
 8007958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	68b9      	ldr	r1, [r7, #8]
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 f80f 	bl	8007988 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800796a:	69f8      	ldr	r0, [r7, #28]
 800796c:	f000 f8b4 	bl	8007ad8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007970:	2301      	movs	r3, #1
 8007972:	61bb      	str	r3, [r7, #24]
 8007974:	e002      	b.n	800797c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007976:	f04f 33ff 	mov.w	r3, #4294967295
 800797a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800797c:	69bb      	ldr	r3, [r7, #24]
	}
 800797e:	4618      	mov	r0, r3
 8007980:	3720      	adds	r7, #32
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	461a      	mov	r2, r3
 80079a0:	21a5      	movs	r1, #165	@ 0xa5
 80079a2:	f001 ff91 	bl	80098c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079b0:	3b01      	subs	r3, #1
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	f023 0307 	bic.w	r3, r3, #7
 80079be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00b      	beq.n	80079e2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	617b      	str	r3, [r7, #20]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01f      	beq.n	8007a28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079e8:	2300      	movs	r3, #0
 80079ea:	61fb      	str	r3, [r7, #28]
 80079ec:	e012      	b.n	8007a14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	4413      	add	r3, r2
 80079f4:	7819      	ldrb	r1, [r3, #0]
 80079f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	3334      	adds	r3, #52	@ 0x34
 80079fe:	460a      	mov	r2, r1
 8007a00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	4413      	add	r3, r2
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d006      	beq.n	8007a1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	2b0f      	cmp	r3, #15
 8007a18:	d9e9      	bls.n	80079ee <prvInitialiseNewTask+0x66>
 8007a1a:	e000      	b.n	8007a1e <prvInitialiseNewTask+0x96>
			{
				break;
 8007a1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a26:	e003      	b.n	8007a30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a32:	2b37      	cmp	r3, #55	@ 0x37
 8007a34:	d901      	bls.n	8007a3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a36:	2337      	movs	r3, #55	@ 0x37
 8007a38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a48:	2200      	movs	r2, #0
 8007a4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe ffcf 	bl	80069f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a58:	3318      	adds	r3, #24
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe ffca 	bl	80069f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	3354      	adds	r3, #84	@ 0x54
 8007a8a:	224c      	movs	r2, #76	@ 0x4c
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f001 ff1a 	bl	80098c8 <memset>
 8007a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a96:	4a0d      	ldr	r2, [pc, #52]	@ (8007acc <prvInitialiseNewTask+0x144>)
 8007a98:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad0 <prvInitialiseNewTask+0x148>)
 8007a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad4 <prvInitialiseNewTask+0x14c>)
 8007aa4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	68f9      	ldr	r1, [r7, #12]
 8007aaa:	69b8      	ldr	r0, [r7, #24]
 8007aac:	f001 face 	bl	800904c <pxPortInitialiseStack>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ac0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ac2:	bf00      	nop
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20001b0c 	.word	0x20001b0c
 8007ad0:	20001b74 	.word	0x20001b74
 8007ad4:	20001bdc 	.word	0x20001bdc

08007ad8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007ae0:	f001 fbe2 	bl	80092a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8007b9c <prvAddNewTaskToReadyList+0xc4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	4a2c      	ldr	r2, [pc, #176]	@ (8007b9c <prvAddNewTaskToReadyList+0xc4>)
 8007aec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007aee:	4b2c      	ldr	r3, [pc, #176]	@ (8007ba0 <prvAddNewTaskToReadyList+0xc8>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d109      	bne.n	8007b0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007af6:	4a2a      	ldr	r2, [pc, #168]	@ (8007ba0 <prvAddNewTaskToReadyList+0xc8>)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007afc:	4b27      	ldr	r3, [pc, #156]	@ (8007b9c <prvAddNewTaskToReadyList+0xc4>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d110      	bne.n	8007b26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b04:	f000 fca2 	bl	800844c <prvInitialiseTaskLists>
 8007b08:	e00d      	b.n	8007b26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b0a:	4b26      	ldr	r3, [pc, #152]	@ (8007ba4 <prvAddNewTaskToReadyList+0xcc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b12:	4b23      	ldr	r3, [pc, #140]	@ (8007ba0 <prvAddNewTaskToReadyList+0xc8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d802      	bhi.n	8007b26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b20:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba0 <prvAddNewTaskToReadyList+0xc8>)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b26:	4b20      	ldr	r3, [pc, #128]	@ (8007ba8 <prvAddNewTaskToReadyList+0xd0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba8 <prvAddNewTaskToReadyList+0xd0>)
 8007b2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007b30:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba8 <prvAddNewTaskToReadyList+0xd0>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bac <prvAddNewTaskToReadyList+0xd4>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d903      	bls.n	8007b4c <prvAddNewTaskToReadyList+0x74>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b48:	4a18      	ldr	r2, [pc, #96]	@ (8007bac <prvAddNewTaskToReadyList+0xd4>)
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4a15      	ldr	r2, [pc, #84]	@ (8007bb0 <prvAddNewTaskToReadyList+0xd8>)
 8007b5a:	441a      	add	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4619      	mov	r1, r3
 8007b62:	4610      	mov	r0, r2
 8007b64:	f7fe ff53 	bl	8006a0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b68:	f001 fbd0 	bl	800930c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ba4 <prvAddNewTaskToReadyList+0xcc>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00e      	beq.n	8007b92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b74:	4b0a      	ldr	r3, [pc, #40]	@ (8007ba0 <prvAddNewTaskToReadyList+0xc8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d207      	bcs.n	8007b92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b82:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb4 <prvAddNewTaskToReadyList+0xdc>)
 8007b84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	20000dd4 	.word	0x20000dd4
 8007ba0:	20000900 	.word	0x20000900
 8007ba4:	20000de0 	.word	0x20000de0
 8007ba8:	20000df0 	.word	0x20000df0
 8007bac:	20000ddc 	.word	0x20000ddc
 8007bb0:	20000904 	.word	0x20000904
 8007bb4:	e000ed04 	.word	0xe000ed04

08007bb8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007bc0:	f001 fb72 	bl	80092a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d102      	bne.n	8007bd0 <vTaskDelete+0x18>
 8007bca:	4b2d      	ldr	r3, [pc, #180]	@ (8007c80 <vTaskDelete+0xc8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	e000      	b.n	8007bd2 <vTaskDelete+0x1a>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe ff75 	bl	8006ac8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3318      	adds	r3, #24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe ff6c 	bl	8006ac8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007bf0:	4b24      	ldr	r3, [pc, #144]	@ (8007c84 <vTaskDelete+0xcc>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a23      	ldr	r2, [pc, #140]	@ (8007c84 <vTaskDelete+0xcc>)
 8007bf8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007bfa:	4b21      	ldr	r3, [pc, #132]	@ (8007c80 <vTaskDelete+0xc8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d10b      	bne.n	8007c1c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3304      	adds	r3, #4
 8007c08:	4619      	mov	r1, r3
 8007c0a:	481f      	ldr	r0, [pc, #124]	@ (8007c88 <vTaskDelete+0xd0>)
 8007c0c:	f7fe feff 	bl	8006a0e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007c10:	4b1e      	ldr	r3, [pc, #120]	@ (8007c8c <vTaskDelete+0xd4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	4a1d      	ldr	r2, [pc, #116]	@ (8007c8c <vTaskDelete+0xd4>)
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e009      	b.n	8007c30 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c90 <vTaskDelete+0xd8>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	4a1b      	ldr	r2, [pc, #108]	@ (8007c90 <vTaskDelete+0xd8>)
 8007c24:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fc7e 	bl	8008528 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007c2c:	f000 fcb2 	bl	8008594 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007c30:	f001 fb6c 	bl	800930c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007c34:	4b17      	ldr	r3, [pc, #92]	@ (8007c94 <vTaskDelete+0xdc>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01c      	beq.n	8007c76 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8007c3c:	4b10      	ldr	r3, [pc, #64]	@ (8007c80 <vTaskDelete+0xc8>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d117      	bne.n	8007c76 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007c46:	4b14      	ldr	r3, [pc, #80]	@ (8007c98 <vTaskDelete+0xe0>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00b      	beq.n	8007c66 <vTaskDelete+0xae>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	60bb      	str	r3, [r7, #8]
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007c66:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <vTaskDelete+0xe4>)
 8007c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c76:	bf00      	nop
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000900 	.word	0x20000900
 8007c84:	20000df0 	.word	0x20000df0
 8007c88:	20000da8 	.word	0x20000da8
 8007c8c:	20000dbc 	.word	0x20000dbc
 8007c90:	20000dd4 	.word	0x20000dd4
 8007c94:	20000de0 	.word	0x20000de0
 8007c98:	20000dfc 	.word	0x20000dfc
 8007c9c:	e000ed04 	.word	0xe000ed04

08007ca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d018      	beq.n	8007ce4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cb2:	4b14      	ldr	r3, [pc, #80]	@ (8007d04 <vTaskDelay+0x64>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00b      	beq.n	8007cd2 <vTaskDelay+0x32>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	60bb      	str	r3, [r7, #8]
}
 8007ccc:	bf00      	nop
 8007cce:	bf00      	nop
 8007cd0:	e7fd      	b.n	8007cce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007cd2:	f000 f88b 	bl	8007dec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fe09 	bl	80088f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007cde:	f000 f893 	bl	8007e08 <xTaskResumeAll>
 8007ce2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d107      	bne.n	8007cfa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007cea:	4b07      	ldr	r3, [pc, #28]	@ (8007d08 <vTaskDelay+0x68>)
 8007cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cfa:	bf00      	nop
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000dfc 	.word	0x20000dfc
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08a      	sub	sp, #40	@ 0x28
 8007d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d1a:	463a      	mov	r2, r7
 8007d1c:	1d39      	adds	r1, r7, #4
 8007d1e:	f107 0308 	add.w	r3, r7, #8
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fe12 	bl	800694c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	9202      	str	r2, [sp, #8]
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	2300      	movs	r3, #0
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	2300      	movs	r3, #0
 8007d38:	460a      	mov	r2, r1
 8007d3a:	4924      	ldr	r1, [pc, #144]	@ (8007dcc <vTaskStartScheduler+0xc0>)
 8007d3c:	4824      	ldr	r0, [pc, #144]	@ (8007dd0 <vTaskStartScheduler+0xc4>)
 8007d3e:	f7ff fd7d 	bl	800783c <xTaskCreateStatic>
 8007d42:	4603      	mov	r3, r0
 8007d44:	4a23      	ldr	r2, [pc, #140]	@ (8007dd4 <vTaskStartScheduler+0xc8>)
 8007d46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d48:	4b22      	ldr	r3, [pc, #136]	@ (8007dd4 <vTaskStartScheduler+0xc8>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d50:	2301      	movs	r3, #1
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	e001      	b.n	8007d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d102      	bne.n	8007d66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d60:	f000 fe1a 	bl	8008998 <xTimerCreateTimerTask>
 8007d64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d11b      	bne.n	8007da4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	613b      	str	r3, [r7, #16]
}
 8007d7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d80:	4b15      	ldr	r3, [pc, #84]	@ (8007dd8 <vTaskStartScheduler+0xcc>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3354      	adds	r3, #84	@ 0x54
 8007d86:	4a15      	ldr	r2, [pc, #84]	@ (8007ddc <vTaskStartScheduler+0xd0>)
 8007d88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d8a:	4b15      	ldr	r3, [pc, #84]	@ (8007de0 <vTaskStartScheduler+0xd4>)
 8007d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d92:	4b14      	ldr	r3, [pc, #80]	@ (8007de4 <vTaskStartScheduler+0xd8>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d98:	4b13      	ldr	r3, [pc, #76]	@ (8007de8 <vTaskStartScheduler+0xdc>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d9e:	f001 f9df 	bl	8009160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007da2:	e00f      	b.n	8007dc4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007daa:	d10b      	bne.n	8007dc4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	60fb      	str	r3, [r7, #12]
}
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
 8007dc2:	e7fd      	b.n	8007dc0 <vTaskStartScheduler+0xb4>
}
 8007dc4:	bf00      	nop
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	08009b74 	.word	0x08009b74
 8007dd0:	0800841d 	.word	0x0800841d
 8007dd4:	20000df8 	.word	0x20000df8
 8007dd8:	20000900 	.word	0x20000900
 8007ddc:	20000018 	.word	0x20000018
 8007de0:	20000df4 	.word	0x20000df4
 8007de4:	20000de0 	.word	0x20000de0
 8007de8:	20000dd8 	.word	0x20000dd8

08007dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007df0:	4b04      	ldr	r3, [pc, #16]	@ (8007e04 <vTaskSuspendAll+0x18>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	3301      	adds	r3, #1
 8007df6:	4a03      	ldr	r2, [pc, #12]	@ (8007e04 <vTaskSuspendAll+0x18>)
 8007df8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007dfa:	bf00      	nop
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	20000dfc 	.word	0x20000dfc

08007e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e16:	4b42      	ldr	r3, [pc, #264]	@ (8007f20 <xTaskResumeAll+0x118>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10b      	bne.n	8007e36 <xTaskResumeAll+0x2e>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	603b      	str	r3, [r7, #0]
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	e7fd      	b.n	8007e32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e36:	f001 fa37 	bl	80092a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e3a:	4b39      	ldr	r3, [pc, #228]	@ (8007f20 <xTaskResumeAll+0x118>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	4a37      	ldr	r2, [pc, #220]	@ (8007f20 <xTaskResumeAll+0x118>)
 8007e42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e44:	4b36      	ldr	r3, [pc, #216]	@ (8007f20 <xTaskResumeAll+0x118>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d162      	bne.n	8007f12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e4c:	4b35      	ldr	r3, [pc, #212]	@ (8007f24 <xTaskResumeAll+0x11c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d05e      	beq.n	8007f12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e54:	e02f      	b.n	8007eb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e56:	4b34      	ldr	r3, [pc, #208]	@ (8007f28 <xTaskResumeAll+0x120>)
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3318      	adds	r3, #24
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fe30 	bl	8006ac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fe2b 	bl	8006ac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e76:	4b2d      	ldr	r3, [pc, #180]	@ (8007f2c <xTaskResumeAll+0x124>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d903      	bls.n	8007e86 <xTaskResumeAll+0x7e>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e82:	4a2a      	ldr	r2, [pc, #168]	@ (8007f2c <xTaskResumeAll+0x124>)
 8007e84:	6013      	str	r3, [r2, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4a27      	ldr	r2, [pc, #156]	@ (8007f30 <xTaskResumeAll+0x128>)
 8007e94:	441a      	add	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3304      	adds	r3, #4
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	f7fe fdb6 	bl	8006a0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea6:	4b23      	ldr	r3, [pc, #140]	@ (8007f34 <xTaskResumeAll+0x12c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d302      	bcc.n	8007eb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007eb0:	4b21      	ldr	r3, [pc, #132]	@ (8007f38 <xTaskResumeAll+0x130>)
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8007f28 <xTaskResumeAll+0x120>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1cb      	bne.n	8007e56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ec4:	f000 fb66 	bl	8008594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f3c <xTaskResumeAll+0x134>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d010      	beq.n	8007ef6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ed4:	f000 f846 	bl	8007f64 <xTaskIncrementTick>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007ede:	4b16      	ldr	r3, [pc, #88]	@ (8007f38 <xTaskResumeAll+0x130>)
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f1      	bne.n	8007ed4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007ef0:	4b12      	ldr	r3, [pc, #72]	@ (8007f3c <xTaskResumeAll+0x134>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ef6:	4b10      	ldr	r3, [pc, #64]	@ (8007f38 <xTaskResumeAll+0x130>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d009      	beq.n	8007f12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007efe:	2301      	movs	r3, #1
 8007f00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f02:	4b0f      	ldr	r3, [pc, #60]	@ (8007f40 <xTaskResumeAll+0x138>)
 8007f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f12:	f001 f9fb 	bl	800930c <vPortExitCritical>

	return xAlreadyYielded;
 8007f16:	68bb      	ldr	r3, [r7, #8]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000dfc 	.word	0x20000dfc
 8007f24:	20000dd4 	.word	0x20000dd4
 8007f28:	20000d94 	.word	0x20000d94
 8007f2c:	20000ddc 	.word	0x20000ddc
 8007f30:	20000904 	.word	0x20000904
 8007f34:	20000900 	.word	0x20000900
 8007f38:	20000de8 	.word	0x20000de8
 8007f3c:	20000de4 	.word	0x20000de4
 8007f40:	e000ed04 	.word	0xe000ed04

08007f44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f4a:	4b05      	ldr	r3, [pc, #20]	@ (8007f60 <xTaskGetTickCount+0x1c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f50:	687b      	ldr	r3, [r7, #4]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	20000dd8 	.word	0x20000dd8

08007f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80080ac <xTaskIncrementTick+0x148>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 8090 	bne.w	8008098 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f78:	4b4d      	ldr	r3, [pc, #308]	@ (80080b0 <xTaskIncrementTick+0x14c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f80:	4a4b      	ldr	r2, [pc, #300]	@ (80080b0 <xTaskIncrementTick+0x14c>)
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d121      	bne.n	8007fd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f8c:	4b49      	ldr	r3, [pc, #292]	@ (80080b4 <xTaskIncrementTick+0x150>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00b      	beq.n	8007fae <xTaskIncrementTick+0x4a>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	603b      	str	r3, [r7, #0]
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	e7fd      	b.n	8007faa <xTaskIncrementTick+0x46>
 8007fae:	4b41      	ldr	r3, [pc, #260]	@ (80080b4 <xTaskIncrementTick+0x150>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	4b40      	ldr	r3, [pc, #256]	@ (80080b8 <xTaskIncrementTick+0x154>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80080b4 <xTaskIncrementTick+0x150>)
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80080b8 <xTaskIncrementTick+0x154>)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80080bc <xTaskIncrementTick+0x158>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80080bc <xTaskIncrementTick+0x158>)
 8007fca:	6013      	str	r3, [r2, #0]
 8007fcc:	f000 fae2 	bl	8008594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80080c0 <xTaskIncrementTick+0x15c>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d349      	bcc.n	800806e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fda:	4b36      	ldr	r3, [pc, #216]	@ (80080b4 <xTaskIncrementTick+0x150>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe4:	4b36      	ldr	r3, [pc, #216]	@ (80080c0 <xTaskIncrementTick+0x15c>)
 8007fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8007fea:	601a      	str	r2, [r3, #0]
					break;
 8007fec:	e03f      	b.n	800806e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fee:	4b31      	ldr	r3, [pc, #196]	@ (80080b4 <xTaskIncrementTick+0x150>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d203      	bcs.n	800800e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008006:	4a2e      	ldr	r2, [pc, #184]	@ (80080c0 <xTaskIncrementTick+0x15c>)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800800c:	e02f      	b.n	800806e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	3304      	adds	r3, #4
 8008012:	4618      	mov	r0, r3
 8008014:	f7fe fd58 	bl	8006ac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801c:	2b00      	cmp	r3, #0
 800801e:	d004      	beq.n	800802a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	3318      	adds	r3, #24
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe fd4f 	bl	8006ac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802e:	4b25      	ldr	r3, [pc, #148]	@ (80080c4 <xTaskIncrementTick+0x160>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d903      	bls.n	800803e <xTaskIncrementTick+0xda>
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803a:	4a22      	ldr	r2, [pc, #136]	@ (80080c4 <xTaskIncrementTick+0x160>)
 800803c:	6013      	str	r3, [r2, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4a1f      	ldr	r2, [pc, #124]	@ (80080c8 <xTaskIncrementTick+0x164>)
 800804c:	441a      	add	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	3304      	adds	r3, #4
 8008052:	4619      	mov	r1, r3
 8008054:	4610      	mov	r0, r2
 8008056:	f7fe fcda 	bl	8006a0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800805e:	4b1b      	ldr	r3, [pc, #108]	@ (80080cc <xTaskIncrementTick+0x168>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	429a      	cmp	r2, r3
 8008066:	d3b8      	bcc.n	8007fda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008068:	2301      	movs	r3, #1
 800806a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800806c:	e7b5      	b.n	8007fda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800806e:	4b17      	ldr	r3, [pc, #92]	@ (80080cc <xTaskIncrementTick+0x168>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008074:	4914      	ldr	r1, [pc, #80]	@ (80080c8 <xTaskIncrementTick+0x164>)
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	440b      	add	r3, r1
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d901      	bls.n	800808a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008086:	2301      	movs	r3, #1
 8008088:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800808a:	4b11      	ldr	r3, [pc, #68]	@ (80080d0 <xTaskIncrementTick+0x16c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008092:	2301      	movs	r3, #1
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	e004      	b.n	80080a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008098:	4b0e      	ldr	r3, [pc, #56]	@ (80080d4 <xTaskIncrementTick+0x170>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	4a0d      	ldr	r2, [pc, #52]	@ (80080d4 <xTaskIncrementTick+0x170>)
 80080a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080a2:	697b      	ldr	r3, [r7, #20]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3718      	adds	r7, #24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	20000dfc 	.word	0x20000dfc
 80080b0:	20000dd8 	.word	0x20000dd8
 80080b4:	20000d8c 	.word	0x20000d8c
 80080b8:	20000d90 	.word	0x20000d90
 80080bc:	20000dec 	.word	0x20000dec
 80080c0:	20000df4 	.word	0x20000df4
 80080c4:	20000ddc 	.word	0x20000ddc
 80080c8:	20000904 	.word	0x20000904
 80080cc:	20000900 	.word	0x20000900
 80080d0:	20000de8 	.word	0x20000de8
 80080d4:	20000de4 	.word	0x20000de4

080080d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080de:	4b2b      	ldr	r3, [pc, #172]	@ (800818c <vTaskSwitchContext+0xb4>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080e6:	4b2a      	ldr	r3, [pc, #168]	@ (8008190 <vTaskSwitchContext+0xb8>)
 80080e8:	2201      	movs	r2, #1
 80080ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080ec:	e047      	b.n	800817e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80080ee:	4b28      	ldr	r3, [pc, #160]	@ (8008190 <vTaskSwitchContext+0xb8>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f4:	4b27      	ldr	r3, [pc, #156]	@ (8008194 <vTaskSwitchContext+0xbc>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	e011      	b.n	8008120 <vTaskSwitchContext+0x48>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10b      	bne.n	800811a <vTaskSwitchContext+0x42>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	607b      	str	r3, [r7, #4]
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	e7fd      	b.n	8008116 <vTaskSwitchContext+0x3e>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3b01      	subs	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	491d      	ldr	r1, [pc, #116]	@ (8008198 <vTaskSwitchContext+0xc0>)
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0e3      	beq.n	80080fc <vTaskSwitchContext+0x24>
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	4613      	mov	r3, r2
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4a16      	ldr	r2, [pc, #88]	@ (8008198 <vTaskSwitchContext+0xc0>)
 8008140:	4413      	add	r3, r2
 8008142:	60bb      	str	r3, [r7, #8]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	605a      	str	r2, [r3, #4]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	3308      	adds	r3, #8
 8008156:	429a      	cmp	r2, r3
 8008158:	d104      	bne.n	8008164 <vTaskSwitchContext+0x8c>
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	4a0c      	ldr	r2, [pc, #48]	@ (800819c <vTaskSwitchContext+0xc4>)
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	4a09      	ldr	r2, [pc, #36]	@ (8008194 <vTaskSwitchContext+0xbc>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008174:	4b09      	ldr	r3, [pc, #36]	@ (800819c <vTaskSwitchContext+0xc4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	3354      	adds	r3, #84	@ 0x54
 800817a:	4a09      	ldr	r2, [pc, #36]	@ (80081a0 <vTaskSwitchContext+0xc8>)
 800817c:	6013      	str	r3, [r2, #0]
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	20000dfc 	.word	0x20000dfc
 8008190:	20000de8 	.word	0x20000de8
 8008194:	20000ddc 	.word	0x20000ddc
 8008198:	20000904 	.word	0x20000904
 800819c:	20000900 	.word	0x20000900
 80081a0:	20000018 	.word	0x20000018

080081a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10b      	bne.n	80081cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	60fb      	str	r3, [r7, #12]
}
 80081c6:	bf00      	nop
 80081c8:	bf00      	nop
 80081ca:	e7fd      	b.n	80081c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081cc:	4b07      	ldr	r3, [pc, #28]	@ (80081ec <vTaskPlaceOnEventList+0x48>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3318      	adds	r3, #24
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f7fe fc3e 	bl	8006a56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081da:	2101      	movs	r1, #1
 80081dc:	6838      	ldr	r0, [r7, #0]
 80081de:	f000 fb87 	bl	80088f0 <prvAddCurrentTaskToDelayedList>
}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000900 	.word	0x20000900

080081f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10b      	bne.n	800821a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	617b      	str	r3, [r7, #20]
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop
 8008218:	e7fd      	b.n	8008216 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800821a:	4b0a      	ldr	r3, [pc, #40]	@ (8008244 <vTaskPlaceOnEventListRestricted+0x54>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3318      	adds	r3, #24
 8008220:	4619      	mov	r1, r3
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7fe fbf3 	bl	8006a0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800822e:	f04f 33ff 	mov.w	r3, #4294967295
 8008232:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	68b8      	ldr	r0, [r7, #8]
 8008238:	f000 fb5a 	bl	80088f0 <prvAddCurrentTaskToDelayedList>
	}
 800823c:	bf00      	nop
 800823e:	3718      	adds	r7, #24
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	20000900 	.word	0x20000900

08008248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	60fb      	str	r3, [r7, #12]
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	3318      	adds	r3, #24
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe fc24 	bl	8006ac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008280:	4b1d      	ldr	r3, [pc, #116]	@ (80082f8 <xTaskRemoveFromEventList+0xb0>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d11d      	bne.n	80082c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	3304      	adds	r3, #4
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe fc1b 	bl	8006ac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008296:	4b19      	ldr	r3, [pc, #100]	@ (80082fc <xTaskRemoveFromEventList+0xb4>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	429a      	cmp	r2, r3
 800829c:	d903      	bls.n	80082a6 <xTaskRemoveFromEventList+0x5e>
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a2:	4a16      	ldr	r2, [pc, #88]	@ (80082fc <xTaskRemoveFromEventList+0xb4>)
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082aa:	4613      	mov	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	4413      	add	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4a13      	ldr	r2, [pc, #76]	@ (8008300 <xTaskRemoveFromEventList+0xb8>)
 80082b4:	441a      	add	r2, r3
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4619      	mov	r1, r3
 80082bc:	4610      	mov	r0, r2
 80082be:	f7fe fba6 	bl	8006a0e <vListInsertEnd>
 80082c2:	e005      	b.n	80082d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	3318      	adds	r3, #24
 80082c8:	4619      	mov	r1, r3
 80082ca:	480e      	ldr	r0, [pc, #56]	@ (8008304 <xTaskRemoveFromEventList+0xbc>)
 80082cc:	f7fe fb9f 	bl	8006a0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008308 <xTaskRemoveFromEventList+0xc0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082da:	429a      	cmp	r2, r3
 80082dc:	d905      	bls.n	80082ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082de:	2301      	movs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082e2:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <xTaskRemoveFromEventList+0xc4>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	e001      	b.n	80082ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80082ee:	697b      	ldr	r3, [r7, #20]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	20000dfc 	.word	0x20000dfc
 80082fc:	20000ddc 	.word	0x20000ddc
 8008300:	20000904 	.word	0x20000904
 8008304:	20000d94 	.word	0x20000d94
 8008308:	20000900 	.word	0x20000900
 800830c:	20000de8 	.word	0x20000de8

08008310 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008318:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <vTaskInternalSetTimeOutState+0x24>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008320:	4b05      	ldr	r3, [pc, #20]	@ (8008338 <vTaskInternalSetTimeOutState+0x28>)
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	605a      	str	r2, [r3, #4]
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	20000dec 	.word	0x20000dec
 8008338:	20000dd8 	.word	0x20000dd8

0800833c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10b      	bne.n	8008364 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	613b      	str	r3, [r7, #16]
}
 800835e:	bf00      	nop
 8008360:	bf00      	nop
 8008362:	e7fd      	b.n	8008360 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10b      	bne.n	8008382 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	60fb      	str	r3, [r7, #12]
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	e7fd      	b.n	800837e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008382:	f000 ff91 	bl	80092a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008386:	4b1d      	ldr	r3, [pc, #116]	@ (80083fc <xTaskCheckForTimeOut+0xc0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	69ba      	ldr	r2, [r7, #24]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839e:	d102      	bne.n	80083a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61fb      	str	r3, [r7, #28]
 80083a4:	e023      	b.n	80083ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4b15      	ldr	r3, [pc, #84]	@ (8008400 <xTaskCheckForTimeOut+0xc4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d007      	beq.n	80083c2 <xTaskCheckForTimeOut+0x86>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	69ba      	ldr	r2, [r7, #24]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d302      	bcc.n	80083c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083bc:	2301      	movs	r3, #1
 80083be:	61fb      	str	r3, [r7, #28]
 80083c0:	e015      	b.n	80083ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d20b      	bcs.n	80083e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	1ad2      	subs	r2, r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f7ff ff99 	bl	8008310 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083de:	2300      	movs	r3, #0
 80083e0:	61fb      	str	r3, [r7, #28]
 80083e2:	e004      	b.n	80083ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083ea:	2301      	movs	r3, #1
 80083ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083ee:	f000 ff8d 	bl	800930c <vPortExitCritical>

	return xReturn;
 80083f2:	69fb      	ldr	r3, [r7, #28]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3720      	adds	r7, #32
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000dd8 	.word	0x20000dd8
 8008400:	20000dec 	.word	0x20000dec

08008404 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008408:	4b03      	ldr	r3, [pc, #12]	@ (8008418 <vTaskMissedYield+0x14>)
 800840a:	2201      	movs	r2, #1
 800840c:	601a      	str	r2, [r3, #0]
}
 800840e:	bf00      	nop
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	20000de8 	.word	0x20000de8

0800841c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008424:	f000 f852 	bl	80084cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008428:	4b06      	ldr	r3, [pc, #24]	@ (8008444 <prvIdleTask+0x28>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d9f9      	bls.n	8008424 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008430:	4b05      	ldr	r3, [pc, #20]	@ (8008448 <prvIdleTask+0x2c>)
 8008432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008436:	601a      	str	r2, [r3, #0]
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008440:	e7f0      	b.n	8008424 <prvIdleTask+0x8>
 8008442:	bf00      	nop
 8008444:	20000904 	.word	0x20000904
 8008448:	e000ed04 	.word	0xe000ed04

0800844c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008452:	2300      	movs	r3, #0
 8008454:	607b      	str	r3, [r7, #4]
 8008456:	e00c      	b.n	8008472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	4613      	mov	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4a12      	ldr	r2, [pc, #72]	@ (80084ac <prvInitialiseTaskLists+0x60>)
 8008464:	4413      	add	r3, r2
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe faa4 	bl	80069b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	3301      	adds	r3, #1
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b37      	cmp	r3, #55	@ 0x37
 8008476:	d9ef      	bls.n	8008458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008478:	480d      	ldr	r0, [pc, #52]	@ (80084b0 <prvInitialiseTaskLists+0x64>)
 800847a:	f7fe fa9b 	bl	80069b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800847e:	480d      	ldr	r0, [pc, #52]	@ (80084b4 <prvInitialiseTaskLists+0x68>)
 8008480:	f7fe fa98 	bl	80069b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008484:	480c      	ldr	r0, [pc, #48]	@ (80084b8 <prvInitialiseTaskLists+0x6c>)
 8008486:	f7fe fa95 	bl	80069b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800848a:	480c      	ldr	r0, [pc, #48]	@ (80084bc <prvInitialiseTaskLists+0x70>)
 800848c:	f7fe fa92 	bl	80069b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008490:	480b      	ldr	r0, [pc, #44]	@ (80084c0 <prvInitialiseTaskLists+0x74>)
 8008492:	f7fe fa8f 	bl	80069b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008496:	4b0b      	ldr	r3, [pc, #44]	@ (80084c4 <prvInitialiseTaskLists+0x78>)
 8008498:	4a05      	ldr	r2, [pc, #20]	@ (80084b0 <prvInitialiseTaskLists+0x64>)
 800849a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800849c:	4b0a      	ldr	r3, [pc, #40]	@ (80084c8 <prvInitialiseTaskLists+0x7c>)
 800849e:	4a05      	ldr	r2, [pc, #20]	@ (80084b4 <prvInitialiseTaskLists+0x68>)
 80084a0:	601a      	str	r2, [r3, #0]
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000904 	.word	0x20000904
 80084b0:	20000d64 	.word	0x20000d64
 80084b4:	20000d78 	.word	0x20000d78
 80084b8:	20000d94 	.word	0x20000d94
 80084bc:	20000da8 	.word	0x20000da8
 80084c0:	20000dc0 	.word	0x20000dc0
 80084c4:	20000d8c 	.word	0x20000d8c
 80084c8:	20000d90 	.word	0x20000d90

080084cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084d2:	e019      	b.n	8008508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084d4:	f000 fee8 	bl	80092a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084d8:	4b10      	ldr	r3, [pc, #64]	@ (800851c <prvCheckTasksWaitingTermination+0x50>)
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	3304      	adds	r3, #4
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe faef 	bl	8006ac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008520 <prvCheckTasksWaitingTermination+0x54>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008520 <prvCheckTasksWaitingTermination+0x54>)
 80084f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008524 <prvCheckTasksWaitingTermination+0x58>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	4a0a      	ldr	r2, [pc, #40]	@ (8008524 <prvCheckTasksWaitingTermination+0x58>)
 80084fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80084fe:	f000 ff05 	bl	800930c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f810 	bl	8008528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008508:	4b06      	ldr	r3, [pc, #24]	@ (8008524 <prvCheckTasksWaitingTermination+0x58>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e1      	bne.n	80084d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000da8 	.word	0x20000da8
 8008520:	20000dd4 	.word	0x20000dd4
 8008524:	20000dbc 	.word	0x20000dbc

08008528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3354      	adds	r3, #84	@ 0x54
 8008534:	4618      	mov	r0, r3
 8008536:	f001 f9cf 	bl	80098d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008540:	2b00      	cmp	r3, #0
 8008542:	d108      	bne.n	8008556 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008548:	4618      	mov	r0, r3
 800854a:	f001 f89d 	bl	8009688 <vPortFree>
				vPortFree( pxTCB );
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f001 f89a 	bl	8009688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008554:	e019      	b.n	800858a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800855c:	2b01      	cmp	r3, #1
 800855e:	d103      	bne.n	8008568 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 f891 	bl	8009688 <vPortFree>
	}
 8008566:	e010      	b.n	800858a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800856e:	2b02      	cmp	r3, #2
 8008570:	d00b      	beq.n	800858a <prvDeleteTCB+0x62>
	__asm volatile
 8008572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008576:	f383 8811 	msr	BASEPRI, r3
 800857a:	f3bf 8f6f 	isb	sy
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	60fb      	str	r3, [r7, #12]
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	e7fd      	b.n	8008586 <prvDeleteTCB+0x5e>
	}
 800858a:	bf00      	nop
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800859a:	4b0c      	ldr	r3, [pc, #48]	@ (80085cc <prvResetNextTaskUnblockTime+0x38>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085a4:	4b0a      	ldr	r3, [pc, #40]	@ (80085d0 <prvResetNextTaskUnblockTime+0x3c>)
 80085a6:	f04f 32ff 	mov.w	r2, #4294967295
 80085aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085ac:	e008      	b.n	80085c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ae:	4b07      	ldr	r3, [pc, #28]	@ (80085cc <prvResetNextTaskUnblockTime+0x38>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	4a04      	ldr	r2, [pc, #16]	@ (80085d0 <prvResetNextTaskUnblockTime+0x3c>)
 80085be:	6013      	str	r3, [r2, #0]
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	20000d8c 	.word	0x20000d8c
 80085d0:	20000df4 	.word	0x20000df4

080085d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085da:	4b0b      	ldr	r3, [pc, #44]	@ (8008608 <xTaskGetSchedulerState+0x34>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d102      	bne.n	80085e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085e2:	2301      	movs	r3, #1
 80085e4:	607b      	str	r3, [r7, #4]
 80085e6:	e008      	b.n	80085fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085e8:	4b08      	ldr	r3, [pc, #32]	@ (800860c <xTaskGetSchedulerState+0x38>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d102      	bne.n	80085f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085f0:	2302      	movs	r3, #2
 80085f2:	607b      	str	r3, [r7, #4]
 80085f4:	e001      	b.n	80085fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085fa:	687b      	ldr	r3, [r7, #4]
	}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	20000de0 	.word	0x20000de0
 800860c:	20000dfc 	.word	0x20000dfc

08008610 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800861c:	2300      	movs	r3, #0
 800861e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d051      	beq.n	80086ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800862a:	4b2a      	ldr	r3, [pc, #168]	@ (80086d4 <xTaskPriorityInherit+0xc4>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008630:	429a      	cmp	r2, r3
 8008632:	d241      	bcs.n	80086b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	db06      	blt.n	800864a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800863c:	4b25      	ldr	r3, [pc, #148]	@ (80086d4 <xTaskPriorityInherit+0xc4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008642:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	6959      	ldr	r1, [r3, #20]
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	4a1f      	ldr	r2, [pc, #124]	@ (80086d8 <xTaskPriorityInherit+0xc8>)
 800865c:	4413      	add	r3, r2
 800865e:	4299      	cmp	r1, r3
 8008660:	d122      	bne.n	80086a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	3304      	adds	r3, #4
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe fa2e 	bl	8006ac8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800866c:	4b19      	ldr	r3, [pc, #100]	@ (80086d4 <xTaskPriorityInherit+0xc4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800867a:	4b18      	ldr	r3, [pc, #96]	@ (80086dc <xTaskPriorityInherit+0xcc>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	429a      	cmp	r2, r3
 8008680:	d903      	bls.n	800868a <xTaskPriorityInherit+0x7a>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008686:	4a15      	ldr	r2, [pc, #84]	@ (80086dc <xTaskPriorityInherit+0xcc>)
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868e:	4613      	mov	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4a10      	ldr	r2, [pc, #64]	@ (80086d8 <xTaskPriorityInherit+0xc8>)
 8008698:	441a      	add	r2, r3
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	3304      	adds	r3, #4
 800869e:	4619      	mov	r1, r3
 80086a0:	4610      	mov	r0, r2
 80086a2:	f7fe f9b4 	bl	8006a0e <vListInsertEnd>
 80086a6:	e004      	b.n	80086b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086a8:	4b0a      	ldr	r3, [pc, #40]	@ (80086d4 <xTaskPriorityInherit+0xc4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80086b2:	2301      	movs	r3, #1
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e008      	b.n	80086ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086bc:	4b05      	ldr	r3, [pc, #20]	@ (80086d4 <xTaskPriorityInherit+0xc4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d201      	bcs.n	80086ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80086c6:	2301      	movs	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086ca:	68fb      	ldr	r3, [r7, #12]
	}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000900 	.word	0x20000900
 80086d8:	20000904 	.word	0x20000904
 80086dc:	20000ddc 	.word	0x20000ddc

080086e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80086ec:	2300      	movs	r3, #0
 80086ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d058      	beq.n	80087a8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80086f6:	4b2f      	ldr	r3, [pc, #188]	@ (80087b4 <xTaskPriorityDisinherit+0xd4>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d00b      	beq.n	8008718 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	60fb      	str	r3, [r7, #12]
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	e7fd      	b.n	8008714 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10b      	bne.n	8008738 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	60bb      	str	r3, [r7, #8]
}
 8008732:	bf00      	nop
 8008734:	bf00      	nop
 8008736:	e7fd      	b.n	8008734 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800873c:	1e5a      	subs	r2, r3, #1
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800874a:	429a      	cmp	r2, r3
 800874c:	d02c      	beq.n	80087a8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008752:	2b00      	cmp	r3, #0
 8008754:	d128      	bne.n	80087a8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	3304      	adds	r3, #4
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe f9b4 	bl	8006ac8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008778:	4b0f      	ldr	r3, [pc, #60]	@ (80087b8 <xTaskPriorityDisinherit+0xd8>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d903      	bls.n	8008788 <xTaskPriorityDisinherit+0xa8>
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008784:	4a0c      	ldr	r2, [pc, #48]	@ (80087b8 <xTaskPriorityDisinherit+0xd8>)
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878c:	4613      	mov	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4a09      	ldr	r2, [pc, #36]	@ (80087bc <xTaskPriorityDisinherit+0xdc>)
 8008796:	441a      	add	r2, r3
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	3304      	adds	r3, #4
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f7fe f935 	bl	8006a0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80087a4:	2301      	movs	r3, #1
 80087a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087a8:	697b      	ldr	r3, [r7, #20]
	}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000900 	.word	0x20000900
 80087b8:	20000ddc 	.word	0x20000ddc
 80087bc:	20000904 	.word	0x20000904

080087c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80087ce:	2301      	movs	r3, #1
 80087d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d06c      	beq.n	80088b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10b      	bne.n	80087f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	60fb      	str	r3, [r7, #12]
}
 80087f2:	bf00      	nop
 80087f4:	bf00      	nop
 80087f6:	e7fd      	b.n	80087f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d902      	bls.n	8008808 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	61fb      	str	r3, [r7, #28]
 8008806:	e002      	b.n	800880e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800880c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	429a      	cmp	r2, r3
 8008816:	d04c      	beq.n	80088b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800881c:	697a      	ldr	r2, [r7, #20]
 800881e:	429a      	cmp	r2, r3
 8008820:	d147      	bne.n	80088b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008822:	4b26      	ldr	r3, [pc, #152]	@ (80088bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	429a      	cmp	r2, r3
 800882a:	d10b      	bne.n	8008844 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800882c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008830:	f383 8811 	msr	BASEPRI, r3
 8008834:	f3bf 8f6f 	isb	sy
 8008838:	f3bf 8f4f 	dsb	sy
 800883c:	60bb      	str	r3, [r7, #8]
}
 800883e:	bf00      	nop
 8008840:	bf00      	nop
 8008842:	e7fd      	b.n	8008840 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008848:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	69fa      	ldr	r2, [r7, #28]
 800884e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	db04      	blt.n	8008862 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	6959      	ldr	r1, [r3, #20]
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4a13      	ldr	r2, [pc, #76]	@ (80088c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008872:	4413      	add	r3, r2
 8008874:	4299      	cmp	r1, r3
 8008876:	d11c      	bne.n	80088b2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	3304      	adds	r3, #4
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe f923 	bl	8006ac8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008886:	4b0f      	ldr	r3, [pc, #60]	@ (80088c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	429a      	cmp	r2, r3
 800888c:	d903      	bls.n	8008896 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008892:	4a0c      	ldr	r2, [pc, #48]	@ (80088c4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4a07      	ldr	r2, [pc, #28]	@ (80088c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80088a4:	441a      	add	r2, r3
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f7fe f8ae 	bl	8006a0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80088b2:	bf00      	nop
 80088b4:	3720      	adds	r7, #32
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	20000900 	.word	0x20000900
 80088c0:	20000904 	.word	0x20000904
 80088c4:	20000ddc 	.word	0x20000ddc

080088c8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80088cc:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <pvTaskIncrementMutexHeldCount+0x24>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <pvTaskIncrementMutexHeldCount+0x24>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80088da:	3201      	adds	r2, #1
 80088dc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80088de:	4b03      	ldr	r3, [pc, #12]	@ (80088ec <pvTaskIncrementMutexHeldCount+0x24>)
 80088e0:	681b      	ldr	r3, [r3, #0]
	}
 80088e2:	4618      	mov	r0, r3
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	20000900 	.word	0x20000900

080088f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088fa:	4b21      	ldr	r3, [pc, #132]	@ (8008980 <prvAddCurrentTaskToDelayedList+0x90>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008900:	4b20      	ldr	r3, [pc, #128]	@ (8008984 <prvAddCurrentTaskToDelayedList+0x94>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3304      	adds	r3, #4
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe f8de 	bl	8006ac8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008912:	d10a      	bne.n	800892a <prvAddCurrentTaskToDelayedList+0x3a>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d007      	beq.n	800892a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800891a:	4b1a      	ldr	r3, [pc, #104]	@ (8008984 <prvAddCurrentTaskToDelayedList+0x94>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3304      	adds	r3, #4
 8008920:	4619      	mov	r1, r3
 8008922:	4819      	ldr	r0, [pc, #100]	@ (8008988 <prvAddCurrentTaskToDelayedList+0x98>)
 8008924:	f7fe f873 	bl	8006a0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008928:	e026      	b.n	8008978 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800892a:	68fa      	ldr	r2, [r7, #12]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4413      	add	r3, r2
 8008930:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008932:	4b14      	ldr	r3, [pc, #80]	@ (8008984 <prvAddCurrentTaskToDelayedList+0x94>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	429a      	cmp	r2, r3
 8008940:	d209      	bcs.n	8008956 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008942:	4b12      	ldr	r3, [pc, #72]	@ (800898c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	4b0f      	ldr	r3, [pc, #60]	@ (8008984 <prvAddCurrentTaskToDelayedList+0x94>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3304      	adds	r3, #4
 800894c:	4619      	mov	r1, r3
 800894e:	4610      	mov	r0, r2
 8008950:	f7fe f881 	bl	8006a56 <vListInsert>
}
 8008954:	e010      	b.n	8008978 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008956:	4b0e      	ldr	r3, [pc, #56]	@ (8008990 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	4b0a      	ldr	r3, [pc, #40]	@ (8008984 <prvAddCurrentTaskToDelayedList+0x94>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3304      	adds	r3, #4
 8008960:	4619      	mov	r1, r3
 8008962:	4610      	mov	r0, r2
 8008964:	f7fe f877 	bl	8006a56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008968:	4b0a      	ldr	r3, [pc, #40]	@ (8008994 <prvAddCurrentTaskToDelayedList+0xa4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	429a      	cmp	r2, r3
 8008970:	d202      	bcs.n	8008978 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008972:	4a08      	ldr	r2, [pc, #32]	@ (8008994 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	6013      	str	r3, [r2, #0]
}
 8008978:	bf00      	nop
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20000dd8 	.word	0x20000dd8
 8008984:	20000900 	.word	0x20000900
 8008988:	20000dc0 	.word	0x20000dc0
 800898c:	20000d90 	.word	0x20000d90
 8008990:	20000d8c 	.word	0x20000d8c
 8008994:	20000df4 	.word	0x20000df4

08008998 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	@ 0x28
 800899c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800899e:	2300      	movs	r3, #0
 80089a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80089a2:	f000 fb13 	bl	8008fcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80089a6:	4b1d      	ldr	r3, [pc, #116]	@ (8008a1c <xTimerCreateTimerTask+0x84>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d021      	beq.n	80089f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80089b6:	1d3a      	adds	r2, r7, #4
 80089b8:	f107 0108 	add.w	r1, r7, #8
 80089bc:	f107 030c 	add.w	r3, r7, #12
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fd ffdd 	bl	8006980 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	9202      	str	r2, [sp, #8]
 80089ce:	9301      	str	r3, [sp, #4]
 80089d0:	2302      	movs	r3, #2
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	2300      	movs	r3, #0
 80089d6:	460a      	mov	r2, r1
 80089d8:	4911      	ldr	r1, [pc, #68]	@ (8008a20 <xTimerCreateTimerTask+0x88>)
 80089da:	4812      	ldr	r0, [pc, #72]	@ (8008a24 <xTimerCreateTimerTask+0x8c>)
 80089dc:	f7fe ff2e 	bl	800783c <xTaskCreateStatic>
 80089e0:	4603      	mov	r3, r0
 80089e2:	4a11      	ldr	r2, [pc, #68]	@ (8008a28 <xTimerCreateTimerTask+0x90>)
 80089e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80089e6:	4b10      	ldr	r3, [pc, #64]	@ (8008a28 <xTimerCreateTimerTask+0x90>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80089ee:	2301      	movs	r3, #1
 80089f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	613b      	str	r3, [r7, #16]
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	e7fd      	b.n	8008a0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008a10:	697b      	ldr	r3, [r7, #20]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	20000e30 	.word	0x20000e30
 8008a20:	08009b7c 	.word	0x08009b7c
 8008a24:	08008b65 	.word	0x08008b65
 8008a28:	20000e34 	.word	0x20000e34

08008a2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08a      	sub	sp, #40	@ 0x28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10b      	bne.n	8008a5c <xTimerGenericCommand+0x30>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	623b      	str	r3, [r7, #32]
}
 8008a56:	bf00      	nop
 8008a58:	bf00      	nop
 8008a5a:	e7fd      	b.n	8008a58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a5c:	4b19      	ldr	r3, [pc, #100]	@ (8008ac4 <xTimerGenericCommand+0x98>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d02a      	beq.n	8008aba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2b05      	cmp	r3, #5
 8008a74:	dc18      	bgt.n	8008aa8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a76:	f7ff fdad 	bl	80085d4 <xTaskGetSchedulerState>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d109      	bne.n	8008a94 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a80:	4b10      	ldr	r3, [pc, #64]	@ (8008ac4 <xTimerGenericCommand+0x98>)
 8008a82:	6818      	ldr	r0, [r3, #0]
 8008a84:	f107 0110 	add.w	r1, r7, #16
 8008a88:	2300      	movs	r3, #0
 8008a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8c:	f7fe f9be 	bl	8006e0c <xQueueGenericSend>
 8008a90:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a92:	e012      	b.n	8008aba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a94:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac4 <xTimerGenericCommand+0x98>)
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	f107 0110 	add.w	r1, r7, #16
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f7fe f9b4 	bl	8006e0c <xQueueGenericSend>
 8008aa4:	6278      	str	r0, [r7, #36]	@ 0x24
 8008aa6:	e008      	b.n	8008aba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008aa8:	4b06      	ldr	r3, [pc, #24]	@ (8008ac4 <xTimerGenericCommand+0x98>)
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	f107 0110 	add.w	r1, r7, #16
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	f7fe faac 	bl	8007010 <xQueueGenericSendFromISR>
 8008ab8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3728      	adds	r7, #40	@ 0x28
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	20000e30 	.word	0x20000e30

08008ac8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ad2:	4b23      	ldr	r3, [pc, #140]	@ (8008b60 <prvProcessExpiredTimer+0x98>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fd fff1 	bl	8006ac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008aec:	f003 0304 	and.w	r3, r3, #4
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d023      	beq.n	8008b3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	699a      	ldr	r2, [r3, #24]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	18d1      	adds	r1, r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	6978      	ldr	r0, [r7, #20]
 8008b02:	f000 f8d5 	bl	8008cb0 <prvInsertTimerInActiveList>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d020      	beq.n	8008b4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	2300      	movs	r3, #0
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	2100      	movs	r1, #0
 8008b16:	6978      	ldr	r0, [r7, #20]
 8008b18:	f7ff ff88 	bl	8008a2c <xTimerGenericCommand>
 8008b1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d114      	bne.n	8008b4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	60fb      	str	r3, [r7, #12]
}
 8008b36:	bf00      	nop
 8008b38:	bf00      	nop
 8008b3a:	e7fd      	b.n	8008b38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b42:	f023 0301 	bic.w	r3, r3, #1
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	6978      	ldr	r0, [r7, #20]
 8008b54:	4798      	blx	r3
}
 8008b56:	bf00      	nop
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000e28 	.word	0x20000e28

08008b64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b6c:	f107 0308 	add.w	r3, r7, #8
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 f859 	bl	8008c28 <prvGetNextExpireTime>
 8008b76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f805 	bl	8008b8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b82:	f000 f8d7 	bl	8008d34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b86:	bf00      	nop
 8008b88:	e7f0      	b.n	8008b6c <prvTimerTask+0x8>
	...

08008b8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b96:	f7ff f929 	bl	8007dec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b9a:	f107 0308 	add.w	r3, r7, #8
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 f866 	bl	8008c70 <prvSampleTimeNow>
 8008ba4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d130      	bne.n	8008c0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10a      	bne.n	8008bc8 <prvProcessTimerOrBlockTask+0x3c>
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d806      	bhi.n	8008bc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008bba:	f7ff f925 	bl	8007e08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008bbe:	68f9      	ldr	r1, [r7, #12]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff ff81 	bl	8008ac8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bc6:	e024      	b.n	8008c12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d008      	beq.n	8008be0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bce:	4b13      	ldr	r3, [pc, #76]	@ (8008c1c <prvProcessTimerOrBlockTask+0x90>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d101      	bne.n	8008bdc <prvProcessTimerOrBlockTask+0x50>
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e000      	b.n	8008bde <prvProcessTimerOrBlockTask+0x52>
 8008bdc:	2300      	movs	r3, #0
 8008bde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008be0:	4b0f      	ldr	r3, [pc, #60]	@ (8008c20 <prvProcessTimerOrBlockTask+0x94>)
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	4619      	mov	r1, r3
 8008bee:	f7fe fdf1 	bl	80077d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008bf2:	f7ff f909 	bl	8007e08 <xTaskResumeAll>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d10a      	bne.n	8008c12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008bfc:	4b09      	ldr	r3, [pc, #36]	@ (8008c24 <prvProcessTimerOrBlockTask+0x98>)
 8008bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	f3bf 8f6f 	isb	sy
}
 8008c0c:	e001      	b.n	8008c12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008c0e:	f7ff f8fb 	bl	8007e08 <xTaskResumeAll>
}
 8008c12:	bf00      	nop
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20000e2c 	.word	0x20000e2c
 8008c20:	20000e30 	.word	0x20000e30
 8008c24:	e000ed04 	.word	0xe000ed04

08008c28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c30:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <prvGetNextExpireTime+0x44>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <prvGetNextExpireTime+0x16>
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	e000      	b.n	8008c40 <prvGetNextExpireTime+0x18>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d105      	bne.n	8008c58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c4c:	4b07      	ldr	r3, [pc, #28]	@ (8008c6c <prvGetNextExpireTime+0x44>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	60fb      	str	r3, [r7, #12]
 8008c56:	e001      	b.n	8008c5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	20000e28 	.word	0x20000e28

08008c70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c78:	f7ff f964 	bl	8007f44 <xTaskGetTickCount>
 8008c7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008cac <prvSampleTimeNow+0x3c>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d205      	bcs.n	8008c94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c88:	f000 f93a 	bl	8008f00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e002      	b.n	8008c9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c9a:	4a04      	ldr	r2, [pc, #16]	@ (8008cac <prvSampleTimeNow+0x3c>)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	20000e38 	.word	0x20000e38

08008cb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d812      	bhi.n	8008cfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	1ad2      	subs	r2, r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d302      	bcc.n	8008cea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	e01b      	b.n	8008d22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cea:	4b10      	ldr	r3, [pc, #64]	@ (8008d2c <prvInsertTimerInActiveList+0x7c>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	f7fd feae 	bl	8006a56 <vListInsert>
 8008cfa:	e012      	b.n	8008d22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d206      	bcs.n	8008d12 <prvInsertTimerInActiveList+0x62>
 8008d04:	68ba      	ldr	r2, [r7, #8]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d302      	bcc.n	8008d12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	617b      	str	r3, [r7, #20]
 8008d10:	e007      	b.n	8008d22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d12:	4b07      	ldr	r3, [pc, #28]	@ (8008d30 <prvInsertTimerInActiveList+0x80>)
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f7fd fe9a 	bl	8006a56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d22:	697b      	ldr	r3, [r7, #20]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	20000e2c 	.word	0x20000e2c
 8008d30:	20000e28 	.word	0x20000e28

08008d34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08e      	sub	sp, #56	@ 0x38
 8008d38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d3a:	e0ce      	b.n	8008eda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	da19      	bge.n	8008d76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d42:	1d3b      	adds	r3, r7, #4
 8008d44:	3304      	adds	r3, #4
 8008d46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10b      	bne.n	8008d66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	61fb      	str	r3, [r7, #28]
}
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e7fd      	b.n	8008d62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d6c:	6850      	ldr	r0, [r2, #4]
 8008d6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d70:	6892      	ldr	r2, [r2, #8]
 8008d72:	4611      	mov	r1, r2
 8008d74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f2c0 80ae 	blt.w	8008eda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d004      	beq.n	8008d94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fd fe9a 	bl	8006ac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d94:	463b      	mov	r3, r7
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7ff ff6a 	bl	8008c70 <prvSampleTimeNow>
 8008d9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b09      	cmp	r3, #9
 8008da2:	f200 8097 	bhi.w	8008ed4 <prvProcessReceivedCommands+0x1a0>
 8008da6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dac <prvProcessReceivedCommands+0x78>)
 8008da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dac:	08008dd5 	.word	0x08008dd5
 8008db0:	08008dd5 	.word	0x08008dd5
 8008db4:	08008dd5 	.word	0x08008dd5
 8008db8:	08008e4b 	.word	0x08008e4b
 8008dbc:	08008e5f 	.word	0x08008e5f
 8008dc0:	08008eab 	.word	0x08008eab
 8008dc4:	08008dd5 	.word	0x08008dd5
 8008dc8:	08008dd5 	.word	0x08008dd5
 8008dcc:	08008e4b 	.word	0x08008e4b
 8008dd0:	08008e5f 	.word	0x08008e5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dda:	f043 0301 	orr.w	r3, r3, #1
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	18d1      	adds	r1, r2, r3
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008df4:	f7ff ff5c 	bl	8008cb0 <prvInsertTimerInActiveList>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d06c      	beq.n	8008ed8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d061      	beq.n	8008ed8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	441a      	add	r2, r3
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	2300      	movs	r3, #0
 8008e22:	2100      	movs	r1, #0
 8008e24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e26:	f7ff fe01 	bl	8008a2c <xTimerGenericCommand>
 8008e2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d152      	bne.n	8008ed8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	61bb      	str	r3, [r7, #24]
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	e7fd      	b.n	8008e46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e50:	f023 0301 	bic.w	r3, r3, #1
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e5c:	e03d      	b.n	8008eda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e64:	f043 0301 	orr.w	r3, r3, #1
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10b      	bne.n	8008e96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	617b      	str	r3, [r7, #20]
}
 8008e90:	bf00      	nop
 8008e92:	bf00      	nop
 8008e94:	e7fd      	b.n	8008e92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e98:	699a      	ldr	r2, [r3, #24]
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	18d1      	adds	r1, r2, r3
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea4:	f7ff ff04 	bl	8008cb0 <prvInsertTimerInActiveList>
					break;
 8008ea8:	e017      	b.n	8008eda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008eb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eba:	f000 fbe5 	bl	8009688 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ebe:	e00c      	b.n	8008eda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ec6:	f023 0301 	bic.w	r3, r3, #1
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ece:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008ed2:	e002      	b.n	8008eda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008ed4:	bf00      	nop
 8008ed6:	e000      	b.n	8008eda <prvProcessReceivedCommands+0x1a6>
					break;
 8008ed8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eda:	4b08      	ldr	r3, [pc, #32]	@ (8008efc <prvProcessReceivedCommands+0x1c8>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	1d39      	adds	r1, r7, #4
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe f932 	bl	800714c <xQueueReceive>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f47f af26 	bne.w	8008d3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	3730      	adds	r7, #48	@ 0x30
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000e30 	.word	0x20000e30

08008f00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b088      	sub	sp, #32
 8008f04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f06:	e049      	b.n	8008f9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f08:	4b2e      	ldr	r3, [pc, #184]	@ (8008fc4 <prvSwitchTimerLists+0xc4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f12:	4b2c      	ldr	r3, [pc, #176]	@ (8008fc4 <prvSwitchTimerLists+0xc4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	3304      	adds	r3, #4
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fd fdd1 	bl	8006ac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d02f      	beq.n	8008f9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4413      	add	r3, r2
 8008f44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f46:	68ba      	ldr	r2, [r7, #8]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d90e      	bls.n	8008f6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8008fc4 <prvSwitchTimerLists+0xc4>)
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	3304      	adds	r3, #4
 8008f62:	4619      	mov	r1, r3
 8008f64:	4610      	mov	r0, r2
 8008f66:	f7fd fd76 	bl	8006a56 <vListInsert>
 8008f6a:	e017      	b.n	8008f9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	2300      	movs	r3, #0
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	2100      	movs	r1, #0
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff fd58 	bl	8008a2c <xTimerGenericCommand>
 8008f7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10b      	bne.n	8008f9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	603b      	str	r3, [r7, #0]
}
 8008f96:	bf00      	nop
 8008f98:	bf00      	nop
 8008f9a:	e7fd      	b.n	8008f98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f9c:	4b09      	ldr	r3, [pc, #36]	@ (8008fc4 <prvSwitchTimerLists+0xc4>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1b0      	bne.n	8008f08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008fa6:	4b07      	ldr	r3, [pc, #28]	@ (8008fc4 <prvSwitchTimerLists+0xc4>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008fac:	4b06      	ldr	r3, [pc, #24]	@ (8008fc8 <prvSwitchTimerLists+0xc8>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a04      	ldr	r2, [pc, #16]	@ (8008fc4 <prvSwitchTimerLists+0xc4>)
 8008fb2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008fb4:	4a04      	ldr	r2, [pc, #16]	@ (8008fc8 <prvSwitchTimerLists+0xc8>)
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	6013      	str	r3, [r2, #0]
}
 8008fba:	bf00      	nop
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000e28 	.word	0x20000e28
 8008fc8:	20000e2c 	.word	0x20000e2c

08008fcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008fd2:	f000 f969 	bl	80092a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008fd6:	4b15      	ldr	r3, [pc, #84]	@ (800902c <prvCheckForValidListAndQueue+0x60>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d120      	bne.n	8009020 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008fde:	4814      	ldr	r0, [pc, #80]	@ (8009030 <prvCheckForValidListAndQueue+0x64>)
 8008fe0:	f7fd fce8 	bl	80069b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008fe4:	4813      	ldr	r0, [pc, #76]	@ (8009034 <prvCheckForValidListAndQueue+0x68>)
 8008fe6:	f7fd fce5 	bl	80069b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008fea:	4b13      	ldr	r3, [pc, #76]	@ (8009038 <prvCheckForValidListAndQueue+0x6c>)
 8008fec:	4a10      	ldr	r2, [pc, #64]	@ (8009030 <prvCheckForValidListAndQueue+0x64>)
 8008fee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ff0:	4b12      	ldr	r3, [pc, #72]	@ (800903c <prvCheckForValidListAndQueue+0x70>)
 8008ff2:	4a10      	ldr	r2, [pc, #64]	@ (8009034 <prvCheckForValidListAndQueue+0x68>)
 8008ff4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	4b11      	ldr	r3, [pc, #68]	@ (8009040 <prvCheckForValidListAndQueue+0x74>)
 8008ffc:	4a11      	ldr	r2, [pc, #68]	@ (8009044 <prvCheckForValidListAndQueue+0x78>)
 8008ffe:	2110      	movs	r1, #16
 8009000:	200a      	movs	r0, #10
 8009002:	f7fd fdf5 	bl	8006bf0 <xQueueGenericCreateStatic>
 8009006:	4603      	mov	r3, r0
 8009008:	4a08      	ldr	r2, [pc, #32]	@ (800902c <prvCheckForValidListAndQueue+0x60>)
 800900a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800900c:	4b07      	ldr	r3, [pc, #28]	@ (800902c <prvCheckForValidListAndQueue+0x60>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009014:	4b05      	ldr	r3, [pc, #20]	@ (800902c <prvCheckForValidListAndQueue+0x60>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	490b      	ldr	r1, [pc, #44]	@ (8009048 <prvCheckForValidListAndQueue+0x7c>)
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe fbb0 	bl	8007780 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009020:	f000 f974 	bl	800930c <vPortExitCritical>
}
 8009024:	bf00      	nop
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	20000e30 	.word	0x20000e30
 8009030:	20000e00 	.word	0x20000e00
 8009034:	20000e14 	.word	0x20000e14
 8009038:	20000e28 	.word	0x20000e28
 800903c:	20000e2c 	.word	0x20000e2c
 8009040:	20000edc 	.word	0x20000edc
 8009044:	20000e3c 	.word	0x20000e3c
 8009048:	08009b84 	.word	0x08009b84

0800904c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3b04      	subs	r3, #4
 800905c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009064:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	3b04      	subs	r3, #4
 800906a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f023 0201 	bic.w	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3b04      	subs	r3, #4
 800907a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800907c:	4a0c      	ldr	r2, [pc, #48]	@ (80090b0 <pxPortInitialiseStack+0x64>)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3b14      	subs	r3, #20
 8009086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3b04      	subs	r3, #4
 8009092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f06f 0202 	mvn.w	r2, #2
 800909a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3b20      	subs	r3, #32
 80090a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80090a2:	68fb      	ldr	r3, [r7, #12]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	080090b5 	.word	0x080090b5

080090b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090be:	4b13      	ldr	r3, [pc, #76]	@ (800910c <prvTaskExitError+0x58>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c6:	d00b      	beq.n	80090e0 <prvTaskExitError+0x2c>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	60fb      	str	r3, [r7, #12]
}
 80090da:	bf00      	nop
 80090dc:	bf00      	nop
 80090de:	e7fd      	b.n	80090dc <prvTaskExitError+0x28>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	60bb      	str	r3, [r7, #8]
}
 80090f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090f4:	bf00      	nop
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0fc      	beq.n	80090f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090fc:	bf00      	nop
 80090fe:	bf00      	nop
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	20000014 	.word	0x20000014

08009110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009110:	4b07      	ldr	r3, [pc, #28]	@ (8009130 <pxCurrentTCBConst2>)
 8009112:	6819      	ldr	r1, [r3, #0]
 8009114:	6808      	ldr	r0, [r1, #0]
 8009116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	f380 8809 	msr	PSP, r0
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f04f 0000 	mov.w	r0, #0
 8009126:	f380 8811 	msr	BASEPRI, r0
 800912a:	4770      	bx	lr
 800912c:	f3af 8000 	nop.w

08009130 <pxCurrentTCBConst2>:
 8009130:	20000900 	.word	0x20000900
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop

08009138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009138:	4808      	ldr	r0, [pc, #32]	@ (800915c <prvPortStartFirstTask+0x24>)
 800913a:	6800      	ldr	r0, [r0, #0]
 800913c:	6800      	ldr	r0, [r0, #0]
 800913e:	f380 8808 	msr	MSP, r0
 8009142:	f04f 0000 	mov.w	r0, #0
 8009146:	f380 8814 	msr	CONTROL, r0
 800914a:	b662      	cpsie	i
 800914c:	b661      	cpsie	f
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	df00      	svc	0
 8009158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800915a:	bf00      	nop
 800915c:	e000ed08 	.word	0xe000ed08

08009160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009166:	4b47      	ldr	r3, [pc, #284]	@ (8009284 <xPortStartScheduler+0x124>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a47      	ldr	r2, [pc, #284]	@ (8009288 <xPortStartScheduler+0x128>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d10b      	bne.n	8009188 <xPortStartScheduler+0x28>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	613b      	str	r3, [r7, #16]
}
 8009182:	bf00      	nop
 8009184:	bf00      	nop
 8009186:	e7fd      	b.n	8009184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009188:	4b3e      	ldr	r3, [pc, #248]	@ (8009284 <xPortStartScheduler+0x124>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a3f      	ldr	r2, [pc, #252]	@ (800928c <xPortStartScheduler+0x12c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d10b      	bne.n	80091aa <xPortStartScheduler+0x4a>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	60fb      	str	r3, [r7, #12]
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091aa:	4b39      	ldr	r3, [pc, #228]	@ (8009290 <xPortStartScheduler+0x130>)
 80091ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	22ff      	movs	r2, #255	@ 0xff
 80091ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	4b31      	ldr	r3, [pc, #196]	@ (8009294 <xPortStartScheduler+0x134>)
 80091d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091d2:	4b31      	ldr	r3, [pc, #196]	@ (8009298 <xPortStartScheduler+0x138>)
 80091d4:	2207      	movs	r2, #7
 80091d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091d8:	e009      	b.n	80091ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80091da:	4b2f      	ldr	r3, [pc, #188]	@ (8009298 <xPortStartScheduler+0x138>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3b01      	subs	r3, #1
 80091e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009298 <xPortStartScheduler+0x138>)
 80091e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091ee:	78fb      	ldrb	r3, [r7, #3]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091f6:	2b80      	cmp	r3, #128	@ 0x80
 80091f8:	d0ef      	beq.n	80091da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091fa:	4b27      	ldr	r3, [pc, #156]	@ (8009298 <xPortStartScheduler+0x138>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f1c3 0307 	rsb	r3, r3, #7
 8009202:	2b04      	cmp	r3, #4
 8009204:	d00b      	beq.n	800921e <xPortStartScheduler+0xbe>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	60bb      	str	r3, [r7, #8]
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800921e:	4b1e      	ldr	r3, [pc, #120]	@ (8009298 <xPortStartScheduler+0x138>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	4a1c      	ldr	r2, [pc, #112]	@ (8009298 <xPortStartScheduler+0x138>)
 8009226:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009228:	4b1b      	ldr	r3, [pc, #108]	@ (8009298 <xPortStartScheduler+0x138>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009230:	4a19      	ldr	r2, [pc, #100]	@ (8009298 <xPortStartScheduler+0x138>)
 8009232:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	b2da      	uxtb	r2, r3
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800923c:	4b17      	ldr	r3, [pc, #92]	@ (800929c <xPortStartScheduler+0x13c>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a16      	ldr	r2, [pc, #88]	@ (800929c <xPortStartScheduler+0x13c>)
 8009242:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009246:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009248:	4b14      	ldr	r3, [pc, #80]	@ (800929c <xPortStartScheduler+0x13c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a13      	ldr	r2, [pc, #76]	@ (800929c <xPortStartScheduler+0x13c>)
 800924e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009252:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009254:	f000 f8da 	bl	800940c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009258:	4b11      	ldr	r3, [pc, #68]	@ (80092a0 <xPortStartScheduler+0x140>)
 800925a:	2200      	movs	r2, #0
 800925c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800925e:	f000 f8f9 	bl	8009454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009262:	4b10      	ldr	r3, [pc, #64]	@ (80092a4 <xPortStartScheduler+0x144>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a0f      	ldr	r2, [pc, #60]	@ (80092a4 <xPortStartScheduler+0x144>)
 8009268:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800926c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800926e:	f7ff ff63 	bl	8009138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009272:	f7fe ff31 	bl	80080d8 <vTaskSwitchContext>
	prvTaskExitError();
 8009276:	f7ff ff1d 	bl	80090b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	e000ed00 	.word	0xe000ed00
 8009288:	410fc271 	.word	0x410fc271
 800928c:	410fc270 	.word	0x410fc270
 8009290:	e000e400 	.word	0xe000e400
 8009294:	20000f2c 	.word	0x20000f2c
 8009298:	20000f30 	.word	0x20000f30
 800929c:	e000ed20 	.word	0xe000ed20
 80092a0:	20000014 	.word	0x20000014
 80092a4:	e000ef34 	.word	0xe000ef34

080092a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
	__asm volatile
 80092ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b2:	f383 8811 	msr	BASEPRI, r3
 80092b6:	f3bf 8f6f 	isb	sy
 80092ba:	f3bf 8f4f 	dsb	sy
 80092be:	607b      	str	r3, [r7, #4]
}
 80092c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092c2:	4b10      	ldr	r3, [pc, #64]	@ (8009304 <vPortEnterCritical+0x5c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3301      	adds	r3, #1
 80092c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009304 <vPortEnterCritical+0x5c>)
 80092ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009304 <vPortEnterCritical+0x5c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d110      	bne.n	80092f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009308 <vPortEnterCritical+0x60>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	603b      	str	r3, [r7, #0]
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <vPortEnterCritical+0x4a>
	}
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20000014 	.word	0x20000014
 8009308:	e000ed04 	.word	0xe000ed04

0800930c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009312:	4b12      	ldr	r3, [pc, #72]	@ (800935c <vPortExitCritical+0x50>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10b      	bne.n	8009332 <vPortExitCritical+0x26>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	607b      	str	r3, [r7, #4]
}
 800932c:	bf00      	nop
 800932e:	bf00      	nop
 8009330:	e7fd      	b.n	800932e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009332:	4b0a      	ldr	r3, [pc, #40]	@ (800935c <vPortExitCritical+0x50>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3b01      	subs	r3, #1
 8009338:	4a08      	ldr	r2, [pc, #32]	@ (800935c <vPortExitCritical+0x50>)
 800933a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800933c:	4b07      	ldr	r3, [pc, #28]	@ (800935c <vPortExitCritical+0x50>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d105      	bne.n	8009350 <vPortExitCritical+0x44>
 8009344:	2300      	movs	r3, #0
 8009346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f383 8811 	msr	BASEPRI, r3
}
 800934e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	20000014 	.word	0x20000014

08009360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009360:	f3ef 8009 	mrs	r0, PSP
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	4b15      	ldr	r3, [pc, #84]	@ (80093c0 <pxCurrentTCBConst>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	f01e 0f10 	tst.w	lr, #16
 8009370:	bf08      	it	eq
 8009372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	6010      	str	r0, [r2, #0]
 800937c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009380:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009384:	f380 8811 	msr	BASEPRI, r0
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f7fe fea2 	bl	80080d8 <vTaskSwitchContext>
 8009394:	f04f 0000 	mov.w	r0, #0
 8009398:	f380 8811 	msr	BASEPRI, r0
 800939c:	bc09      	pop	{r0, r3}
 800939e:	6819      	ldr	r1, [r3, #0]
 80093a0:	6808      	ldr	r0, [r1, #0]
 80093a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a6:	f01e 0f10 	tst.w	lr, #16
 80093aa:	bf08      	it	eq
 80093ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093b0:	f380 8809 	msr	PSP, r0
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	f3af 8000 	nop.w

080093c0 <pxCurrentTCBConst>:
 80093c0:	20000900 	.word	0x20000900
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop

080093c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	607b      	str	r3, [r7, #4]
}
 80093e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093e2:	f7fe fdbf 	bl	8007f64 <xTaskIncrementTick>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d003      	beq.n	80093f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093ec:	4b06      	ldr	r3, [pc, #24]	@ (8009408 <xPortSysTickHandler+0x40>)
 80093ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f383 8811 	msr	BASEPRI, r3
}
 80093fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	e000ed04 	.word	0xe000ed04

0800940c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800940c:	b480      	push	{r7}
 800940e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009410:	4b0b      	ldr	r3, [pc, #44]	@ (8009440 <vPortSetupTimerInterrupt+0x34>)
 8009412:	2200      	movs	r2, #0
 8009414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009416:	4b0b      	ldr	r3, [pc, #44]	@ (8009444 <vPortSetupTimerInterrupt+0x38>)
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800941c:	4b0a      	ldr	r3, [pc, #40]	@ (8009448 <vPortSetupTimerInterrupt+0x3c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a0a      	ldr	r2, [pc, #40]	@ (800944c <vPortSetupTimerInterrupt+0x40>)
 8009422:	fba2 2303 	umull	r2, r3, r2, r3
 8009426:	099b      	lsrs	r3, r3, #6
 8009428:	4a09      	ldr	r2, [pc, #36]	@ (8009450 <vPortSetupTimerInterrupt+0x44>)
 800942a:	3b01      	subs	r3, #1
 800942c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800942e:	4b04      	ldr	r3, [pc, #16]	@ (8009440 <vPortSetupTimerInterrupt+0x34>)
 8009430:	2207      	movs	r2, #7
 8009432:	601a      	str	r2, [r3, #0]
}
 8009434:	bf00      	nop
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	e000e010 	.word	0xe000e010
 8009444:	e000e018 	.word	0xe000e018
 8009448:	20000000 	.word	0x20000000
 800944c:	10624dd3 	.word	0x10624dd3
 8009450:	e000e014 	.word	0xe000e014

08009454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009454:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009464 <vPortEnableVFP+0x10>
 8009458:	6801      	ldr	r1, [r0, #0]
 800945a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800945e:	6001      	str	r1, [r0, #0]
 8009460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009462:	bf00      	nop
 8009464:	e000ed88 	.word	0xe000ed88

08009468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800946e:	f3ef 8305 	mrs	r3, IPSR
 8009472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b0f      	cmp	r3, #15
 8009478:	d915      	bls.n	80094a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800947a:	4a18      	ldr	r2, [pc, #96]	@ (80094dc <vPortValidateInterruptPriority+0x74>)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4413      	add	r3, r2
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009484:	4b16      	ldr	r3, [pc, #88]	@ (80094e0 <vPortValidateInterruptPriority+0x78>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	7afa      	ldrb	r2, [r7, #11]
 800948a:	429a      	cmp	r2, r3
 800948c:	d20b      	bcs.n	80094a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800948e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009492:	f383 8811 	msr	BASEPRI, r3
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	f3bf 8f4f 	dsb	sy
 800949e:	607b      	str	r3, [r7, #4]
}
 80094a0:	bf00      	nop
 80094a2:	bf00      	nop
 80094a4:	e7fd      	b.n	80094a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094a6:	4b0f      	ldr	r3, [pc, #60]	@ (80094e4 <vPortValidateInterruptPriority+0x7c>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80094ae:	4b0e      	ldr	r3, [pc, #56]	@ (80094e8 <vPortValidateInterruptPriority+0x80>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d90b      	bls.n	80094ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80094b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ba:	f383 8811 	msr	BASEPRI, r3
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	603b      	str	r3, [r7, #0]
}
 80094c8:	bf00      	nop
 80094ca:	bf00      	nop
 80094cc:	e7fd      	b.n	80094ca <vPortValidateInterruptPriority+0x62>
	}
 80094ce:	bf00      	nop
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	e000e3f0 	.word	0xe000e3f0
 80094e0:	20000f2c 	.word	0x20000f2c
 80094e4:	e000ed0c 	.word	0xe000ed0c
 80094e8:	20000f30 	.word	0x20000f30

080094ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08a      	sub	sp, #40	@ 0x28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094f4:	2300      	movs	r3, #0
 80094f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094f8:	f7fe fc78 	bl	8007dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094fc:	4b5c      	ldr	r3, [pc, #368]	@ (8009670 <pvPortMalloc+0x184>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d101      	bne.n	8009508 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009504:	f000 f924 	bl	8009750 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009508:	4b5a      	ldr	r3, [pc, #360]	@ (8009674 <pvPortMalloc+0x188>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4013      	ands	r3, r2
 8009510:	2b00      	cmp	r3, #0
 8009512:	f040 8095 	bne.w	8009640 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d01e      	beq.n	800955a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800951c:	2208      	movs	r2, #8
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4413      	add	r3, r2
 8009522:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	2b00      	cmp	r3, #0
 800952c:	d015      	beq.n	800955a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f023 0307 	bic.w	r3, r3, #7
 8009534:	3308      	adds	r3, #8
 8009536:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f003 0307 	and.w	r3, r3, #7
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00b      	beq.n	800955a <pvPortMalloc+0x6e>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	617b      	str	r3, [r7, #20]
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop
 8009558:	e7fd      	b.n	8009556 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d06f      	beq.n	8009640 <pvPortMalloc+0x154>
 8009560:	4b45      	ldr	r3, [pc, #276]	@ (8009678 <pvPortMalloc+0x18c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d86a      	bhi.n	8009640 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800956a:	4b44      	ldr	r3, [pc, #272]	@ (800967c <pvPortMalloc+0x190>)
 800956c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800956e:	4b43      	ldr	r3, [pc, #268]	@ (800967c <pvPortMalloc+0x190>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009574:	e004      	b.n	8009580 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d903      	bls.n	8009592 <pvPortMalloc+0xa6>
 800958a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f1      	bne.n	8009576 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009592:	4b37      	ldr	r3, [pc, #220]	@ (8009670 <pvPortMalloc+0x184>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009598:	429a      	cmp	r2, r3
 800959a:	d051      	beq.n	8009640 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800959c:	6a3b      	ldr	r3, [r7, #32]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2208      	movs	r2, #8
 80095a2:	4413      	add	r3, r2
 80095a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80095ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	1ad2      	subs	r2, r2, r3
 80095b6:	2308      	movs	r3, #8
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d920      	bls.n	8009600 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4413      	add	r3, r2
 80095c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	f003 0307 	and.w	r3, r3, #7
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00b      	beq.n	80095e8 <pvPortMalloc+0xfc>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	613b      	str	r3, [r7, #16]
}
 80095e2:	bf00      	nop
 80095e4:	bf00      	nop
 80095e6:	e7fd      	b.n	80095e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	1ad2      	subs	r2, r2, r3
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095fa:	69b8      	ldr	r0, [r7, #24]
 80095fc:	f000 f90a 	bl	8009814 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009600:	4b1d      	ldr	r3, [pc, #116]	@ (8009678 <pvPortMalloc+0x18c>)
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	4a1b      	ldr	r2, [pc, #108]	@ (8009678 <pvPortMalloc+0x18c>)
 800960c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800960e:	4b1a      	ldr	r3, [pc, #104]	@ (8009678 <pvPortMalloc+0x18c>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	4b1b      	ldr	r3, [pc, #108]	@ (8009680 <pvPortMalloc+0x194>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	429a      	cmp	r2, r3
 8009618:	d203      	bcs.n	8009622 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800961a:	4b17      	ldr	r3, [pc, #92]	@ (8009678 <pvPortMalloc+0x18c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a18      	ldr	r2, [pc, #96]	@ (8009680 <pvPortMalloc+0x194>)
 8009620:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	4b13      	ldr	r3, [pc, #76]	@ (8009674 <pvPortMalloc+0x188>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	431a      	orrs	r2, r3
 800962c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800962e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009636:	4b13      	ldr	r3, [pc, #76]	@ (8009684 <pvPortMalloc+0x198>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	4a11      	ldr	r2, [pc, #68]	@ (8009684 <pvPortMalloc+0x198>)
 800963e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009640:	f7fe fbe2 	bl	8007e08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <pvPortMalloc+0x17a>
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	60fb      	str	r3, [r7, #12]
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	e7fd      	b.n	8009662 <pvPortMalloc+0x176>
	return pvReturn;
 8009666:	69fb      	ldr	r3, [r7, #28]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3728      	adds	r7, #40	@ 0x28
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20001af4 	.word	0x20001af4
 8009674:	20001b08 	.word	0x20001b08
 8009678:	20001af8 	.word	0x20001af8
 800967c:	20001aec 	.word	0x20001aec
 8009680:	20001afc 	.word	0x20001afc
 8009684:	20001b00 	.word	0x20001b00

08009688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b086      	sub	sp, #24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d04f      	beq.n	800973a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800969a:	2308      	movs	r3, #8
 800969c:	425b      	negs	r3, r3
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	4413      	add	r3, r2
 80096a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	4b25      	ldr	r3, [pc, #148]	@ (8009744 <vPortFree+0xbc>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4013      	ands	r3, r2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10b      	bne.n	80096ce <vPortFree+0x46>
	__asm volatile
 80096b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	60fb      	str	r3, [r7, #12]
}
 80096c8:	bf00      	nop
 80096ca:	bf00      	nop
 80096cc:	e7fd      	b.n	80096ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00b      	beq.n	80096ee <vPortFree+0x66>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	60bb      	str	r3, [r7, #8]
}
 80096e8:	bf00      	nop
 80096ea:	bf00      	nop
 80096ec:	e7fd      	b.n	80096ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	4b14      	ldr	r3, [pc, #80]	@ (8009744 <vPortFree+0xbc>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4013      	ands	r3, r2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d01e      	beq.n	800973a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d11a      	bne.n	800973a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	4b0e      	ldr	r3, [pc, #56]	@ (8009744 <vPortFree+0xbc>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	43db      	mvns	r3, r3
 800970e:	401a      	ands	r2, r3
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009714:	f7fe fb6a 	bl	8007dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	4b0a      	ldr	r3, [pc, #40]	@ (8009748 <vPortFree+0xc0>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4413      	add	r3, r2
 8009722:	4a09      	ldr	r2, [pc, #36]	@ (8009748 <vPortFree+0xc0>)
 8009724:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009726:	6938      	ldr	r0, [r7, #16]
 8009728:	f000 f874 	bl	8009814 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800972c:	4b07      	ldr	r3, [pc, #28]	@ (800974c <vPortFree+0xc4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3301      	adds	r3, #1
 8009732:	4a06      	ldr	r2, [pc, #24]	@ (800974c <vPortFree+0xc4>)
 8009734:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009736:	f7fe fb67 	bl	8007e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800973a:	bf00      	nop
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20001b08 	.word	0x20001b08
 8009748:	20001af8 	.word	0x20001af8
 800974c:	20001b04 	.word	0x20001b04

08009750 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009756:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800975a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800975c:	4b27      	ldr	r3, [pc, #156]	@ (80097fc <prvHeapInit+0xac>)
 800975e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f003 0307 	and.w	r3, r3, #7
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	3307      	adds	r3, #7
 800976e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f023 0307 	bic.w	r3, r3, #7
 8009776:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	4a1f      	ldr	r2, [pc, #124]	@ (80097fc <prvHeapInit+0xac>)
 8009780:	4413      	add	r3, r2
 8009782:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009788:	4a1d      	ldr	r2, [pc, #116]	@ (8009800 <prvHeapInit+0xb0>)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800978e:	4b1c      	ldr	r3, [pc, #112]	@ (8009800 <prvHeapInit+0xb0>)
 8009790:	2200      	movs	r2, #0
 8009792:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	4413      	add	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800979c:	2208      	movs	r2, #8
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	1a9b      	subs	r3, r3, r2
 80097a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f023 0307 	bic.w	r3, r3, #7
 80097aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4a15      	ldr	r2, [pc, #84]	@ (8009804 <prvHeapInit+0xb4>)
 80097b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097b2:	4b14      	ldr	r3, [pc, #80]	@ (8009804 <prvHeapInit+0xb4>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2200      	movs	r2, #0
 80097b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097ba:	4b12      	ldr	r3, [pc, #72]	@ (8009804 <prvHeapInit+0xb4>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2200      	movs	r2, #0
 80097c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	1ad2      	subs	r2, r2, r3
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009804 <prvHeapInit+0xb4>)
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	4a0a      	ldr	r2, [pc, #40]	@ (8009808 <prvHeapInit+0xb8>)
 80097de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	4a09      	ldr	r2, [pc, #36]	@ (800980c <prvHeapInit+0xbc>)
 80097e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097e8:	4b09      	ldr	r3, [pc, #36]	@ (8009810 <prvHeapInit+0xc0>)
 80097ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80097ee:	601a      	str	r2, [r3, #0]
}
 80097f0:	bf00      	nop
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr
 80097fc:	20000f34 	.word	0x20000f34
 8009800:	20001aec 	.word	0x20001aec
 8009804:	20001af4 	.word	0x20001af4
 8009808:	20001afc 	.word	0x20001afc
 800980c:	20001af8 	.word	0x20001af8
 8009810:	20001b08 	.word	0x20001b08

08009814 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800981c:	4b28      	ldr	r3, [pc, #160]	@ (80098c0 <prvInsertBlockIntoFreeList+0xac>)
 800981e:	60fb      	str	r3, [r7, #12]
 8009820:	e002      	b.n	8009828 <prvInsertBlockIntoFreeList+0x14>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60fb      	str	r3, [r7, #12]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	429a      	cmp	r2, r3
 8009830:	d8f7      	bhi.n	8009822 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	68ba      	ldr	r2, [r7, #8]
 800983c:	4413      	add	r3, r2
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	429a      	cmp	r2, r3
 8009842:	d108      	bne.n	8009856 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	441a      	add	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	441a      	add	r2, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d118      	bne.n	800989c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	4b15      	ldr	r3, [pc, #84]	@ (80098c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	429a      	cmp	r2, r3
 8009874:	d00d      	beq.n	8009892 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	441a      	add	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	601a      	str	r2, [r3, #0]
 8009890:	e008      	b.n	80098a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009892:	4b0c      	ldr	r3, [pc, #48]	@ (80098c4 <prvInsertBlockIntoFreeList+0xb0>)
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	e003      	b.n	80098a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d002      	beq.n	80098b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098b2:	bf00      	nop
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	20001aec 	.word	0x20001aec
 80098c4:	20001af4 	.word	0x20001af4

080098c8 <memset>:
 80098c8:	4402      	add	r2, r0
 80098ca:	4603      	mov	r3, r0
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d100      	bne.n	80098d2 <memset+0xa>
 80098d0:	4770      	bx	lr
 80098d2:	f803 1b01 	strb.w	r1, [r3], #1
 80098d6:	e7f9      	b.n	80098cc <memset+0x4>

080098d8 <_reclaim_reent>:
 80098d8:	4b29      	ldr	r3, [pc, #164]	@ (8009980 <_reclaim_reent+0xa8>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4283      	cmp	r3, r0
 80098de:	b570      	push	{r4, r5, r6, lr}
 80098e0:	4604      	mov	r4, r0
 80098e2:	d04b      	beq.n	800997c <_reclaim_reent+0xa4>
 80098e4:	69c3      	ldr	r3, [r0, #28]
 80098e6:	b1ab      	cbz	r3, 8009914 <_reclaim_reent+0x3c>
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	b16b      	cbz	r3, 8009908 <_reclaim_reent+0x30>
 80098ec:	2500      	movs	r5, #0
 80098ee:	69e3      	ldr	r3, [r4, #28]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	5959      	ldr	r1, [r3, r5]
 80098f4:	2900      	cmp	r1, #0
 80098f6:	d13b      	bne.n	8009970 <_reclaim_reent+0x98>
 80098f8:	3504      	adds	r5, #4
 80098fa:	2d80      	cmp	r5, #128	@ 0x80
 80098fc:	d1f7      	bne.n	80098ee <_reclaim_reent+0x16>
 80098fe:	69e3      	ldr	r3, [r4, #28]
 8009900:	4620      	mov	r0, r4
 8009902:	68d9      	ldr	r1, [r3, #12]
 8009904:	f000 f872 	bl	80099ec <_free_r>
 8009908:	69e3      	ldr	r3, [r4, #28]
 800990a:	6819      	ldr	r1, [r3, #0]
 800990c:	b111      	cbz	r1, 8009914 <_reclaim_reent+0x3c>
 800990e:	4620      	mov	r0, r4
 8009910:	f000 f86c 	bl	80099ec <_free_r>
 8009914:	6961      	ldr	r1, [r4, #20]
 8009916:	b111      	cbz	r1, 800991e <_reclaim_reent+0x46>
 8009918:	4620      	mov	r0, r4
 800991a:	f000 f867 	bl	80099ec <_free_r>
 800991e:	69e1      	ldr	r1, [r4, #28]
 8009920:	b111      	cbz	r1, 8009928 <_reclaim_reent+0x50>
 8009922:	4620      	mov	r0, r4
 8009924:	f000 f862 	bl	80099ec <_free_r>
 8009928:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800992a:	b111      	cbz	r1, 8009932 <_reclaim_reent+0x5a>
 800992c:	4620      	mov	r0, r4
 800992e:	f000 f85d 	bl	80099ec <_free_r>
 8009932:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009934:	b111      	cbz	r1, 800993c <_reclaim_reent+0x64>
 8009936:	4620      	mov	r0, r4
 8009938:	f000 f858 	bl	80099ec <_free_r>
 800993c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800993e:	b111      	cbz	r1, 8009946 <_reclaim_reent+0x6e>
 8009940:	4620      	mov	r0, r4
 8009942:	f000 f853 	bl	80099ec <_free_r>
 8009946:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009948:	b111      	cbz	r1, 8009950 <_reclaim_reent+0x78>
 800994a:	4620      	mov	r0, r4
 800994c:	f000 f84e 	bl	80099ec <_free_r>
 8009950:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009952:	b111      	cbz	r1, 800995a <_reclaim_reent+0x82>
 8009954:	4620      	mov	r0, r4
 8009956:	f000 f849 	bl	80099ec <_free_r>
 800995a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800995c:	b111      	cbz	r1, 8009964 <_reclaim_reent+0x8c>
 800995e:	4620      	mov	r0, r4
 8009960:	f000 f844 	bl	80099ec <_free_r>
 8009964:	6a23      	ldr	r3, [r4, #32]
 8009966:	b14b      	cbz	r3, 800997c <_reclaim_reent+0xa4>
 8009968:	4620      	mov	r0, r4
 800996a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800996e:	4718      	bx	r3
 8009970:	680e      	ldr	r6, [r1, #0]
 8009972:	4620      	mov	r0, r4
 8009974:	f000 f83a 	bl	80099ec <_free_r>
 8009978:	4631      	mov	r1, r6
 800997a:	e7bb      	b.n	80098f4 <_reclaim_reent+0x1c>
 800997c:	bd70      	pop	{r4, r5, r6, pc}
 800997e:	bf00      	nop
 8009980:	20000018 	.word	0x20000018

08009984 <__libc_init_array>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	4d0d      	ldr	r5, [pc, #52]	@ (80099bc <__libc_init_array+0x38>)
 8009988:	4c0d      	ldr	r4, [pc, #52]	@ (80099c0 <__libc_init_array+0x3c>)
 800998a:	1b64      	subs	r4, r4, r5
 800998c:	10a4      	asrs	r4, r4, #2
 800998e:	2600      	movs	r6, #0
 8009990:	42a6      	cmp	r6, r4
 8009992:	d109      	bne.n	80099a8 <__libc_init_array+0x24>
 8009994:	4d0b      	ldr	r5, [pc, #44]	@ (80099c4 <__libc_init_array+0x40>)
 8009996:	4c0c      	ldr	r4, [pc, #48]	@ (80099c8 <__libc_init_array+0x44>)
 8009998:	f000 f8c4 	bl	8009b24 <_init>
 800999c:	1b64      	subs	r4, r4, r5
 800999e:	10a4      	asrs	r4, r4, #2
 80099a0:	2600      	movs	r6, #0
 80099a2:	42a6      	cmp	r6, r4
 80099a4:	d105      	bne.n	80099b2 <__libc_init_array+0x2e>
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ac:	4798      	blx	r3
 80099ae:	3601      	adds	r6, #1
 80099b0:	e7ee      	b.n	8009990 <__libc_init_array+0xc>
 80099b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b6:	4798      	blx	r3
 80099b8:	3601      	adds	r6, #1
 80099ba:	e7f2      	b.n	80099a2 <__libc_init_array+0x1e>
 80099bc:	08009d30 	.word	0x08009d30
 80099c0:	08009d30 	.word	0x08009d30
 80099c4:	08009d30 	.word	0x08009d30
 80099c8:	08009d34 	.word	0x08009d34

080099cc <__retarget_lock_acquire_recursive>:
 80099cc:	4770      	bx	lr

080099ce <__retarget_lock_release_recursive>:
 80099ce:	4770      	bx	lr

080099d0 <memcpy>:
 80099d0:	440a      	add	r2, r1
 80099d2:	4291      	cmp	r1, r2
 80099d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099d8:	d100      	bne.n	80099dc <memcpy+0xc>
 80099da:	4770      	bx	lr
 80099dc:	b510      	push	{r4, lr}
 80099de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099e6:	4291      	cmp	r1, r2
 80099e8:	d1f9      	bne.n	80099de <memcpy+0xe>
 80099ea:	bd10      	pop	{r4, pc}

080099ec <_free_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4605      	mov	r5, r0
 80099f0:	2900      	cmp	r1, #0
 80099f2:	d041      	beq.n	8009a78 <_free_r+0x8c>
 80099f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f8:	1f0c      	subs	r4, r1, #4
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	bfb8      	it	lt
 80099fe:	18e4      	addlt	r4, r4, r3
 8009a00:	f000 f83e 	bl	8009a80 <__malloc_lock>
 8009a04:	4a1d      	ldr	r2, [pc, #116]	@ (8009a7c <_free_r+0x90>)
 8009a06:	6813      	ldr	r3, [r2, #0]
 8009a08:	b933      	cbnz	r3, 8009a18 <_free_r+0x2c>
 8009a0a:	6063      	str	r3, [r4, #4]
 8009a0c:	6014      	str	r4, [r2, #0]
 8009a0e:	4628      	mov	r0, r5
 8009a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a14:	f000 b83a 	b.w	8009a8c <__malloc_unlock>
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	d908      	bls.n	8009a2e <_free_r+0x42>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	1821      	adds	r1, r4, r0
 8009a20:	428b      	cmp	r3, r1
 8009a22:	bf01      	itttt	eq
 8009a24:	6819      	ldreq	r1, [r3, #0]
 8009a26:	685b      	ldreq	r3, [r3, #4]
 8009a28:	1809      	addeq	r1, r1, r0
 8009a2a:	6021      	streq	r1, [r4, #0]
 8009a2c:	e7ed      	b.n	8009a0a <_free_r+0x1e>
 8009a2e:	461a      	mov	r2, r3
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	b10b      	cbz	r3, 8009a38 <_free_r+0x4c>
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	d9fa      	bls.n	8009a2e <_free_r+0x42>
 8009a38:	6811      	ldr	r1, [r2, #0]
 8009a3a:	1850      	adds	r0, r2, r1
 8009a3c:	42a0      	cmp	r0, r4
 8009a3e:	d10b      	bne.n	8009a58 <_free_r+0x6c>
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	4401      	add	r1, r0
 8009a44:	1850      	adds	r0, r2, r1
 8009a46:	4283      	cmp	r3, r0
 8009a48:	6011      	str	r1, [r2, #0]
 8009a4a:	d1e0      	bne.n	8009a0e <_free_r+0x22>
 8009a4c:	6818      	ldr	r0, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	6053      	str	r3, [r2, #4]
 8009a52:	4408      	add	r0, r1
 8009a54:	6010      	str	r0, [r2, #0]
 8009a56:	e7da      	b.n	8009a0e <_free_r+0x22>
 8009a58:	d902      	bls.n	8009a60 <_free_r+0x74>
 8009a5a:	230c      	movs	r3, #12
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	e7d6      	b.n	8009a0e <_free_r+0x22>
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	1821      	adds	r1, r4, r0
 8009a64:	428b      	cmp	r3, r1
 8009a66:	bf04      	itt	eq
 8009a68:	6819      	ldreq	r1, [r3, #0]
 8009a6a:	685b      	ldreq	r3, [r3, #4]
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	bf04      	itt	eq
 8009a70:	1809      	addeq	r1, r1, r0
 8009a72:	6021      	streq	r1, [r4, #0]
 8009a74:	6054      	str	r4, [r2, #4]
 8009a76:	e7ca      	b.n	8009a0e <_free_r+0x22>
 8009a78:	bd38      	pop	{r3, r4, r5, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20001c48 	.word	0x20001c48

08009a80 <__malloc_lock>:
 8009a80:	4801      	ldr	r0, [pc, #4]	@ (8009a88 <__malloc_lock+0x8>)
 8009a82:	f7ff bfa3 	b.w	80099cc <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	20001c44 	.word	0x20001c44

08009a8c <__malloc_unlock>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	@ (8009a94 <__malloc_unlock+0x8>)
 8009a8e:	f7ff bf9e 	b.w	80099ce <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	20001c44 	.word	0x20001c44

08009a98 <round>:
 8009a98:	ec51 0b10 	vmov	r0, r1, d0
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8009aa2:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8009aa6:	2a13      	cmp	r2, #19
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4605      	mov	r5, r0
 8009aac:	dc1b      	bgt.n	8009ae6 <round+0x4e>
 8009aae:	2a00      	cmp	r2, #0
 8009ab0:	da0b      	bge.n	8009aca <round+0x32>
 8009ab2:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8009ab6:	3201      	adds	r2, #1
 8009ab8:	bf04      	itt	eq
 8009aba:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8009abe:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	e015      	b.n	8009af6 <round+0x5e>
 8009aca:	4c15      	ldr	r4, [pc, #84]	@ (8009b20 <round+0x88>)
 8009acc:	4114      	asrs	r4, r2
 8009ace:	ea04 0601 	and.w	r6, r4, r1
 8009ad2:	4306      	orrs	r6, r0
 8009ad4:	d00f      	beq.n	8009af6 <round+0x5e>
 8009ad6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8009ada:	fa41 f202 	asr.w	r2, r1, r2
 8009ade:	4413      	add	r3, r2
 8009ae0:	ea23 0304 	bic.w	r3, r3, r4
 8009ae4:	e7ed      	b.n	8009ac2 <round+0x2a>
 8009ae6:	2a33      	cmp	r2, #51	@ 0x33
 8009ae8:	dd08      	ble.n	8009afc <round+0x64>
 8009aea:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8009aee:	d102      	bne.n	8009af6 <round+0x5e>
 8009af0:	4602      	mov	r2, r0
 8009af2:	f7f6 fb73 	bl	80001dc <__adddf3>
 8009af6:	ec41 0b10 	vmov	d0, r0, r1
 8009afa:	bd70      	pop	{r4, r5, r6, pc}
 8009afc:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8009b00:	f04f 34ff 	mov.w	r4, #4294967295
 8009b04:	40f4      	lsrs	r4, r6
 8009b06:	4204      	tst	r4, r0
 8009b08:	d0f5      	beq.n	8009af6 <round+0x5e>
 8009b0a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8009b0e:	2201      	movs	r2, #1
 8009b10:	408a      	lsls	r2, r1
 8009b12:	1952      	adds	r2, r2, r5
 8009b14:	bf28      	it	cs
 8009b16:	3301      	addcs	r3, #1
 8009b18:	ea22 0204 	bic.w	r2, r2, r4
 8009b1c:	e7d2      	b.n	8009ac4 <round+0x2c>
 8009b1e:	bf00      	nop
 8009b20:	000fffff 	.word	0x000fffff

08009b24 <_init>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	bf00      	nop
 8009b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2a:	bc08      	pop	{r3}
 8009b2c:	469e      	mov	lr, r3
 8009b2e:	4770      	bx	lr

08009b30 <_fini>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	bf00      	nop
 8009b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b36:	bc08      	pop	{r3}
 8009b38:	469e      	mov	lr, r3
 8009b3a:	4770      	bx	lr
