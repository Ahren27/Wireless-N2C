
Wireless_N2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a798  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800a928  0800a928  0000b928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abf8  0800abf8  0000c068  2**0
                  CONTENTS
  4 .ARM          00000008  0800abf8  0800abf8  0000bbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac00  0800ac00  0000c068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac00  0800ac00  0000bc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ac04  0800ac04  0000bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800ac08  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce4  20000068  0800ac70  0000c068  2**2
                  ALLOC
 10 ._user_heap_stack 00001e04  20001d4c  0800ac70  0000cd4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020a96  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052b7  00000000  00000000  0002cb2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f98  00000000  00000000  00031de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001803  00000000  00000000  00033d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008e37  00000000  00000000  00035583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022b27  00000000  00000000  0003e3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109b55  00000000  00000000  00060ee1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016aa36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087b0  00000000  00000000  0016aa7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0017322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a910 	.word	0x0800a910

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800a910 	.word	0x0800a910

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <split_data>:
char az_str2[13];
char bc_str2[13];
char bz_str2[13];

// Decode Raw Bytes Measurement into Global Variables
void split_data(uint8_t measurments1[], uint8_t measurments2[]) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
	// x and y axis from first 2 bytes
	stick_x1 = measurments1[0];
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	781a      	ldrb	r2, [r3, #0]
 8000a5a:	4b8a      	ldr	r3, [pc, #552]	@ (8000c84 <split_data+0x238>)
 8000a5c:	701a      	strb	r2, [r3, #0]
	stick_y1 = measurments1[1];
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	785a      	ldrb	r2, [r3, #1]
 8000a62:	4b89      	ldr	r3, [pc, #548]	@ (8000c88 <split_data+0x23c>)
 8000a64:	701a      	strb	r2, [r3, #0]

	// x and y axis from first 2 bytes
	stick_x2 = measurments2[0];
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b88      	ldr	r3, [pc, #544]	@ (8000c8c <split_data+0x240>)
 8000a6c:	701a      	strb	r2, [r3, #0]
	stick_y2 = measurments2[1];
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	785a      	ldrb	r2, [r3, #1]
 8000a72:	4b87      	ldr	r3, [pc, #540]	@ (8000c90 <split_data+0x244>)
 8000a74:	701a      	strb	r2, [r3, #0]

	// Might want to Reset accelerometer values
	acc_x1 = 0;
 8000a76:	4b87      	ldr	r3, [pc, #540]	@ (8000c94 <split_data+0x248>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	801a      	strh	r2, [r3, #0]
	acc_y1 = 0;
 8000a7c:	4b86      	ldr	r3, [pc, #536]	@ (8000c98 <split_data+0x24c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	801a      	strh	r2, [r3, #0]
	acc_z1 = 0;
 8000a82:	4b86      	ldr	r3, [pc, #536]	@ (8000c9c <split_data+0x250>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	801a      	strh	r2, [r3, #0]

	// Might want to Reset accelerometer values
	acc_x2 = 0;
 8000a88:	4b85      	ldr	r3, [pc, #532]	@ (8000ca0 <split_data+0x254>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	801a      	strh	r2, [r3, #0]
	acc_y2 = 0;
 8000a8e:	4b85      	ldr	r3, [pc, #532]	@ (8000ca4 <split_data+0x258>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	801a      	strh	r2, [r3, #0]
	acc_z2 = 0;
 8000a94:	4b84      	ldr	r3, [pc, #528]	@ (8000ca8 <split_data+0x25c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	801a      	strh	r2, [r3, #0]

	// higher 8 bits of accelerometer from next 3 bytes
	acc_x1 |= (measurments1[2] << 2);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3302      	adds	r3, #2
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	b21a      	sxth	r2, r3
 8000aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8000c94 <split_data+0x248>)
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b78      	ldr	r3, [pc, #480]	@ (8000c94 <split_data+0x248>)
 8000ab4:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (measurments1[3] << 2);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3303      	adds	r3, #3
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	4b75      	ldr	r3, [pc, #468]	@ (8000c98 <split_data+0x24c>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	4b72      	ldr	r3, [pc, #456]	@ (8000c98 <split_data+0x24c>)
 8000ad0:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (measurments1[4] << 2);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	b21a      	sxth	r2, r3
 8000adc:	4b6f      	ldr	r3, [pc, #444]	@ (8000c9c <split_data+0x250>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21b      	sxth	r3, r3
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b6c      	ldr	r3, [pc, #432]	@ (8000c9c <split_data+0x250>)
 8000aec:	801a      	strh	r2, [r3, #0]

	// higher 8 bits of accelerometer from next 3 bytes
	acc_x2 |= (measurments2[2] << 2);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	3302      	adds	r3, #2
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	b21a      	sxth	r2, r3
 8000af8:	4b69      	ldr	r3, [pc, #420]	@ (8000ca0 <split_data+0x254>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	b21b      	sxth	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b66      	ldr	r3, [pc, #408]	@ (8000ca0 <split_data+0x254>)
 8000b08:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (measurments2[3] << 2);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	3303      	adds	r3, #3
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	b21a      	sxth	r2, r3
 8000b14:	4b63      	ldr	r3, [pc, #396]	@ (8000ca4 <split_data+0x258>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	4b60      	ldr	r3, [pc, #384]	@ (8000ca4 <split_data+0x258>)
 8000b24:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (measurments2[4] << 2);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	4b5d      	ldr	r3, [pc, #372]	@ (8000ca8 <split_data+0x25c>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca8 <split_data+0x25c>)
 8000b40:	801a      	strh	r2, [r3, #0]

	// lower 2 bits from last byte
	acc_x1 |= (((1 << 2) - 1) & (measurments1[5] >> 3));
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3305      	adds	r3, #5
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	4b4f      	ldr	r3, [pc, #316]	@ (8000c94 <split_data+0x248>)
 8000b56:	881b      	ldrh	r3, [r3, #0]
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	4b4c      	ldr	r3, [pc, #304]	@ (8000c94 <split_data+0x248>)
 8000b64:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (((1 << 2) - 1) & (measurments1[5] >> 5));
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3305      	adds	r3, #5
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	095b      	lsrs	r3, r3, #5
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	4b47      	ldr	r3, [pc, #284]	@ (8000c98 <split_data+0x24c>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	4b44      	ldr	r3, [pc, #272]	@ (8000c98 <split_data+0x24c>)
 8000b88:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (((1 << 2) - 1) & (measurments1[5] >> 7));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3305      	adds	r3, #5
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	09db      	lsrs	r3, r3, #7
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b41      	ldr	r3, [pc, #260]	@ (8000c9c <split_data+0x250>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b3e      	ldr	r3, [pc, #248]	@ (8000c9c <split_data+0x250>)
 8000ba2:	801a      	strh	r2, [r3, #0]

	// lower 2 bits from last byte
	acc_x2 |= (((1 << 2) - 1) & (measurments2[5] >> 3));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	3305      	adds	r3, #5
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	f003 0303 	and.w	r3, r3, #3
 8000bb4:	b21a      	sxth	r2, r3
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca0 <split_data+0x254>)
 8000bb8:	881b      	ldrh	r3, [r3, #0]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	b21b      	sxth	r3, r3
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <split_data+0x254>)
 8000bc6:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (((1 << 2) - 1) & (measurments2[5] >> 5));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	3305      	adds	r3, #5
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <split_data+0x258>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca4 <split_data+0x258>)
 8000bea:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (((1 << 2) - 1) & (measurments2[5] >> 7));
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	3305      	adds	r3, #5
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	09db      	lsrs	r3, r3, #7
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca8 <split_data+0x25c>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	4b29      	ldr	r3, [pc, #164]	@ (8000ca8 <split_data+0x25c>)
 8000c04:	801a      	strh	r2, [r3, #0]

	// Buttons are last 2 bits of last byte
	button_c1 = (1 & ~(measurments1[5] >> 1));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3305      	adds	r3, #5
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	085b      	lsrs	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	bf0c      	ite	eq
 8000c18:	2301      	moveq	r3, #1
 8000c1a:	2300      	movne	r3, #0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <split_data+0x260>)
 8000c22:	701a      	strb	r2, [r3, #0]
	button_z1 = (1 & ~(measurments1[5] >> 0));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3305      	adds	r3, #5
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	bf0c      	ite	eq
 8000c32:	2301      	moveq	r3, #1
 8000c34:	2300      	movne	r3, #0
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb0 <split_data+0x264>)
 8000c3c:	701a      	strb	r2, [r3, #0]

	// Buttons are last 2 bits of last byte
	button_c2 = (1 & ~(measurments2[5] >> 1));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	3305      	adds	r3, #5
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	085b      	lsrs	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf0c      	ite	eq
 8000c50:	2301      	moveq	r3, #1
 8000c52:	2300      	movne	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <split_data+0x268>)
 8000c5a:	701a      	strb	r2, [r3, #0]
	button_z2 = (1 & ~(measurments2[5] >> 0));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	3305      	adds	r3, #5
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf0c      	ite	eq
 8000c6a:	2301      	moveq	r3, #1
 8000c6c:	2300      	movne	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <split_data+0x26c>)
 8000c74:	701a      	strb	r2, [r3, #0]
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000084 	.word	0x20000084
 8000c88:	20000085 	.word	0x20000085
 8000c8c:	2000008e 	.word	0x2000008e
 8000c90:	2000008f 	.word	0x2000008f
 8000c94:	20000086 	.word	0x20000086
 8000c98:	20000088 	.word	0x20000088
 8000c9c:	2000008a 	.word	0x2000008a
 8000ca0:	20000090 	.word	0x20000090
 8000ca4:	20000092 	.word	0x20000092
 8000ca8:	20000094 	.word	0x20000094
 8000cac:	2000008c 	.word	0x2000008c
 8000cb0:	2000008d 	.word	0x2000008d
 8000cb4:	20000096 	.word	0x20000096
 8000cb8:	20000097 	.word	0x20000097

08000cbc <print_data>:

// Uploads data to serial port
void print_data() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	// Convert Data to Strings
	sprintf(sx_str1, "StickX1:%i", stick_x1);
 8000cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8000df8 <print_data+0x13c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	494c      	ldr	r1, [pc, #304]	@ (8000dfc <print_data+0x140>)
 8000cca:	484d      	ldr	r0, [pc, #308]	@ (8000e00 <print_data+0x144>)
 8000ccc:	f009 f8e4 	bl	8009e98 <siprintf>
	sprintf(sy_str1, "StickY1:%i", stick_y1);
 8000cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8000e04 <print_data+0x148>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	494b      	ldr	r1, [pc, #300]	@ (8000e08 <print_data+0x14c>)
 8000cda:	484c      	ldr	r0, [pc, #304]	@ (8000e0c <print_data+0x150>)
 8000cdc:	f009 f8dc 	bl	8009e98 <siprintf>

	sprintf(ax_str1, "AccX1:%i", acc_x1);
 8000ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8000e10 <print_data+0x154>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	494a      	ldr	r1, [pc, #296]	@ (8000e14 <print_data+0x158>)
 8000cea:	484b      	ldr	r0, [pc, #300]	@ (8000e18 <print_data+0x15c>)
 8000cec:	f009 f8d4 	bl	8009e98 <siprintf>
	sprintf(ay_str1, "AccY1:%i", acc_y1);
 8000cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8000e1c <print_data+0x160>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4949      	ldr	r1, [pc, #292]	@ (8000e20 <print_data+0x164>)
 8000cfa:	484a      	ldr	r0, [pc, #296]	@ (8000e24 <print_data+0x168>)
 8000cfc:	f009 f8cc 	bl	8009e98 <siprintf>
	sprintf(az_str1, "AccZ1:%i", acc_z1);
 8000d00:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <print_data+0x16c>)
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	4948      	ldr	r1, [pc, #288]	@ (8000e2c <print_data+0x170>)
 8000d0a:	4849      	ldr	r0, [pc, #292]	@ (8000e30 <print_data+0x174>)
 8000d0c:	f009 f8c4 	bl	8009e98 <siprintf>

	sprintf(bc_str1, "ButtonC1:%i", button_c1);
 8000d10:	4b48      	ldr	r3, [pc, #288]	@ (8000e34 <print_data+0x178>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	4947      	ldr	r1, [pc, #284]	@ (8000e38 <print_data+0x17c>)
 8000d1a:	4848      	ldr	r0, [pc, #288]	@ (8000e3c <print_data+0x180>)
 8000d1c:	f009 f8bc 	bl	8009e98 <siprintf>
	sprintf(bz_str1, "ButtonZ1:%i", button_z1);
 8000d20:	4b47      	ldr	r3, [pc, #284]	@ (8000e40 <print_data+0x184>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	4946      	ldr	r1, [pc, #280]	@ (8000e44 <print_data+0x188>)
 8000d2a:	4847      	ldr	r0, [pc, #284]	@ (8000e48 <print_data+0x18c>)
 8000d2c:	f009 f8b4 	bl	8009e98 <siprintf>

	// Convert Data to Strings
	sprintf(sx_str2, "StickX2:%i", stick_x2);
 8000d30:	4b46      	ldr	r3, [pc, #280]	@ (8000e4c <print_data+0x190>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	4945      	ldr	r1, [pc, #276]	@ (8000e50 <print_data+0x194>)
 8000d3a:	4846      	ldr	r0, [pc, #280]	@ (8000e54 <print_data+0x198>)
 8000d3c:	f009 f8ac 	bl	8009e98 <siprintf>
	sprintf(sy_str2, "StickY2:%i", stick_y2);
 8000d40:	4b45      	ldr	r3, [pc, #276]	@ (8000e58 <print_data+0x19c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	4944      	ldr	r1, [pc, #272]	@ (8000e5c <print_data+0x1a0>)
 8000d4a:	4845      	ldr	r0, [pc, #276]	@ (8000e60 <print_data+0x1a4>)
 8000d4c:	f009 f8a4 	bl	8009e98 <siprintf>

	sprintf(ax_str2, "AccX2:%i", acc_x2);
 8000d50:	4b44      	ldr	r3, [pc, #272]	@ (8000e64 <print_data+0x1a8>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	461a      	mov	r2, r3
 8000d58:	4943      	ldr	r1, [pc, #268]	@ (8000e68 <print_data+0x1ac>)
 8000d5a:	4844      	ldr	r0, [pc, #272]	@ (8000e6c <print_data+0x1b0>)
 8000d5c:	f009 f89c 	bl	8009e98 <siprintf>
	sprintf(ay_str2, "AccY2:%i", acc_y2);
 8000d60:	4b43      	ldr	r3, [pc, #268]	@ (8000e70 <print_data+0x1b4>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	4942      	ldr	r1, [pc, #264]	@ (8000e74 <print_data+0x1b8>)
 8000d6a:	4843      	ldr	r0, [pc, #268]	@ (8000e78 <print_data+0x1bc>)
 8000d6c:	f009 f894 	bl	8009e98 <siprintf>
	sprintf(az_str2, "AccZ2:%i", acc_z2);
 8000d70:	4b42      	ldr	r3, [pc, #264]	@ (8000e7c <print_data+0x1c0>)
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	b29b      	uxth	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	4941      	ldr	r1, [pc, #260]	@ (8000e80 <print_data+0x1c4>)
 8000d7a:	4842      	ldr	r0, [pc, #264]	@ (8000e84 <print_data+0x1c8>)
 8000d7c:	f009 f88c 	bl	8009e98 <siprintf>

	sprintf(bc_str2, "ButtonC2:%i", button_c2);
 8000d80:	4b41      	ldr	r3, [pc, #260]	@ (8000e88 <print_data+0x1cc>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	4940      	ldr	r1, [pc, #256]	@ (8000e8c <print_data+0x1d0>)
 8000d8a:	4841      	ldr	r0, [pc, #260]	@ (8000e90 <print_data+0x1d4>)
 8000d8c:	f009 f884 	bl	8009e98 <siprintf>
	sprintf(bz_str2, "ButtonZ2:%i", button_z2);
 8000d90:	4b40      	ldr	r3, [pc, #256]	@ (8000e94 <print_data+0x1d8>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	461a      	mov	r2, r3
 8000d98:	493f      	ldr	r1, [pc, #252]	@ (8000e98 <print_data+0x1dc>)
 8000d9a:	4840      	ldr	r0, [pc, #256]	@ (8000e9c <print_data+0x1e0>)
 8000d9c:	f009 f87c 	bl	8009e98 <siprintf>

	// Print strings to terminal
	UART_PrintLn(sx_str1);
 8000da0:	4817      	ldr	r0, [pc, #92]	@ (8000e00 <print_data+0x144>)
 8000da2:	f001 f8db 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(sy_str1);
 8000da6:	4819      	ldr	r0, [pc, #100]	@ (8000e0c <print_data+0x150>)
 8000da8:	f001 f8d8 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(ax_str1);
 8000dac:	481a      	ldr	r0, [pc, #104]	@ (8000e18 <print_data+0x15c>)
 8000dae:	f001 f8d5 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(ay_str1);
 8000db2:	481c      	ldr	r0, [pc, #112]	@ (8000e24 <print_data+0x168>)
 8000db4:	f001 f8d2 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(az_str1);
 8000db8:	481d      	ldr	r0, [pc, #116]	@ (8000e30 <print_data+0x174>)
 8000dba:	f001 f8cf 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(bc_str1);
 8000dbe:	481f      	ldr	r0, [pc, #124]	@ (8000e3c <print_data+0x180>)
 8000dc0:	f001 f8cc 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(bz_str1);
 8000dc4:	4820      	ldr	r0, [pc, #128]	@ (8000e48 <print_data+0x18c>)
 8000dc6:	f001 f8c9 	bl	8001f5c <UART_PrintLn>

	// Print strings to terminal
	UART_PrintLn(sx_str2);
 8000dca:	4822      	ldr	r0, [pc, #136]	@ (8000e54 <print_data+0x198>)
 8000dcc:	f001 f8c6 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(sy_str2);
 8000dd0:	4823      	ldr	r0, [pc, #140]	@ (8000e60 <print_data+0x1a4>)
 8000dd2:	f001 f8c3 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(ax_str2);
 8000dd6:	4825      	ldr	r0, [pc, #148]	@ (8000e6c <print_data+0x1b0>)
 8000dd8:	f001 f8c0 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(ay_str2);
 8000ddc:	4826      	ldr	r0, [pc, #152]	@ (8000e78 <print_data+0x1bc>)
 8000dde:	f001 f8bd 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(az_str2);
 8000de2:	4828      	ldr	r0, [pc, #160]	@ (8000e84 <print_data+0x1c8>)
 8000de4:	f001 f8ba 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(bc_str2);
 8000de8:	4829      	ldr	r0, [pc, #164]	@ (8000e90 <print_data+0x1d4>)
 8000dea:	f001 f8b7 	bl	8001f5c <UART_PrintLn>
	UART_PrintLn(bz_str2);
 8000dee:	482b      	ldr	r0, [pc, #172]	@ (8000e9c <print_data+0x1e0>)
 8000df0:	f001 f8b4 	bl	8001f5c <UART_PrintLn>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000084 	.word	0x20000084
 8000dfc:	0800a928 	.word	0x0800a928
 8000e00:	20000098 	.word	0x20000098
 8000e04:	20000085 	.word	0x20000085
 8000e08:	0800a934 	.word	0x0800a934
 8000e0c:	200000a8 	.word	0x200000a8
 8000e10:	20000086 	.word	0x20000086
 8000e14:	0800a940 	.word	0x0800a940
 8000e18:	200000b8 	.word	0x200000b8
 8000e1c:	20000088 	.word	0x20000088
 8000e20:	0800a94c 	.word	0x0800a94c
 8000e24:	200000c8 	.word	0x200000c8
 8000e28:	2000008a 	.word	0x2000008a
 8000e2c:	0800a958 	.word	0x0800a958
 8000e30:	200000d8 	.word	0x200000d8
 8000e34:	2000008c 	.word	0x2000008c
 8000e38:	0800a964 	.word	0x0800a964
 8000e3c:	200000e8 	.word	0x200000e8
 8000e40:	2000008d 	.word	0x2000008d
 8000e44:	0800a970 	.word	0x0800a970
 8000e48:	200000f8 	.word	0x200000f8
 8000e4c:	2000008e 	.word	0x2000008e
 8000e50:	0800a97c 	.word	0x0800a97c
 8000e54:	20000108 	.word	0x20000108
 8000e58:	2000008f 	.word	0x2000008f
 8000e5c:	0800a988 	.word	0x0800a988
 8000e60:	20000118 	.word	0x20000118
 8000e64:	20000090 	.word	0x20000090
 8000e68:	0800a994 	.word	0x0800a994
 8000e6c:	20000128 	.word	0x20000128
 8000e70:	20000092 	.word	0x20000092
 8000e74:	0800a9a0 	.word	0x0800a9a0
 8000e78:	20000138 	.word	0x20000138
 8000e7c:	20000094 	.word	0x20000094
 8000e80:	0800a9ac 	.word	0x0800a9ac
 8000e84:	20000148 	.word	0x20000148
 8000e88:	20000096 	.word	0x20000096
 8000e8c:	0800a9b8 	.word	0x0800a9b8
 8000e90:	20000158 	.word	0x20000158
 8000e94:	20000097 	.word	0x20000097
 8000e98:	0800a9c4 	.word	0x0800a9c4
 8000e9c:	20000168 	.word	0x20000168

08000ea0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b33      	ldr	r3, [pc, #204]	@ (8000f84 <MX_GPIO_Init+0xe4>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eba:	4a32      	ldr	r2, [pc, #200]	@ (8000f84 <MX_GPIO_Init+0xe4>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec2:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <MX_GPIO_Init+0xe4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b2d      	ldr	r3, [pc, #180]	@ (8000f84 <MX_GPIO_Init+0xe4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8000f84 <MX_GPIO_Init+0xe4>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eda:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <MX_GPIO_Init+0xe4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	4b27      	ldr	r3, [pc, #156]	@ (8000f84 <MX_GPIO_Init+0xe4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eea:	4a26      	ldr	r2, [pc, #152]	@ (8000f84 <MX_GPIO_Init+0xe4>)
 8000eec:	f043 0302 	orr.w	r3, r3, #2
 8000ef0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef2:	4b24      	ldr	r3, [pc, #144]	@ (8000f84 <MX_GPIO_Init+0xe4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f08:	f003 ff62 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2140      	movs	r1, #64	@ 0x40
 8000f10:	481d      	ldr	r0, [pc, #116]	@ (8000f88 <MX_GPIO_Init+0xe8>)
 8000f12:	f003 ff5d 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f1a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4818      	ldr	r0, [pc, #96]	@ (8000f8c <MX_GPIO_Init+0xec>)
 8000f2c:	f003 fda6 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8000f30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4c:	f003 fd96 	bl	8004a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000f50:	2340      	movs	r3, #64	@ 0x40
 8000f52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	4808      	ldr	r0, [pc, #32]	@ (8000f88 <MX_GPIO_Init+0xe8>)
 8000f68:	f003 fd88 	bl	8004a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2105      	movs	r1, #5
 8000f70:	2017      	movs	r0, #23
 8000f72:	f003 fd4b 	bl	8004a0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f76:	2017      	movs	r0, #23
 8000f78:	f003 fd64 	bl	8004a44 <HAL_NVIC_EnableIRQ>

}
 8000f7c:	bf00      	nop
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000400 	.word	0x48000400
 8000f8c:	48000800 	.word	0x48000800

08000f90 <I2C_GPIO_Init1>:
#include "FreeRTOS.h"                   // ARM.FreeRTOS::RTOS:Core
#include "task.h"                       // ARM.FreeRTOS::RTOS:Core
#include "event_groups.h"               // ARM.FreeRTOS::RTOS:Event Groups
#include "semphr.h"                     // ARM.FreeRTOS::RTOS:Core

void I2C_GPIO_Init1(void) {
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8000f94:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <I2C_GPIO_Init1+0x88>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f98:	4a1f      	ldr	r2, [pc, #124]	@ (8001018 <I2C_GPIO_Init1+0x88>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C1EN);
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <I2C_GPIO_Init1+0x88>)
 8000fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <I2C_GPIO_Init1+0x88>)
 8000fa6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000faa:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 8 and 9 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fb2:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000fb6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1);
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a17      	ldr	r2, [pc, #92]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fbe:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000fc2:	6013      	str	r3, [r2, #0]

	// Set Pins 8 and 9 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	4a14      	ldr	r2, [pc, #80]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000fce:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 8000fd0:	4b12      	ldr	r3, [pc, #72]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	4a11      	ldr	r2, [pc, #68]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fd6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000fda:	6053      	str	r3, [r2, #4]

	// Set pints 8 and 9 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED9);
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fe2:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000fe6:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED8_1 | GPIO_OSPEEDR_OSPEED9_1);
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000fee:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000ff2:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL8 | GPIO_AFRH_AFSEL9);
 8000ff4:	4b09      	ldr	r3, [pc, #36]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff8:	4a08      	ldr	r2, [pc, #32]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8000ffa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000ffe:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= ((4 << GPIO_AFRH_AFSEL8_Pos) | 4 << GPIO_AFRH_AFSEL9_Pos);
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8001002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001004:	4a05      	ldr	r2, [pc, #20]	@ (800101c <I2C_GPIO_Init1+0x8c>)
 8001006:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800100a:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	48000400 	.word	0x48000400

08001020 <I2C_GPIO_Init2>:

void I2C_GPIO_Init2(void) {
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	// Configure GPIOC for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);
 8001024:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <I2C_GPIO_Init2+0x88>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001028:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <I2C_GPIO_Init2+0x88>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C3EN);
 8001030:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <I2C_GPIO_Init2+0x88>)
 8001032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <I2C_GPIO_Init2+0x88>)
 8001036:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800103a:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 0 and 1 to AF mode
	GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a1a      	ldr	r2, [pc, #104]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 8001042:	f023 030f 	bic.w	r3, r3, #15
 8001046:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1);
 8001048:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 800104e:	f043 030a 	orr.w	r3, r3, #10
 8001052:	6013      	str	r3, [r2, #0]

	// Set Pins 0 and 1 to open drain
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 800105a:	f023 0303 	bic.w	r3, r3, #3
 800105e:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER |= (GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 8001066:	f043 0303 	orr.w	r3, r3, #3
 800106a:	6053      	str	r3, [r2, #4]

	// Set pints 0 and 1 to high speed
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1);
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 8001072:	f023 030f 	bic.w	r3, r3, #15
 8001076:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER |= (GPIO_OSPEEDR_OSPEED0_1 | GPIO_OSPEEDR_OSPEED1_1);
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 800107e:	f043 030a 	orr.w	r3, r3, #10
 8001082:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOC->AFR[0] &= ~(GPIO_AFRL_AFSEL0 | GPIO_AFRL_AFSEL1);
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 800108a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800108e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |=
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <I2C_GPIO_Init2+0x8c>)
 8001096:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800109a:	6213      	str	r3, [r2, #32]
			((4 << GPIO_AFRL_AFSEL0_Pos) | 4 << GPIO_AFRL_AFSEL1_Pos);
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48000800 	.word	0x48000800

080010b0 <I2C_init1>:

void I2C_init1() {
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	I2C1->CR1 &= ~I2C_CR1_PE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <I2C_init1+0x44>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <I2C_init1+0x44>)
 80010ba:	f023 0301 	bic.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <I2C_init1+0x44>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <I2C_init1+0x44>)
 80010c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010ca:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;
 80010cc:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <I2C_init1+0x44>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <I2C_init1+0x44>)
 80010d2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80010d6:	6013      	str	r3, [r2, #0]

	I2C1->TIMINGR = 0x10909CEC;
 80010d8:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <I2C_init1+0x44>)
 80010da:	4a07      	ldr	r2, [pc, #28]	@ (80010f8 <I2C_init1+0x48>)
 80010dc:	611a      	str	r2, [r3, #16]

	I2C1->CR1 |= I2C_CR1_PE;
 80010de:	4b05      	ldr	r3, [pc, #20]	@ (80010f4 <I2C_init1+0x44>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <I2C_init1+0x44>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6013      	str	r3, [r2, #0]
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40005400 	.word	0x40005400
 80010f8:	10909cec 	.word	0x10909cec

080010fc <I2C_init2>:

void I2C_init2() {
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
	I2C3->CR1 &= ~I2C_CR1_PE;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <I2C_init2+0x44>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0e      	ldr	r2, [pc, #56]	@ (8001140 <I2C_init2+0x44>)
 8001106:	f023 0301 	bic.w	r3, r3, #1
 800110a:	6013      	str	r3, [r2, #0]

	I2C3->CR1 &= ~I2C_CR1_ANFOFF;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <I2C_init2+0x44>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <I2C_init2+0x44>)
 8001112:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001116:	6013      	str	r3, [r2, #0]
	I2C3->CR1 &= ~I2C_CR1_NOSTRETCH;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <I2C_init2+0x44>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a08      	ldr	r2, [pc, #32]	@ (8001140 <I2C_init2+0x44>)
 800111e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001122:	6013      	str	r3, [r2, #0]

	I2C3->TIMINGR = 0x10909CEC;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <I2C_init2+0x44>)
 8001126:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <I2C_init2+0x48>)
 8001128:	611a      	str	r2, [r3, #16]

	I2C3->CR1 |= I2C_CR1_PE;
 800112a:	4b05      	ldr	r3, [pc, #20]	@ (8001140 <I2C_init2+0x44>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <I2C_init2+0x44>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6013      	str	r3, [r2, #0]
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40005c00 	.word	0x40005c00
 8001144:	10909cec 	.word	0x10909cec

08001148 <N2C_Config1>:

/******************************* NUNCHUCK #1 ********************************/

void N2C_Config1() {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 8001152:	2301      	movs	r3, #1
 8001154:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 800115a:	2300      	movs	r3, #0
 800115c:	71bb      	strb	r3, [r7, #6]
 800115e:	e060      	b.n	8001222 <N2C_Config1+0xda>
		I2C_init1();
 8001160:	f7ff ffa6 	bl	80010b0 <I2C_init1>

		/* Clear and then set AUTOEND bit to 1 */
		I2C1->CR2 &= ~(I2C_CR2_AUTOEND);
 8001164:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <N2C_Config1+0xec>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	4a32      	ldr	r2, [pc, #200]	@ (8001234 <N2C_Config1+0xec>)
 800116a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800116e:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (I2C_CR2_AUTOEND);
 8001170:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <N2C_Config1+0xec>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4a2f      	ldr	r2, [pc, #188]	@ (8001234 <N2C_Config1+0xec>)
 8001176:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800117a:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800117c:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <N2C_Config1+0xec>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	4a2c      	ldr	r2, [pc, #176]	@ (8001234 <N2C_Config1+0xec>)
 8001182:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800118a:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <N2C_Config1+0xec>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a28      	ldr	r2, [pc, #160]	@ (8001234 <N2C_Config1+0xec>)
 8001192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001196:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 8001198:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <N2C_Config1+0xec>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a25      	ldr	r2, [pc, #148]	@ (8001234 <N2C_Config1+0xec>)
 800119e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80011a2:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C1->CR2 |= (N2C_ADDR << 1);
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <N2C_Config1+0xec>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a22      	ldr	r2, [pc, #136]	@ (8001234 <N2C_Config1+0xec>)
 80011aa:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 80011ae:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C1->CR2 |= I2C_CR2_START;
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <N2C_Config1+0xec>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001234 <N2C_Config1+0xec>)
 80011b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011ba:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 80011bc:	bf00      	nop
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <N2C_Config1+0xec>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f9      	beq.n	80011be <N2C_Config1+0x76>
			;

		/* Get Data */
		data = N2C_data(step);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f9e3 	bl	8001598 <N2C_data>
 80011d2:	4603      	mov	r3, r0
 80011d4:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <N2C_Config1+0xec>)
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 80011dc:	bf00      	nop
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <N2C_Config1+0xec>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f9      	beq.n	80011de <N2C_Config1+0x96>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	3301      	adds	r3, #1
 80011ee:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f9d0 	bl	8001598 <N2C_data>
 80011f8:	4603      	mov	r3, r0
 80011fa:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 80011fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001234 <N2C_Config1+0xec>)
 80011fe:	797b      	ldrb	r3, [r7, #5]
 8001200:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C1->ISR & I2C_ISR_STOPF))
 8001202:	bf00      	nop
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <N2C_Config1+0xec>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f9      	beq.n	8001204 <N2C_Config1+0xbc>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	3301      	adds	r3, #1
 8001214:	71fb      	strb	r3, [r7, #7]

		/* Delay for 1ms */
		vTaskDelay(pdMS_TO_TICKS(10));
 8001216:	200a      	movs	r0, #10
 8001218:	f007 f826 	bl	8008268 <vTaskDelay>
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	3301      	adds	r3, #1
 8001220:	71bb      	strb	r3, [r7, #6]
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d99b      	bls.n	8001160 <N2C_Config1+0x18>
	}
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40005400 	.word	0x40005400

08001238 <N2C_Read1>:

void N2C_Read1(uint8_t *measurments) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8001240:	2305      	movs	r3, #5
 8001242:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C_init1();
 8001248:	f7ff ff32 	bl	80010b0 <I2C_init1>

	I2C1->CR2 = 0;
 800124c:	4b47      	ldr	r3, [pc, #284]	@ (800136c <N2C_Read1+0x134>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C1->CR2 |= I2C_CR2_AUTOEND;
 8001252:	4b46      	ldr	r3, [pc, #280]	@ (800136c <N2C_Read1+0x134>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4a45      	ldr	r2, [pc, #276]	@ (800136c <N2C_Read1+0x134>)
 8001258:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800125c:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800125e:	4b43      	ldr	r3, [pc, #268]	@ (800136c <N2C_Read1+0x134>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4a42      	ldr	r2, [pc, #264]	@ (800136c <N2C_Read1+0x134>)
 8001264:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800126c:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 800126e:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <N2C_Read1+0x134>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a3e      	ldr	r2, [pc, #248]	@ (800136c <N2C_Read1+0x134>)
 8001274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001278:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 800127a:	4b3c      	ldr	r3, [pc, #240]	@ (800136c <N2C_Read1+0x134>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	4a3b      	ldr	r2, [pc, #236]	@ (800136c <N2C_Read1+0x134>)
 8001280:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001284:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 8001286:	4b39      	ldr	r3, [pc, #228]	@ (800136c <N2C_Read1+0x134>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a38      	ldr	r2, [pc, #224]	@ (800136c <N2C_Read1+0x134>)
 800128c:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8001290:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8001292:	4b36      	ldr	r3, [pc, #216]	@ (800136c <N2C_Read1+0x134>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4a35      	ldr	r2, [pc, #212]	@ (800136c <N2C_Read1+0x134>)
 8001298:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800129c:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C1->ISR & I2C_ISR_TXIS))
 800129e:	bf00      	nop
 80012a0:	4b32      	ldr	r3, [pc, #200]	@ (800136c <N2C_Read1+0x134>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f9      	beq.n	80012a0 <N2C_Read1+0x68>
		;

	/* Get Data */
	data = N2C_data(step);
 80012ac:	7bbb      	ldrb	r3, [r7, #14]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f972 	bl	8001598 <N2C_data>
 80012b4:	4603      	mov	r3, r0
 80012b6:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C1->TXDR |= data;
 80012b8:	4b2c      	ldr	r3, [pc, #176]	@ (800136c <N2C_Read1+0x134>)
 80012ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012bc:	7b7b      	ldrb	r3, [r7, #13]
 80012be:	492b      	ldr	r1, [pc, #172]	@ (800136c <N2C_Read1+0x134>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C1->ISR & I2C_ISR_STOPF))
 80012c4:	bf00      	nop
 80012c6:	4b29      	ldr	r3, [pc, #164]	@ (800136c <N2C_Read1+0x134>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f9      	beq.n	80012c6 <N2C_Read1+0x8e>
		;

	/* Delay for 1ms */
	vTaskDelay(pdMS_TO_TICKS(10));
 80012d2:	200a      	movs	r0, #10
 80012d4:	f006 ffc8 	bl	8008268 <vTaskDelay>

	///// Read Measurements /////

	I2C1->CR2 &= ~I2C_CR2_AUTOEND;
 80012d8:	4b24      	ldr	r3, [pc, #144]	@ (800136c <N2C_Read1+0x134>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	4a23      	ldr	r2, [pc, #140]	@ (800136c <N2C_Read1+0x134>)
 80012de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80012e2:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C1 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 80012e4:	4b21      	ldr	r3, [pc, #132]	@ (800136c <N2C_Read1+0x134>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4a20      	ldr	r2, [pc, #128]	@ (800136c <N2C_Read1+0x134>)
 80012ea:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80012ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80012f2:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C1->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <N2C_Read1+0x134>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a1c      	ldr	r2, [pc, #112]	@ (800136c <N2C_Read1+0x134>)
 80012fa:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 80012fe:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C1->CR2 |= I2C_CR2_RD_WRN;
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <N2C_Read1+0x134>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	4a19      	ldr	r2, [pc, #100]	@ (800136c <N2C_Read1+0x134>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130a:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 800130c:	4b17      	ldr	r3, [pc, #92]	@ (800136c <N2C_Read1+0x134>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a16      	ldr	r2, [pc, #88]	@ (800136c <N2C_Read1+0x134>)
 8001312:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8001316:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <N2C_Read1+0x134>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	4a13      	ldr	r2, [pc, #76]	@ (800136c <N2C_Read1+0x134>)
 800131e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001322:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e010      	b.n	800134c <N2C_Read1+0x114>
		/* Wait until byte is received */
		while (!(I2C1->ISR & I2C_ISR_RXNE))
 800132a:	bf00      	nop
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <N2C_Read1+0x134>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f9      	beq.n	800132c <N2C_Read1+0xf4>
			;

		/* Receive byte */
		measurments[i] = I2C1->RXDR;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <N2C_Read1+0x134>)
 800133a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	b2ca      	uxtb	r2, r1
 8001344:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	3301      	adds	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d9eb      	bls.n	800132a <N2C_Read1+0xf2>
	}

	I2C1->CR2 |= (I2C_CR2_STOP);
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <N2C_Read1+0x134>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a05      	ldr	r2, [pc, #20]	@ (800136c <N2C_Read1+0x134>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135c:	6053      	str	r3, [r2, #4]

	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 800135e:	200a      	movs	r0, #10
 8001360:	f006 ff82 	bl	8008268 <vTaskDelay>
}
 8001364:	bf00      	nop
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40005400 	.word	0x40005400

08001370 <N2C_Config2>:

/******************************* NUNCHUCK #2 ********************************/

void N2C_Config2() {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 800137a:	2301      	movs	r3, #1
 800137c:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8001382:	2300      	movs	r3, #0
 8001384:	71bb      	strb	r3, [r7, #6]
 8001386:	e060      	b.n	800144a <N2C_Config2+0xda>
		I2C_init2();
 8001388:	f7ff feb8 	bl	80010fc <I2C_init2>

		/* Clear and then set AUTOEND bit to 1 */
		I2C3->CR2 &= ~(I2C_CR2_AUTOEND);
 800138c:	4b33      	ldr	r3, [pc, #204]	@ (800145c <N2C_Config2+0xec>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4a32      	ldr	r2, [pc, #200]	@ (800145c <N2C_Config2+0xec>)
 8001392:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8001396:	6053      	str	r3, [r2, #4]
		I2C3->CR2 |= (I2C_CR2_AUTOEND);
 8001398:	4b30      	ldr	r3, [pc, #192]	@ (800145c <N2C_Config2+0xec>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a2f      	ldr	r2, [pc, #188]	@ (800145c <N2C_Config2+0xec>)
 800139e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013a2:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 80013a4:	4b2d      	ldr	r3, [pc, #180]	@ (800145c <N2C_Config2+0xec>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a2c      	ldr	r2, [pc, #176]	@ (800145c <N2C_Config2+0xec>)
 80013aa:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80013ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013b2:	6053      	str	r3, [r2, #4]
		I2C3->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 80013b4:	4b29      	ldr	r3, [pc, #164]	@ (800145c <N2C_Config2+0xec>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4a28      	ldr	r2, [pc, #160]	@ (800145c <N2C_Config2+0xec>)
 80013ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013be:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C3->CR2 &= ~I2C_CR2_RD_WRN;
 80013c0:	4b26      	ldr	r3, [pc, #152]	@ (800145c <N2C_Config2+0xec>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a25      	ldr	r2, [pc, #148]	@ (800145c <N2C_Config2+0xec>)
 80013c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80013ca:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C3->CR2 |= (N2C_ADDR << 1);
 80013cc:	4b23      	ldr	r3, [pc, #140]	@ (800145c <N2C_Config2+0xec>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a22      	ldr	r2, [pc, #136]	@ (800145c <N2C_Config2+0xec>)
 80013d2:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 80013d6:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C3->CR2 |= I2C_CR2_START;
 80013d8:	4b20      	ldr	r3, [pc, #128]	@ (800145c <N2C_Config2+0xec>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a1f      	ldr	r2, [pc, #124]	@ (800145c <N2C_Config2+0xec>)
 80013de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e2:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C3->ISR & I2C_ISR_TXIS))
 80013e4:	bf00      	nop
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <N2C_Config2+0xec>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f9      	beq.n	80013e6 <N2C_Config2+0x76>
			;

		/* Get Data */
		data = N2C_data(step);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f8cf 	bl	8001598 <N2C_data>
 80013fa:	4603      	mov	r3, r0
 80013fc:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C3->TXDR = data;
 80013fe:	4a17      	ldr	r2, [pc, #92]	@ (800145c <N2C_Config2+0xec>)
 8001400:	797b      	ldrb	r3, [r7, #5]
 8001402:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C3->ISR & I2C_ISR_TXIS))
 8001404:	bf00      	nop
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <N2C_Config2+0xec>)
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f9      	beq.n	8001406 <N2C_Config2+0x96>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	3301      	adds	r3, #1
 8001416:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f8bc 	bl	8001598 <N2C_data>
 8001420:	4603      	mov	r3, r0
 8001422:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C3->TXDR = data;
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <N2C_Config2+0xec>)
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C3->ISR & I2C_ISR_STOPF))
 800142a:	bf00      	nop
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <N2C_Config2+0xec>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	f003 0320 	and.w	r3, r3, #32
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f9      	beq.n	800142c <N2C_Config2+0xbc>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	3301      	adds	r3, #1
 800143c:	71fb      	strb	r3, [r7, #7]

		/* Delay for 1ms */
		//HAL_Delay(1);
		vTaskDelay(pdMS_TO_TICKS(10));
 800143e:	200a      	movs	r0, #10
 8001440:	f006 ff12 	bl	8008268 <vTaskDelay>
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8001444:	79bb      	ldrb	r3, [r7, #6]
 8001446:	3301      	adds	r3, #1
 8001448:	71bb      	strb	r3, [r7, #6]
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d99b      	bls.n	8001388 <N2C_Config2+0x18>
	}
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40005c00 	.word	0x40005c00

08001460 <N2C_Read2>:

void N2C_Read2(uint8_t *measurments) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8001468:	2305      	movs	r3, #5
 800146a:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C_init2();
 8001470:	f7ff fe44 	bl	80010fc <I2C_init2>

	I2C3->CR2 = 0;
 8001474:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <N2C_Read2+0x134>)
 8001476:	2200      	movs	r2, #0
 8001478:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C3->CR2 |= I2C_CR2_AUTOEND;
 800147a:	4b46      	ldr	r3, [pc, #280]	@ (8001594 <N2C_Read2+0x134>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a45      	ldr	r2, [pc, #276]	@ (8001594 <N2C_Read2+0x134>)
 8001480:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001484:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8001486:	4b43      	ldr	r3, [pc, #268]	@ (8001594 <N2C_Read2+0x134>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a42      	ldr	r2, [pc, #264]	@ (8001594 <N2C_Read2+0x134>)
 800148c:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001494:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C3->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8001496:	4b3f      	ldr	r3, [pc, #252]	@ (8001594 <N2C_Read2+0x134>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4a3e      	ldr	r2, [pc, #248]	@ (8001594 <N2C_Read2+0x134>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a0:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C3->CR2 &= ~I2C_CR2_RD_WRN;
 80014a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001594 <N2C_Read2+0x134>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001594 <N2C_Read2+0x134>)
 80014a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80014ac:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C3->CR2 |= (N2C_ADDR << 1);
 80014ae:	4b39      	ldr	r3, [pc, #228]	@ (8001594 <N2C_Read2+0x134>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a38      	ldr	r2, [pc, #224]	@ (8001594 <N2C_Read2+0x134>)
 80014b4:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 80014b8:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C3->CR2 |= I2C_CR2_START;
 80014ba:	4b36      	ldr	r3, [pc, #216]	@ (8001594 <N2C_Read2+0x134>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4a35      	ldr	r2, [pc, #212]	@ (8001594 <N2C_Read2+0x134>)
 80014c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014c4:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C3->ISR & I2C_ISR_TXIS))
 80014c6:	bf00      	nop
 80014c8:	4b32      	ldr	r3, [pc, #200]	@ (8001594 <N2C_Read2+0x134>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f9      	beq.n	80014c8 <N2C_Read2+0x68>
		;

	/* Get Data */
	data = N2C_data(step);
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f85e 	bl	8001598 <N2C_data>
 80014dc:	4603      	mov	r3, r0
 80014de:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C3->TXDR |= data;
 80014e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <N2C_Read2+0x134>)
 80014e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014e4:	7b7b      	ldrb	r3, [r7, #13]
 80014e6:	492b      	ldr	r1, [pc, #172]	@ (8001594 <N2C_Read2+0x134>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C3->ISR & I2C_ISR_STOPF))
 80014ec:	bf00      	nop
 80014ee:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <N2C_Read2+0x134>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f9      	beq.n	80014ee <N2C_Read2+0x8e>
		;

	/* Delay for 1ms */
	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 80014fa:	200a      	movs	r0, #10
 80014fc:	f006 feb4 	bl	8008268 <vTaskDelay>

	///// Read Measurements /////

	I2C3->CR2 &= ~I2C_CR2_AUTOEND;
 8001500:	4b24      	ldr	r3, [pc, #144]	@ (8001594 <N2C_Read2+0x134>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a23      	ldr	r2, [pc, #140]	@ (8001594 <N2C_Read2+0x134>)
 8001506:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800150a:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C3 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800150c:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <N2C_Read2+0x134>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	4a20      	ldr	r2, [pc, #128]	@ (8001594 <N2C_Read2+0x134>)
 8001512:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800151a:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C3->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <N2C_Read2+0x134>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4a1c      	ldr	r2, [pc, #112]	@ (8001594 <N2C_Read2+0x134>)
 8001522:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8001526:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C3->CR2 |= I2C_CR2_RD_WRN;
 8001528:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <N2C_Read2+0x134>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a19      	ldr	r2, [pc, #100]	@ (8001594 <N2C_Read2+0x134>)
 800152e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001532:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C3->CR2 |= (N2C_ADDR << 1);
 8001534:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <N2C_Read2+0x134>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4a16      	ldr	r2, [pc, #88]	@ (8001594 <N2C_Read2+0x134>)
 800153a:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 800153e:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C3->CR2 |= I2C_CR2_START;
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <N2C_Read2+0x134>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a13      	ldr	r2, [pc, #76]	@ (8001594 <N2C_Read2+0x134>)
 8001546:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800154a:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e010      	b.n	8001574 <N2C_Read2+0x114>
		/* Wait until byte is received */
		while (!(I2C3->ISR & I2C_ISR_RXNE))
 8001552:	bf00      	nop
 8001554:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <N2C_Read2+0x134>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f9      	beq.n	8001554 <N2C_Read2+0xf4>
			;

		/* Receive byte */
		measurments[i] = I2C3->RXDR;
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <N2C_Read2+0x134>)
 8001562:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001564:	7bfb      	ldrb	r3, [r7, #15]
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	b2ca      	uxtb	r2, r1
 800156c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	3301      	adds	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d9eb      	bls.n	8001552 <N2C_Read2+0xf2>
	}

	I2C3->CR2 |= (I2C_CR2_STOP);
 800157a:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <N2C_Read2+0x134>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <N2C_Read2+0x134>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001584:	6053      	str	r3, [r2, #4]

	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8001586:	200a      	movs	r0, #10
 8001588:	f006 fe6e 	bl	8008268 <vTaskDelay>
}
 800158c:	bf00      	nop
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40005c00 	.word	0x40005c00

08001598 <N2C_data>:

/* Returns the appropriate byte to be sent over I2C */
uint8_t N2C_data(uint8_t step) {
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (step) {
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d818      	bhi.n	80015dc <N2C_data+0x44>
 80015aa:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <N2C_data+0x18>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015c5 	.word	0x080015c5
 80015b4:	080015cb 	.word	0x080015cb
 80015b8:	080015d1 	.word	0x080015d1
 80015bc:	080015d7 	.word	0x080015d7
 80015c0:	080015d7 	.word	0x080015d7
	case 1:
		data = 0xF0;
 80015c4:	23f0      	movs	r3, #240	@ 0xf0
 80015c6:	73fb      	strb	r3, [r7, #15]
		break;
 80015c8:	e008      	b.n	80015dc <N2C_data+0x44>
	case 2:
		data = 0x55;
 80015ca:	2355      	movs	r3, #85	@ 0x55
 80015cc:	73fb      	strb	r3, [r7, #15]
		break;
 80015ce:	e005      	b.n	80015dc <N2C_data+0x44>
	case 3:
		data = 0xFB;
 80015d0:	23fb      	movs	r3, #251	@ 0xfb
 80015d2:	73fb      	strb	r3, [r7, #15]
		break;
 80015d4:	e002      	b.n	80015dc <N2C_data+0x44>
	case 4:
	case 5:
		data = 0x00;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
		break;
 80015da:	bf00      	nop
	}

	return data;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop

080015ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015f2:	f003 f8f7 	bl	80047e4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80015f6:	f000 f925 	bl	8001844 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80015fa:	f7ff fc51 	bl	8000ea0 <MX_GPIO_Init>
	MX_SPI1_Init();
 80015fe:	f000 f98b 	bl	8001918 <MX_SPI1_Init>

	/* Set up Spirit */
	SPSGRF_Init();
 8001602:	f000 fa27 	bl	8001a54 <SPSGRF_Init>

	/* Set up RTOS */

	/* Create the tasks */
	retVal = xTaskCreate(Task1, "Set Up Program", configMINIMAL_STACK_SIZE,
 8001606:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <main+0x7c>)
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	2328      	movs	r3, #40	@ 0x28
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	2280      	movs	r2, #128	@ 0x80
 8001612:	4916      	ldr	r1, [pc, #88]	@ (800166c <main+0x80>)
 8001614:	4816      	ldr	r0, [pc, #88]	@ (8001670 <main+0x84>)
 8001616:	f006 fc55 	bl	8007ec4 <xTaskCreate>
 800161a:	4603      	mov	r3, r0
 800161c:	4a15      	ldr	r2, [pc, #84]	@ (8001674 <main+0x88>)
 800161e:	6013      	str	r3, [r2, #0]
	NULL, osPriorityHigh, &task1Handler);
	if (retVal != pdPASS) {
 8001620:	4b14      	ldr	r3, [pc, #80]	@ (8001674 <main+0x88>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d001      	beq.n	800162c <main+0x40>
		while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <main+0x3c>
			;
	} // check if task creation failed

	sendDataSema = xSemaphoreCreateBinary();
 800162c:	2203      	movs	r2, #3
 800162e:	2100      	movs	r1, #0
 8001630:	2001      	movs	r0, #1
 8001632:	f005 fe3e 	bl	80072b2 <xQueueGenericCreate>
 8001636:	4603      	mov	r3, r0
 8001638:	4a0f      	ldr	r2, [pc, #60]	@ (8001678 <main+0x8c>)
 800163a:	6013      	str	r3, [r2, #0]
	if (sendDataSema == NULL) {
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <main+0x8c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <main+0x5c>
		while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <main+0x58>
			;
	} // check if binary semaphore creation failed

	radioMutex = xSemaphoreCreateMutex();
 8001648:	2001      	movs	r0, #1
 800164a:	f005 feaa 	bl	80073a2 <xQueueCreateMutex>
 800164e:	4603      	mov	r3, r0
 8001650:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <main+0x90>)
 8001652:	6013      	str	r3, [r2, #0]
	if (radioMutex == NULL) {
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <main+0x90>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d101      	bne.n	8001660 <main+0x74>
		while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <main+0x70>
			;
	} // check if mutex creation failed

	/* Start scheduler */
	vTaskStartScheduler();
 8001660:	f006 fe38 	bl	80082d4 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <main+0x78>
 8001668:	20000178 	.word	0x20000178
 800166c:	0800a9d0 	.word	0x0800a9d0
 8001670:	08001681 	.word	0x08001681
 8001674:	2000018c 	.word	0x2000018c
 8001678:	20000184 	.word	0x20000184
 800167c:	20000188 	.word	0x20000188

08001680 <Task1>:
}

/* Define Tasks --------------------------------------------------------------*/

/* Configure Device */
void Task1(void *argument) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af02      	add	r7, sp, #8
 8001686:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Configure Peripherals
		UART_Init();
 8001688:	f000 fbfe 	bl	8001e88 <UART_Init>
		I2C_GPIO_Init1();
 800168c:	f7ff fc80 	bl	8000f90 <I2C_GPIO_Init1>
		I2C_GPIO_Init2();
 8001690:	f7ff fcc6 	bl	8001020 <I2C_GPIO_Init2>
		N2C_Config1();
 8001694:	f7ff fd58 	bl	8001148 <N2C_Config1>
		N2C_Config2();
 8001698:	f7ff fe6a 	bl	8001370 <N2C_Config2>

		retVal = xTaskCreate(Task2, "Read and Decode Data",
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <Task1+0x70>)
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	2318      	movs	r3, #24
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2300      	movs	r3, #0
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	4912      	ldr	r1, [pc, #72]	@ (80016f4 <Task1+0x74>)
 80016aa:	4813      	ldr	r0, [pc, #76]	@ (80016f8 <Task1+0x78>)
 80016ac:	f006 fc0a 	bl	8007ec4 <xTaskCreate>
 80016b0:	4603      	mov	r3, r0
 80016b2:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <Task1+0x7c>)
 80016b4:	6013      	str	r3, [r2, #0]
		configMINIMAL_STACK_SIZE,
		NULL, osPriorityNormal, &task2Handler);
		if (retVal != pdPASS) {
 80016b6:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <Task1+0x7c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d001      	beq.n	80016c2 <Task1+0x42>
			while (1)
 80016be:	bf00      	nop
 80016c0:	e7fd      	b.n	80016be <Task1+0x3e>
				;
		} // check if task creation failed

		retVal = xTaskCreate(Task3, "Transmit Data",
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <Task1+0x80>)
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	2318      	movs	r3, #24
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	2280      	movs	r2, #128	@ 0x80
 80016ce:	490d      	ldr	r1, [pc, #52]	@ (8001704 <Task1+0x84>)
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <Task1+0x88>)
 80016d2:	f006 fbf7 	bl	8007ec4 <xTaskCreate>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <Task1+0x7c>)
 80016da:	6013      	str	r3, [r2, #0]
		configMINIMAL_STACK_SIZE,
		NULL, osPriorityNormal, &task3Handler);
		if (retVal != pdPASS) {
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <Task1+0x7c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d001      	beq.n	80016e8 <Task1+0x68>
			while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <Task1+0x64>
				;
		} // check if task creation failed

		// Task not needed for rest of program duration, so delete it
		vTaskDelete(NULL);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f006 fd49 	bl	8008180 <vTaskDelete>
		UART_Init();
 80016ee:	e7cb      	b.n	8001688 <Task1+0x8>
 80016f0:	2000017c 	.word	0x2000017c
 80016f4:	0800a9e0 	.word	0x0800a9e0
 80016f8:	0800170d 	.word	0x0800170d
 80016fc:	2000018c 	.word	0x2000018c
 8001700:	20000180 	.word	0x20000180
 8001704:	0800a9f8 	.word	0x0800a9f8
 8001708:	08001765 	.word	0x08001765

0800170c <Task2>:
	}
}

/* Read and Decode Data */
void Task2(void *argument) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Take the mutex before starting the transmission
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001714:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <Task2+0x4c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	4618      	mov	r0, r3
 800171e:	f006 f8db 	bl	80078d8 <xQueueSemaphoreTake>
 8001722:	4603      	mov	r3, r0
 8001724:	2b01      	cmp	r3, #1
 8001726:	d10c      	bne.n	8001742 <Task2+0x36>
			// Get measurements for Nunchuck #1
			N2C_Read1(measurments1);
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <Task2+0x50>)
 800172a:	f7ff fd85 	bl	8001238 <N2C_Read1>

			// Get measurements for Nunchuck #2
			N2C_Read2(measurments2);
 800172e:	480c      	ldr	r0, [pc, #48]	@ (8001760 <Task2+0x54>)
 8001730:	f7ff fe96 	bl	8001460 <N2C_Read2>

			// Release the mutex after transmission
			xSemaphoreGive(radioMutex);
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <Task2+0x4c>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	f005 fe49 	bl	80073d4 <xQueueGenericSend>
		}

		// Decode Raw Bytes Measurement into Global Variables
		split_data(measurments1, measurments2);
 8001742:	4907      	ldr	r1, [pc, #28]	@ (8001760 <Task2+0x54>)
 8001744:	4805      	ldr	r0, [pc, #20]	@ (800175c <Task2+0x50>)
 8001746:	f7ff f981 	bl	8000a4c <split_data>

		// Uploads data to serial port
		print_data();
 800174a:	f7ff fab7 	bl	8000cbc <print_data>

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 800174e:	2005      	movs	r0, #5
 8001750:	f006 fd8a 	bl	8008268 <vTaskDelay>
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001754:	e7de      	b.n	8001714 <Task2+0x8>
 8001756:	bf00      	nop
 8001758:	20000188 	.word	0x20000188
 800175c:	20000190 	.word	0x20000190
 8001760:	20000198 	.word	0x20000198

08001764 <Task3>:
	}
}

/* Transmit Data */
void Task3(void *argument) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b09a      	sub	sp, #104	@ 0x68
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	uint8_t payload[MAX_PAYLOAD_SIZE];

	// Infinite Loop
	for (;;) {
		// Reset Tx flag
		xTxDoneFlag = S_RESET;
 800176c:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <Task3+0x64>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]

		// Acknowledgment ping
		payload[0] = 0xFF;
 8001772:	23ff      	movs	r3, #255	@ 0xff
 8001774:	723b      	strb	r3, [r7, #8]

		// Take the mutex before starting the transmission
		if (xSemaphoreTake(radioMutex, portMAX_DELAY) == pdTRUE) {
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <Task3+0x68>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f04f 31ff 	mov.w	r1, #4294967295
 800177e:	4618      	mov	r0, r3
 8001780:	f006 f8aa 	bl	80078d8 <xQueueSemaphoreTake>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d11a      	bne.n	80017c0 <Task3+0x5c>
			SpiritGotoReadyState();
 800178a:	f000 fa1f 	bl	8001bcc <SpiritGotoReadyState>

			// Set source and destination addresses
			SpiritPktStackSetMyAddress(NODE_ADDRESS);
 800178e:	2077      	movs	r0, #119	@ 0x77
 8001790:	f001 f8f2 	bl	8002978 <SpiritPktCommonSetMyAddress>
			SpiritPktStackSetDestinationAddress(TARGET_ADDRESS);
 8001794:	2078      	movs	r0, #120	@ 0x78
 8001796:	f001 f8d5 	bl	8002944 <SpiritPktCommonSetDestinationAddress>

			SPSGRF_StartTx(payload, sizeof(payload));
 800179a:	f107 0308 	add.w	r3, r7, #8
 800179e:	2160      	movs	r1, #96	@ 0x60
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fa41 	bl	8001c28 <SPSGRF_StartTx>
			while (!xTxDoneFlag)
 80017a6:	bf00      	nop
 80017a8:	4b07      	ldr	r3, [pc, #28]	@ (80017c8 <Task3+0x64>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0fa      	beq.n	80017a8 <Task3+0x44>
				;

			// Release the mutex after transmission
			xSemaphoreGive(radioMutex);
 80017b2:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <Task3+0x68>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	f005 fe0a 	bl	80073d4 <xQueueGenericSend>
		}

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 80017c0:	2005      	movs	r0, #5
 80017c2:	f006 fd51 	bl	8008268 <vTaskDelay>
		xTxDoneFlag = S_RESET;
 80017c6:	e7d1      	b.n	800176c <Task3+0x8>
 80017c8:	2000019e 	.word	0x2000019e
 80017cc:	20000188 	.word	0x20000188

080017d0 <HAL_GPIO_EXTI_Callback>:
	}
}

/* Callback to handle external interrupts */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	80fb      	strh	r3, [r7, #6]
	SpiritIrqs xIrqStatus;

	if (GPIO_Pin != SPIRIT1_GPIO3_Pin) {
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	2b80      	cmp	r3, #128	@ 0x80
 80017de:	d128      	bne.n	8001832 <HAL_GPIO_EXTI_Callback+0x62>
		return;
	}

	SpiritIrqGetStatus(&xIrqStatus);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fdbf 	bl	8002368 <SpiritIrqGetStatus>
	if (xIrqStatus.IRQ_TX_DATA_SENT) {
 80017ea:	7b3b      	ldrb	r3, [r7, #12]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d002      	beq.n	80017fc <HAL_GPIO_EXTI_Callback+0x2c>
		xTxDoneFlag = S_SET;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <HAL_GPIO_EXTI_Callback+0x6c>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_READY) {
 80017fc:	7b3b      	ldrb	r3, [r7, #12]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HAL_GPIO_EXTI_Callback+0x3e>
		xRxDoneFlag = S_SET;
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HAL_GPIO_EXTI_Callback+0x70>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
	}
	if (xIrqStatus.IRQ_RX_DATA_DISC || xIrqStatus.IRQ_RX_TIMEOUT) {
 800180e:	7b3b      	ldrb	r3, [r7, #12]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d105      	bne.n	8001826 <HAL_GPIO_EXTI_Callback+0x56>
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <HAL_GPIO_EXTI_Callback+0x64>
		SpiritCmdStrobeRx();
 8001826:	f000 ffe3 	bl	80027f0 <SpiritManagementWaCmdStrobeRx>
 800182a:	2061      	movs	r0, #97	@ 0x61
 800182c:	f000 fcce 	bl	80021cc <SpiritCmdStrobeCommand>
 8001830:	e000      	b.n	8001834 <HAL_GPIO_EXTI_Callback+0x64>
		return;
 8001832:	bf00      	nop
	}
}
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000019e 	.word	0x2000019e
 8001840:	2000019f 	.word	0x2000019f

08001844 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b096      	sub	sp, #88	@ 0x58
 8001848:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	2244      	movs	r2, #68	@ 0x44
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f008 fb40 	bl	8009ed8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001858:	463b      	mov	r3, r7
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001866:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800186a:	f003 faef 	bl	8004e4c <HAL_PWREx_ControlVoltageScaling>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001874:	f000 f84a 	bl	800190c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001878:	2302      	movs	r3, #2
 800187a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001880:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001882:	2310      	movs	r3, #16
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001886:	2302      	movs	r3, #2
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800188a:	2302      	movs	r3, #2
 800188c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800188e:	2301      	movs	r3, #1
 8001890:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001892:	230a      	movs	r3, #10
 8001894:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001896:	2307      	movs	r3, #7
 8001898:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800189a:	2302      	movs	r3, #2
 800189c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800189e:	2302      	movs	r3, #2
 80018a0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018a2:	f107 0314 	add.w	r3, r7, #20
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fb26 	bl	8004ef8 <HAL_RCC_OscConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0x72>
		Error_Handler();
 80018b2:	f000 f82b 	bl	800190c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018b6:	230f      	movs	r3, #15
 80018b8:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ba:	2303      	movs	r3, #3
 80018bc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80018ca:	463b      	mov	r3, r7
 80018cc:	2104      	movs	r1, #4
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 feee 	bl	80056b0 <HAL_RCC_ClockConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0x9a>
		Error_Handler();
 80018da:	f000 f817 	bl	800190c <Error_Handler>
	}
}
 80018de:	bf00      	nop
 80018e0:	3758      	adds	r7, #88	@ 0x58
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80018fa:	f002 ff8b 	bl	8004814 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40014800 	.word	0x40014800

0800190c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001910:	b672      	cpsid	i
}
 8001912:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001914:	bf00      	nop
 8001916:	e7fd      	b.n	8001914 <Error_Handler+0x8>

08001918 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <MX_SPI1_Init+0x74>)
 800191e:	4a1c      	ldr	r2, [pc, #112]	@ (8001990 <MX_SPI1_Init+0x78>)
 8001920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001922:	4b1a      	ldr	r3, [pc, #104]	@ (800198c <MX_SPI1_Init+0x74>)
 8001924:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	4b18      	ldr	r3, [pc, #96]	@ (800198c <MX_SPI1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001930:	4b16      	ldr	r3, [pc, #88]	@ (800198c <MX_SPI1_Init+0x74>)
 8001932:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001936:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001938:	4b14      	ldr	r3, [pc, #80]	@ (800198c <MX_SPI1_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193e:	4b13      	ldr	r3, [pc, #76]	@ (800198c <MX_SPI1_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <MX_SPI1_Init+0x74>)
 8001946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800194a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800194c:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <MX_SPI1_Init+0x74>)
 800194e:	2210      	movs	r2, #16
 8001950:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <MX_SPI1_Init+0x74>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001958:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <MX_SPI1_Init+0x74>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <MX_SPI1_Init+0x74>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001964:	4b09      	ldr	r3, [pc, #36]	@ (800198c <MX_SPI1_Init+0x74>)
 8001966:	2207      	movs	r2, #7
 8001968:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800196a:	4b08      	ldr	r3, [pc, #32]	@ (800198c <MX_SPI1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <MX_SPI1_Init+0x74>)
 8001972:	2208      	movs	r2, #8
 8001974:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <MX_SPI1_Init+0x74>)
 8001978:	f004 f8da 	bl	8005b30 <HAL_SPI_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001982:	f7ff ffc3 	bl	800190c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200001a0 	.word	0x200001a0
 8001990:	40013000 	.word	0x40013000

08001994 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	@ 0x28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a25      	ldr	r2, [pc, #148]	@ (8001a48 <HAL_SPI_MspInit+0xb4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d144      	bne.n	8001a40 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019b6:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <HAL_SPI_MspInit+0xb8>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ba:	4a24      	ldr	r2, [pc, #144]	@ (8001a4c <HAL_SPI_MspInit+0xb8>)
 80019bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019c2:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <HAL_SPI_MspInit+0xb8>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ce:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <HAL_SPI_MspInit+0xb8>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a4c <HAL_SPI_MspInit+0xb8>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019da:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <HAL_SPI_MspInit+0xb8>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e6:	4b19      	ldr	r3, [pc, #100]	@ (8001a4c <HAL_SPI_MspInit+0xb8>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ea:	4a18      	ldr	r2, [pc, #96]	@ (8001a4c <HAL_SPI_MspInit+0xb8>)
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019f2:	4b16      	ldr	r3, [pc, #88]	@ (8001a4c <HAL_SPI_MspInit+0xb8>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019fe:	23c0      	movs	r3, #192	@ 0xc0
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a0e:	2305      	movs	r3, #5
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a1c:	f003 f82e 	bl	8004a7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a20:	2308      	movs	r3, #8
 8001a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a30:	2305      	movs	r3, #5
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4805      	ldr	r0, [pc, #20]	@ (8001a50 <HAL_SPI_MspInit+0xbc>)
 8001a3c:	f003 f81e 	bl	8004a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	@ 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40013000 	.word	0x40013000
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	48000400 	.word	0x48000400

08001a54 <SPSGRF_Init>:
/**
 * @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
 * @param  None
 * @retval None
 */
void SPSGRF_Init(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b090      	sub	sp, #64	@ 0x40
 8001a58:	af00      	add	r7, sp, #0
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlpInit;
	SGpioInit xGpioInit;

	SpiritSpiInit();
 8001a5a:	f002 fd6f 	bl	800453c <RadioSpiInit>

	// restart the radio
	SpiritEnterShutdown();
 8001a5e:	f002 fe9d 	bl	800479c <RadioEnterShutdown>
	SpiritExitShutdown();
 8001a62:	f002 fea6 	bl	80047b2 <RadioExitShutdown>
	SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 8001a66:	f000 fef3 	bl	8002850 <SpiritManagementWaExtraCurrent>

	// wait for the radio to enter the ready state
	do {
		for (volatile uint8_t i = 0; i != 0xFF; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	70fb      	strb	r3, [r7, #3]
 8001a6e:	e004      	b.n	8001a7a <SPSGRF_Init+0x26>
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	3301      	adds	r3, #1
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	70fb      	strb	r3, [r7, #3]
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2bff      	cmp	r3, #255	@ 0xff
 8001a80:	d1f6      	bne.n	8001a70 <SPSGRF_Init+0x1c>
			; // delay for state transition
		SpiritRefreshStatus(); // reads the MC_STATUS register
 8001a82:	f002 fd39 	bl	80044f8 <SpiritRefreshStatus>
	} while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001a86:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb4 <SPSGRF_Init+0x160>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d1ea      	bne.n	8001a6a <SPSGRF_Init+0x16>

	// Initialize radio RF parameters
	xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8001a94:	2300      	movs	r3, #0
 8001a96:	84bb      	strh	r3, [r7, #36]	@ 0x24
	xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001a98:	4b47      	ldr	r3, [pc, #284]	@ (8001bb8 <SPSGRF_Init+0x164>)
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	xRadioInit.nChannelSpace = CHANNEL_SPACE;
 8001a9c:	4b47      	ldr	r3, [pc, #284]	@ (8001bbc <SPSGRF_Init+0x168>)
 8001a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	xRadioInit.xModulationSelect = MODULATION_SELECT;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	xRadioInit.lDatarate = DATARATE;
 8001aac:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8001ab0:	637b      	str	r3, [r7, #52]	@ 0x34
	xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001ab2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
	xRadioInit.lBandwidth = BANDWIDTH;
 8001ab8:	4b40      	ldr	r3, [pc, #256]	@ (8001bbc <SPSGRF_Init+0x168>)
 8001aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 8001abc:	4840      	ldr	r0, [pc, #256]	@ (8001bc0 <SPSGRF_Init+0x16c>)
 8001abe:	f002 fb69 	bl	8004194 <SpiritRadioSetXtalFrequency>
	SpiritRadioInit(&xRadioInit);
 8001ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f001 f9b8 	bl	8002e3c <SpiritRadioInit>

	// Set the transmitter power level
	SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 8001acc:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8001bc4 <SPSGRF_Init+0x170>
 8001ad0:	2007      	movs	r0, #7
 8001ad2:	f002 f9fb 	bl	8003ecc <SpiritRadioSetPALeveldBm>
	SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001ad6:	2007      	movs	r0, #7
 8001ad8:	f002 fa4e 	bl	8003f78 <SpiritRadioSetPALevelMaxIndex>

	// Configure packet handler to use the Basic packet format
	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
 8001adc:	2318      	movs	r3, #24
 8001ade:	753b      	strb	r3, [r7, #20]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001ae0:	2306      	movs	r3, #6
 8001ae2:	757b      	strb	r3, [r7, #21]
	xSTackInit.lSyncWords = SYNC_WORD;
 8001ae4:	f04f 3388 	mov.w	r3, #2290649224	@ 0x88888888
 8001ae8:	61bb      	str	r3, [r7, #24]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 8001aea:	2301      	movs	r3, #1
 8001aec:	773b      	strb	r3, [r7, #28]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 8001aee:	2307      	movs	r3, #7
 8001af0:	777b      	strb	r3, [r7, #29]
	xSTackInit.xCrcMode = CRC_MODE;
 8001af2:	2320      	movs	r3, #32
 8001af4:	77bb      	strb	r3, [r7, #30]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 8001af6:	2300      	movs	r3, #0
 8001af8:	77fb      	strb	r3, [r7, #31]
	// xSTackInit.xAddressField = EN_ADDRESS;
	xSTackInit.xFec = EN_FEC;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 3020 	strb.w	r3, [r7, #32]
	xSTackInit.xDataWhitening = EN_WHITENING;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	SpiritPktStackInit(&xSTackInit);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 ff4e 	bl	80029ac <SpiritPktStackInit>

	// Configure destination address criteria for automatic packet filtering
	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001b10:	2301      	movs	r3, #1
 8001b12:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 8001b14:	2377      	movs	r3, #119	@ 0x77
 8001b16:	737b      	strb	r3, [r7, #13]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73bb      	strb	r3, [r7, #14]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001b1c:	23ee      	movs	r3, #238	@ 0xee
 8001b1e:	73fb      	strb	r3, [r7, #15]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001b20:	2301      	movs	r3, #1
 8001b22:	743b      	strb	r3, [r7, #16]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001b24:	23ff      	movs	r3, #255	@ 0xff
 8001b26:	747b      	strb	r3, [r7, #17]
	SpiritPktStackAddressesInit(&xSTackAddress);
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f001 f80d 	bl	8002b4c <SpiritPktStackAddressesInit>

	// Configure the spirit LLP registers
	xSTackLlpInit.xAutoAck = S_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	723b      	strb	r3, [r7, #8]
	xSTackLlpInit.xNMaxRetx = S_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	72bb      	strb	r3, [r7, #10]
	xSTackLlpInit.xPiggybacking = PKT_DISABLE_RETX;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	727b      	strb	r3, [r7, #9]
	SpiritPktStackLlpInit(&xSTackLlpInit);
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4618      	mov	r0, r3
 8001b44:	f001 f870 	bl	8002c28 <SpiritPktStackLlpInit>

	// Configure GPIO3 as interrupt request pin (active low)
	xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	713b      	strb	r3, [r7, #4]
	xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	717b      	strb	r3, [r7, #5]
	xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 8001b50:	2300      	movs	r3, #0
 8001b52:	71bb      	strb	r3, [r7, #6]
	SpiritGpioInit(&xGpioInit);
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fb50 	bl	80021fc <SpiritGpioInit>

	// Generate an interrupt request for the following IRQs
	SpiritIrqDeInit(NULL);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 fb71 	bl	8002244 <SpiritIrqDeInit>
	SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8001b62:	2101      	movs	r1, #1
 8001b64:	2004      	movs	r0, #4
 8001b66:	f000 fb99 	bl	800229c <SpiritIrq>
	SpiritIrq(RX_DATA_READY, S_ENABLE);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f000 fb95 	bl	800229c <SpiritIrq>
	SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8001b72:	2101      	movs	r1, #1
 8001b74:	2002      	movs	r0, #2
 8001b76:	f000 fb91 	bl	800229c <SpiritIrq>
	SpiritIrq(RX_TIMEOUT, S_ENABLE);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8001b80:	f000 fb8c 	bl	800229c <SpiritIrq>
	SpiritIrqClearStatus();
 8001b84:	f000 fc22 	bl	80023cc <SpiritIrqClearStatus>

	// Enable the synchronization quality indicator check (perfect match required)
	// NOTE: 9.10.4: "It is recommended to always enable the SQI check."
	SpiritQiSetSqiThreshold(SQI_TH_0);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f001 f903 	bl	8002d94 <SpiritQiSetSqiThreshold>
	SpiritQiSqiCheck(S_ENABLE);
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f001 f8c8 	bl	8002d24 <SpiritQiSqiCheck>

	// Set the RSSI Threshold for Carrier Sense (9.10.2)
	// NOTE: CS_MODE = 0 at reset
	SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001b94:	f06f 0077 	mvn.w	r0, #119	@ 0x77
 8001b98:	f001 f930 	bl	8002dfc <SpiritQiSetRssiThresholddBm>

	// Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
	SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 8001b9c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001bc8 <SPSGRF_Init+0x174>
 8001ba0:	f002 fb08 	bl	80041b4 <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
	SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8001ba4:	2002      	movs	r0, #2
 8001ba6:	f002 fc5f 	bl	8004468 <SpiritTimerSetRxTimeoutStopCondition>
}
 8001baa:	bf00      	nop
 8001bac:	3740      	adds	r7, #64	@ 0x40
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000260 	.word	0x20000260
 8001bb8:	3689cac0 	.word	0x3689cac0
 8001bbc:	000186a0 	.word	0x000186a0
 8001bc0:	02faf080 	.word	0x02faf080
 8001bc4:	4139999a 	.word	0x4139999a
 8001bc8:	42480000 	.word	0x42480000

08001bcc <SpiritGotoReadyState>:

void SpiritGotoReadyState(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0

	/* Wait for the radio to enter the ready state */
	do {

		/* Go to the ready state */
		if (g_xStatus.MC_STATE == MC_STATE_LOCK) {
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <SpiritGotoReadyState+0x54>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	d103      	bne.n	8001be6 <SpiritGotoReadyState+0x1a>
			SpiritCmdStrobeReady();
 8001bde:	2062      	movs	r0, #98	@ 0x62
 8001be0:	f000 faf4 	bl	80021cc <SpiritCmdStrobeCommand>
 8001be4:	e002      	b.n	8001bec <SpiritGotoReadyState+0x20>
		} else {
			SpiritCmdStrobeSabort();
 8001be6:	2067      	movs	r0, #103	@ 0x67
 8001be8:	f000 faf0 	bl	80021cc <SpiritCmdStrobeCommand>
		}

		/* Delay for state transition */
		for (i = 0; i != 0xFF; i++)
 8001bec:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <SpiritGotoReadyState+0x58>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e004      	b.n	8001bfe <SpiritGotoReadyState+0x32>
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <SpiritGotoReadyState+0x58>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <SpiritGotoReadyState+0x58>)
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <SpiritGotoReadyState+0x58>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2bff      	cmp	r3, #255	@ 0xff
 8001c04:	d1f6      	bne.n	8001bf4 <SpiritGotoReadyState+0x28>
			;

		/* Update the global status register variable */
		SpiritRefreshStatus();
 8001c06:	f002 fc77 	bl	80044f8 <SpiritRefreshStatus>

	} while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <SpiritGotoReadyState+0x54>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d1db      	bne.n	8001bd0 <SpiritGotoReadyState+0x4>
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000260 	.word	0x20000260
 8001c24:	20000204 	.word	0x20000204

08001c28 <SPSGRF_StartTx>:
 *         sent, setting the payload length, and strobing the TX command.
 * @param  txBuff: pointer to the data to transmit
 * @param  txLen: number of bytes to transmit
 * @retval None
 */
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
	SpiritGotoReadyState();
 8001c34:	f7ff ffca 	bl	8001bcc <SpiritGotoReadyState>
	// flush the TX FIFO
	SpiritCmdStrobeFlushTxFifo();
 8001c38:	2072      	movs	r0, #114	@ 0x72
 8001c3a:	f000 fac7 	bl	80021cc <SpiritCmdStrobeCommand>

	// Avoid TX FIFO overflow
	txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	2b60      	cmp	r3, #96	@ 0x60
 8001c42:	bf28      	it	cs
 8001c44:	2360      	movcs	r3, #96	@ 0x60
 8001c46:	70fb      	strb	r3, [r7, #3]

	// start TX operation
	SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 fd5d 	bl	800470c <RadioSpiWriteFifo>
	SpiritPktStackSetPayloadLength(txLen);
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 f838 	bl	8002ccc <SpiritPktStackSetPayloadLength>
	SpiritCmdStrobeTx();
 8001c5c:	f000 fd90 	bl	8002780 <SpiritManagementWaCmdStrobeTx>
 8001c60:	2060      	movs	r0, #96	@ 0x60
 8001c62:	f000 fab3 	bl	80021cc <SpiritCmdStrobeCommand>

	SpiritRefreshStatus();
 8001c66:	f002 fc47 	bl	80044f8 <SpiritRefreshStatus>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c7e:	4a10      	ldr	r2, [pc, #64]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	210f      	movs	r1, #15
 8001cae:	f06f 0001 	mvn.w	r0, #1
 8001cb2:	f002 feab 	bl	8004a0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40021000 	.word	0x40021000

08001cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08c      	sub	sp, #48	@ 0x30
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d8c <HAL_InitTick+0xc8>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d8c <HAL_InitTick+0xc8>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cde:	4b2b      	ldr	r3, [pc, #172]	@ (8001d8c <HAL_InitTick+0xc8>)
 8001ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cea:	f107 020c 	add.w	r2, r7, #12
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 fe89 	bl	8005a0c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cfa:	f003 fe71 	bl	80059e0 <HAL_RCC_GetPCLK2Freq>
 8001cfe:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d02:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <HAL_InitTick+0xcc>)
 8001d04:	fba2 2303 	umull	r2, r3, r2, r3
 8001d08:	0c9b      	lsrs	r3, r3, #18
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <HAL_InitTick+0xd0>)
 8001d10:	4a21      	ldr	r2, [pc, #132]	@ (8001d98 <HAL_InitTick+0xd4>)
 8001d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <HAL_InitTick+0xd0>)
 8001d16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d1a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d94 <HAL_InitTick+0xd0>)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <HAL_InitTick+0xd0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	4b1a      	ldr	r3, [pc, #104]	@ (8001d94 <HAL_InitTick+0xd0>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <HAL_InitTick+0xd0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001d34:	4817      	ldr	r0, [pc, #92]	@ (8001d94 <HAL_InitTick+0xd0>)
 8001d36:	f004 fe29 	bl	800698c <HAL_TIM_Base_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d11b      	bne.n	8001d80 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001d48:	4812      	ldr	r0, [pc, #72]	@ (8001d94 <HAL_InitTick+0xd0>)
 8001d4a:	f004 fe81 	bl	8006a50 <HAL_TIM_Base_Start_IT>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d111      	bne.n	8001d80 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001d5c:	201a      	movs	r0, #26
 8001d5e:	f002 fe71 	bl	8004a44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d808      	bhi.n	8001d7a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	201a      	movs	r0, #26
 8001d6e:	f002 fe4d 	bl	8004a0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d72:	4a0a      	ldr	r2, [pc, #40]	@ (8001d9c <HAL_InitTick+0xd8>)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e002      	b.n	8001d80 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3730      	adds	r7, #48	@ 0x30
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	431bde83 	.word	0x431bde83
 8001d94:	20000208 	.word	0x20000208
 8001d98:	40014800 	.word	0x40014800
 8001d9c:	2000000c 	.word	0x2000000c

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <NMI_Handler+0x4>

08001da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <MemManage_Handler+0x4>

08001db8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <BusFault_Handler+0x4>

08001dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc4:	bf00      	nop
 8001dc6:	e7fd      	b.n	8001dc4 <UsageFault_Handler+0x4>

08001dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 8001dda:	2080      	movs	r0, #128	@ 0x80
 8001ddc:	f003 f810 	bl	8004e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001dea:	f004 fea1 	bl	8006b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000208 	.word	0x20000208

08001df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e00:	4a14      	ldr	r2, [pc, #80]	@ (8001e54 <_sbrk+0x5c>)
 8001e02:	4b15      	ldr	r3, [pc, #84]	@ (8001e58 <_sbrk+0x60>)
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <_sbrk+0x64>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d102      	bne.n	8001e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e14:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <_sbrk+0x64>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <_sbrk+0x68>)
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e1a:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d207      	bcs.n	8001e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e28:	f008 f8b4 	bl	8009f94 <__errno>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	220c      	movs	r2, #12
 8001e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
 8001e36:	e009      	b.n	8001e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <_sbrk+0x64>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3e:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	4a05      	ldr	r2, [pc, #20]	@ (8001e5c <_sbrk+0x64>)
 8001e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20018000 	.word	0x20018000
 8001e58:	00000f00 	.word	0x00000f00
 8001e5c:	20000254 	.word	0x20000254
 8001e60:	20001d50 	.word	0x20001d50

08001e64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <SystemInit+0x20>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6e:	4a05      	ldr	r2, [pc, #20]	@ (8001e84 <SystemInit+0x20>)
 8001e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <UART_Init>:
 */

#include "main.h"
#include "uart.h"

void UART_Init(void) {
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
	// Configure GPIOA for USART2
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8001e8c:	4b24      	ldr	r3, [pc, #144]	@ (8001f20 <UART_Init+0x98>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e90:	4a23      	ldr	r2, [pc, #140]	@ (8001f20 <UART_Init+0x98>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN);
 8001e98:	4b21      	ldr	r3, [pc, #132]	@ (8001f20 <UART_Init+0x98>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	4a20      	ldr	r2, [pc, #128]	@ (8001f20 <UART_Init+0x98>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea2:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 2 and 3 to AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001ea4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001eb2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8001eb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ebe:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001ec2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 8001ec4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ece:	f423 43ee 	bic.w	r3, r3, #30464	@ 0x7700
 8001ed2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 8001ed4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001ede:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001ee2:	6213      	str	r3, [r2, #32]
	 * TE		1
	 * RE		1
	 * USEM		0
	 * UE		1
	 */
	USART2->CR1 |= (0b000100000);
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <UART_Init+0x9c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f24 <UART_Init+0x9c>)
 8001eea:	f043 0320 	orr.w	r3, r3, #32
 8001eee:	6013      	str	r3, [r2, #0]

	// Configure BR
	USART2->BRR = (694);
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <UART_Init+0x9c>)
 8001ef2:	f240 22b6 	movw	r2, #694	@ 0x2b6
 8001ef6:	60da      	str	r2, [r3, #12]

	// Enable  bits
	USART2->CR1 |= (0b1101);
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <UART_Init+0x9c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <UART_Init+0x9c>)
 8001efe:	f043 030d 	orr.w	r3, r3, #13
 8001f02:	6013      	str	r3, [r2, #0]

	// Enable interupts
	NVIC->ISER[1] |= (1 << (USART2_IRQn & 0X1F));
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <UART_Init+0xa0>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <UART_Init+0xa0>)
 8001f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f0e:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
}
 8001f12:	bf00      	nop
	__enable_irq();

}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40004400 	.word	0x40004400
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <UART_Print_Char>:

// Prints a character to the UART serial connection
void UART_Print_Char(char character) {
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
	while (!(USART2->ISR & 1 << 7)) {
 8001f36:	bf00      	nop
 8001f38:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <UART_Print_Char+0x2c>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f9      	beq.n	8001f38 <UART_Print_Char+0xc>
	};
	USART2->TDR = character;
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <UART_Print_Char+0x2c>)
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40004400 	.word	0x40004400

08001f5c <UART_PrintLn>:

// Prints a character to the UART serial connection and appends a NEWLINE char
void UART_PrintLn(char *output) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 8001f68:	e009      	b.n	8001f7e <UART_PrintLn+0x22>
		UART_Print_Char(output[i]);
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ffda 	bl	8001f2c <UART_Print_Char>
		i++;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ef      	bne.n	8001f6a <UART_PrintLn+0xe>
	}
	// Finish with new line and return cairage chars
	while (!(USART2->ISR & 1 << 7)) {
 8001f8a:	bf00      	nop
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <UART_PrintLn+0x4c>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f9      	beq.n	8001f8c <UART_PrintLn+0x30>
	};
	USART2->TDR = '\n';
 8001f98:	4b03      	ldr	r3, [pc, #12]	@ (8001fa8 <UART_PrintLn+0x4c>)
 8001f9a:	220a      	movs	r2, #10
 8001f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
	//while(!(USART2 -> ISR & 1 << 7)){};
	//USART2 -> TDR = '\r';
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40004400 	.word	0x40004400

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb0:	f7ff ff58 	bl	8001e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb6:	490d      	ldr	r1, [pc, #52]	@ (8001fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff0 <LoopForever+0xe>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fbc:	e002      	b.n	8001fc4 <LoopCopyDataInit>

08001fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc2:	3304      	adds	r3, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc8:	d3f9      	bcc.n	8001fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff8 <LoopForever+0x16>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd0:	e001      	b.n	8001fd6 <LoopFillZerobss>

08001fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd4:	3204      	adds	r2, #4

08001fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd8:	d3fb      	bcc.n	8001fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fda:	f007 ffe1 	bl	8009fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fde:	f7ff fb05 	bl	80015ec <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ff0:	0800ac08 	.word	0x0800ac08
  ldr r2, =_sbss
 8001ff4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ff8:	20001d4c 	.word	0x20001d4c

08001ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_2_IRQHandler>
	...

08002000 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 800200a:	f107 030f 	add.w	r3, r7, #15
 800200e:	461a      	mov	r2, r3
 8002010:	2101      	movs	r1, #1
 8002012:	2050      	movs	r0, #80	@ 0x50
 8002014:	f002 faee 	bl	80045f4 <RadioSpiReadRegisters>
 8002018:	4602      	mov	r2, r0
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <SpiritCalibrationVco+0x6c>)
 800201c:	b212      	sxth	r2, r2
 800201e:	4611      	mov	r1, r2
 8002020:	7019      	strb	r1, [r3, #0]
 8002022:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002026:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	b2db      	uxtb	r3, r3
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e004      	b.n	8002044 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	f023 0302 	bic.w	r3, r3, #2
 8002040:	b2db      	uxtb	r3, r3
 8002042:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8002044:	f107 030f 	add.w	r3, r7, #15
 8002048:	461a      	mov	r2, r3
 800204a:	2101      	movs	r1, #1
 800204c:	2050      	movs	r0, #80	@ 0x50
 800204e:	f002 fa85 	bl	800455c <RadioSpiWriteRegisters>
 8002052:	4602      	mov	r2, r0
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <SpiritCalibrationVco+0x6c>)
 8002056:	b212      	sxth	r2, r2
 8002058:	4611      	mov	r1, r2
 800205a:	7019      	strb	r1, [r3, #0]
 800205c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002060:	705a      	strb	r2, [r3, #1]

}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000260 	.word	0x20000260

08002070 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	461a      	mov	r2, r3
 800207a:	2101      	movs	r1, #1
 800207c:	20e5      	movs	r0, #229	@ 0xe5
 800207e:	f002 fab9 	bl	80045f4 <RadioSpiReadRegisters>
 8002082:	4602      	mov	r2, r0
 8002084:	4b07      	ldr	r3, [pc, #28]	@ (80020a4 <SpiritCalibrationGetVcoCalData+0x34>)
 8002086:	b212      	sxth	r2, r2
 8002088:	4611      	mov	r1, r2
 800208a:	7019      	strb	r1, [r3, #0]
 800208c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002090:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002098:	b2db      	uxtb	r3, r3

}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000260 	.word	0x20000260

080020a8 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80020b2:	f107 030f 	add.w	r3, r7, #15
 80020b6:	461a      	mov	r2, r3
 80020b8:	2101      	movs	r1, #1
 80020ba:	206e      	movs	r0, #110	@ 0x6e
 80020bc:	f002 fa9a 	bl	80045f4 <RadioSpiReadRegisters>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b12      	ldr	r3, [pc, #72]	@ (800210c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 80020c4:	b212      	sxth	r2, r2
 80020c6:	4611      	mov	r1, r2
 80020c8:	7019      	strb	r1, [r3, #0]
 80020ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020ce:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	4313      	orrs	r3, r2
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80020e4:	f107 030f 	add.w	r3, r7, #15
 80020e8:	461a      	mov	r2, r3
 80020ea:	2101      	movs	r1, #1
 80020ec:	206e      	movs	r0, #110	@ 0x6e
 80020ee:	f002 fa35 	bl	800455c <RadioSpiWriteRegisters>
 80020f2:	4602      	mov	r2, r0
 80020f4:	4b05      	ldr	r3, [pc, #20]	@ (800210c <SpiritCalibrationSetVcoCalDataTx+0x64>)
 80020f6:	b212      	sxth	r2, r2
 80020f8:	4611      	mov	r1, r2
 80020fa:	7019      	strb	r1, [r3, #0]
 80020fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002100:	705a      	strb	r2, [r3, #1]

}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000260 	.word	0x20000260

08002110 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800211a:	f107 030f 	add.w	r3, r7, #15
 800211e:	461a      	mov	r2, r3
 8002120:	2101      	movs	r1, #1
 8002122:	206f      	movs	r0, #111	@ 0x6f
 8002124:	f002 fa66 	bl	80045f4 <RadioSpiReadRegisters>
 8002128:	4602      	mov	r2, r0
 800212a:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800212c:	b212      	sxth	r2, r2
 800212e:	4611      	mov	r1, r2
 8002130:	7019      	strb	r1, [r3, #0]
 8002132:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002136:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800213e:	b2db      	uxtb	r3, r3
 8002140:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	4313      	orrs	r3, r2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 800214c:	f107 030f 	add.w	r3, r7, #15
 8002150:	461a      	mov	r2, r3
 8002152:	2101      	movs	r1, #1
 8002154:	206f      	movs	r0, #111	@ 0x6f
 8002156:	f002 fa01 	bl	800455c <RadioSpiWriteRegisters>
 800215a:	4602      	mov	r2, r0
 800215c:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 800215e:	b212      	sxth	r2, r2
 8002160:	4611      	mov	r1, r2
 8002162:	7019      	strb	r1, [r3, #0]
 8002164:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002168:	705a      	strb	r2, [r3, #1]

}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000260 	.word	0x20000260

08002178 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8002182:	f107 030f 	add.w	r3, r7, #15
 8002186:	461a      	mov	r2, r3
 8002188:	2101      	movs	r1, #1
 800218a:	209e      	movs	r0, #158	@ 0x9e
 800218c:	f002 fa32 	bl	80045f4 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	f023 0306 	bic.w	r3, r3, #6
 8002196:	b2db      	uxtb	r3, r3
 8002198:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d105      	bne.n	80021ac <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	e004      	b.n	80021b6 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 80021b6:	f107 030f 	add.w	r3, r7, #15
 80021ba:	461a      	mov	r2, r3
 80021bc:	2101      	movs	r1, #1
 80021be:	209e      	movs	r0, #158	@ 0x9e
 80021c0:	f002 f9cc 	bl	800455c <RadioSpiWriteRegisters>
  
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fa57 	bl	800468c <RadioSpiCommandStrobes>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <SpiritCmdStrobeCommand+0x2c>)
 80021e2:	b212      	sxth	r2, r2
 80021e4:	4611      	mov	r1, r2
 80021e6:	7019      	strb	r1, [r3, #0]
 80021e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021ec:	705a      	strb	r2, [r3, #1]
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000260 	.word	0x20000260

080021fc <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	785a      	ldrb	r2, [r3, #1]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	789b      	ldrb	r3, [r3, #2]
 8002210:	4313      	orrs	r3, r2
 8002212:	b2db      	uxtb	r3, r3
 8002214:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	f107 020f 	add.w	r2, r7, #15
 800221e:	2101      	movs	r1, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f002 f99b 	bl	800455c <RadioSpiWriteRegisters>
 8002226:	4602      	mov	r2, r0
 8002228:	4b05      	ldr	r3, [pc, #20]	@ (8002240 <SpiritGpioInit+0x44>)
 800222a:	b212      	sxth	r2, r2
 800222c:	4611      	mov	r1, r2
 800222e:	7019      	strb	r1, [r3, #0]
 8002230:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002234:	705a      	strb	r2, [r3, #1]

}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000260 	.word	0x20000260

08002244 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00c      	beq.n	8002270 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	2204      	movs	r2, #4
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f007 fe3a 	bl	8009ed8 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	461a      	mov	r2, r3
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8002270:	f107 030c 	add.w	r3, r7, #12
 8002274:	461a      	mov	r2, r3
 8002276:	2104      	movs	r1, #4
 8002278:	2090      	movs	r0, #144	@ 0x90
 800227a:	f002 f96f 	bl	800455c <RadioSpiWriteRegisters>
 800227e:	4602      	mov	r2, r0
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <SpiritIrqDeInit+0x54>)
 8002282:	b212      	sxth	r2, r2
 8002284:	4611      	mov	r1, r2
 8002286:	7019      	strb	r1, [r3, #0]
 8002288:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800228c:	705a      	strb	r2, [r3, #1]
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000260 	.word	0x20000260

0800229c <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	461a      	mov	r2, r3
 80022b2:	2104      	movs	r1, #4
 80022b4:	2090      	movs	r0, #144	@ 0x90
 80022b6:	f002 f99d 	bl	80045f4 <RadioSpiReadRegisters>
 80022ba:	4602      	mov	r2, r0
 80022bc:	4b29      	ldr	r3, [pc, #164]	@ (8002364 <SpiritIrq+0xc8>)
 80022be:	b212      	sxth	r2, r2
 80022c0:	4611      	mov	r1, r2
 80022c2:	7019      	strb	r1, [r3, #0]
 80022c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022c8:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	74fb      	strb	r3, [r7, #19]
 80022ce:	e011      	b.n	80022f4 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	3318      	adds	r3, #24
 80022d4:	443b      	add	r3, r7
 80022d6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80022da:	461a      	mov	r2, r3
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	f1c3 0303 	rsb	r3, r3, #3
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4413      	add	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	3301      	adds	r3, #1
 80022f2:	74fb      	strb	r3, [r7, #19]
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d9ea      	bls.n	80022d0 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d105      	bne.n	800230c <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	43db      	mvns	r3, r3
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4013      	ands	r3, r2
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e003      	b.n	8002314 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8002314:	2300      	movs	r3, #0
 8002316:	74bb      	strb	r3, [r7, #18]
 8002318:	e00e      	b.n	8002338 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 800231a:	7cbb      	ldrb	r3, [r7, #18]
 800231c:	f1c3 0303 	rsb	r3, r3, #3
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	40da      	lsrs	r2, r3
 8002326:	7cbb      	ldrb	r3, [r7, #18]
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	3318      	adds	r3, #24
 800232c:	443b      	add	r3, r7
 800232e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8002332:	7cbb      	ldrb	r3, [r7, #18]
 8002334:	3301      	adds	r3, #1
 8002336:	74bb      	strb	r3, [r7, #18]
 8002338:	7cbb      	ldrb	r3, [r7, #18]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d9ed      	bls.n	800231a <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	461a      	mov	r2, r3
 8002344:	2104      	movs	r1, #4
 8002346:	2090      	movs	r0, #144	@ 0x90
 8002348:	f002 f908 	bl	800455c <RadioSpiWriteRegisters>
 800234c:	4602      	mov	r2, r0
 800234e:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <SpiritIrq+0xc8>)
 8002350:	b212      	sxth	r2, r2
 8002352:	4611      	mov	r1, r2
 8002354:	7019      	strb	r1, [r3, #0]
 8002356:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800235a:	705a      	strb	r2, [r3, #1]

}
 800235c:	bf00      	nop
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000260 	.word	0x20000260

08002368 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	461a      	mov	r2, r3
 800237a:	2104      	movs	r1, #4
 800237c:	20fa      	movs	r0, #250	@ 0xfa
 800237e:	f002 f939 	bl	80045f4 <RadioSpiReadRegisters>
 8002382:	4602      	mov	r2, r0
 8002384:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <SpiritIrqGetStatus+0x60>)
 8002386:	b212      	sxth	r2, r2
 8002388:	4611      	mov	r1, r2
 800238a:	7019      	strb	r1, [r3, #0]
 800238c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002390:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	74fb      	strb	r3, [r7, #19]
 8002396:	e00e      	b.n	80023b6 <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	f1c3 0303 	rsb	r3, r3, #3
 800239e:	3318      	adds	r3, #24
 80023a0:	443b      	add	r3, r7
 80023a2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	3301      	adds	r3, #1
 80023b4:	74fb      	strb	r3, [r7, #19]
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d9ed      	bls.n	8002398 <SpiritIrqGetStatus+0x30>
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000260 	.word	0x20000260

080023cc <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	461a      	mov	r2, r3
 80023d6:	2104      	movs	r1, #4
 80023d8:	20fa      	movs	r0, #250	@ 0xfa
 80023da:	f002 f90b 	bl	80045f4 <RadioSpiReadRegisters>
 80023de:	4602      	mov	r2, r0
 80023e0:	4b05      	ldr	r3, [pc, #20]	@ (80023f8 <SpiritIrqClearStatus+0x2c>)
 80023e2:	b212      	sxth	r2, r2
 80023e4:	4611      	mov	r1, r2
 80023e6:	7019      	strb	r1, [r3, #0]
 80023e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023ec:	705a      	strb	r2, [r3, #1]

}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000260 	.word	0x20000260

080023fc <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 80023fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002400:	b08a      	sub	sp, #40	@ 0x28
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a70      	ldr	r2, [pc, #448]	@ (80025cc <SpiritManagementSetFrequencyBase+0x1d0>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d307      	bcc.n	800241e <SpiritManagementSetFrequencyBase+0x22>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a6f      	ldr	r2, [pc, #444]	@ (80025d0 <SpiritManagementSetFrequencyBase+0x1d4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d803      	bhi.n	800241e <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800241c:	e01a      	b.n	8002454 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a6c      	ldr	r2, [pc, #432]	@ (80025d4 <SpiritManagementSetFrequencyBase+0x1d8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d907      	bls.n	8002436 <SpiritManagementSetFrequencyBase+0x3a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a6b      	ldr	r2, [pc, #428]	@ (80025d8 <SpiritManagementSetFrequencyBase+0x1dc>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d803      	bhi.n	8002436 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002434:	e00e      	b.n	8002454 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a68      	ldr	r2, [pc, #416]	@ (80025dc <SpiritManagementSetFrequencyBase+0x1e0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d907      	bls.n	800244e <SpiritManagementSetFrequencyBase+0x52>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a67      	ldr	r2, [pc, #412]	@ (80025e0 <SpiritManagementSetFrequencyBase+0x1e4>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d803      	bhi.n	800244e <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8002446:	2302      	movs	r3, #2
 8002448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800244c:	e002      	b.n	8002454 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 800244e:	2303      	movs	r3, #3
 8002450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002454:	f001 f830 	bl	80034b8 <SpiritRadioGetFrequencyOffset>
 8002458:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 800245a:	f001 f80d 	bl	8003478 <SpiritRadioGetChannelSpace>
 800245e:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002460:	f000 fff2 	bl	8003448 <SpiritRadioGetChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002468:	6a3a      	ldr	r2, [r7, #32]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	441a      	add	r2, r3
 800246e:	7efb      	ldrb	r3, [r7, #27]
 8002470:	69f9      	ldr	r1, [r7, #28]
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 800247a:	f001 fe0b 	bl	8004094 <SpiritRadioGetRefDiv>
 800247e:	4603      	mov	r3, r0
 8002480:	3301      	adds	r3, #1
 8002482:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8002484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002488:	2b03      	cmp	r3, #3
 800248a:	d83a      	bhi.n	8002502 <SpiritManagementSetFrequencyBase+0x106>
 800248c:	a201      	add	r2, pc, #4	@ (adr r2, 8002494 <SpiritManagementSetFrequencyBase+0x98>)
 800248e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002492:	bf00      	nop
 8002494:	080024ed 	.word	0x080024ed
 8002498:	080024d5 	.word	0x080024d5
 800249c:	080024bd 	.word	0x080024bd
 80024a0:	080024a5 	.word	0x080024a5
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	4a4f      	ldr	r2, [pc, #316]	@ (80025e4 <SpiritManagementSetFrequencyBase+0x1e8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d803      	bhi.n	80024b4 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7ff fe63 	bl	8002178 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80024b2:	e026      	b.n	8002502 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7ff fe5f 	bl	8002178 <SpiritCalibrationSelectVco>
    break;
 80024ba:	e022      	b.n	8002502 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	4a4a      	ldr	r2, [pc, #296]	@ (80025e8 <SpiritManagementSetFrequencyBase+0x1ec>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d803      	bhi.n	80024cc <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7ff fe57 	bl	8002178 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80024ca:	e01a      	b.n	8002502 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7ff fe53 	bl	8002178 <SpiritCalibrationSelectVco>
    break;
 80024d2:	e016      	b.n	8002502 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	4a45      	ldr	r2, [pc, #276]	@ (80025ec <SpiritManagementSetFrequencyBase+0x1f0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d803      	bhi.n	80024e4 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff fe4b 	bl	8002178 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80024e2:	e00e      	b.n	8002502 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7ff fe47 	bl	8002178 <SpiritCalibrationSelectVco>
    break;
 80024ea:	e00a      	b.n	8002502 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	4a40      	ldr	r2, [pc, #256]	@ (80025f0 <SpiritManagementSetFrequencyBase+0x1f4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d803      	bhi.n	80024fc <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7ff fe3f 	bl	8002178 <SpiritCalibrationSelectVco>
 80024fa:	e002      	b.n	8002502 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff fe3b 	bl	8002178 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f000 feb8 	bl	8003278 <SpiritRadioSearchWCP>
 8002508:	4603      	mov	r3, r0
 800250a:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7fd fff1 	bl	80004f4 <__aeabi_ui2d>
 8002512:	4604      	mov	r4, r0
 8002514:	460d      	mov	r5, r1
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800251c:	4935      	ldr	r1, [pc, #212]	@ (80025f4 <SpiritManagementSetFrequencyBase+0x1f8>)
 800251e:	5c8a      	ldrb	r2, [r1, r2]
 8002520:	fb02 f303 	mul.w	r3, r2, r3
 8002524:	049b      	lsls	r3, r3, #18
 8002526:	4618      	mov	r0, r3
 8002528:	f7fd fff4 	bl	8000514 <__aeabi_i2d>
 800252c:	4680      	mov	r8, r0
 800252e:	4689      	mov	r9, r1
 8002530:	f001 fe24 	bl	800417c <SpiritRadioGetXtalFrequency>
 8002534:	4603      	mov	r3, r0
 8002536:	4618      	mov	r0, r3
 8002538:	f7fd ffdc 	bl	80004f4 <__aeabi_ui2d>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4640      	mov	r0, r8
 8002542:	4649      	mov	r1, r9
 8002544:	f7fe f97a 	bl	800083c <__aeabi_ddiv>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	f7fe f84a 	bl	80005e8 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fa56 	bl	8000a0c <__aeabi_d2uiz>
 8002560:	4603      	mov	r3, r0
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	0d5b      	lsrs	r3, r3, #21
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	b2da      	uxtb	r2, r3
 8002570:	7cbb      	ldrb	r3, [r7, #18]
 8002572:	015b      	lsls	r3, r3, #5
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4313      	orrs	r3, r2
 8002578:	b2db      	uxtb	r3, r3
 800257a:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	0b5b      	lsrs	r3, r3, #13
 8002580:	b2db      	uxtb	r3, r3
 8002582:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	b2db      	uxtb	r3, r3
 800258a:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	b2da      	uxtb	r2, r3
 8002594:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002598:	4917      	ldr	r1, [pc, #92]	@ (80025f8 <SpiritManagementSetFrequencyBase+0x1fc>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	4313      	orrs	r3, r2
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80025a2:	f107 0308 	add.w	r3, r7, #8
 80025a6:	461a      	mov	r2, r3
 80025a8:	2104      	movs	r1, #4
 80025aa:	2008      	movs	r0, #8
 80025ac:	f001 ffd6 	bl	800455c <RadioSpiWriteRegisters>
 80025b0:	4602      	mov	r2, r0
 80025b2:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <SpiritManagementSetFrequencyBase+0x200>)
 80025b4:	b212      	sxth	r2, r2
 80025b6:	4611      	mov	r1, r2
 80025b8:	7019      	strb	r1, [r3, #0]
 80025ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025be:	705a      	strb	r2, [r3, #1]
}
 80025c0:	bf00      	nop
 80025c2:	3728      	adds	r7, #40	@ 0x28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025ca:	bf00      	nop
 80025cc:	2e5f5680 	.word	0x2e5f5680
 80025d0:	390c2fe0 	.word	0x390c2fe0
 80025d4:	1701e47f 	.word	0x1701e47f
 80025d8:	1c146a60 	.word	0x1c146a60
 80025dc:	11d260bf 	.word	0x11d260bf
 80025e0:	14ced7e0 	.word	0x14ced7e0
 80025e4:	099cf4e1 	.word	0x099cf4e1
 80025e8:	1339e9c3 	.word	0x1339e9c3
 80025ec:	19a28d05 	.word	0x19a28d05
 80025f0:	33451a0a 	.word	0x33451a0a
 80025f4:	0800aa6c 	.word	0x0800aa6c
 80025f8:	0800aa68 	.word	0x0800aa68
 80025fc:	20000260 	.word	0x20000260

08002600 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800260e:	f001 fdb5 	bl	800417c <SpiritRadioGetXtalFrequency>
 8002612:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002614:	2300      	movs	r3, #0
 8002616:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4a57      	ldr	r2, [pc, #348]	@ (8002778 <SpiritManagementWaVcoCalibration+0x178>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d90f      	bls.n	8002640 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002620:	f001 fd38 	bl	8004094 <SpiritRadioGetRefDiv>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10a      	bne.n	8002640 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800262e:	f001 f8a3 	bl	8003778 <SpiritRadioGetFrequencyBase>
 8002632:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002634:	2001      	movs	r0, #1
 8002636:	f001 fcfd 	bl	8004034 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fede 	bl	80023fc <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002640:	f001 f89a 	bl	8003778 <SpiritRadioGetFrequencyBase>
 8002644:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8002646:	2325      	movs	r3, #37	@ 0x25
 8002648:	707b      	strb	r3, [r7, #1]
 800264a:	1c7b      	adds	r3, r7, #1
 800264c:	461a      	mov	r2, r3
 800264e:	2101      	movs	r1, #1
 8002650:	20a1      	movs	r0, #161	@ 0xa1
 8002652:	f001 ff83 	bl	800455c <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002656:	2001      	movs	r0, #1
 8002658:	f7ff fcd2 	bl	8002000 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 800265c:	f001 ff4c 	bl	80044f8 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002660:	4b46      	ldr	r3, [pc, #280]	@ (800277c <SpiritManagementWaVcoCalibration+0x17c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b40      	cmp	r3, #64	@ 0x40
 800266c:	d10d      	bne.n	800268a <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 800266e:	2301      	movs	r3, #1
 8002670:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 8002672:	2062      	movs	r0, #98	@ 0x62
 8002674:	f7ff fdaa 	bl	80021cc <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8002678:	f001 ff3e 	bl	80044f8 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800267c:	4b3f      	ldr	r3, [pc, #252]	@ (800277c <SpiritManagementWaVcoCalibration+0x17c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b03      	cmp	r3, #3
 8002688:	d1f6      	bne.n	8002678 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 800268a:	2066      	movs	r0, #102	@ 0x66
 800268c:	f7ff fd9e 	bl	80021cc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002690:	2300      	movs	r3, #0
 8002692:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002694:	f001 ff30 	bl	80044f8 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002698:	4b38      	ldr	r3, [pc, #224]	@ (800277c <SpiritManagementWaVcoCalibration+0x17c>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b13      	cmp	r3, #19
 80026a4:	d106      	bne.n	80026b4 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80026a6:	7b7b      	ldrb	r3, [r7, #13]
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	737a      	strb	r2, [r7, #13]
 80026ac:	2b05      	cmp	r3, #5
 80026ae:	d101      	bne.n	80026b4 <SpiritManagementWaVcoCalibration+0xb4>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e05d      	b.n	8002770 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80026b4:	4b31      	ldr	r3, [pc, #196]	@ (800277c <SpiritManagementWaVcoCalibration+0x17c>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b0f      	cmp	r3, #15
 80026c0:	d1e8      	bne.n	8002694 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80026c2:	f7ff fcd5 	bl	8002070 <SpiritCalibrationGetVcoCalData>
 80026c6:	4603      	mov	r3, r0
 80026c8:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80026ca:	2062      	movs	r0, #98	@ 0x62
 80026cc:	f7ff fd7e 	bl	80021cc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80026d0:	f001 ff12 	bl	80044f8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80026d4:	4b29      	ldr	r3, [pc, #164]	@ (800277c <SpiritManagementWaVcoCalibration+0x17c>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d1f6      	bne.n	80026d0 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80026e2:	2065      	movs	r0, #101	@ 0x65
 80026e4:	f7ff fd72 	bl	80021cc <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80026ec:	f001 ff04 	bl	80044f8 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80026f0:	4b22      	ldr	r3, [pc, #136]	@ (800277c <SpiritManagementWaVcoCalibration+0x17c>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b13      	cmp	r3, #19
 80026fc:	d106      	bne.n	800270c <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 80026fe:	7b7b      	ldrb	r3, [r7, #13]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	737a      	strb	r2, [r7, #13]
 8002704:	2b05      	cmp	r3, #5
 8002706:	d101      	bne.n	800270c <SpiritManagementWaVcoCalibration+0x10c>
 8002708:	2301      	movs	r3, #1
 800270a:	e031      	b.n	8002770 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 800270c:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <SpiritManagementWaVcoCalibration+0x17c>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b0f      	cmp	r3, #15
 8002718:	d1e8      	bne.n	80026ec <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 800271a:	f7ff fca9 	bl	8002070 <SpiritCalibrationGetVcoCalData>
 800271e:	4603      	mov	r3, r0
 8002720:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8002722:	2062      	movs	r0, #98	@ 0x62
 8002724:	f7ff fd52 	bl	80021cc <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002728:	f001 fee6 	bl	80044f8 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 800272c:	4b13      	ldr	r3, [pc, #76]	@ (800277c <SpiritManagementWaVcoCalibration+0x17c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b03      	cmp	r3, #3
 8002738:	d1f6      	bne.n	8002728 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 800273a:	7bbb      	ldrb	r3, [r7, #14]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d102      	bne.n	8002746 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002740:	2063      	movs	r0, #99	@ 0x63
 8002742:	f7ff fd43 	bl	80021cc <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002746:	2000      	movs	r0, #0
 8002748:	f7ff fc5a 	bl	8002000 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d005      	beq.n	800275e <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8002752:	2000      	movs	r0, #0
 8002754:	f001 fc6e 	bl	8004034 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f7ff fe4f 	bl	80023fc <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fca1 	bl	80020a8 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8002766:	78bb      	ldrb	r3, [r7, #2]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fcd1 	bl	8002110 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	01c9c380 	.word	0x01c9c380
 800277c:	20000260 	.word	0x20000260

08002780 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 8002786:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <SpiritManagementWaCmdStrobeTx+0x60>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d023      	beq.n	80027d8 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8002790:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <SpiritManagementWaCmdStrobeTx+0x64>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a14      	ldr	r2, [pc, #80]	@ (80027e8 <SpiritManagementWaCmdStrobeTx+0x68>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d908      	bls.n	80027ac <SpiritManagementWaCmdStrobeTx+0x2c>
 800279a:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <SpiritManagementWaCmdStrobeTx+0x64>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a13      	ldr	r2, [pc, #76]	@ (80027ec <SpiritManagementWaCmdStrobeTx+0x6c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d803      	bhi.n	80027ac <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80027a4:	20c0      	movs	r0, #192	@ 0xc0
 80027a6:	f001 fbbb 	bl	8003f20 <SpiritRadioSetPACwc>
 80027aa:	e002      	b.n	80027b2 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f001 fbb7 	bl	8003f20 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80027b2:	2311      	movs	r3, #17
 80027b4:	71fb      	strb	r3, [r7, #7]
 80027b6:	1dfb      	adds	r3, r7, #7
 80027b8:	461a      	mov	r2, r3
 80027ba:	2101      	movs	r1, #1
 80027bc:	20a9      	movs	r0, #169	@ 0xa9
 80027be:	f001 fecd 	bl	800455c <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80027c2:	2320      	movs	r3, #32
 80027c4:	71fb      	strb	r3, [r7, #7]
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	461a      	mov	r2, r3
 80027ca:	2101      	movs	r1, #1
 80027cc:	20a5      	movs	r0, #165	@ 0xa5
 80027ce:	f001 fec5 	bl	800455c <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80027d2:	4b03      	ldr	r3, [pc, #12]	@ (80027e0 <SpiritManagementWaCmdStrobeTx+0x60>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
  }
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000004 	.word	0x20000004
 80027e4:	20000258 	.word	0x20000258
 80027e8:	08f0d17f 	.word	0x08f0d17f
 80027ec:	1c03a180 	.word	0x1c03a180

080027f0 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 80027f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <SpiritManagementWaCmdStrobeRx+0x34>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d00d      	beq.n	800281c <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002800:	2398      	movs	r3, #152	@ 0x98
 8002802:	71fb      	strb	r3, [r7, #7]
 8002804:	1dfb      	adds	r3, r7, #7
 8002806:	461a      	mov	r2, r3
 8002808:	2101      	movs	r1, #1
 800280a:	20a5      	movs	r0, #165	@ 0xa5
 800280c:	f001 fea6 	bl	800455c <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002810:	2000      	movs	r0, #0
 8002812:	f001 fb85 	bl	8003f20 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002816:	4b03      	ldr	r3, [pc, #12]	@ (8002824 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
  }
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000004 	.word	0x20000004

08002828 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002830:	4b05      	ldr	r3, [pc, #20]	@ (8002848 <SpiritManagementWaTRxFcMem+0x20>)
 8002832:	2202      	movs	r2, #2
 8002834:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002836:	4a05      	ldr	r2, [pc, #20]	@ (800284c <SpiritManagementWaTRxFcMem+0x24>)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	20000004 	.word	0x20000004
 800284c:	20000258 	.word	0x20000258

08002850 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002856:	23ca      	movs	r3, #202	@ 0xca
 8002858:	71fb      	strb	r3, [r7, #7]
 800285a:	1dfb      	adds	r3, r7, #7
 800285c:	461a      	mov	r2, r3
 800285e:	2101      	movs	r1, #1
 8002860:	20b2      	movs	r0, #178	@ 0xb2
 8002862:	f001 fe7b 	bl	800455c <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002866:	2304      	movs	r3, #4
 8002868:	71fb      	strb	r3, [r7, #7]
 800286a:	1dfb      	adds	r3, r7, #7
 800286c:	461a      	mov	r2, r3
 800286e:	2101      	movs	r1, #1
 8002870:	20a8      	movs	r0, #168	@ 0xa8
 8002872:	f001 fe73 	bl	800455c <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	461a      	mov	r2, r3
 800287a:	2101      	movs	r1, #1
 800287c:	20a8      	movs	r0, #168	@ 0xa8
 800287e:	f001 feb9 	bl	80045f4 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002882:	2300      	movs	r3, #0
 8002884:	71fb      	strb	r3, [r7, #7]
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	461a      	mov	r2, r3
 800288a:	2101      	movs	r1, #1
 800288c:	20a8      	movs	r0, #168	@ 0xa8
 800288e:	f001 fe65 	bl	800455c <RadioSpiWriteRegisters>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	461a      	mov	r2, r3
 80028a6:	2101      	movs	r1, #1
 80028a8:	2030      	movs	r0, #48	@ 0x30
 80028aa:	f001 fea3 	bl	80045f4 <RadioSpiReadRegisters>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <SpiritPktCommonGetControlLength+0x34>)
 80028b2:	b212      	sxth	r2, r2
 80028b4:	4611      	mov	r1, r2
 80028b6:	7019      	strb	r1, [r3, #0]
 80028b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028bc:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	b2db      	uxtb	r3, r3

}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000260 	.word	0x20000260

080028d4 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80028de:	f107 030f 	add.w	r3, r7, #15
 80028e2:	461a      	mov	r2, r3
 80028e4:	2101      	movs	r1, #1
 80028e6:	204f      	movs	r0, #79	@ 0x4f
 80028e8:	f001 fe84 	bl	80045f4 <RadioSpiReadRegisters>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b14      	ldr	r3, [pc, #80]	@ (8002940 <SpiritPktCommonFilterOnCrc+0x6c>)
 80028f0:	b212      	sxth	r2, r2
 80028f2:	4611      	mov	r1, r2
 80028f4:	7019      	strb	r1, [r3, #0]
 80028f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028fa:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	73fb      	strb	r3, [r7, #15]
 800290c:	e004      	b.n	8002918 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	f023 0301 	bic.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8002918:	f107 030f 	add.w	r3, r7, #15
 800291c:	461a      	mov	r2, r3
 800291e:	2101      	movs	r1, #1
 8002920:	204f      	movs	r0, #79	@ 0x4f
 8002922:	f001 fe1b 	bl	800455c <RadioSpiWriteRegisters>
 8002926:	4602      	mov	r2, r0
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <SpiritPktCommonFilterOnCrc+0x6c>)
 800292a:	b212      	sxth	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	7019      	strb	r1, [r3, #0]
 8002930:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002934:	705a      	strb	r2, [r3, #1]

}
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000260 	.word	0x20000260

08002944 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	461a      	mov	r2, r3
 8002952:	2101      	movs	r1, #1
 8002954:	204b      	movs	r0, #75	@ 0x4b
 8002956:	f001 fe01 	bl	800455c <RadioSpiWriteRegisters>
 800295a:	4602      	mov	r2, r0
 800295c:	4b05      	ldr	r3, [pc, #20]	@ (8002974 <SpiritPktCommonSetDestinationAddress+0x30>)
 800295e:	b212      	sxth	r2, r2
 8002960:	4611      	mov	r1, r2
 8002962:	7019      	strb	r1, [r3, #0]
 8002964:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002968:	705a      	strb	r2, [r3, #1]

}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000260 	.word	0x20000260

08002978 <SpiritPktCommonSetMyAddress>:
 * @param  cAddress Address of the present node.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetMyAddress(uint8_t cAddress)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  /* Writes value on the PCKT_FLT_GOALS_TX_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_TX_ADDR_BASE, 1, &cAddress);
 8002982:	1dfb      	adds	r3, r7, #7
 8002984:	461a      	mov	r2, r3
 8002986:	2101      	movs	r1, #1
 8002988:	204e      	movs	r0, #78	@ 0x4e
 800298a:	f001 fde7 	bl	800455c <RadioSpiWriteRegisters>
 800298e:	4602      	mov	r2, r0
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <SpiritPktCommonSetMyAddress+0x30>)
 8002992:	b212      	sxth	r2, r2
 8002994:	4611      	mov	r1, r2
 8002996:	7019      	strb	r1, [r3, #0]
 8002998:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800299c:	705a      	strb	r2, [r3, #1]

}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000260 	.word	0x20000260

080029ac <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	461a      	mov	r2, r3
 80029ba:	2101      	movs	r1, #1
 80029bc:	2051      	movs	r0, #81	@ 0x51
 80029be:	f001 fe19 	bl	80045f4 <RadioSpiReadRegisters>
 80029c2:	4602      	mov	r2, r0
 80029c4:	4b60      	ldr	r3, [pc, #384]	@ (8002b48 <SpiritPktStackInit+0x19c>)
 80029c6:	b212      	sxth	r2, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	7019      	strb	r1, [r3, #0]
 80029cc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029d0:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 80029d2:	7a3b      	ldrb	r3, [r7, #8]
 80029d4:	f023 0320 	bic.w	r3, r3, #32
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 80029dc:	7a3b      	ldrb	r3, [r7, #8]
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80029e6:	f107 0308 	add.w	r3, r7, #8
 80029ea:	461a      	mov	r2, r3
 80029ec:	2101      	movs	r1, #1
 80029ee:	2051      	movs	r0, #81	@ 0x51
 80029f0:	f001 fdb4 	bl	800455c <RadioSpiWriteRegisters>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b54      	ldr	r3, [pc, #336]	@ (8002b48 <SpiritPktStackInit+0x19c>)
 80029f8:	b212      	sxth	r2, r2
 80029fa:	4611      	mov	r1, r2
 80029fc:	7019      	strb	r1, [r3, #0]
 80029fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a02:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002a04:	f107 0308 	add.w	r3, r7, #8
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	204f      	movs	r0, #79	@ 0x4f
 8002a0e:	f001 fdf1 	bl	80045f4 <RadioSpiReadRegisters>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b4c      	ldr	r3, [pc, #304]	@ (8002b48 <SpiritPktStackInit+0x19c>)
 8002a16:	b212      	sxth	r2, r2
 8002a18:	4611      	mov	r1, r2
 8002a1a:	7019      	strb	r1, [r3, #0]
 8002a1c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a20:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8002a22:	7a3b      	ldrb	r3, [r7, #8]
 8002a24:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002a2c:	f107 0308 	add.w	r3, r7, #8
 8002a30:	461a      	mov	r2, r3
 8002a32:	2101      	movs	r1, #1
 8002a34:	204f      	movs	r0, #79	@ 0x4f
 8002a36:	f001 fd91 	bl	800455c <RadioSpiWriteRegisters>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4b42      	ldr	r3, [pc, #264]	@ (8002b48 <SpiritPktStackInit+0x19c>)
 8002a3e:	b212      	sxth	r2, r2
 8002a40:	4611      	mov	r1, r2
 8002a42:	7019      	strb	r1, [r3, #0]
 8002a44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a48:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	7adb      	ldrb	r3, [r3, #11]
 8002a4e:	f043 0310 	orr.w	r3, r3, #16
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	7a5b      	ldrb	r3, [r3, #9]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d102      	bne.n	8002a64 <SpiritPktStackInit+0xb8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7a5b      	ldrb	r3, [r3, #9]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7a9b      	ldrb	r3, [r3, #10]
 8002a8e:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	7b5b      	ldrb	r3, [r3, #13]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d104      	bne.n	8002aa2 <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002a98:	7afb      	ldrb	r3, [r7, #11]
 8002a9a:	f043 0310 	orr.w	r3, r3, #16
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7b1b      	ldrb	r3, [r3, #12]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d104      	bne.n	8002ab4 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2104      	movs	r1, #4
 8002abc:	2030      	movs	r0, #48	@ 0x30
 8002abe:	f001 fd4d 	bl	800455c <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e01d      	b.n	8002b04 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	785b      	ldrb	r3, [r3, #1]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f1c3 0303 	rsb	r3, r3, #3
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	da06      	bge.n	8002ae8 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	3310      	adds	r3, #16
 8002ade:	443b      	add	r3, r7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002ae6:	e00a      	b.n	8002afe <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	40da      	lsrs	r2, r3
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	3310      	adds	r3, #16
 8002af8:	443b      	add	r3, r7
 8002afa:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	3301      	adds	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b03      	cmp	r3, #3
 8002b08:	d9de      	bls.n	8002ac8 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7a9b      	ldrb	r3, [r3, #10]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7ff fede 	bl	80028d4 <SpiritPktCommonFilterOnCrc>
 8002b18:	e002      	b.n	8002b20 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f7ff feda 	bl	80028d4 <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002b20:	f107 0308 	add.w	r3, r7, #8
 8002b24:	461a      	mov	r2, r3
 8002b26:	2104      	movs	r1, #4
 8002b28:	2036      	movs	r0, #54	@ 0x36
 8002b2a:	f001 fd17 	bl	800455c <RadioSpiWriteRegisters>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <SpiritPktStackInit+0x19c>)
 8002b32:	b212      	sxth	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	7019      	strb	r1, [r3, #0]
 8002b38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b3c:	705a      	strb	r2, [r3, #1]

}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000260 	.word	0x20000260

08002b4c <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	204f      	movs	r0, #79	@ 0x4f
 8002b5e:	f001 fd49 	bl	80045f4 <RadioSpiReadRegisters>
 8002b62:	4602      	mov	r2, r0
 8002b64:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <SpiritPktStackAddressesInit+0xd8>)
 8002b66:	b212      	sxth	r2, r2
 8002b68:	4611      	mov	r1, r2
 8002b6a:	7019      	strb	r1, [r3, #0]
 8002b6c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b70:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d105      	bne.n	8002b86 <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002b7a:	7b3b      	ldrb	r3, [r7, #12]
 8002b7c:	f043 0308 	orr.w	r3, r3, #8
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	733b      	strb	r3, [r7, #12]
 8002b84:	e004      	b.n	8002b90 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002b86:	7b3b      	ldrb	r3, [r7, #12]
 8002b88:	f023 0308 	bic.w	r3, r3, #8
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	789b      	ldrb	r3, [r3, #2]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d105      	bne.n	8002ba4 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002b98:	7b3b      	ldrb	r3, [r7, #12]
 8002b9a:	f043 0304 	orr.w	r3, r3, #4
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	733b      	strb	r3, [r7, #12]
 8002ba2:	e004      	b.n	8002bae <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002ba4:	7b3b      	ldrb	r3, [r7, #12]
 8002ba6:	f023 0304 	bic.w	r3, r3, #4
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	791b      	ldrb	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002bb6:	7b3b      	ldrb	r3, [r7, #12]
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	733b      	strb	r3, [r7, #12]
 8002bc0:	e004      	b.n	8002bcc <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002bc2:	7b3b      	ldrb	r3, [r7, #12]
 8002bc4:	f023 0302 	bic.w	r3, r3, #2
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	204f      	movs	r0, #79	@ 0x4f
 8002bd6:	f001 fcc1 	bl	800455c <RadioSpiWriteRegisters>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b11      	ldr	r3, [pc, #68]	@ (8002c24 <SpiritPktStackAddressesInit+0xd8>)
 8002bde:	b212      	sxth	r2, r2
 8002be0:	4611      	mov	r1, r2
 8002be2:	7019      	strb	r1, [r3, #0]
 8002be4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002be8:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	795b      	ldrb	r3, [r3, #5]
 8002bee:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	78db      	ldrb	r3, [r3, #3]
 8002bf4:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	785b      	ldrb	r3, [r3, #1]
 8002bfa:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	461a      	mov	r2, r3
 8002c02:	2103      	movs	r1, #3
 8002c04:	204c      	movs	r0, #76	@ 0x4c
 8002c06:	f001 fca9 	bl	800455c <RadioSpiWriteRegisters>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <SpiritPktStackAddressesInit+0xd8>)
 8002c0e:	b212      	sxth	r2, r2
 8002c10:	4611      	mov	r1, r2
 8002c12:	7019      	strb	r1, [r3, #0]
 8002c14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c18:	705a      	strb	r2, [r3, #1]
  
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000260 	.word	0x20000260

08002c28 <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	461a      	mov	r2, r3
 8002c36:	2102      	movs	r1, #2
 8002c38:	2051      	movs	r0, #81	@ 0x51
 8002c3a:	f001 fcdb 	bl	80045f4 <RadioSpiReadRegisters>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	4b21      	ldr	r3, [pc, #132]	@ (8002cc8 <SpiritPktStackLlpInit+0xa0>)
 8002c42:	b212      	sxth	r2, r2
 8002c44:	4611      	mov	r1, r2
 8002c46:	7019      	strb	r1, [r3, #0]
 8002c48:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c4c:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	785b      	ldrb	r3, [r3, #1]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 8002c56:	7b3b      	ldrb	r3, [r7, #12]
 8002c58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	733b      	strb	r3, [r7, #12]
 8002c60:	e004      	b.n	8002c6c <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 8002c62:	7b3b      	ldrb	r3, [r7, #12]
 8002c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 8002c74:	7b7b      	ldrb	r3, [r7, #13]
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	737b      	strb	r3, [r7, #13]
 8002c7e:	e004      	b.n	8002c8a <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 8002c80:	7b7b      	ldrb	r3, [r7, #13]
 8002c82:	f023 0304 	bic.w	r3, r3, #4
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 8002c8a:	7b7b      	ldrb	r3, [r7, #13]
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 8002c94:	7b7a      	ldrb	r2, [r7, #13]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	789b      	ldrb	r3, [r3, #2]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	2051      	movs	r0, #81	@ 0x51
 8002caa:	f001 fc57 	bl	800455c <RadioSpiWriteRegisters>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <SpiritPktStackLlpInit+0xa0>)
 8002cb2:	b212      	sxth	r2, r2
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	7019      	strb	r1, [r3, #0]
 8002cb8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002cbc:	705a      	strb	r2, [r3, #1]

}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	20000260 	.word	0x20000260

08002ccc <SpiritPktStackSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter can be any value of uint16_t.
 * @retval None.
 */
void SpiritPktStackSetPayloadLength(uint16_t nPayloadLength)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];

  /* Computes the oversize (address + control) size */
  uint16_t overSize = 2 + (uint16_t) SpiritPktStackGetControlLength();
 8002cd6:	f7ff fde1 	bl	800289c <SpiritPktCommonGetControlLength>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	3302      	adds	r3, #2
 8002cde:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from lPayloadLength */
  tempRegValue[1]=STACK_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	89fb      	ldrh	r3, [r7, #14]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from lPayloadLength */
  tempRegValue[0]=STACK_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002cee:	88fa      	ldrh	r2, [r7, #6]
 8002cf0:	89fb      	ldrh	r3, [r7, #14]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	121b      	asrs	r3, r3, #8
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	733b      	strb	r3, [r7, #12]

  /* Writes the value on the PCKTLENx registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2102      	movs	r1, #2
 8002d02:	2034      	movs	r0, #52	@ 0x34
 8002d04:	f001 fc2a 	bl	800455c <RadioSpiWriteRegisters>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <SpiritPktStackSetPayloadLength+0x54>)
 8002d0c:	b212      	sxth	r2, r2
 8002d0e:	4611      	mov	r1, r2
 8002d10:	7019      	strb	r1, [r3, #0]
 8002d12:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d16:	705a      	strb	r2, [r3, #1]

}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000260 	.word	0x20000260

08002d24 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002d2e:	f107 030f 	add.w	r3, r7, #15
 8002d32:	461a      	mov	r2, r3
 8002d34:	2101      	movs	r1, #1
 8002d36:	203a      	movs	r0, #58	@ 0x3a
 8002d38:	f001 fc5c 	bl	80045f4 <RadioSpiReadRegisters>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <SpiritQiSqiCheck+0x6c>)
 8002d40:	b212      	sxth	r2, r2
 8002d42:	4611      	mov	r1, r2
 8002d44:	7019      	strb	r1, [r3, #0]
 8002d46:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d4a:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e004      	b.n	8002d68 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	f023 0302 	bic.w	r3, r3, #2
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002d68:	f107 030f 	add.w	r3, r7, #15
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2101      	movs	r1, #1
 8002d70:	203a      	movs	r0, #58	@ 0x3a
 8002d72:	f001 fbf3 	bl	800455c <RadioSpiWriteRegisters>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <SpiritQiSqiCheck+0x6c>)
 8002d7a:	b212      	sxth	r2, r2
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	7019      	strb	r1, [r3, #0]
 8002d80:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d84:	705a      	strb	r2, [r3, #1]

}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000260 	.word	0x20000260

08002d94 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002d9e:	f107 030f 	add.w	r3, r7, #15
 8002da2:	461a      	mov	r2, r3
 8002da4:	2101      	movs	r1, #1
 8002da6:	203a      	movs	r0, #58	@ 0x3a
 8002da8:	f001 fc24 	bl	80045f4 <RadioSpiReadRegisters>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b12      	ldr	r3, [pc, #72]	@ (8002df8 <SpiritQiSetSqiThreshold+0x64>)
 8002db0:	b212      	sxth	r2, r2
 8002db2:	4611      	mov	r1, r2
 8002db4:	7019      	strb	r1, [r3, #0]
 8002db6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002dba:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002dd0:	f107 030f 	add.w	r3, r7, #15
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	203a      	movs	r0, #58	@ 0x3a
 8002dda:	f001 fbbf 	bl	800455c <RadioSpiWriteRegisters>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b05      	ldr	r3, [pc, #20]	@ (8002df8 <SpiritQiSetSqiThreshold+0x64>)
 8002de2:	b212      	sxth	r2, r2
 8002de4:	4611      	mov	r1, r2
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002dec:	705a      	strb	r2, [r3, #1]

}
 8002dee:	bf00      	nop
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000260 	.word	0x20000260

08002dfc <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3382      	adds	r3, #130	@ 0x82
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002e10:	f107 030f 	add.w	r3, r7, #15
 8002e14:	461a      	mov	r2, r3
 8002e16:	2101      	movs	r1, #1
 8002e18:	2022      	movs	r0, #34	@ 0x22
 8002e1a:	f001 fb9f 	bl	800455c <RadioSpiWriteRegisters>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <SpiritQiSetRssiThresholddBm+0x3c>)
 8002e22:	b212      	sxth	r2, r2
 8002e24:	4611      	mov	r1, r2
 8002e26:	7019      	strb	r1, [r3, #0]
 8002e28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e2c:	705a      	strb	r2, [r3, #1]

}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000260 	.word	0x20000260

08002e3c <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08c      	sub	sp, #48	@ 0x30
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002e44:	23a0      	movs	r3, #160	@ 0xa0
 8002e46:	747b      	strb	r3, [r7, #17]
 8002e48:	f107 0311 	add.w	r3, r7, #17
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2101      	movs	r1, #1
 8002e50:	209f      	movs	r0, #159	@ 0x9f
 8002e52:	f001 fb83 	bl	800455c <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	ee07 3a90 	vmov	s15, r3
 8002e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e74:	eddf 6aae 	vldr	s13, [pc, #696]	@ 8003130 <SpiritRadioInit+0x2f4>
 8002e78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e80:	ee17 3a90 	vmov	r3, s15
 8002e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002e86:	2063      	movs	r0, #99	@ 0x63
 8002e88:	f001 fc00 	bl	800468c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73bb      	strb	r3, [r7, #14]
 8002e90:	e004      	b.n	8002e9c <SpiritRadioInit+0x60>
 8002e92:	7bbb      	ldrb	r3, [r7, #14]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	3301      	adds	r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	73bb      	strb	r3, [r7, #14]
 8002e9c:	7bbb      	ldrb	r3, [r7, #14]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2bff      	cmp	r3, #255	@ 0xff
 8002ea2:	d1f6      	bne.n	8002e92 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002ea4:	f001 fb28 	bl	80044f8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002ea8:	4ba2      	ldr	r3, [pc, #648]	@ (8003134 <SpiritRadioInit+0x2f8>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b40      	cmp	r3, #64	@ 0x40
 8002eb4:	d1ea      	bne.n	8002e8c <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002eb6:	4ba0      	ldr	r3, [pc, #640]	@ (8003138 <SpiritRadioInit+0x2fc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4aa0      	ldr	r2, [pc, #640]	@ (800313c <SpiritRadioInit+0x300>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d803      	bhi.n	8002ec8 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f001 f909 	bl	80040d8 <SpiritRadioSetDigDiv>
 8002ec6:	e002      	b.n	8002ece <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002ec8:	2001      	movs	r0, #1
 8002eca:	f001 f905 	bl	80040d8 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002ece:	2062      	movs	r0, #98	@ 0x62
 8002ed0:	f001 fbdc 	bl	800468c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	737b      	strb	r3, [r7, #13]
 8002ed8:	e004      	b.n	8002ee4 <SpiritRadioInit+0xa8>
 8002eda:	7b7b      	ldrb	r3, [r7, #13]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	737b      	strb	r3, [r7, #13]
 8002ee4:	7b7b      	ldrb	r3, [r7, #13]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2bff      	cmp	r3, #255	@ 0xff
 8002eea:	d1f6      	bne.n	8002eda <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002eec:	f001 fb04 	bl	80044f8 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002ef0:	4b90      	ldr	r3, [pc, #576]	@ (8003134 <SpiritRadioInit+0x2f8>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d1ea      	bne.n	8002ed4 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f08:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8003140 <SpiritRadioInit+0x304>
 8002f0c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f10:	4b89      	ldr	r3, [pc, #548]	@ (8003138 <SpiritRadioInit+0x2fc>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	ee07 3a90 	vmov	s15, r3
 8002f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f24:	ee17 3a90 	vmov	r3, s15
 8002f28:	857b      	strh	r3, [r7, #42]	@ 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002f2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002f3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	025a      	lsls	r2, r3, #9
 8002f46:	4b7c      	ldr	r3, [pc, #496]	@ (8003138 <SpiritRadioInit+0x2fc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	099b      	lsrs	r3, r3, #6
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fc63 	bl	8002828 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002f62:	f107 0310 	add.w	r3, r7, #16
 8002f66:	461a      	mov	r2, r3
 8002f68:	2101      	movs	r1, #1
 8002f6a:	20a3      	movs	r0, #163	@ 0xa3
 8002f6c:	f001 fb42 	bl	80045f4 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002f70:	7c3b      	ldrb	r3, [r7, #16]
 8002f72:	f023 0302 	bic.w	r3, r3, #2
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	743b      	strb	r3, [r7, #16]
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2101      	movs	r1, #1
 8002f82:	20a3      	movs	r0, #163	@ 0xa3
 8002f84:	f001 faea 	bl	800455c <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f107 0216 	add.w	r2, r7, #22
 8002f90:	f107 0117 	add.w	r1, r7, #23
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fc3b 	bl	8003810 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7b5a      	ldrb	r2, [r3, #13]
 8002fa2:	7dbb      	ldrb	r3, [r7, #22]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002faa:	f107 0310 	add.w	r3, r7, #16
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	201c      	movs	r0, #28
 8002fb4:	f001 fb1e 	bl	80045f4 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f107 0214 	add.w	r2, r7, #20
 8002fc0:	f107 0115 	add.w	r1, r7, #21
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fdbb 	bl	8003b40 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002fca:	7d3b      	ldrb	r3, [r7, #20]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	b25a      	sxtb	r2, r3
 8002fd0:	7c3b      	ldrb	r3, [r7, #16]
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	b25b      	sxtb	r3, r3
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	b25a      	sxtb	r2, r3
 8002fde:	7d7b      	ldrb	r3, [r7, #21]
 8002fe0:	b25b      	sxtb	r3, r3
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	b25b      	sxtb	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f107 0212 	add.w	r2, r7, #18
 8002ff2:	f107 0113 	add.w	r1, r7, #19
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fcbc 	bl	8003974 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	b25a      	sxtb	r2, r3
 8003002:	7cbb      	ldrb	r3, [r7, #18]
 8003004:	b25b      	sxtb	r3, r3
 8003006:	4313      	orrs	r3, r2
 8003008:	b25b      	sxtb	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 800300e:	4b4a      	ldr	r3, [pc, #296]	@ (8003138 <SpiritRadioInit+0x2fc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	0b1b      	lsrs	r3, r3, #12
 8003014:	ee07 3a90 	vmov	s15, r3
 8003018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800301c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8003144 <SpiritRadioInit+0x308>
 8003020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003024:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003148 <SpiritRadioInit+0x30c>
 8003028:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800302c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8003030:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003040:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003044:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	dd09      	ble.n	8003066 <SpiritRadioInit+0x22a>
 8003052:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800305a:	edc7 7a00 	vstr	s15, [r7]
 800305e:	783b      	ldrb	r3, [r7, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	e006      	b.n	8003074 <SpiritRadioInit+0x238>
 8003066:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800306a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800306e:	edc7 7a00 	vstr	s15, [r7]
 8003072:	783b      	ldrb	r3, [r7, #0]
 8003074:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8003076:	4b30      	ldr	r3, [pc, #192]	@ (8003138 <SpiritRadioInit+0x2fc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a30      	ldr	r2, [pc, #192]	@ (800313c <SpiritRadioInit+0x300>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d802      	bhi.n	8003086 <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	777b      	strb	r3, [r7, #29]
 8003084:	e033      	b.n	80030ee <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8003086:	4b2c      	ldr	r3, [pc, #176]	@ (8003138 <SpiritRadioInit+0x2fc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0b5b      	lsrs	r3, r3, #13
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003094:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8003144 <SpiritRadioInit+0x308>
 8003098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800309c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003148 <SpiritRadioInit+0x30c>
 80030a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 80030a8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80030b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c8:	dd09      	ble.n	80030de <SpiritRadioInit+0x2a2>
 80030ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d2:	edc7 7a00 	vstr	s15, [r7]
 80030d6:	783b      	ldrb	r3, [r7, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e006      	b.n	80030ec <SpiritRadioInit+0x2b0>
 80030de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e6:	edc7 7a00 	vstr	s15, [r7]
 80030ea:	783b      	ldrb	r3, [r7, #0]
 80030ec:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 80030ee:	f107 030f 	add.w	r3, r7, #15
 80030f2:	461a      	mov	r2, r3
 80030f4:	2101      	movs	r1, #1
 80030f6:	2007      	movs	r0, #7
 80030f8:	f001 fa30 	bl	800455c <RadioSpiWriteRegisters>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <SpiritRadioInit+0x2f8>)
 8003100:	b212      	sxth	r2, r2
 8003102:	4611      	mov	r1, r2
 8003104:	7019      	strb	r1, [r3, #0]
 8003106:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800310a:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 800310c:	4b0a      	ldr	r3, [pc, #40]	@ (8003138 <SpiritRadioInit+0x2fc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0e      	ldr	r2, [pc, #56]	@ (800314c <SpiritRadioInit+0x310>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d91e      	bls.n	8003154 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <SpiritRadioInit+0x2fc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a0d      	ldr	r2, [pc, #52]	@ (8003150 <SpiritRadioInit+0x314>)
 800311c:	4293      	cmp	r3, r2
 800311e:	bf8c      	ite	hi
 8003120:	2301      	movhi	r3, #1
 8003122:	2300      	movls	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f86c 	bl	8003204 <SpiritRadioSetXtalFlag>
 800312c:	e01d      	b.n	800316a <SpiritRadioInit+0x32e>
 800312e:	bf00      	nop
 8003130:	49742400 	.word	0x49742400
 8003134:	20000260 	.word	0x20000260
 8003138:	2000025c 	.word	0x2000025c
 800313c:	01c9c37f 	.word	0x01c9c37f
 8003140:	48800000 	.word	0x48800000
 8003144:	49afd520 	.word	0x49afd520
 8003148:	42800000 	.word	0x42800000
 800314c:	01c9c380 	.word	0x01c9c380
 8003150:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8003154:	4b28      	ldr	r3, [pc, #160]	@ (80031f8 <SpiritRadioInit+0x3bc>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a28      	ldr	r2, [pc, #160]	@ (80031fc <SpiritRadioInit+0x3c0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	bf8c      	ite	hi
 800315e:	2301      	movhi	r3, #1
 8003160:	2300      	movls	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f84d 	bl	8003204 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	330c      	adds	r3, #12
 800316e:	461a      	mov	r2, r3
 8003170:	2101      	movs	r1, #1
 8003172:	206c      	movs	r0, #108	@ 0x6c
 8003174:	f001 f9f2 	bl	800455c <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	461a      	mov	r2, r3
 800317e:	2104      	movs	r1, #4
 8003180:	200c      	movs	r0, #12
 8003182:	f001 f9eb 	bl	800455c <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8003186:	f107 0318 	add.w	r3, r7, #24
 800318a:	461a      	mov	r2, r3
 800318c:	2104      	movs	r1, #4
 800318e:	201a      	movs	r0, #26
 8003190:	f001 f9e4 	bl	800455c <RadioSpiWriteRegisters>
 8003194:	4602      	mov	r2, r0
 8003196:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <SpiritRadioInit+0x3c4>)
 8003198:	b212      	sxth	r2, r2
 800319a:	4611      	mov	r1, r2
 800319c:	7019      	strb	r1, [r3, #0]
 800319e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80031a2:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 80031a4:	2001      	movs	r0, #1
 80031a6:	f000 ff13 	bl	8003fd0 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 80031aa:	2380      	movs	r3, #128	@ 0x80
 80031ac:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 80031ae:	23e3      	movs	r3, #227	@ 0xe3
 80031b0:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 80031b2:	f107 031c 	add.w	r3, r7, #28
 80031b6:	461a      	mov	r2, r3
 80031b8:	2102      	movs	r1, #2
 80031ba:	2099      	movs	r0, #153	@ 0x99
 80031bc:	f001 f9ce 	bl	800455c <RadioSpiWriteRegisters>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <SpiritRadioInit+0x3c4>)
 80031c4:	b212      	sxth	r2, r2
 80031c6:	4611      	mov	r1, r2
 80031c8:	7019      	strb	r1, [r3, #0]
 80031ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80031ce:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80031d0:	2322      	movs	r3, #34	@ 0x22
 80031d2:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 80031d4:	f107 031c 	add.w	r3, r7, #28
 80031d8:	461a      	mov	r2, r3
 80031da:	2101      	movs	r1, #1
 80031dc:	20bc      	movs	r0, #188	@ 0xbc
 80031de:	f001 f9bd 	bl	800455c <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 f9a8 	bl	800353c <SpiritRadioSetFrequencyBase>
 80031ec:	4603      	mov	r3, r0
  
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3730      	adds	r7, #48	@ 0x30
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2000025c 	.word	0x2000025c
 80031fc:	017d783f 	.word	0x017d783f
 8003200:	20000260 	.word	0x20000260

08003204 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 800320e:	2300      	movs	r3, #0
 8003210:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8003212:	f107 030f 	add.w	r3, r7, #15
 8003216:	461a      	mov	r2, r3
 8003218:	2101      	movs	r1, #1
 800321a:	2001      	movs	r0, #1
 800321c:	f001 f9ea 	bl	80045f4 <RadioSpiReadRegisters>
 8003220:	4602      	mov	r2, r0
 8003222:	4b14      	ldr	r3, [pc, #80]	@ (8003274 <SpiritRadioSetXtalFlag+0x70>)
 8003224:	b212      	sxth	r2, r2
 8003226:	4611      	mov	r1, r2
 8003228:	7019      	strb	r1, [r3, #0]
 800322a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800322e:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d105      	bne.n	8003242 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800323c:	b2db      	uxtb	r3, r3
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e004      	b.n	800324c <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003248:	b2db      	uxtb	r3, r3
 800324a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 800324c:	f107 030f 	add.w	r3, r7, #15
 8003250:	461a      	mov	r2, r3
 8003252:	2101      	movs	r1, #1
 8003254:	2001      	movs	r0, #1
 8003256:	f001 f981 	bl	800455c <RadioSpiWriteRegisters>
 800325a:	4602      	mov	r2, r0
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <SpiritRadioSetXtalFlag+0x70>)
 800325e:	b212      	sxth	r2, r2
 8003260:	4611      	mov	r1, r2
 8003262:	7019      	strb	r1, [r3, #0]
 8003264:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003268:	705a      	strb	r2, [r3, #1]
  
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000260 	.word	0x20000260

08003278 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8003288:	2300      	movs	r3, #0
 800328a:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a3a      	ldr	r2, [pc, #232]	@ (8003378 <SpiritRadioSearchWCP+0x100>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d306      	bcc.n	80032a2 <SpiritRadioSearchWCP+0x2a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a39      	ldr	r2, [pc, #228]	@ (800337c <SpiritRadioSearchWCP+0x104>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d802      	bhi.n	80032a2 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 800329c:	2306      	movs	r3, #6
 800329e:	73bb      	strb	r3, [r7, #14]
 80032a0:	e01f      	b.n	80032e2 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a36      	ldr	r2, [pc, #216]	@ (8003380 <SpiritRadioSearchWCP+0x108>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d906      	bls.n	80032b8 <SpiritRadioSearchWCP+0x40>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a35      	ldr	r2, [pc, #212]	@ (8003384 <SpiritRadioSearchWCP+0x10c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d802      	bhi.n	80032b8 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 80032b2:	230c      	movs	r3, #12
 80032b4:	73bb      	strb	r3, [r7, #14]
 80032b6:	e014      	b.n	80032e2 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a33      	ldr	r2, [pc, #204]	@ (8003388 <SpiritRadioSearchWCP+0x110>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d906      	bls.n	80032ce <SpiritRadioSearchWCP+0x56>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a32      	ldr	r2, [pc, #200]	@ (800338c <SpiritRadioSearchWCP+0x114>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d802      	bhi.n	80032ce <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 80032c8:	2310      	movs	r3, #16
 80032ca:	73bb      	strb	r3, [r7, #14]
 80032cc:	e009      	b.n	80032e2 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003390 <SpiritRadioSearchWCP+0x118>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d905      	bls.n	80032e2 <SpiritRadioSearchWCP+0x6a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a2e      	ldr	r2, [pc, #184]	@ (8003394 <SpiritRadioSearchWCP+0x11c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d801      	bhi.n	80032e2 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 80032de:	2320      	movs	r3, #32
 80032e0:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003398 <SpiritRadioSearchWCP+0x120>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	099b      	lsrs	r3, r3, #6
 80032ec:	7bba      	ldrb	r2, [r7, #14]
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80032f4:	f241 631f 	movw	r3, #5663	@ 0x161f
 80032f8:	461a      	mov	r2, r3
 80032fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	429a      	cmp	r2, r3
 8003306:	d302      	bcc.n	800330e <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8003308:	230f      	movs	r3, #15
 800330a:	73fb      	strb	r3, [r7, #15]
 800330c:	e023      	b.n	8003356 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	e005      	b.n	8003320 <SpiritRadioSearchWCP+0xa8>
 8003314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	3301      	adds	r3, #1
 800331c:	b2db      	uxtb	r3, r3
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003324:	2b0e      	cmp	r3, #14
 8003326:	dc0c      	bgt.n	8003342 <SpiritRadioSearchWCP+0xca>
 8003328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332c:	4a1b      	ldr	r2, [pc, #108]	@ (800339c <SpiritRadioSearchWCP+0x124>)
 800332e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003332:	461a      	mov	r2, r3
 8003334:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	d8e8      	bhi.n	8003314 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <SpiritRadioSearchWCP+0xde>
      i--;
 800334a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	425a      	negs	r2, r3
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	f002 0207 	and.w	r2, r2, #7
 8003364:	bf58      	it	pl
 8003366:	4253      	negpl	r3, r2
 8003368:	b25b      	sxtb	r3, r3
 800336a:	b2db      	uxtb	r3, r3
  
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	2e5f5680 	.word	0x2e5f5680
 800337c:	390c2fe0 	.word	0x390c2fe0
 8003380:	1701e47f 	.word	0x1701e47f
 8003384:	1c146a60 	.word	0x1c146a60
 8003388:	11d260bf 	.word	0x11d260bf
 800338c:	14ced7e0 	.word	0x14ced7e0
 8003390:	08e18f3f 	.word	0x08e18f3f
 8003394:	0a6fd060 	.word	0x0a6fd060
 8003398:	10624dd3 	.word	0x10624dd3
 800339c:	0800ab2c 	.word	0x0800ab2c

080033a0 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	461a      	mov	r2, r3
 80033aa:	2104      	movs	r1, #4
 80033ac:	2008      	movs	r0, #8
 80033ae:	f001 f921 	bl	80045f4 <RadioSpiReadRegisters>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <SpiritRadioGetSynthWord+0x48>)
 80033b6:	b212      	sxth	r2, r2
 80033b8:	4611      	mov	r1, r2
 80033ba:	7019      	strb	r1, [r3, #0]
 80033bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80033c0:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80033c2:	793b      	ldrb	r3, [r7, #4]
 80033c4:	055b      	lsls	r3, r3, #21
 80033c6:	f003 7278 	and.w	r2, r3, #65011712	@ 0x3e00000
 80033ca:	797b      	ldrb	r3, [r7, #5]
 80033cc:	035b      	lsls	r3, r3, #13
 80033ce:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80033d0:	79bb      	ldrb	r3, [r7, #6]
 80033d2:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80033d4:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80033d6:	79fa      	ldrb	r2, [r7, #7]
 80033d8:	08d2      	lsrs	r2, r2, #3
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	4413      	add	r3, r2
  
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000260 	.word	0x20000260

080033ec <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80033f2:	1dfb      	adds	r3, r7, #7
 80033f4:	461a      	mov	r2, r3
 80033f6:	2101      	movs	r1, #1
 80033f8:	200b      	movs	r0, #11
 80033fa:	f001 f8fb 	bl	80045f4 <RadioSpiReadRegisters>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b10      	ldr	r3, [pc, #64]	@ (8003444 <SpiritRadioGetBand+0x58>)
 8003402:	b212      	sxth	r2, r2
 8003404:	4611      	mov	r1, r2
 8003406:	7019      	strb	r1, [r3, #0]
 8003408:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800340c:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8003418:	2300      	movs	r3, #0
 800341a:	e00e      	b.n	800343a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	2b03      	cmp	r3, #3
 8003424:	d101      	bne.n	800342a <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	2b04      	cmp	r3, #4
 8003432:	d101      	bne.n	8003438 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8003434:	2302      	movs	r3, #2
 8003436:	e000      	b.n	800343a <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8003438:	2303      	movs	r3, #3
  }
  
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000260 	.word	0x20000260

08003448 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800344e:	1dfb      	adds	r3, r7, #7
 8003450:	461a      	mov	r2, r3
 8003452:	2101      	movs	r1, #1
 8003454:	206c      	movs	r0, #108	@ 0x6c
 8003456:	f001 f8cd 	bl	80045f4 <RadioSpiReadRegisters>
 800345a:	4602      	mov	r2, r0
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <SpiritRadioGetChannel+0x2c>)
 800345e:	b212      	sxth	r2, r2
 8003460:	4611      	mov	r1, r2
 8003462:	7019      	strb	r1, [r3, #0]
 8003464:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003468:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 800346a:	79fb      	ldrb	r3, [r7, #7]
  
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000260 	.word	0x20000260

08003478 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800347e:	1dfb      	adds	r3, r7, #7
 8003480:	461a      	mov	r2, r3
 8003482:	2101      	movs	r1, #1
 8003484:	200c      	movs	r0, #12
 8003486:	f001 f8b5 	bl	80045f4 <RadioSpiReadRegisters>
 800348a:	4602      	mov	r2, r0
 800348c:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <SpiritRadioGetChannelSpace+0x38>)
 800348e:	b212      	sxth	r2, r2
 8003490:	4611      	mov	r1, r2
 8003492:	7019      	strb	r1, [r3, #0]
 8003494:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003498:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	461a      	mov	r2, r3
 800349e:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <SpiritRadioGetChannelSpace+0x3c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	0bdb      	lsrs	r3, r3, #15
  
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	20000260 	.word	0x20000260
 80034b4:	2000025c 	.word	0x2000025c

080034b8 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80034be:	1d3b      	adds	r3, r7, #4
 80034c0:	461a      	mov	r2, r3
 80034c2:	2102      	movs	r1, #2
 80034c4:	200e      	movs	r0, #14
 80034c6:	f001 f895 	bl	80045f4 <RadioSpiReadRegisters>
 80034ca:	4602      	mov	r2, r0
 80034cc:	4b19      	ldr	r3, [pc, #100]	@ (8003534 <SpiritRadioGetFrequencyOffset+0x7c>)
 80034ce:	b212      	sxth	r2, r2
 80034d0:	4611      	mov	r1, r2
 80034d2:	7019      	strb	r1, [r3, #0]
 80034d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034d8:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80034da:	793b      	ldrb	r3, [r7, #4]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	b29b      	uxth	r3, r3
 80034e0:	797a      	ldrb	r2, [r7, #5]
 80034e2:	4413      	add	r3, r2
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <SpiritRadioGetFrequencyOffset+0x4a>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80034f2:	887b      	ldrh	r3, [r7, #2]
 80034f4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80034f8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	807b      	strh	r3, [r7, #2]
 8003500:	e004      	b.n	800350c <SpiritRadioGetFrequencyOffset+0x54>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003508:	b29b      	uxth	r3, r3
 800350a:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 800350c:	1cbb      	adds	r3, r7, #2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8003512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003516:	4a08      	ldr	r2, [pc, #32]	@ (8003538 <SpiritRadioGetFrequencyOffset+0x80>)
 8003518:	6812      	ldr	r2, [r2, #0]
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	da03      	bge.n	800352a <SpiritRadioGetFrequencyOffset+0x72>
 8003522:	f503 337f 	add.w	r3, r3, #261120	@ 0x3fc00
 8003526:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800352a:	149b      	asrs	r3, r3, #18
  
}
 800352c:	4618      	mov	r0, r3
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000260 	.word	0x20000260
 8003538:	2000025c 	.word	0x2000025c

0800353c <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 800353c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003540:	b08a      	sub	sp, #40	@ 0x28
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a79      	ldr	r2, [pc, #484]	@ (8003734 <SpiritRadioSetFrequencyBase+0x1f8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d307      	bcc.n	8003564 <SpiritRadioSetFrequencyBase+0x28>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a78      	ldr	r2, [pc, #480]	@ (8003738 <SpiritRadioSetFrequencyBase+0x1fc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d803      	bhi.n	8003564 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003562:	e022      	b.n	80035aa <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a75      	ldr	r2, [pc, #468]	@ (800373c <SpiritRadioSetFrequencyBase+0x200>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d907      	bls.n	800357c <SpiritRadioSetFrequencyBase+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a74      	ldr	r2, [pc, #464]	@ (8003740 <SpiritRadioSetFrequencyBase+0x204>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d803      	bhi.n	800357c <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8003574:	2301      	movs	r3, #1
 8003576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800357a:	e016      	b.n	80035aa <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a71      	ldr	r2, [pc, #452]	@ (8003744 <SpiritRadioSetFrequencyBase+0x208>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d907      	bls.n	8003594 <SpiritRadioSetFrequencyBase+0x58>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a70      	ldr	r2, [pc, #448]	@ (8003748 <SpiritRadioSetFrequencyBase+0x20c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d803      	bhi.n	8003594 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 800358c:	2302      	movs	r3, #2
 800358e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003592:	e00a      	b.n	80035aa <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a6d      	ldr	r2, [pc, #436]	@ (800374c <SpiritRadioSetFrequencyBase+0x210>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d906      	bls.n	80035aa <SpiritRadioSetFrequencyBase+0x6e>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a6c      	ldr	r2, [pc, #432]	@ (8003750 <SpiritRadioSetFrequencyBase+0x214>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d802      	bhi.n	80035aa <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 80035a4:	2303      	movs	r3, #3
 80035a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 80035aa:	f7ff ff85 	bl	80034b8 <SpiritRadioGetFrequencyOffset>
 80035ae:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 80035b0:	f7ff ff62 	bl	8003478 <SpiritRadioGetChannelSpace>
 80035b4:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 80035b6:	f7ff ff47 	bl	8003448 <SpiritRadioGetChannel>
 80035ba:	4603      	mov	r3, r0
 80035bc:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 80035be:	6a3a      	ldr	r2, [r7, #32]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	441a      	add	r2, r3
 80035c4:	7efb      	ldrb	r3, [r7, #27]
 80035c6:	69f9      	ldr	r1, [r7, #28]
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	4413      	add	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 80035d0:	f000 fd60 	bl	8004094 <SpiritRadioGetRefDiv>
 80035d4:	4603      	mov	r3, r0
 80035d6:	3301      	adds	r3, #1
 80035d8:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 80035da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d839      	bhi.n	8003656 <SpiritRadioSetFrequencyBase+0x11a>
 80035e2:	a201      	add	r2, pc, #4	@ (adr r2, 80035e8 <SpiritRadioSetFrequencyBase+0xac>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	08003641 	.word	0x08003641
 80035ec:	08003629 	.word	0x08003629
 80035f0:	08003611 	.word	0x08003611
 80035f4:	080035f9 	.word	0x080035f9
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	4a56      	ldr	r2, [pc, #344]	@ (8003754 <SpiritRadioSetFrequencyBase+0x218>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d803      	bhi.n	8003608 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003600:	2000      	movs	r0, #0
 8003602:	f7fe fdb9 	bl	8002178 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003606:	e026      	b.n	8003656 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003608:	2001      	movs	r0, #1
 800360a:	f7fe fdb5 	bl	8002178 <SpiritCalibrationSelectVco>
    break;
 800360e:	e022      	b.n	8003656 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	4a51      	ldr	r2, [pc, #324]	@ (8003758 <SpiritRadioSetFrequencyBase+0x21c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d803      	bhi.n	8003620 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003618:	2000      	movs	r0, #0
 800361a:	f7fe fdad 	bl	8002178 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800361e:	e01a      	b.n	8003656 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003620:	2001      	movs	r0, #1
 8003622:	f7fe fda9 	bl	8002178 <SpiritCalibrationSelectVco>
    break;
 8003626:	e016      	b.n	8003656 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	4a4c      	ldr	r2, [pc, #304]	@ (800375c <SpiritRadioSetFrequencyBase+0x220>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d803      	bhi.n	8003638 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003630:	2000      	movs	r0, #0
 8003632:	f7fe fda1 	bl	8002178 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003636:	e00e      	b.n	8003656 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003638:	2001      	movs	r0, #1
 800363a:	f7fe fd9d 	bl	8002178 <SpiritCalibrationSelectVco>
    break;
 800363e:	e00a      	b.n	8003656 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4a47      	ldr	r2, [pc, #284]	@ (8003760 <SpiritRadioSetFrequencyBase+0x224>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d803      	bhi.n	8003650 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003648:	2000      	movs	r0, #0
 800364a:	f7fe fd95 	bl	8002178 <SpiritCalibrationSelectVco>
 800364e:	e002      	b.n	8003656 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8003650:	2001      	movs	r0, #1
 8003652:	f7fe fd91 	bl	8002178 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8003656:	6978      	ldr	r0, [r7, #20]
 8003658:	f7ff fe0e 	bl	8003278 <SpiritRadioSearchWCP>
 800365c:	4603      	mov	r3, r0
 800365e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8003660:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003664:	4a3f      	ldr	r2, [pc, #252]	@ (8003764 <SpiritRadioSetFrequencyBase+0x228>)
 8003666:	5cd3      	ldrb	r3, [r2, r3]
 8003668:	461a      	mov	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	fb02 f303 	mul.w	r3, r2, r3
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc ff3f 	bl	80004f4 <__aeabi_ui2d>
 8003676:	4604      	mov	r4, r0
 8003678:	460d      	mov	r5, r1
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	049b      	lsls	r3, r3, #18
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff48 	bl	8000514 <__aeabi_i2d>
 8003684:	4680      	mov	r8, r0
 8003686:	4689      	mov	r9, r1
 8003688:	4b37      	ldr	r3, [pc, #220]	@ (8003768 <SpiritRadioSetFrequencyBase+0x22c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc ff31 	bl	80004f4 <__aeabi_ui2d>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	4640      	mov	r0, r8
 8003698:	4649      	mov	r1, r9
 800369a:	f7fd f8cf 	bl	800083c <__aeabi_ddiv>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4620      	mov	r0, r4
 80036a4:	4629      	mov	r1, r5
 80036a6:	f7fc ff9f 	bl	80005e8 <__aeabi_dmul>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4610      	mov	r0, r2
 80036b0:	4619      	mov	r1, r3
 80036b2:	f7fd f9ab 	bl	8000a0c <__aeabi_d2uiz>
 80036b6:	4603      	mov	r3, r0
 80036b8:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	0d5b      	lsrs	r3, r3, #21
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	7cbb      	ldrb	r3, [r7, #18]
 80036c8:	015b      	lsls	r3, r3, #5
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	0b5b      	lsrs	r3, r3, #13
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036ee:	491f      	ldr	r1, [pc, #124]	@ (800376c <SpiritRadioSetFrequencyBase+0x230>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80036f8:	f107 0308 	add.w	r3, r7, #8
 80036fc:	461a      	mov	r2, r3
 80036fe:	2104      	movs	r1, #4
 8003700:	2008      	movs	r0, #8
 8003702:	f000 ff2b 	bl	800455c <RadioSpiWriteRegisters>
 8003706:	4602      	mov	r2, r0
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <SpiritRadioSetFrequencyBase+0x234>)
 800370a:	b212      	sxth	r2, r2
 800370c:	4611      	mov	r1, r2
 800370e:	7019      	strb	r1, [r3, #0]
 8003710:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003714:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8003716:	4b17      	ldr	r3, [pc, #92]	@ (8003774 <SpiritRadioSetFrequencyBase+0x238>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d103      	bne.n	8003726 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 800371e:	f7fe ff6f 	bl	8002600 <SpiritManagementWaVcoCalibration>
 8003722:	4603      	mov	r3, r0
 8003724:	e000      	b.n	8003728 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3728      	adds	r7, #40	@ 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003732:	bf00      	nop
 8003734:	2e5f5680 	.word	0x2e5f5680
 8003738:	390c2fe0 	.word	0x390c2fe0
 800373c:	1701e47f 	.word	0x1701e47f
 8003740:	1c146a60 	.word	0x1c146a60
 8003744:	11d260bf 	.word	0x11d260bf
 8003748:	14ced7e0 	.word	0x14ced7e0
 800374c:	08e18f3f 	.word	0x08e18f3f
 8003750:	0a6fd060 	.word	0x0a6fd060
 8003754:	099cf4e1 	.word	0x099cf4e1
 8003758:	1339e9c3 	.word	0x1339e9c3
 800375c:	19a28d05 	.word	0x19a28d05
 8003760:	33451a0a 	.word	0x33451a0a
 8003764:	0800aa70 	.word	0x0800aa70
 8003768:	2000025c 	.word	0x2000025c
 800376c:	0800aa74 	.word	0x0800aa74
 8003770:	20000260 	.word	0x20000260
 8003774:	20000005 	.word	0x20000005

08003778 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8003778:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8003780:	f7ff fe0e 	bl	80033a0 <SpiritRadioGetSynthWord>
 8003784:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8003786:	f7ff fe31 	bl	80033ec <SpiritRadioGetBand>
 800378a:	4603      	mov	r3, r0
 800378c:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 800378e:	f000 fc81 	bl	8004094 <SpiritRadioGetRefDiv>
 8003792:	4603      	mov	r3, r0
 8003794:	3301      	adds	r3, #1
 8003796:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fc feab 	bl	80004f4 <__aeabi_ui2d>
 800379e:	4604      	mov	r4, r0
 80037a0:	460d      	mov	r5, r1
 80037a2:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <SpiritRadioGetFrequencyBase+0x90>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc fea4 	bl	80004f4 <__aeabi_ui2d>
 80037ac:	4680      	mov	r8, r0
 80037ae:	4689      	mov	r9, r1
 80037b0:	78bb      	ldrb	r3, [r7, #2]
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	4915      	ldr	r1, [pc, #84]	@ (800380c <SpiritRadioGetFrequencyBase+0x94>)
 80037b6:	5c8a      	ldrb	r2, [r1, r2]
 80037b8:	fb02 f303 	mul.w	r3, r2, r3
 80037bc:	049b      	lsls	r3, r3, #18
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc fea8 	bl	8000514 <__aeabi_i2d>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4640      	mov	r0, r8
 80037ca:	4649      	mov	r1, r9
 80037cc:	f7fd f836 	bl	800083c <__aeabi_ddiv>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4620      	mov	r0, r4
 80037d6:	4629      	mov	r1, r5
 80037d8:	f7fc ff06 	bl	80005e8 <__aeabi_dmul>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	ec43 2b17 	vmov	d7, r2, r3
 80037e4:	eeb0 0a47 	vmov.f32	s0, s14
 80037e8:	eef0 0a67 	vmov.f32	s1, s15
 80037ec:	f007 f84a 	bl	800a884 <round>
 80037f0:	ec53 2b10 	vmov	r2, r3, d0
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	f7fd f908 	bl	8000a0c <__aeabi_d2uiz>
 80037fc:	4603      	mov	r3, r0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003808:	2000025c 	.word	0x2000025c
 800380c:	0800aa70 	.word	0x0800aa70

08003810 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 800381c:	2300      	movs	r3, #0
 800381e:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003820:	230f      	movs	r3, #15
 8003822:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8003828:	f000 fc86 	bl	8004138 <SpiritRadioGetDigDiv>
 800382c:	4603      	mov	r3, r0
 800382e:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003830:	e015      	b.n	800385e <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003832:	4b4f      	ldr	r3, [pc, #316]	@ (8003970 <SpiritRadioSearchDatarateME+0x160>)
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800383a:	f1c3 0114 	rsb	r1, r3, #20
 800383e:	7ebb      	ldrb	r3, [r7, #26]
 8003840:	440b      	add	r3, r1
 8003842:	fa22 f303 	lsr.w	r3, r2, r3
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	429a      	cmp	r2, r3
 800384a:	d302      	bcc.n	8003852 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 800384c:	2301      	movs	r3, #1
 800384e:	763b      	strb	r3, [r7, #24]
 8003850:	e005      	b.n	800385e <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8003852:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b2db      	uxtb	r3, r3
 800385c:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 800385e:	7e3b      	ldrb	r3, [r7, #24]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d103      	bne.n	800386e <SpiritRadioSearchDatarateME+0x5e>
 8003866:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800386a:	2b00      	cmp	r3, #0
 800386c:	dae1      	bge.n	8003832 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 800386e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003872:	2b00      	cmp	r3, #0
 8003874:	da01      	bge.n	800387a <SpiritRadioSearchDatarateME+0x6a>
 8003876:	2300      	movs	r3, #0
 8003878:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 800387a:	7ffa      	ldrb	r2, [r7, #31]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8003880:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003884:	f1c3 0317 	rsb	r3, r3, #23
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	409a      	lsls	r2, r3
 800388c:	4b38      	ldr	r3, [pc, #224]	@ (8003970 <SpiritRadioSearchDatarateME+0x160>)
 800388e:	6819      	ldr	r1, [r3, #0]
 8003890:	7ebb      	ldrb	r3, [r7, #26]
 8003892:	3305      	adds	r3, #5
 8003894:	fa21 f303 	lsr.w	r3, r1, r3
 8003898:	fbb2 f3f3 	udiv	r3, r2, r3
 800389c:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 800389e:	2300      	movs	r3, #0
 80038a0:	77bb      	strb	r3, [r7, #30]
 80038a2:	e031      	b.n	8003908 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 80038a4:	7e7a      	ldrb	r2, [r7, #25]
 80038a6:	7fbb      	ldrb	r3, [r7, #30]
 80038a8:	4413      	add	r3, r2
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d021      	beq.n	80038f2 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	7e7b      	ldrb	r3, [r7, #25]
 80038b4:	f503 7180 	add.w	r1, r3, #256	@ 0x100
 80038b8:	7fbb      	ldrb	r3, [r7, #30]
 80038ba:	440b      	add	r3, r1
 80038bc:	3b01      	subs	r3, #1
 80038be:	4618      	mov	r0, r3
 80038c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003970 <SpiritRadioSearchDatarateME+0x160>)
 80038c2:	6819      	ldr	r1, [r3, #0]
 80038c4:	7ebb      	ldrb	r3, [r7, #26]
 80038c6:	3305      	adds	r3, #5
 80038c8:	fa21 f303 	lsr.w	r3, r1, r3
 80038cc:	fb03 f100 	mul.w	r1, r3, r0
 80038d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038d4:	f1c3 0317 	rsb	r3, r3, #23
 80038d8:	fa21 f303 	lsr.w	r3, r1, r3
 80038dc:	b29b      	uxth	r3, r3
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	7fbb      	ldrb	r3, [r7, #30]
 80038e4:	b212      	sxth	r2, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	3320      	adds	r3, #32
 80038ea:	443b      	add	r3, r7
 80038ec:	f823 2c10 	strh.w	r2, [r3, #-16]
 80038f0:	e007      	b.n	8003902 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 80038f2:	7fbb      	ldrb	r3, [r7, #30]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	3320      	adds	r3, #32
 80038f8:	443b      	add	r3, r7
 80038fa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80038fe:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 8003902:	7fbb      	ldrb	r3, [r7, #30]
 8003904:	3301      	adds	r3, #1
 8003906:	77bb      	strb	r3, [r7, #30]
 8003908:	7fbb      	ldrb	r3, [r7, #30]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d9ca      	bls.n	80038a4 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 800390e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003912:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003914:	2300      	movs	r3, #0
 8003916:	76fb      	strb	r3, [r7, #27]
 8003918:	e021      	b.n	800395e <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 800391a:	7efb      	ldrb	r3, [r7, #27]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	3320      	adds	r3, #32
 8003920:	443b      	add	r3, r7
 8003922:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfb8      	it	lt
 800392a:	425b      	neglt	r3, r3
 800392c:	b29b      	uxth	r3, r3
 800392e:	8bba      	ldrh	r2, [r7, #28]
 8003930:	429a      	cmp	r2, r3
 8003932:	d911      	bls.n	8003958 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003934:	7efb      	ldrb	r3, [r7, #27]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	3320      	adds	r3, #32
 800393a:	443b      	add	r3, r7
 800393c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	bfb8      	it	lt
 8003944:	425b      	neglt	r3, r3
 8003946:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8003948:	7e7a      	ldrb	r2, [r7, #25]
 800394a:	7efb      	ldrb	r3, [r7, #27]
 800394c:	4413      	add	r3, r2
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b2da      	uxtb	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8003958:	7efb      	ldrb	r3, [r7, #27]
 800395a:	3301      	adds	r3, #1
 800395c:	76fb      	strb	r3, [r7, #27]
 800395e:	7efb      	ldrb	r3, [r7, #27]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d9da      	bls.n	800391a <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	2000025c 	.word	0x2000025c

08003974 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	@ 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8003986:	f000 fbd7 	bl	8004138 <SpiritRadioGetDigDiv>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003990:	2302      	movs	r3, #2
 8003992:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003996:	e002      	b.n	800399e <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 800399e:	4b63      	ldr	r3, [pc, #396]	@ (8003b2c <SpiritRadioSearchChannelBwME+0x1b8>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80039a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039aa:	4a61      	ldr	r2, [pc, #388]	@ (8003b30 <SpiritRadioSearchChannelBwME+0x1bc>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80039ba:	e006      	b.n	80039ca <SpiritRadioSearchChannelBwME+0x56>
 80039bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80039ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80039ce:	2b59      	cmp	r3, #89	@ 0x59
 80039d0:	dc0f      	bgt.n	80039f2 <SpiritRadioSearchChannelBwME+0x7e>
 80039d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80039d6:	4a57      	ldr	r2, [pc, #348]	@ (8003b34 <SpiritRadioSearchChannelBwME+0x1c0>)
 80039d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039dc:	461a      	mov	r2, r3
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	fb02 f303 	mul.w	r3, r2, r3
 80039e4:	4a54      	ldr	r2, [pc, #336]	@ (8003b38 <SpiritRadioSearchChannelBwME+0x1c4>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	0adb      	lsrs	r3, r3, #11
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d3e4      	bcc.n	80039bc <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 80039f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d077      	beq.n	8003aea <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 80039fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039fe:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003a00:	2300      	movs	r3, #0
 8003a02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003a06:	e03a      	b.n	8003a7e <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003a08:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003a0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a10:	4413      	add	r3, r2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	dc06      	bgt.n	8003a24 <SpiritRadioSearchChannelBwME+0xb0>
 8003a16:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003a1a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a1e:	4413      	add	r3, r2
 8003a20:	2b5a      	cmp	r3, #90	@ 0x5a
 8003a22:	dc1e      	bgt.n	8003a62 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003a2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a30:	440b      	add	r3, r1
 8003a32:	3b01      	subs	r3, #1
 8003a34:	493f      	ldr	r1, [pc, #252]	@ (8003b34 <SpiritRadioSearchChannelBwME+0x1c0>)
 8003a36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	493d      	ldr	r1, [pc, #244]	@ (8003b38 <SpiritRadioSearchChannelBwME+0x1c4>)
 8003a44:	fba1 1303 	umull	r1, r3, r1, r3
 8003a48:	0adb      	lsrs	r3, r3, #11
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a54:	b212      	sxth	r2, r2
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	3328      	adds	r3, #40	@ 0x28
 8003a5a:	443b      	add	r3, r7
 8003a5c:	f823 2c14 	strh.w	r2, [r3, #-20]
 8003a60:	e008      	b.n	8003a74 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8003a62:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	3328      	adds	r3, #40	@ 0x28
 8003a6a:	443b      	add	r3, r7
 8003a6c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003a70:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8003a74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a78:	3301      	adds	r3, #1
 8003a7a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003a7e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d9c0      	bls.n	8003a08 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8003a86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a8a:	847b      	strh	r3, [r7, #34]	@ 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8003a92:	e026      	b.n	8003ae2 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8003a94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	3328      	adds	r3, #40	@ 0x28
 8003a9c:	443b      	add	r3, r7
 8003a9e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bfb8      	it	lt
 8003aa6:	425b      	neglt	r3, r3
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d913      	bls.n	8003ad8 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003ab0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	3328      	adds	r3, #40	@ 0x28
 8003ab8:	443b      	add	r3, r7
 8003aba:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	bfb8      	it	lt
 8003ac2:	425b      	neglt	r3, r3
 8003ac4:	847b      	strh	r3, [r7, #34]	@ 0x22
        i=i_tmp+j-1;
 8003ac6:	7efa      	ldrb	r2, [r7, #27]
 8003ac8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003acc:	4413      	add	r3, r2
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    for(uint8_t j=0;j<3;j++)
 8003ad8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003adc:	3301      	adds	r3, #1
 8003ade:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8003ae2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d9d4      	bls.n	8003a94 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003aea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003aee:	4a13      	ldr	r2, [pc, #76]	@ (8003b3c <SpiritRadioSearchChannelBwME+0x1c8>)
 8003af0:	fb82 1203 	smull	r1, r2, r2, r3
 8003af4:	1052      	asrs	r2, r2, #1
 8003af6:	17db      	asrs	r3, r3, #31
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	b25b      	sxtb	r3, r3
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003b02:	f997 2027 	ldrsb.w	r2, [r7, #39]	@ 0x27
 8003b06:	4b0d      	ldr	r3, [pc, #52]	@ (8003b3c <SpiritRadioSearchChannelBwME+0x1c8>)
 8003b08:	fb83 1302 	smull	r1, r3, r3, r2
 8003b0c:	1059      	asrs	r1, r3, #1
 8003b0e:	17d3      	asrs	r3, r2, #31
 8003b10:	1ac9      	subs	r1, r1, r3
 8003b12:	460b      	mov	r3, r1
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	440b      	add	r3, r1
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	701a      	strb	r2, [r3, #0]
  
}
 8003b22:	bf00      	nop
 8003b24:	3728      	adds	r7, #40	@ 0x28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	2000025c 	.word	0x2000025c
 8003b30:	51eb851f 	.word	0x51eb851f
 8003b34:	0800aa78 	.word	0x0800aa78
 8003b38:	c9a633fd 	.word	0xc9a633fd
 8003b3c:	38e38e39 	.word	0x38e38e39

08003b40 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003b40:	b5b0      	push	{r4, r5, r7, lr}
 8003b42:	b08a      	sub	sp, #40	@ 0x28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003b50:	4b53      	ldr	r3, [pc, #332]	@ (8003ca0 <SpiritRadioSearchFreqDevME+0x160>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	ee07 3a90 	vmov	s15, r3
 8003b58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b5c:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8003ca4 <SpiritRadioSearchFreqDevME+0x164>
 8003b60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b64:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003b6e:	e028      	b.n	8003bc2 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b74:	2201      	movs	r2, #1
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fc fcca 	bl	8000514 <__aeabi_i2d>
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	4b48      	ldr	r3, [pc, #288]	@ (8003ca8 <SpiritRadioSearchFreqDevME+0x168>)
 8003b86:	f7fc fd2f 	bl	80005e8 <__aeabi_dmul>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4610      	mov	r0, r2
 8003b90:	4619      	mov	r1, r3
 8003b92:	f7fc ff3b 	bl	8000a0c <__aeabi_d2uiz>
 8003b96:	ee07 0a90 	vmov	s15, r0
 8003b9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 3a90 	vmov	r3, s15
 8003bae:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d309      	bcc.n	8003bcc <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bc6:	2b09      	cmp	r3, #9
 8003bc8:	d9d2      	bls.n	8003b70 <SpiritRadioSearchFreqDevME+0x30>
 8003bca:	e000      	b.n	8003bce <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003bcc:	bf00      	nop
  }
  (*pcE) = i;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003bd4:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003bdc:	e043      	b.n	8003c66 <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 8003be2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fc fc94 	bl	8000514 <__aeabi_i2d>
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	@ (8003cac <SpiritRadioSearchFreqDevME+0x16c>)
 8003bf2:	f7fc fb43 	bl	800027c <__adddf3>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003c06:	f7fc fe19 	bl	800083c <__aeabi_ddiv>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4614      	mov	r4, r2
 8003c10:	461d      	mov	r5, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	2301      	movs	r3, #1
 8003c1a:	4093      	lsls	r3, r2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fc fc79 	bl	8000514 <__aeabi_i2d>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4620      	mov	r0, r4
 8003c28:	4629      	mov	r1, r5
 8003c2a:	f7fc fcdd 	bl	80005e8 <__aeabi_dmul>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7fc fee9 	bl	8000a0c <__aeabi_d2uiz>
 8003c3a:	ee07 0a90 	vmov	s15, r0
 8003c3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4e:	ee17 3a90 	vmov	r3, s15
 8003c52:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d309      	bcc.n	8003c70 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 8003c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c60:	3301      	adds	r3, #1
 8003c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003c66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c6a:	2b07      	cmp	r3, #7
 8003c6c:	d9b7      	bls.n	8003bde <SpiritRadioSearchFreqDevME+0x9e>
 8003c6e:	e000      	b.n	8003c72 <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003c70:	bf00      	nop
  }
  
  (*pcM)=i;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003c78:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	1ad2      	subs	r2, r2, r3
 8003c80:	69f9      	ldr	r1, [r7, #28]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1acb      	subs	r3, r1, r3
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d205      	bcs.n	8003c96 <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	701a      	strb	r2, [r3, #0]
  
}
 8003c96:	bf00      	nop
 8003c98:	3728      	adds	r7, #40	@ 0x28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	2000025c 	.word	0x2000025c
 8003ca4:	48800000 	.word	0x48800000
 8003ca8:	401e0000 	.word	0x401e0000
 8003cac:	40200000 	.word	0x40200000

08003cb0 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a74      	ldr	r2, [pc, #464]	@ (8003e98 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d30c      	bcc.n	8003ce6 <SpiritRadioGetdBm2Reg+0x36>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a73      	ldr	r2, [pc, #460]	@ (8003e9c <SpiritRadioGetdBm2Reg+0x1ec>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d808      	bhi.n	8003ce6 <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a71      	ldr	r2, [pc, #452]	@ (8003ea0 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d822      	bhi.n	8003d26 <SpiritRadioGetdBm2Reg+0x76>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	75fb      	strb	r3, [r7, #23]
 8003ce4:	e01f      	b.n	8003d26 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4a6e      	ldr	r2, [pc, #440]	@ (8003ea4 <SpiritRadioGetdBm2Reg+0x1f4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d906      	bls.n	8003cfc <SpiritRadioGetdBm2Reg+0x4c>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a6d      	ldr	r2, [pc, #436]	@ (8003ea8 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d802      	bhi.n	8003cfc <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	75fb      	strb	r3, [r7, #23]
 8003cfa:	e014      	b.n	8003d26 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a6b      	ldr	r2, [pc, #428]	@ (8003eac <SpiritRadioGetdBm2Reg+0x1fc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d906      	bls.n	8003d12 <SpiritRadioGetdBm2Reg+0x62>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a6a      	ldr	r2, [pc, #424]	@ (8003eb0 <SpiritRadioGetdBm2Reg+0x200>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d802      	bhi.n	8003d12 <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	75fb      	strb	r3, [r7, #23]
 8003d10:	e009      	b.n	8003d26 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a67      	ldr	r2, [pc, #412]	@ (8003eb4 <SpiritRadioGetdBm2Reg+0x204>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d905      	bls.n	8003d26 <SpiritRadioGetdBm2Reg+0x76>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4a66      	ldr	r2, [pc, #408]	@ (8003eb8 <SpiritRadioGetdBm2Reg+0x208>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d801      	bhi.n	8003d26 <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8003d22:	2304      	movs	r3, #4
 8003d24:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003d2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d36:	dd2f      	ble.n	8003d98 <SpiritRadioGetdBm2Reg+0xe8>
 8003d38:	7dfa      	ldrb	r2, [r7, #23]
 8003d3a:	4960      	ldr	r1, [pc, #384]	@ (8003ebc <SpiritRadioGetdBm2Reg+0x20c>)
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	3308      	adds	r3, #8
 8003d48:	edd3 7a00 	vldr	s15, [r3]
 8003d4c:	eef2 6a0a 	vmov.f32	s13, #42	@ 0x41500000  13.0
 8003d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d54:	7dfa      	ldrb	r2, [r7, #23]
 8003d56:	4959      	ldr	r1, [pc, #356]	@ (8003ebc <SpiritRadioGetdBm2Reg+0x20c>)
 8003d58:	4613      	mov	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4413      	add	r3, r2
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	440b      	add	r3, r1
 8003d62:	330c      	adds	r3, #12
 8003d64:	ed93 6a00 	vldr	s12, [r3]
 8003d68:	7dfa      	ldrb	r2, [r7, #23]
 8003d6a:	4954      	ldr	r1, [pc, #336]	@ (8003ebc <SpiritRadioGetdBm2Reg+0x20c>)
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4413      	add	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	440b      	add	r3, r1
 8003d76:	3308      	adds	r3, #8
 8003d78:	edd3 6a00 	vldr	s13, [r3]
 8003d7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d84:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d90:	dd02      	ble.n	8003d98 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75bb      	strb	r3, [r7, #22]
 8003d96:	e035      	b.n	8003e04 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003d98:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	d82e      	bhi.n	8003e04 <SpiritRadioGetdBm2Reg+0x154>
 8003da6:	7dfa      	ldrb	r2, [r7, #23]
 8003da8:	4944      	ldr	r1, [pc, #272]	@ (8003ebc <SpiritRadioGetdBm2Reg+0x20c>)
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	3308      	adds	r3, #8
 8003db6:	edd3 7a00 	vldr	s15, [r3]
 8003dba:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8003ec0 <SpiritRadioGetdBm2Reg+0x210>
 8003dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc2:	7dfa      	ldrb	r2, [r7, #23]
 8003dc4:	493d      	ldr	r1, [pc, #244]	@ (8003ebc <SpiritRadioGetdBm2Reg+0x20c>)
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	440b      	add	r3, r1
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	ed93 6a00 	vldr	s12, [r3]
 8003dd6:	7dfa      	ldrb	r2, [r7, #23]
 8003dd8:	4938      	ldr	r1, [pc, #224]	@ (8003ebc <SpiritRadioGetdBm2Reg+0x20c>)
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	440b      	add	r3, r1
 8003de4:	3308      	adds	r3, #8
 8003de6:	edd3 6a00 	vldr	s13, [r3]
 8003dea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003df6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	d501      	bpl.n	8003e04 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003e00:	2302      	movs	r3, #2
 8003e02:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003e04:	7dfa      	ldrb	r2, [r7, #23]
 8003e06:	7dbb      	ldrb	r3, [r7, #22]
 8003e08:	0059      	lsls	r1, r3, #1
 8003e0a:	482c      	ldr	r0, [pc, #176]	@ (8003ebc <SpiritRadioGetdBm2Reg+0x20c>)
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4413      	add	r3, r2
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	440b      	add	r3, r1
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4403      	add	r3, r0
 8003e1a:	ed93 7a00 	vldr	s14, [r3]
 8003e1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e26:	7dfa      	ldrb	r2, [r7, #23]
 8003e28:	7dbb      	ldrb	r3, [r7, #22]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	1c59      	adds	r1, r3, #1
 8003e2e:	4823      	ldr	r0, [pc, #140]	@ (8003ebc <SpiritRadioGetdBm2Reg+0x20c>)
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	440b      	add	r3, r1
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4403      	add	r3, r0
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e46:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 8003e4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5a:	d503      	bpl.n	8003e64 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 8003e5c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	e00a      	b.n	8003e7a <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003e64:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e68:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003ec4 <SpiritRadioGetdBm2Reg+0x214>
 8003e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e74:	dd01      	ble.n	8003e7a <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003e76:	4b14      	ldr	r3, [pc, #80]	@ (8003ec8 <SpiritRadioGetdBm2Reg+0x218>)
 8003e78:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 8003e7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e82:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e86:	793b      	ldrb	r3, [r7, #4]
 8003e88:	b2db      	uxtb	r3, r3
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2e5f5680 	.word	0x2e5f5680
 8003e9c:	390c2fe0 	.word	0x390c2fe0
 8003ea0:	35a4e8ff 	.word	0x35a4e8ff
 8003ea4:	1701e47f 	.word	0x1701e47f
 8003ea8:	1c146a60 	.word	0x1c146a60
 8003eac:	11d260bf 	.word	0x11d260bf
 8003eb0:	14ced7e0 	.word	0x14ced7e0
 8003eb4:	08e18f3f 	.word	0x08e18f3f
 8003eb8:	0a6fd060 	.word	0x0a6fd060
 8003ebc:	0800ab4c 	.word	0x0800ab4c
 8003ec0:	42200000 	.word	0x42200000
 8003ec4:	42b40000 	.word	0x42b40000
 8003ec8:	42b40000 	.word	0x42b40000

08003ecc <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	ed87 0a00 	vstr	s0, [r7]
 8003ed8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003eda:	f7ff fc4d 	bl	8003778 <SpiritRadioGetFrequencyBase>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	ed97 0a00 	vldr	s0, [r7]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff fee3 	bl	8003cb0 <SpiritRadioGetdBm2Reg>
 8003eea:	4603      	mov	r3, r0
 8003eec:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	f1c3 0317 	rsb	r3, r3, #23
 8003ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003ef6:	f107 020e 	add.w	r2, r7, #14
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fb2c 	bl	800455c <RadioSpiWriteRegisters>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <SpiritRadioSetPALeveldBm+0x50>)
 8003f08:	b212      	sxth	r2, r2
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	7019      	strb	r1, [r3, #0]
 8003f0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f12:	705a      	strb	r2, [r3, #1]
  
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000260 	.word	0x20000260

08003f20 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003f2a:	f107 030f 	add.w	r3, r7, #15
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2101      	movs	r1, #1
 8003f32:	2018      	movs	r0, #24
 8003f34:	f000 fb5e 	bl	80045f4 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003f42:	7bfa      	ldrb	r2, [r7, #15]
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003f4c:	f107 030f 	add.w	r3, r7, #15
 8003f50:	461a      	mov	r2, r3
 8003f52:	2101      	movs	r1, #1
 8003f54:	2018      	movs	r0, #24
 8003f56:	f000 fb01 	bl	800455c <RadioSpiWriteRegisters>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <SpiritRadioSetPACwc+0x54>)
 8003f5e:	b212      	sxth	r2, r2
 8003f60:	4611      	mov	r1, r2
 8003f62:	7019      	strb	r1, [r3, #0]
 8003f64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003f68:	705a      	strb	r2, [r3, #1]
  
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000260 	.word	0x20000260

08003f78 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	4603      	mov	r3, r0
 8003f80:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003f82:	f107 030f 	add.w	r3, r7, #15
 8003f86:	461a      	mov	r2, r3
 8003f88:	2101      	movs	r1, #1
 8003f8a:	2018      	movs	r0, #24
 8003f8c:	f000 fb32 	bl	80045f4 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	f023 0307 	bic.w	r3, r3, #7
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003f9a:	7bfa      	ldrb	r2, [r7, #15]
 8003f9c:	79fb      	ldrb	r3, [r7, #7]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003fa4:	f107 030f 	add.w	r3, r7, #15
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2101      	movs	r1, #1
 8003fac:	2018      	movs	r0, #24
 8003fae:	f000 fad5 	bl	800455c <RadioSpiWriteRegisters>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	4b05      	ldr	r3, [pc, #20]	@ (8003fcc <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003fb6:	b212      	sxth	r2, r2
 8003fb8:	4611      	mov	r1, r2
 8003fba:	7019      	strb	r1, [r3, #0]
 8003fbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003fc0:	705a      	strb	r2, [r3, #1]
  
}
 8003fc2:	bf00      	nop
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000260 	.word	0x20000260

08003fd0 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003fde:	f107 030f 	add.w	r3, r7, #15
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	201e      	movs	r0, #30
 8003fe8:	f000 fb04 	bl	80045f4 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d105      	bne.n	8003ffe <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e004      	b.n	8004008 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004004:	b2db      	uxtb	r3, r3
 8004006:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8004008:	f107 030f 	add.w	r3, r7, #15
 800400c:	461a      	mov	r2, r3
 800400e:	2101      	movs	r1, #1
 8004010:	201e      	movs	r0, #30
 8004012:	f000 faa3 	bl	800455c <RadioSpiWriteRegisters>
 8004016:	4602      	mov	r2, r0
 8004018:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <SpiritRadioAFCFreezeOnSync+0x60>)
 800401a:	b212      	sxth	r2, r2
 800401c:	4611      	mov	r1, r2
 800401e:	7019      	strb	r1, [r3, #0]
 8004020:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004024:	705a      	strb	r2, [r3, #1]
  
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000260 	.word	0x20000260

08004034 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	4603      	mov	r3, r0
 800403c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800403e:	f107 030f 	add.w	r3, r7, #15
 8004042:	461a      	mov	r2, r3
 8004044:	2101      	movs	r1, #1
 8004046:	209e      	movs	r0, #158	@ 0x9e
 8004048:	f000 fad4 	bl	80045f4 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d105      	bne.n	800405e <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004058:	b2db      	uxtb	r3, r3
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e004      	b.n	8004068 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004064:	b2db      	uxtb	r3, r3
 8004066:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8004068:	f107 030f 	add.w	r3, r7, #15
 800406c:	461a      	mov	r2, r3
 800406e:	2101      	movs	r1, #1
 8004070:	209e      	movs	r0, #158	@ 0x9e
 8004072:	f000 fa73 	bl	800455c <RadioSpiWriteRegisters>
 8004076:	4602      	mov	r2, r0
 8004078:	4b05      	ldr	r3, [pc, #20]	@ (8004090 <SpiritRadioSetRefDiv+0x5c>)
 800407a:	b212      	sxth	r2, r2
 800407c:	4611      	mov	r1, r2
 800407e:	7019      	strb	r1, [r3, #0]
 8004080:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004084:	705a      	strb	r2, [r3, #1]
  
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20000260 	.word	0x20000260

08004094 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800409a:	1dfb      	adds	r3, r7, #7
 800409c:	461a      	mov	r2, r3
 800409e:	2101      	movs	r1, #1
 80040a0:	209e      	movs	r0, #158	@ 0x9e
 80040a2:	f000 faa7 	bl	80045f4 <RadioSpiReadRegisters>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <SpiritRadioGetRefDiv+0x40>)
 80040aa:	b212      	sxth	r2, r2
 80040ac:	4611      	mov	r1, r2
 80040ae:	7019      	strb	r1, [r3, #0]
 80040b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80040b4:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	09db      	lsrs	r3, r3, #7
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 80040c8:	2300      	movs	r3, #0
  }
  
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000260 	.word	0x20000260

080040d8 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80040e2:	f107 030f 	add.w	r3, r7, #15
 80040e6:	461a      	mov	r2, r3
 80040e8:	2101      	movs	r1, #1
 80040ea:	20b4      	movs	r0, #180	@ 0xb4
 80040ec:	f000 fa82 	bl	80045f4 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	f023 0308 	bic.w	r3, r3, #8
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	e004      	b.n	800410c <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	f043 0308 	orr.w	r3, r3, #8
 8004108:	b2db      	uxtb	r3, r3
 800410a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800410c:	f107 030f 	add.w	r3, r7, #15
 8004110:	461a      	mov	r2, r3
 8004112:	2101      	movs	r1, #1
 8004114:	20b4      	movs	r0, #180	@ 0xb4
 8004116:	f000 fa21 	bl	800455c <RadioSpiWriteRegisters>
 800411a:	4602      	mov	r2, r0
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <SpiritRadioSetDigDiv+0x5c>)
 800411e:	b212      	sxth	r2, r2
 8004120:	4611      	mov	r1, r2
 8004122:	7019      	strb	r1, [r3, #0]
 8004124:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004128:	705a      	strb	r2, [r3, #1]
  
}
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000260 	.word	0x20000260

08004138 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800413e:	1dfb      	adds	r3, r7, #7
 8004140:	461a      	mov	r2, r3
 8004142:	2101      	movs	r1, #1
 8004144:	20b4      	movs	r0, #180	@ 0xb4
 8004146:	f000 fa55 	bl	80045f4 <RadioSpiReadRegisters>
 800414a:	4602      	mov	r2, r0
 800414c:	4b0a      	ldr	r3, [pc, #40]	@ (8004178 <SpiritRadioGetDigDiv+0x40>)
 800414e:	b212      	sxth	r2, r2
 8004150:	4611      	mov	r1, r2
 8004152:	7019      	strb	r1, [r3, #0]
 8004154:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004158:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	08db      	lsrs	r3, r3, #3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8004168:	2300      	movs	r3, #0
 800416a:	e000      	b.n	800416e <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 800416c:	2301      	movs	r3, #1
  }
  
}
 800416e:	4618      	mov	r0, r3
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000260 	.word	0x20000260

0800417c <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8004180:	4b03      	ldr	r3, [pc, #12]	@ (8004190 <SpiritRadioGetXtalFrequency+0x14>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	2000025c 	.word	0x2000025c

08004194 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 800419c:	4a04      	ldr	r2, [pc, #16]	@ (80041b0 <SpiritRadioSetXtalFrequency+0x1c>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6013      	str	r3, [r2, #0]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	2000025c 	.word	0x2000025c

080041b4 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 80041be:	f107 020c 	add.w	r2, r7, #12
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	3301      	adds	r3, #1
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	ed97 0a01 	vldr	s0, [r7, #4]
 80041d0:	f000 f816 	bl	8004200 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 80041d4:	f107 030c 	add.w	r3, r7, #12
 80041d8:	461a      	mov	r2, r3
 80041da:	2102      	movs	r1, #2
 80041dc:	2053      	movs	r0, #83	@ 0x53
 80041de:	f000 f9bd 	bl	800455c <RadioSpiWriteRegisters>
 80041e2:	4602      	mov	r2, r0
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <SpiritTimerSetRxTimeoutMs+0x48>)
 80041e6:	b212      	sxth	r2, r2
 80041e8:	4611      	mov	r1, r2
 80041ea:	7019      	strb	r1, [r3, #0]
 80041ec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80041f0:	705a      	strb	r2, [r3, #1]

}
 80041f2:	bf00      	nop
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000260 	.word	0x20000260

08004200 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	ed87 0a03 	vstr	s0, [r7, #12]
 800420a:	60b8      	str	r0, [r7, #8]
 800420c:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 800420e:	f7ff ffb5 	bl	800417c <SpiritRadioGetXtalFrequency>
 8004212:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4a91      	ldr	r2, [pc, #580]	@ (800445c <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d902      	bls.n	8004222 <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	085b      	lsrs	r3, r3, #1
 8004220:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800422c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004230:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004234:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8004460 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800423c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004240:	ee17 3a90 	vmov	r3, s15
 8004244:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f64f 5201 	movw	r2, #64769	@ 0xfd01
 800424c:	4293      	cmp	r3, r2
 800424e:	d906      	bls.n	800425e <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	22ff      	movs	r2, #255	@ 0xff
 8004254:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	22ff      	movs	r2, #255	@ 0xff
 800425a:	701a      	strb	r2, [r3, #0]
    return;
 800425c:	e0fa      	b.n	8004454 <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	4a80      	ldr	r2, [pc, #512]	@ (8004464 <SpiritTimerComputeRxTimeoutValues+0x264>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	09db      	lsrs	r3, r3, #7
 8004268:	b2db      	uxtb	r3, r3
 800426a:	3302      	adds	r3, #2
 800426c:	b2da      	uxtb	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fbb3 f3f2 	udiv	r3, r3, r2
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	ee07 3a90 	vmov	s15, r3
 8004298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800429c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8004460 <SpiritTimerComputeRxTimeoutValues+0x260>
 80042a4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80042ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	dd1d      	ble.n	8004304 <SpiritTimerComputeRxTimeoutValues+0x104>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	ee07 3a90 	vmov	s15, r3
 80042d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	ee07 3a90 	vmov	s15, r3
 80042dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e4:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8004460 <SpiritTimerComputeRxTimeoutValues+0x260>
 80042e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	ee07 3a90 	vmov	s15, r3
 80042f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80042fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004302:	e01e      	b.n	8004342 <SpiritTimerComputeRxTimeoutValues+0x142>
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	ee07 3a90 	vmov	s15, r3
 8004318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004320:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8004460 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004324:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004336:	edd7 7a03 	vldr	s15, [r7, #12]
 800433a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800433e:	eef1 7a67 	vneg.f32	s15, s15
 8004342:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2bff      	cmp	r3, #255	@ 0xff
 800434c:	d06e      	beq.n	800442c <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436c:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8004460 <SpiritTimerComputeRxTimeoutValues+0x260>
 8004370:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	ee07 3a90 	vmov	s15, r3
 800437a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004382:	edd7 7a03 	vldr	s15, [r7, #12]
 8004386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800438a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	dd1e      	ble.n	80043d2 <SpiritTimerComputeRxTimeoutValues+0x1d2>
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	ee07 3a90 	vmov	s15, r3
 800439e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8004460 <SpiritTimerComputeRxTimeoutValues+0x260>
 80043b6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80043cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043d0:	e01f      	b.n	8004412 <SpiritTimerComputeRxTimeoutValues+0x212>
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	ee07 3a90 	vmov	s15, r3
 80043dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043f0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004460 <SpiritTimerComputeRxTimeoutValues+0x260>
 80043f4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004406:	edd7 7a03 	vldr	s15, [r7, #12]
 800440a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800440e:	eef1 7a67 	vneg.f32	s15, s15
 8004412:	ed97 7a05 	vldr	s14, [r7, #20]
 8004416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	d505      	bpl.n	800442c <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	3301      	adds	r3, #1
 8004426:	b2da      	uxtb	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	3b01      	subs	r3, #1
 8004432:	b2da      	uxtb	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d906      	bls.n	800444e <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	3b01      	subs	r3, #1
 8004446:	b2da      	uxtb	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e002      	b.n	8004454 <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
}
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	01c9c380 	.word	0x01c9c380
 8004460:	4993b480 	.word	0x4993b480
 8004464:	80808081 	.word	0x80808081

08004468 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004472:	f107 030c 	add.w	r3, r7, #12
 8004476:	461a      	mov	r2, r3
 8004478:	2102      	movs	r1, #2
 800447a:	204f      	movs	r0, #79	@ 0x4f
 800447c:	f000 f8ba 	bl	80045f4 <RadioSpiReadRegisters>
 8004480:	4602      	mov	r2, r0
 8004482:	4b1c      	ldr	r3, [pc, #112]	@ (80044f4 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004484:	b212      	sxth	r2, r2
 8004486:	4611      	mov	r1, r2
 8004488:	7019      	strb	r1, [r3, #0]
 800448a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800448e:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004490:	7b3b      	ldrb	r3, [r7, #12]
 8004492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004496:	b2db      	uxtb	r3, r3
 8004498:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 800449a:	7b3b      	ldrb	r3, [r7, #12]
 800449c:	b25a      	sxtb	r2, r3
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	b25b      	sxtb	r3, r3
 80044a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b25b      	sxtb	r3, r3
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 80044b2:	7b7b      	ldrb	r3, [r7, #13]
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 80044bc:	7b7b      	ldrb	r3, [r7, #13]
 80044be:	b25a      	sxtb	r2, r3
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	015b      	lsls	r3, r3, #5
 80044c4:	b25b      	sxtb	r3, r3
 80044c6:	4313      	orrs	r3, r2
 80044c8:	b25b      	sxtb	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80044ce:	f107 030c 	add.w	r3, r7, #12
 80044d2:	461a      	mov	r2, r3
 80044d4:	2102      	movs	r1, #2
 80044d6:	204f      	movs	r0, #79	@ 0x4f
 80044d8:	f000 f840 	bl	800455c <RadioSpiWriteRegisters>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 80044e0:	b212      	sxth	r2, r2
 80044e2:	4611      	mov	r1, r2
 80044e4:	7019      	strb	r1, [r3, #0]
 80044e6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80044ea:	705a      	strb	r2, [r3, #1]

}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	20000260 	.word	0x20000260

080044f8 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 80044fe:	1d3b      	adds	r3, r7, #4
 8004500:	461a      	mov	r2, r3
 8004502:	2102      	movs	r1, #2
 8004504:	20c0      	movs	r0, #192	@ 0xc0
 8004506:	f000 f875 	bl	80045f4 <RadioSpiReadRegisters>
 800450a:	4603      	mov	r3, r0
 800450c:	4a09      	ldr	r2, [pc, #36]	@ (8004534 <SpiritRefreshStatus+0x3c>)
 800450e:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004510:	4b08      	ldr	r3, [pc, #32]	@ (8004534 <SpiritRefreshStatus+0x3c>)
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	797b      	ldrb	r3, [r7, #5]
 8004516:	429a      	cmp	r2, r3
 8004518:	d1f1      	bne.n	80044fe <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 800451a:	4b07      	ldr	r3, [pc, #28]	@ (8004538 <SpiritRefreshStatus+0x40>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004524:	4293      	cmp	r3, r2
 8004526:	d1ea      	bne.n	80044fe <SpiritRefreshStatus+0x6>

}
 8004528:	bf00      	nop
 800452a:	bf00      	nop
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	20000260 	.word	0x20000260
 8004538:	20000261 	.word	0x20000261

0800453c <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <RadioSpiInit+0x1c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <RadioSpiInit+0x16>
  {
    Error_Handler();
 800454e:	f7fd f9dd 	bl	800190c <Error_Handler>
  }
}
 8004552:	bf00      	nop
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000008 	.word	0x20000008

0800455c <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	4603      	mov	r3, r0
 8004564:	603a      	str	r2, [r7, #0]
 8004566:	71fb      	strb	r3, [r7, #7]
 8004568:	460b      	mov	r3, r1
 800456a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 800456c:	2300      	movs	r3, #0
 800456e:	743b      	strb	r3, [r7, #16]
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004574:	2017      	movs	r0, #23
 8004576:	f000 fa73 	bl	8004a60 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 800457a:	2200      	movs	r2, #0
 800457c:	2140      	movs	r1, #64	@ 0x40
 800457e:	481b      	ldr	r0, [pc, #108]	@ (80045ec <RadioSpiWriteRegisters+0x90>)
 8004580:	f000 fc26 	bl	8004dd0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004584:	4b1a      	ldr	r3, [pc, #104]	@ (80045f0 <RadioSpiWriteRegisters+0x94>)
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	f107 020c 	add.w	r2, r7, #12
 800458c:	f107 0110 	add.w	r1, r7, #16
 8004590:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	2302      	movs	r3, #2
 8004598:	f001 fe19 	bl	80061ce <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800459c:	4b14      	ldr	r3, [pc, #80]	@ (80045f0 <RadioSpiWriteRegisters+0x94>)
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	79bb      	ldrb	r3, [r7, #6]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	f001 fb64 	bl	8005c76 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80045ae:	2201      	movs	r2, #1
 80045b0:	2140      	movs	r1, #64	@ 0x40
 80045b2:	480e      	ldr	r0, [pc, #56]	@ (80045ec <RadioSpiWriteRegisters+0x90>)
 80045b4:	f000 fc0c 	bl	8004dd0 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80045b8:	2017      	movs	r0, #23
 80045ba:	f000 fa43 	bl	8004a44 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	3301      	adds	r3, #1
 80045c4:	7b3a      	ldrb	r2, [r7, #12]
 80045c6:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80045c8:	f107 0308 	add.w	r3, r7, #8
 80045cc:	7b7a      	ldrb	r2, [r7, #13]
 80045ce:	701a      	strb	r2, [r3, #0]

  return status;
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	82bb      	strh	r3, [r7, #20]
 80045d4:	2300      	movs	r3, #0
 80045d6:	7d3a      	ldrb	r2, [r7, #20]
 80045d8:	f362 0307 	bfi	r3, r2, #0, #8
 80045dc:	7d7a      	ldrb	r2, [r7, #21]
 80045de:	f362 230f 	bfi	r3, r2, #8, #8

}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	48000400 	.word	0x48000400
 80045f0:	20000008 	.word	0x20000008

080045f4 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	4603      	mov	r3, r0
 80045fc:	603a      	str	r2, [r7, #0]
 80045fe:	71fb      	strb	r3, [r7, #7]
 8004600:	460b      	mov	r3, r1
 8004602:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8004604:	2301      	movs	r3, #1
 8004606:	743b      	strb	r3, [r7, #16]
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800460c:	2017      	movs	r0, #23
 800460e:	f000 fa27 	bl	8004a60 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004612:	2200      	movs	r2, #0
 8004614:	2140      	movs	r1, #64	@ 0x40
 8004616:	481b      	ldr	r0, [pc, #108]	@ (8004684 <RadioSpiReadRegisters+0x90>)
 8004618:	f000 fbda 	bl	8004dd0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800461c:	4b1a      	ldr	r3, [pc, #104]	@ (8004688 <RadioSpiReadRegisters+0x94>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	f107 020c 	add.w	r2, r7, #12
 8004624:	f107 0110 	add.w	r1, r7, #16
 8004628:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	2302      	movs	r3, #2
 8004630:	f001 fdcd 	bl	80061ce <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004634:	4b14      	ldr	r3, [pc, #80]	@ (8004688 <RadioSpiReadRegisters+0x94>)
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	79bb      	ldrb	r3, [r7, #6]
 800463a:	b29a      	uxth	r2, r3
 800463c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004640:	6839      	ldr	r1, [r7, #0]
 8004642:	f001 fc8d 	bl	8005f60 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004646:	2201      	movs	r2, #1
 8004648:	2140      	movs	r1, #64	@ 0x40
 800464a:	480e      	ldr	r0, [pc, #56]	@ (8004684 <RadioSpiReadRegisters+0x90>)
 800464c:	f000 fbc0 	bl	8004dd0 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004650:	2017      	movs	r0, #23
 8004652:	f000 f9f7 	bl	8004a44 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004656:	f107 0308 	add.w	r3, r7, #8
 800465a:	3301      	adds	r3, #1
 800465c:	7b3a      	ldrb	r2, [r7, #12]
 800465e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	7b7a      	ldrb	r2, [r7, #13]
 8004666:	701a      	strb	r2, [r3, #0]

  return status;
 8004668:	893b      	ldrh	r3, [r7, #8]
 800466a:	82bb      	strh	r3, [r7, #20]
 800466c:	2300      	movs	r3, #0
 800466e:	7d3a      	ldrb	r2, [r7, #20]
 8004670:	f362 0307 	bfi	r3, r2, #0, #8
 8004674:	7d7a      	ldrb	r2, [r7, #21]
 8004676:	f362 230f 	bfi	r3, r2, #8, #8
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	48000400 	.word	0x48000400
 8004688:	20000008 	.word	0x20000008

0800468c <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af02      	add	r7, sp, #8
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	743b      	strb	r3, [r7, #16]
 800469a:	79fb      	ldrb	r3, [r7, #7]
 800469c:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800469e:	2017      	movs	r0, #23
 80046a0:	f000 f9de 	bl	8004a60 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80046a4:	2200      	movs	r2, #0
 80046a6:	2140      	movs	r1, #64	@ 0x40
 80046a8:	4816      	ldr	r0, [pc, #88]	@ (8004704 <RadioSpiCommandStrobes+0x78>)
 80046aa:	f000 fb91 	bl	8004dd0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80046ae:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <RadioSpiCommandStrobes+0x7c>)
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	f107 020c 	add.w	r2, r7, #12
 80046b6:	f107 0110 	add.w	r1, r7, #16
 80046ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	2302      	movs	r3, #2
 80046c2:	f001 fd84 	bl	80061ce <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80046c6:	2201      	movs	r2, #1
 80046c8:	2140      	movs	r1, #64	@ 0x40
 80046ca:	480e      	ldr	r0, [pc, #56]	@ (8004704 <RadioSpiCommandStrobes+0x78>)
 80046cc:	f000 fb80 	bl	8004dd0 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80046d0:	2017      	movs	r0, #23
 80046d2:	f000 f9b7 	bl	8004a44 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80046d6:	f107 0308 	add.w	r3, r7, #8
 80046da:	3301      	adds	r3, #1
 80046dc:	7b3a      	ldrb	r2, [r7, #12]
 80046de:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80046e0:	f107 0308 	add.w	r3, r7, #8
 80046e4:	7b7a      	ldrb	r2, [r7, #13]
 80046e6:	701a      	strb	r2, [r3, #0]

  return status;
 80046e8:	893b      	ldrh	r3, [r7, #8]
 80046ea:	82bb      	strh	r3, [r7, #20]
 80046ec:	2300      	movs	r3, #0
 80046ee:	7d3a      	ldrb	r2, [r7, #20]
 80046f0:	f362 0307 	bfi	r3, r2, #0, #8
 80046f4:	7d7a      	ldrb	r2, [r7, #21]
 80046f6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	48000400 	.word	0x48000400
 8004708:	20000008 	.word	0x20000008

0800470c <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af02      	add	r7, sp, #8
 8004712:	4603      	mov	r3, r0
 8004714:	6039      	str	r1, [r7, #0]
 8004716:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004718:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800471c:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800471e:	2017      	movs	r0, #23
 8004720:	f000 f99e 	bl	8004a60 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004724:	2200      	movs	r2, #0
 8004726:	2140      	movs	r1, #64	@ 0x40
 8004728:	481a      	ldr	r0, [pc, #104]	@ (8004794 <RadioSpiWriteFifo+0x88>)
 800472a:	f000 fb51 	bl	8004dd0 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800472e:	4b1a      	ldr	r3, [pc, #104]	@ (8004798 <RadioSpiWriteFifo+0x8c>)
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	f107 020c 	add.w	r2, r7, #12
 8004736:	f107 0110 	add.w	r1, r7, #16
 800473a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	2302      	movs	r3, #2
 8004742:	f001 fd44 	bl	80061ce <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004746:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <RadioSpiWriteFifo+0x8c>)
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	b29a      	uxth	r2, r3
 800474e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	f001 fa8f 	bl	8005c76 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004758:	2201      	movs	r2, #1
 800475a:	2140      	movs	r1, #64	@ 0x40
 800475c:	480d      	ldr	r0, [pc, #52]	@ (8004794 <RadioSpiWriteFifo+0x88>)
 800475e:	f000 fb37 	bl	8004dd0 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004762:	2017      	movs	r0, #23
 8004764:	f000 f96e 	bl	8004a44 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004768:	f107 0308 	add.w	r3, r7, #8
 800476c:	3301      	adds	r3, #1
 800476e:	7b3a      	ldrb	r2, [r7, #12]
 8004770:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004772:	f107 0308 	add.w	r3, r7, #8
 8004776:	7b7a      	ldrb	r2, [r7, #13]
 8004778:	701a      	strb	r2, [r3, #0]

  return status;
 800477a:	893b      	ldrh	r3, [r7, #8]
 800477c:	82bb      	strh	r3, [r7, #20]
 800477e:	2300      	movs	r3, #0
 8004780:	7d3a      	ldrb	r2, [r7, #20]
 8004782:	f362 0307 	bfi	r3, r2, #0, #8
 8004786:	7d7a      	ldrb	r2, [r7, #21]
 8004788:	f362 230f 	bfi	r3, r2, #8, #8
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	48000400 	.word	0x48000400
 8004798:	20000008 	.word	0x20000008

0800479c <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80047a0:	2201      	movs	r2, #1
 80047a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047aa:	f000 fb11 	bl	8004dd0 <HAL_GPIO_WritePin>
}
 80047ae:	bf00      	nop
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80047b8:	2200      	movs	r2, #0
 80047ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047c2:	f000 fb05 	bl	8004dd0 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  for(volatile uint32_t i=0;i<0x1E00;i++);
 80047c6:	2300      	movs	r3, #0
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	e002      	b.n	80047d2 <RadioExitShutdown+0x20>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3301      	adds	r3, #1
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f5b3 5ff0 	cmp.w	r3, #7680	@ 0x1e00
 80047d8:	d3f8      	bcc.n	80047cc <RadioExitShutdown+0x1a>
  // HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
}
 80047da:	bf00      	nop
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047ea:	2300      	movs	r3, #0
 80047ec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ee:	2003      	movs	r0, #3
 80047f0:	f000 f901 	bl	80049f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047f4:	200f      	movs	r0, #15
 80047f6:	f7fd fa65 	bl	8001cc4 <HAL_InitTick>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	71fb      	strb	r3, [r7, #7]
 8004804:	e001      	b.n	800480a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004806:	f7fd fa35 	bl	8001c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800480a:	79fb      	ldrb	r3, [r7, #7]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004818:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <HAL_IncTick+0x20>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	461a      	mov	r2, r3
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_IncTick+0x24>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4413      	add	r3, r2
 8004824:	4a04      	ldr	r2, [pc, #16]	@ (8004838 <HAL_IncTick+0x24>)
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000010 	.word	0x20000010
 8004838:	20000264 	.word	0x20000264

0800483c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return uwTick;
 8004840:	4b03      	ldr	r3, [pc, #12]	@ (8004850 <HAL_GetTick+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000264 	.word	0x20000264

08004854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004864:	4b0c      	ldr	r3, [pc, #48]	@ (8004898 <__NVIC_SetPriorityGrouping+0x44>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004870:	4013      	ands	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800487c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004886:	4a04      	ldr	r2, [pc, #16]	@ (8004898 <__NVIC_SetPriorityGrouping+0x44>)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	60d3      	str	r3, [r2, #12]
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	e000ed00 	.word	0xe000ed00

0800489c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048a0:	4b04      	ldr	r3, [pc, #16]	@ (80048b4 <__NVIC_GetPriorityGrouping+0x18>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	0a1b      	lsrs	r3, r3, #8
 80048a6:	f003 0307 	and.w	r3, r3, #7
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	e000ed00 	.word	0xe000ed00

080048b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	db0b      	blt.n	80048e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	f003 021f 	and.w	r2, r3, #31
 80048d0:	4907      	ldr	r1, [pc, #28]	@ (80048f0 <__NVIC_EnableIRQ+0x38>)
 80048d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	2001      	movs	r0, #1
 80048da:	fa00 f202 	lsl.w	r2, r0, r2
 80048de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	e000e100 	.word	0xe000e100

080048f4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	2b00      	cmp	r3, #0
 8004904:	db12      	blt.n	800492c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	f003 021f 	and.w	r2, r3, #31
 800490c:	490a      	ldr	r1, [pc, #40]	@ (8004938 <__NVIC_DisableIRQ+0x44>)
 800490e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	2001      	movs	r0, #1
 8004916:	fa00 f202 	lsl.w	r2, r0, r2
 800491a:	3320      	adds	r3, #32
 800491c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004920:	f3bf 8f4f 	dsb	sy
}
 8004924:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004926:	f3bf 8f6f 	isb	sy
}
 800492a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000e100 	.word	0xe000e100

0800493c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	6039      	str	r1, [r7, #0]
 8004946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494c:	2b00      	cmp	r3, #0
 800494e:	db0a      	blt.n	8004966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	490c      	ldr	r1, [pc, #48]	@ (8004988 <__NVIC_SetPriority+0x4c>)
 8004956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495a:	0112      	lsls	r2, r2, #4
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	440b      	add	r3, r1
 8004960:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004964:	e00a      	b.n	800497c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	b2da      	uxtb	r2, r3
 800496a:	4908      	ldr	r1, [pc, #32]	@ (800498c <__NVIC_SetPriority+0x50>)
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	f003 030f 	and.w	r3, r3, #15
 8004972:	3b04      	subs	r3, #4
 8004974:	0112      	lsls	r2, r2, #4
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	440b      	add	r3, r1
 800497a:	761a      	strb	r2, [r3, #24]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	e000e100 	.word	0xe000e100
 800498c:	e000ed00 	.word	0xe000ed00

08004990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	@ 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f1c3 0307 	rsb	r3, r3, #7
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	bf28      	it	cs
 80049ae:	2304      	movcs	r3, #4
 80049b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3304      	adds	r3, #4
 80049b6:	2b06      	cmp	r3, #6
 80049b8:	d902      	bls.n	80049c0 <NVIC_EncodePriority+0x30>
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3b03      	subs	r3, #3
 80049be:	e000      	b.n	80049c2 <NVIC_EncodePriority+0x32>
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43da      	mvns	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	401a      	ands	r2, r3
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049d8:	f04f 31ff 	mov.w	r1, #4294967295
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	fa01 f303 	lsl.w	r3, r1, r3
 80049e2:	43d9      	mvns	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049e8:	4313      	orrs	r3, r2
         );
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3724      	adds	r7, #36	@ 0x24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ff28 	bl	8004854 <__NVIC_SetPriorityGrouping>
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a1e:	f7ff ff3d 	bl	800489c <__NVIC_GetPriorityGrouping>
 8004a22:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	68b9      	ldr	r1, [r7, #8]
 8004a28:	6978      	ldr	r0, [r7, #20]
 8004a2a:	f7ff ffb1 	bl	8004990 <NVIC_EncodePriority>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7ff ff80 	bl	800493c <__NVIC_SetPriority>
}
 8004a3c:	bf00      	nop
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff ff30 	bl	80048b8 <__NVIC_EnableIRQ>
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff ff40 	bl	80048f4 <__NVIC_DisableIRQ>
}
 8004a74:	bf00      	nop
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a8a:	e17f      	b.n	8004d8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2101      	movs	r1, #1
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	fa01 f303 	lsl.w	r3, r1, r3
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8171 	beq.w	8004d86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d005      	beq.n	8004abc <HAL_GPIO_Init+0x40>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d130      	bne.n	8004b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004af2:	2201      	movs	r2, #1
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43db      	mvns	r3, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4013      	ands	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0201 	and.w	r2, r3, #1
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d118      	bne.n	8004b5c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004b30:	2201      	movs	r2, #1
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	08db      	lsrs	r3, r3, #3
 8004b46:	f003 0201 	and.w	r2, r3, #1
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d017      	beq.n	8004b98 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	2203      	movs	r2, #3
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d123      	bne.n	8004bec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	08da      	lsrs	r2, r3, #3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3208      	adds	r2, #8
 8004bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	220f      	movs	r2, #15
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	43db      	mvns	r3, r3
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	08da      	lsrs	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3208      	adds	r2, #8
 8004be6:	6939      	ldr	r1, [r7, #16]
 8004be8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4013      	ands	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0203 	and.w	r2, r3, #3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f000 80ac 	beq.w	8004d86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dac <HAL_GPIO_Init+0x330>)
 8004c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c32:	4a5e      	ldr	r2, [pc, #376]	@ (8004dac <HAL_GPIO_Init+0x330>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8004dac <HAL_GPIO_Init+0x330>)
 8004c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c46:	4a5a      	ldr	r2, [pc, #360]	@ (8004db0 <HAL_GPIO_Init+0x334>)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	089b      	lsrs	r3, r3, #2
 8004c4c:	3302      	adds	r3, #2
 8004c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	43db      	mvns	r3, r3
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	4013      	ands	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c70:	d025      	beq.n	8004cbe <HAL_GPIO_Init+0x242>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a4f      	ldr	r2, [pc, #316]	@ (8004db4 <HAL_GPIO_Init+0x338>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01f      	beq.n	8004cba <HAL_GPIO_Init+0x23e>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004db8 <HAL_GPIO_Init+0x33c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d019      	beq.n	8004cb6 <HAL_GPIO_Init+0x23a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a4d      	ldr	r2, [pc, #308]	@ (8004dbc <HAL_GPIO_Init+0x340>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_GPIO_Init+0x236>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8004dc0 <HAL_GPIO_Init+0x344>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00d      	beq.n	8004cae <HAL_GPIO_Init+0x232>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a4b      	ldr	r2, [pc, #300]	@ (8004dc4 <HAL_GPIO_Init+0x348>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d007      	beq.n	8004caa <HAL_GPIO_Init+0x22e>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8004dc8 <HAL_GPIO_Init+0x34c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_GPIO_Init+0x22a>
 8004ca2:	2306      	movs	r3, #6
 8004ca4:	e00c      	b.n	8004cc0 <HAL_GPIO_Init+0x244>
 8004ca6:	2307      	movs	r3, #7
 8004ca8:	e00a      	b.n	8004cc0 <HAL_GPIO_Init+0x244>
 8004caa:	2305      	movs	r3, #5
 8004cac:	e008      	b.n	8004cc0 <HAL_GPIO_Init+0x244>
 8004cae:	2304      	movs	r3, #4
 8004cb0:	e006      	b.n	8004cc0 <HAL_GPIO_Init+0x244>
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e004      	b.n	8004cc0 <HAL_GPIO_Init+0x244>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e002      	b.n	8004cc0 <HAL_GPIO_Init+0x244>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <HAL_GPIO_Init+0x244>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	f002 0203 	and.w	r2, r2, #3
 8004cc6:	0092      	lsls	r2, r2, #2
 8004cc8:	4093      	lsls	r3, r2
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004cd0:	4937      	ldr	r1, [pc, #220]	@ (8004db0 <HAL_GPIO_Init+0x334>)
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004cde:	4b3b      	ldr	r3, [pc, #236]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	43db      	mvns	r3, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4013      	ands	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d02:	4a32      	ldr	r2, [pc, #200]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d08:	4b30      	ldr	r3, [pc, #192]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4013      	ands	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d2c:	4a27      	ldr	r2, [pc, #156]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004d32:	4b26      	ldr	r3, [pc, #152]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004d56:	4a1d      	ldr	r2, [pc, #116]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	43db      	mvns	r3, r3
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d80:	4a12      	ldr	r2, [pc, #72]	@ (8004dcc <HAL_GPIO_Init+0x350>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f47f ae78 	bne.w	8004a8c <HAL_GPIO_Init+0x10>
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40010000 	.word	0x40010000
 8004db4:	48000400 	.word	0x48000400
 8004db8:	48000800 	.word	0x48000800
 8004dbc:	48000c00 	.word	0x48000c00
 8004dc0:	48001000 	.word	0x48001000
 8004dc4:	48001400 	.word	0x48001400
 8004dc8:	48001800 	.word	0x48001800
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004de0:	787b      	ldrb	r3, [r7, #1]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dec:	e002      	b.n	8004df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e0a:	4b08      	ldr	r3, [pc, #32]	@ (8004e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e0c:	695a      	ldr	r2, [r3, #20]
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d006      	beq.n	8004e24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e16:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e1c:	88fb      	ldrh	r3, [r7, #6]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fc fcd6 	bl	80017d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40010400 	.word	0x40010400

08004e30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e34:	4b04      	ldr	r3, [pc, #16]	@ (8004e48 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40007000 	.word	0x40007000

08004e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e5a:	d130      	bne.n	8004ebe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e5c:	4b23      	ldr	r3, [pc, #140]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e68:	d038      	beq.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e6a:	4b20      	ldr	r3, [pc, #128]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e72:	4a1e      	ldr	r2, [pc, #120]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ef0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2232      	movs	r2, #50	@ 0x32
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	0c9b      	lsrs	r3, r3, #18
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e90:	e002      	b.n	8004e98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e98:	4b14      	ldr	r3, [pc, #80]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea4:	d102      	bne.n	8004eac <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f2      	bne.n	8004e92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004eac:	4b0f      	ldr	r3, [pc, #60]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb8:	d110      	bne.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e00f      	b.n	8004ede <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eca:	d007      	beq.n	8004edc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ecc:	4b07      	ldr	r3, [pc, #28]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ed4:	4a05      	ldr	r2, [pc, #20]	@ (8004eec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ed6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	20000000 	.word	0x20000000
 8004ef4:	431bde83 	.word	0x431bde83

08004ef8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e3ca      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f0a:	4b97      	ldr	r3, [pc, #604]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f14:	4b94      	ldr	r3, [pc, #592]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0303 	and.w	r3, r3, #3
 8004f1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80e4 	beq.w	80050f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d007      	beq.n	8004f42 <HAL_RCC_OscConfig+0x4a>
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	f040 808b 	bne.w	8005050 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	f040 8087 	bne.w	8005050 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f42:	4b89      	ldr	r3, [pc, #548]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_RCC_OscConfig+0x62>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e3a2      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1a      	ldr	r2, [r3, #32]
 8004f5e:	4b82      	ldr	r3, [pc, #520]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <HAL_RCC_OscConfig+0x7c>
 8004f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f72:	e005      	b.n	8004f80 <HAL_RCC_OscConfig+0x88>
 8004f74:	4b7c      	ldr	r3, [pc, #496]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d223      	bcs.n	8004fcc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 fd71 	bl	8005a70 <RCC_SetFlashLatencyFromMSIRange>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e383      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f98:	4b73      	ldr	r3, [pc, #460]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a72      	ldr	r2, [pc, #456]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004f9e:	f043 0308 	orr.w	r3, r3, #8
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4b70      	ldr	r3, [pc, #448]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	496d      	ldr	r1, [pc, #436]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	4968      	ldr	r1, [pc, #416]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	604b      	str	r3, [r1, #4]
 8004fca:	e025      	b.n	8005018 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fcc:	4b66      	ldr	r3, [pc, #408]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a65      	ldr	r2, [pc, #404]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fd2:	f043 0308 	orr.w	r3, r3, #8
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b63      	ldr	r3, [pc, #396]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4960      	ldr	r1, [pc, #384]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fea:	4b5f      	ldr	r3, [pc, #380]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	495b      	ldr	r1, [pc, #364]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fd31 	bl	8005a70 <RCC_SetFlashLatencyFromMSIRange>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e343      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005018:	f000 fc4a 	bl	80058b0 <HAL_RCC_GetSysClockFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	4b52      	ldr	r3, [pc, #328]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	091b      	lsrs	r3, r3, #4
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	4950      	ldr	r1, [pc, #320]	@ (800516c <HAL_RCC_OscConfig+0x274>)
 800502a:	5ccb      	ldrb	r3, [r1, r3]
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
 8005034:	4a4e      	ldr	r2, [pc, #312]	@ (8005170 <HAL_RCC_OscConfig+0x278>)
 8005036:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005038:	4b4e      	ldr	r3, [pc, #312]	@ (8005174 <HAL_RCC_OscConfig+0x27c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f7fc fe41 	bl	8001cc4 <HAL_InitTick>
 8005042:	4603      	mov	r3, r0
 8005044:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d052      	beq.n	80050f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
 800504e:	e327      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d032      	beq.n	80050be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005058:	4b43      	ldr	r3, [pc, #268]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a42      	ldr	r2, [pc, #264]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005064:	f7ff fbea 	bl	800483c <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800506c:	f7ff fbe6 	bl	800483c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e310      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800507e:	4b3a      	ldr	r3, [pc, #232]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800508a:	4b37      	ldr	r3, [pc, #220]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a36      	ldr	r2, [pc, #216]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8005090:	f043 0308 	orr.w	r3, r3, #8
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4b34      	ldr	r3, [pc, #208]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	4931      	ldr	r1, [pc, #196]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050a8:	4b2f      	ldr	r3, [pc, #188]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	021b      	lsls	r3, r3, #8
 80050b6:	492c      	ldr	r1, [pc, #176]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	604b      	str	r3, [r1, #4]
 80050bc:	e01a      	b.n	80050f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050be:	4b2a      	ldr	r3, [pc, #168]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a29      	ldr	r2, [pc, #164]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050ca:	f7ff fbb7 	bl	800483c <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050d2:	f7ff fbb3 	bl	800483c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e2dd      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050e4:	4b20      	ldr	r3, [pc, #128]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCC_OscConfig+0x1da>
 80050f0:	e000      	b.n	80050f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d074      	beq.n	80051ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d005      	beq.n	8005112 <HAL_RCC_OscConfig+0x21a>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	d10e      	bne.n	800512a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b03      	cmp	r3, #3
 8005110:	d10b      	bne.n	800512a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005112:	4b15      	ldr	r3, [pc, #84]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d064      	beq.n	80051e8 <HAL_RCC_OscConfig+0x2f0>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d160      	bne.n	80051e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e2ba      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005132:	d106      	bne.n	8005142 <HAL_RCC_OscConfig+0x24a>
 8005134:	4b0c      	ldr	r3, [pc, #48]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a0b      	ldr	r2, [pc, #44]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	e026      	b.n	8005190 <HAL_RCC_OscConfig+0x298>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800514a:	d115      	bne.n	8005178 <HAL_RCC_OscConfig+0x280>
 800514c:	4b06      	ldr	r3, [pc, #24]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a05      	ldr	r2, [pc, #20]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 8005152:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	4b03      	ldr	r3, [pc, #12]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a02      	ldr	r2, [pc, #8]	@ (8005168 <HAL_RCC_OscConfig+0x270>)
 800515e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	e014      	b.n	8005190 <HAL_RCC_OscConfig+0x298>
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
 800516c:	0800aa20 	.word	0x0800aa20
 8005170:	20000000 	.word	0x20000000
 8005174:	2000000c 	.word	0x2000000c
 8005178:	4ba0      	ldr	r3, [pc, #640]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a9f      	ldr	r2, [pc, #636]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 800517e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	4b9d      	ldr	r3, [pc, #628]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a9c      	ldr	r2, [pc, #624]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 800518a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800518e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d013      	beq.n	80051c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7ff fb50 	bl	800483c <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a0:	f7ff fb4c 	bl	800483c <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b64      	cmp	r3, #100	@ 0x64
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e276      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b2:	4b92      	ldr	r3, [pc, #584]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d0f0      	beq.n	80051a0 <HAL_RCC_OscConfig+0x2a8>
 80051be:	e014      	b.n	80051ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7ff fb3c 	bl	800483c <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c8:	f7ff fb38 	bl	800483c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	@ 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e262      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051da:	4b88      	ldr	r3, [pc, #544]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x2d0>
 80051e6:	e000      	b.n	80051ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d060      	beq.n	80052b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_OscConfig+0x310>
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	d119      	bne.n	8005236 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d116      	bne.n	8005236 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005208:	4b7c      	ldr	r3, [pc, #496]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <HAL_RCC_OscConfig+0x328>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e23f      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005220:	4b76      	ldr	r3, [pc, #472]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	061b      	lsls	r3, r3, #24
 800522e:	4973      	ldr	r1, [pc, #460]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005234:	e040      	b.n	80052b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d023      	beq.n	8005286 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800523e:	4b6f      	ldr	r3, [pc, #444]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6e      	ldr	r2, [pc, #440]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524a:	f7ff faf7 	bl	800483c <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005252:	f7ff faf3 	bl	800483c <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e21d      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005264:	4b65      	ldr	r3, [pc, #404]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005270:	4b62      	ldr	r3, [pc, #392]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	061b      	lsls	r3, r3, #24
 800527e:	495f      	ldr	r1, [pc, #380]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005280:	4313      	orrs	r3, r2
 8005282:	604b      	str	r3, [r1, #4]
 8005284:	e018      	b.n	80052b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005286:	4b5d      	ldr	r3, [pc, #372]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a5c      	ldr	r2, [pc, #368]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 800528c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7ff fad3 	bl	800483c <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529a:	f7ff facf 	bl	800483c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e1f9      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052ac:	4b53      	ldr	r3, [pc, #332]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1f0      	bne.n	800529a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d03c      	beq.n	800533e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01c      	beq.n	8005306 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052cc:	4b4b      	ldr	r3, [pc, #300]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80052ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d2:	4a4a      	ldr	r2, [pc, #296]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80052d4:	f043 0301 	orr.w	r3, r3, #1
 80052d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052dc:	f7ff faae 	bl	800483c <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e4:	f7ff faaa 	bl	800483c <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e1d4      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052f6:	4b41      	ldr	r3, [pc, #260]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80052f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0ef      	beq.n	80052e4 <HAL_RCC_OscConfig+0x3ec>
 8005304:	e01b      	b.n	800533e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005306:	4b3d      	ldr	r3, [pc, #244]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005308:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800530c:	4a3b      	ldr	r2, [pc, #236]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005316:	f7ff fa91 	bl	800483c <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800531e:	f7ff fa8d 	bl	800483c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e1b7      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005330:	4b32      	ldr	r3, [pc, #200]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005332:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1ef      	bne.n	800531e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80a6 	beq.w	8005498 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800534c:	2300      	movs	r3, #0
 800534e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005350:	4b2a      	ldr	r3, [pc, #168]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10d      	bne.n	8005378 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535c:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005360:	4a26      	ldr	r2, [pc, #152]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 8005362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005366:	6593      	str	r3, [r2, #88]	@ 0x58
 8005368:	4b24      	ldr	r3, [pc, #144]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 800536a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005374:	2301      	movs	r3, #1
 8005376:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005378:	4b21      	ldr	r3, [pc, #132]	@ (8005400 <HAL_RCC_OscConfig+0x508>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d118      	bne.n	80053b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005384:	4b1e      	ldr	r3, [pc, #120]	@ (8005400 <HAL_RCC_OscConfig+0x508>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a1d      	ldr	r2, [pc, #116]	@ (8005400 <HAL_RCC_OscConfig+0x508>)
 800538a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800538e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005390:	f7ff fa54 	bl	800483c <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005398:	f7ff fa50 	bl	800483c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e17a      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053aa:	4b15      	ldr	r3, [pc, #84]	@ (8005400 <HAL_RCC_OscConfig+0x508>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d108      	bne.n	80053d0 <HAL_RCC_OscConfig+0x4d8>
 80053be:	4b0f      	ldr	r3, [pc, #60]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c4:	4a0d      	ldr	r2, [pc, #52]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053ce:	e029      	b.n	8005424 <HAL_RCC_OscConfig+0x52c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b05      	cmp	r3, #5
 80053d6:	d115      	bne.n	8005404 <HAL_RCC_OscConfig+0x50c>
 80053d8:	4b08      	ldr	r3, [pc, #32]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80053da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053de:	4a07      	ldr	r2, [pc, #28]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80053e0:	f043 0304 	orr.w	r3, r3, #4
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053e8:	4b04      	ldr	r3, [pc, #16]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ee:	4a03      	ldr	r2, [pc, #12]	@ (80053fc <HAL_RCC_OscConfig+0x504>)
 80053f0:	f043 0301 	orr.w	r3, r3, #1
 80053f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80053f8:	e014      	b.n	8005424 <HAL_RCC_OscConfig+0x52c>
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
 8005400:	40007000 	.word	0x40007000
 8005404:	4b9c      	ldr	r3, [pc, #624]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800540a:	4a9b      	ldr	r2, [pc, #620]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005414:	4b98      	ldr	r3, [pc, #608]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800541a:	4a97      	ldr	r2, [pc, #604]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800541c:	f023 0304 	bic.w	r3, r3, #4
 8005420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d016      	beq.n	800545a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542c:	f7ff fa06 	bl	800483c <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005432:	e00a      	b.n	800544a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005434:	f7ff fa02 	bl	800483c <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e12a      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800544a:	4b8b      	ldr	r3, [pc, #556]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0ed      	beq.n	8005434 <HAL_RCC_OscConfig+0x53c>
 8005458:	e015      	b.n	8005486 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545a:	f7ff f9ef 	bl	800483c <HAL_GetTick>
 800545e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005460:	e00a      	b.n	8005478 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005462:	f7ff f9eb 	bl	800483c <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005470:	4293      	cmp	r3, r2
 8005472:	d901      	bls.n	8005478 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e113      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005478:	4b7f      	ldr	r3, [pc, #508]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800547a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1ed      	bne.n	8005462 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005486:	7ffb      	ldrb	r3, [r7, #31]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d105      	bne.n	8005498 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800548c:	4b7a      	ldr	r3, [pc, #488]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800548e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005490:	4a79      	ldr	r2, [pc, #484]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005492:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005496:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 80fe 	beq.w	800569e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	f040 80d0 	bne.w	800564c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80054ac:	4b72      	ldr	r3, [pc, #456]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f003 0203 	and.w	r2, r3, #3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054bc:	429a      	cmp	r2, r3
 80054be:	d130      	bne.n	8005522 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	3b01      	subs	r3, #1
 80054cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d127      	bne.n	8005522 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d11f      	bne.n	8005522 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80054ec:	2a07      	cmp	r2, #7
 80054ee:	bf14      	ite	ne
 80054f0:	2201      	movne	r2, #1
 80054f2:	2200      	moveq	r2, #0
 80054f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d113      	bne.n	8005522 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005504:	085b      	lsrs	r3, r3, #1
 8005506:	3b01      	subs	r3, #1
 8005508:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800550a:	429a      	cmp	r2, r3
 800550c:	d109      	bne.n	8005522 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005518:	085b      	lsrs	r3, r3, #1
 800551a:	3b01      	subs	r3, #1
 800551c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800551e:	429a      	cmp	r2, r3
 8005520:	d06e      	beq.n	8005600 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	d069      	beq.n	80055fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005528:	4b53      	ldr	r3, [pc, #332]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005534:	4b50      	ldr	r3, [pc, #320]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0ad      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005544:	4b4c      	ldr	r3, [pc, #304]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a4b      	ldr	r2, [pc, #300]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800554e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005550:	f7ff f974 	bl	800483c <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005558:	f7ff f970 	bl	800483c <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e09a      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800556a:	4b43      	ldr	r3, [pc, #268]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005576:	4b40      	ldr	r3, [pc, #256]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	4b40      	ldr	r3, [pc, #256]	@ (800567c <HAL_RCC_OscConfig+0x784>)
 800557c:	4013      	ands	r3, r2
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005586:	3a01      	subs	r2, #1
 8005588:	0112      	lsls	r2, r2, #4
 800558a:	4311      	orrs	r1, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005590:	0212      	lsls	r2, r2, #8
 8005592:	4311      	orrs	r1, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005598:	0852      	lsrs	r2, r2, #1
 800559a:	3a01      	subs	r2, #1
 800559c:	0552      	lsls	r2, r2, #21
 800559e:	4311      	orrs	r1, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80055a4:	0852      	lsrs	r2, r2, #1
 80055a6:	3a01      	subs	r2, #1
 80055a8:	0652      	lsls	r2, r2, #25
 80055aa:	4311      	orrs	r1, r2
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80055b0:	0912      	lsrs	r2, r2, #4
 80055b2:	0452      	lsls	r2, r2, #17
 80055b4:	430a      	orrs	r2, r1
 80055b6:	4930      	ldr	r1, [pc, #192]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80055bc:	4b2e      	ldr	r3, [pc, #184]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 80055c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 80055ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055d4:	f7ff f932 	bl	800483c <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055dc:	f7ff f92e 	bl	800483c <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e058      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ee:	4b22      	ldr	r3, [pc, #136]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055fa:	e050      	b.n	800569e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e04f      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005600:	4b1d      	ldr	r3, [pc, #116]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d148      	bne.n	800569e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800560c:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a19      	ldr	r2, [pc, #100]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005616:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005618:	4b17      	ldr	r3, [pc, #92]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4a16      	ldr	r2, [pc, #88]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 800561e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005622:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005624:	f7ff f90a 	bl	800483c <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562c:	f7ff f906 	bl	800483c <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e030      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800563e:	4b0e      	ldr	r3, [pc, #56]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0f0      	beq.n	800562c <HAL_RCC_OscConfig+0x734>
 800564a:	e028      	b.n	800569e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b0c      	cmp	r3, #12
 8005650:	d023      	beq.n	800569a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005652:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a08      	ldr	r2, [pc, #32]	@ (8005678 <HAL_RCC_OscConfig+0x780>)
 8005658:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800565c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565e:	f7ff f8ed 	bl	800483c <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005664:	e00c      	b.n	8005680 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005666:	f7ff f8e9 	bl	800483c <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d905      	bls.n	8005680 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e013      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
 8005678:	40021000 	.word	0x40021000
 800567c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005680:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <HAL_RCC_OscConfig+0x7b0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1ec      	bne.n	8005666 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800568c:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <HAL_RCC_OscConfig+0x7b0>)
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	4905      	ldr	r1, [pc, #20]	@ (80056a8 <HAL_RCC_OscConfig+0x7b0>)
 8005692:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <HAL_RCC_OscConfig+0x7b4>)
 8005694:	4013      	ands	r3, r2
 8005696:	60cb      	str	r3, [r1, #12]
 8005698:	e001      	b.n	800569e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40021000 	.word	0x40021000
 80056ac:	feeefffc 	.word	0xfeeefffc

080056b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0e7      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056c4:	4b75      	ldr	r3, [pc, #468]	@ (800589c <HAL_RCC_ClockConfig+0x1ec>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d910      	bls.n	80056f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	4b72      	ldr	r3, [pc, #456]	@ (800589c <HAL_RCC_ClockConfig+0x1ec>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 0207 	bic.w	r2, r3, #7
 80056da:	4970      	ldr	r1, [pc, #448]	@ (800589c <HAL_RCC_ClockConfig+0x1ec>)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	4313      	orrs	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e2:	4b6e      	ldr	r3, [pc, #440]	@ (800589c <HAL_RCC_ClockConfig+0x1ec>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	683a      	ldr	r2, [r7, #0]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e0cf      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d010      	beq.n	8005722 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	4b66      	ldr	r3, [pc, #408]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800570c:	429a      	cmp	r2, r3
 800570e:	d908      	bls.n	8005722 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005710:	4b63      	ldr	r3, [pc, #396]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4960      	ldr	r1, [pc, #384]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 800571e:	4313      	orrs	r3, r2
 8005720:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d04c      	beq.n	80057c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b03      	cmp	r3, #3
 8005734:	d107      	bne.n	8005746 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005736:	4b5a      	ldr	r3, [pc, #360]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d121      	bne.n	8005786 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e0a6      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d107      	bne.n	800575e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800574e:	4b54      	ldr	r3, [pc, #336]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d115      	bne.n	8005786 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e09a      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d107      	bne.n	8005776 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005766:	4b4e      	ldr	r3, [pc, #312]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d109      	bne.n	8005786 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e08e      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005776:	4b4a      	ldr	r3, [pc, #296]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e086      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005786:	4b46      	ldr	r3, [pc, #280]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f023 0203 	bic.w	r2, r3, #3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	4943      	ldr	r1, [pc, #268]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005794:	4313      	orrs	r3, r2
 8005796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005798:	f7ff f850 	bl	800483c <HAL_GetTick>
 800579c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579e:	e00a      	b.n	80057b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a0:	f7ff f84c 	bl	800483c <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e06e      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b6:	4b3a      	ldr	r3, [pc, #232]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 020c 	and.w	r2, r3, #12
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d1eb      	bne.n	80057a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0302 	and.w	r3, r3, #2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d010      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	4b31      	ldr	r3, [pc, #196]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d208      	bcs.n	80057f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e4:	4b2e      	ldr	r3, [pc, #184]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	492b      	ldr	r1, [pc, #172]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057f6:	4b29      	ldr	r3, [pc, #164]	@ (800589c <HAL_RCC_ClockConfig+0x1ec>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0307 	and.w	r3, r3, #7
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d210      	bcs.n	8005826 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005804:	4b25      	ldr	r3, [pc, #148]	@ (800589c <HAL_RCC_ClockConfig+0x1ec>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f023 0207 	bic.w	r2, r3, #7
 800580c:	4923      	ldr	r1, [pc, #140]	@ (800589c <HAL_RCC_ClockConfig+0x1ec>)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	4313      	orrs	r3, r2
 8005812:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005814:	4b21      	ldr	r3, [pc, #132]	@ (800589c <HAL_RCC_ClockConfig+0x1ec>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d001      	beq.n	8005826 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e036      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005832:	4b1b      	ldr	r3, [pc, #108]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4918      	ldr	r1, [pc, #96]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005840:	4313      	orrs	r3, r2
 8005842:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d009      	beq.n	8005864 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005850:	4b13      	ldr	r3, [pc, #76]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4910      	ldr	r1, [pc, #64]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005860:	4313      	orrs	r3, r2
 8005862:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005864:	f000 f824 	bl	80058b0 <HAL_RCC_GetSysClockFreq>
 8005868:	4602      	mov	r2, r0
 800586a:	4b0d      	ldr	r3, [pc, #52]	@ (80058a0 <HAL_RCC_ClockConfig+0x1f0>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	091b      	lsrs	r3, r3, #4
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	490b      	ldr	r1, [pc, #44]	@ (80058a4 <HAL_RCC_ClockConfig+0x1f4>)
 8005876:	5ccb      	ldrb	r3, [r1, r3]
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	4a09      	ldr	r2, [pc, #36]	@ (80058a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005882:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005884:	4b09      	ldr	r3, [pc, #36]	@ (80058ac <HAL_RCC_ClockConfig+0x1fc>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	f7fc fa1b 	bl	8001cc4 <HAL_InitTick>
 800588e:	4603      	mov	r3, r0
 8005890:	72fb      	strb	r3, [r7, #11]

  return status;
 8005892:	7afb      	ldrb	r3, [r7, #11]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40022000 	.word	0x40022000
 80058a0:	40021000 	.word	0x40021000
 80058a4:	0800aa20 	.word	0x0800aa20
 80058a8:	20000000 	.word	0x20000000
 80058ac:	2000000c 	.word	0x2000000c

080058b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	@ 0x24
 80058b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058be:	4b3e      	ldr	r3, [pc, #248]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 030c 	and.w	r3, r3, #12
 80058c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058c8:	4b3b      	ldr	r3, [pc, #236]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f003 0303 	and.w	r3, r3, #3
 80058d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_GetSysClockFreq+0x34>
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d121      	bne.n	8005922 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d11e      	bne.n	8005922 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80058e4:	4b34      	ldr	r3, [pc, #208]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058f0:	4b31      	ldr	r3, [pc, #196]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80058f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	61fb      	str	r3, [r7, #28]
 80058fe:	e005      	b.n	800590c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005900:	4b2d      	ldr	r3, [pc, #180]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	091b      	lsrs	r3, r3, #4
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800590c:	4a2b      	ldr	r2, [pc, #172]	@ (80059bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005914:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10d      	bne.n	8005938 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005920:	e00a      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b04      	cmp	r3, #4
 8005926:	d102      	bne.n	800592e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005928:	4b25      	ldr	r3, [pc, #148]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800592a:	61bb      	str	r3, [r7, #24]
 800592c:	e004      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b08      	cmp	r3, #8
 8005932:	d101      	bne.n	8005938 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005934:	4b23      	ldr	r3, [pc, #140]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005936:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2b0c      	cmp	r3, #12
 800593c:	d134      	bne.n	80059a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800593e:	4b1e      	ldr	r3, [pc, #120]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d003      	beq.n	8005956 <HAL_RCC_GetSysClockFreq+0xa6>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2b03      	cmp	r3, #3
 8005952:	d003      	beq.n	800595c <HAL_RCC_GetSysClockFreq+0xac>
 8005954:	e005      	b.n	8005962 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005956:	4b1a      	ldr	r3, [pc, #104]	@ (80059c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005958:	617b      	str	r3, [r7, #20]
      break;
 800595a:	e005      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800595c:	4b19      	ldr	r3, [pc, #100]	@ (80059c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800595e:	617b      	str	r3, [r7, #20]
      break;
 8005960:	e002      	b.n	8005968 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	617b      	str	r3, [r7, #20]
      break;
 8005966:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005968:	4b13      	ldr	r3, [pc, #76]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	3301      	adds	r3, #1
 8005974:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005976:	4b10      	ldr	r3, [pc, #64]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	0a1b      	lsrs	r3, r3, #8
 800597c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	fb03 f202 	mul.w	r2, r3, r2
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800598e:	4b0a      	ldr	r3, [pc, #40]	@ (80059b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	0e5b      	lsrs	r3, r3, #25
 8005994:	f003 0303 	and.w	r3, r3, #3
 8005998:	3301      	adds	r3, #1
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80059a8:	69bb      	ldr	r3, [r7, #24]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3724      	adds	r7, #36	@ 0x24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40021000 	.word	0x40021000
 80059bc:	0800aa38 	.word	0x0800aa38
 80059c0:	00f42400 	.word	0x00f42400
 80059c4:	007a1200 	.word	0x007a1200

080059c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059cc:	4b03      	ldr	r3, [pc, #12]	@ (80059dc <HAL_RCC_GetHCLKFreq+0x14>)
 80059ce:	681b      	ldr	r3, [r3, #0]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	20000000 	.word	0x20000000

080059e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059e4:	f7ff fff0 	bl	80059c8 <HAL_RCC_GetHCLKFreq>
 80059e8:	4602      	mov	r2, r0
 80059ea:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	0adb      	lsrs	r3, r3, #11
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	4904      	ldr	r1, [pc, #16]	@ (8005a08 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059f6:	5ccb      	ldrb	r3, [r1, r3]
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	40021000 	.word	0x40021000
 8005a08:	0800aa30 	.word	0x0800aa30

08005a0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	220f      	movs	r2, #15
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005a1c:	4b12      	ldr	r3, [pc, #72]	@ (8005a68 <HAL_RCC_GetClockConfig+0x5c>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0203 	and.w	r2, r3, #3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005a28:	4b0f      	ldr	r3, [pc, #60]	@ (8005a68 <HAL_RCC_GetClockConfig+0x5c>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005a34:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <HAL_RCC_GetClockConfig+0x5c>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005a40:	4b09      	ldr	r3, [pc, #36]	@ (8005a68 <HAL_RCC_GetClockConfig+0x5c>)
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	08db      	lsrs	r3, r3, #3
 8005a46:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005a4e:	4b07      	ldr	r3, [pc, #28]	@ (8005a6c <HAL_RCC_GetClockConfig+0x60>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0207 	and.w	r2, r3, #7
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	601a      	str	r2, [r3, #0]
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	40022000 	.word	0x40022000

08005a70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005a78:	2300      	movs	r3, #0
 8005a7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a88:	f7ff f9d2 	bl	8004e30 <HAL_PWREx_GetVoltageRange>
 8005a8c:	6178      	str	r0, [r7, #20]
 8005a8e:	e014      	b.n	8005aba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a90:	4b25      	ldr	r3, [pc, #148]	@ (8005b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a94:	4a24      	ldr	r2, [pc, #144]	@ (8005b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a9c:	4b22      	ldr	r3, [pc, #136]	@ (8005b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005aa8:	f7ff f9c2 	bl	8004e30 <HAL_PWREx_GetVoltageRange>
 8005aac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005aae:	4b1e      	ldr	r3, [pc, #120]	@ (8005b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8005b28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ab8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac0:	d10b      	bne.n	8005ada <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b80      	cmp	r3, #128	@ 0x80
 8005ac6:	d919      	bls.n	8005afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2ba0      	cmp	r3, #160	@ 0xa0
 8005acc:	d902      	bls.n	8005ad4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005ace:	2302      	movs	r3, #2
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e013      	b.n	8005afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	613b      	str	r3, [r7, #16]
 8005ad8:	e010      	b.n	8005afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b80      	cmp	r3, #128	@ 0x80
 8005ade:	d902      	bls.n	8005ae6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	e00a      	b.n	8005afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b80      	cmp	r3, #128	@ 0x80
 8005aea:	d102      	bne.n	8005af2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005aec:	2302      	movs	r3, #2
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	e004      	b.n	8005afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b70      	cmp	r3, #112	@ 0x70
 8005af6:	d101      	bne.n	8005afc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005af8:	2301      	movs	r3, #1
 8005afa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005afc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f023 0207 	bic.w	r2, r3, #7
 8005b04:	4909      	ldr	r1, [pc, #36]	@ (8005b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b0c:	4b07      	ldr	r3, [pc, #28]	@ (8005b2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d001      	beq.n	8005b1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	40022000 	.word	0x40022000

08005b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e095      	b.n	8005c6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b52:	d009      	beq.n	8005b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	61da      	str	r2, [r3, #28]
 8005b5a:	e005      	b.n	8005b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb ff06 	bl	8001994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ba8:	d902      	bls.n	8005bb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e002      	b.n	8005bb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005bbe:	d007      	beq.n	8005bd0 <HAL_SPI_Init+0xa0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c12:	ea42 0103 	orr.w	r1, r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	f003 0204 	and.w	r2, r3, #4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c4c:	ea42 0103 	orr.w	r1, r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b088      	sub	sp, #32
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	603b      	str	r3, [r7, #0]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_SPI_Transmit+0x22>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e15f      	b.n	8005f58 <HAL_SPI_Transmit+0x2e2>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca0:	f7fe fdcc 	bl	800483c <HAL_GetTick>
 8005ca4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d002      	beq.n	8005cbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cba:	e148      	b.n	8005f4e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_SPI_Transmit+0x52>
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ccc:	e13f      	b.n	8005f4e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d18:	d10f      	bne.n	8005d3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d44:	2b40      	cmp	r3, #64	@ 0x40
 8005d46:	d007      	beq.n	8005d58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d60:	d94f      	bls.n	8005e02 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_SPI_Transmit+0xfa>
 8005d6a:	8afb      	ldrh	r3, [r7, #22]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d142      	bne.n	8005df6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d74:	881a      	ldrh	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	1c9a      	adds	r2, r3, #2
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d94:	e02f      	b.n	8005df6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d112      	bne.n	8005dca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da8:	881a      	ldrh	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	1c9a      	adds	r2, r3, #2
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dc8:	e015      	b.n	8005df6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dca:	f7fe fd37 	bl	800483c <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d803      	bhi.n	8005de2 <HAL_SPI_Transmit+0x16c>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d102      	bne.n	8005de8 <HAL_SPI_Transmit+0x172>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d106      	bne.n	8005df6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005df4:	e0ab      	b.n	8005f4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ca      	bne.n	8005d96 <HAL_SPI_Transmit+0x120>
 8005e00:	e080      	b.n	8005f04 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_SPI_Transmit+0x19a>
 8005e0a:	8afb      	ldrh	r3, [r7, #22]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d174      	bne.n	8005efa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d912      	bls.n	8005e40 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	881a      	ldrh	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2a:	1c9a      	adds	r2, r3, #2
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b02      	subs	r3, #2
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e3e:	e05c      	b.n	8005efa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	330c      	adds	r3, #12
 8005e4a:	7812      	ldrb	r2, [r2, #0]
 8005e4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e52:	1c5a      	adds	r2, r3, #1
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e66:	e048      	b.n	8005efa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d12b      	bne.n	8005ece <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d912      	bls.n	8005ea6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e84:	881a      	ldrh	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	1c9a      	adds	r2, r3, #2
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b02      	subs	r3, #2
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ea4:	e029      	b.n	8005efa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ecc:	e015      	b.n	8005efa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ece:	f7fe fcb5 	bl	800483c <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d803      	bhi.n	8005ee6 <HAL_SPI_Transmit+0x270>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee4:	d102      	bne.n	8005eec <HAL_SPI_Transmit+0x276>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d106      	bne.n	8005efa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005ef8:	e029      	b.n	8005f4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1b1      	bne.n	8005e68 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 fcf9 	bl	8006900 <SPI_EndRxTxTransaction>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	77fb      	strb	r3, [r7, #31]
 8005f44:	e003      	b.n	8005f4e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3720      	adds	r7, #32
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	603b      	str	r3, [r7, #0]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f70:	2300      	movs	r3, #0
 8005f72:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d002      	beq.n	8005f86 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005f80:	2302      	movs	r3, #2
 8005f82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f84:	e11a      	b.n	80061bc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f8e:	d112      	bne.n	8005fb6 <HAL_SPI_Receive+0x56>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10e      	bne.n	8005fb6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2204      	movs	r2, #4
 8005f9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005fa0:	88fa      	ldrh	r2, [r7, #6]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f000 f90e 	bl	80061ce <HAL_SPI_TransmitReceive>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	e107      	b.n	80061c6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d101      	bne.n	8005fc4 <HAL_SPI_Receive+0x64>
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	e100      	b.n	80061c6 <HAL_SPI_Receive+0x266>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fcc:	f7fe fc36 	bl	800483c <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_SPI_Receive+0x7e>
 8005fd8:	88fb      	ldrh	r3, [r7, #6]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d102      	bne.n	8005fe4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fe2:	e0eb      	b.n	80061bc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	88fa      	ldrh	r2, [r7, #6]
 8005ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800602e:	d908      	bls.n	8006042 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800603e:	605a      	str	r2, [r3, #4]
 8006040:	e007      	b.n	8006052 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006050:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800605a:	d10f      	bne.n	800607c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800606a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800607a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006086:	2b40      	cmp	r3, #64	@ 0x40
 8006088:	d007      	beq.n	800609a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006098:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80060a2:	d86f      	bhi.n	8006184 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80060a4:	e034      	b.n	8006110 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 0301 	and.w	r3, r3, #1
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d117      	bne.n	80060e4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f103 020c 	add.w	r2, r3, #12
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c0:	7812      	ldrb	r2, [r2, #0]
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29a      	uxth	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80060e2:	e015      	b.n	8006110 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e4:	f7fe fbaa 	bl	800483c <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d803      	bhi.n	80060fc <HAL_SPI_Receive+0x19c>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fa:	d102      	bne.n	8006102 <HAL_SPI_Receive+0x1a2>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d106      	bne.n	8006110 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800610e:	e055      	b.n	80061bc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006116:	b29b      	uxth	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1c4      	bne.n	80060a6 <HAL_SPI_Receive+0x146>
 800611c:	e038      	b.n	8006190 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b01      	cmp	r3, #1
 800612a:	d115      	bne.n	8006158 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68da      	ldr	r2, [r3, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006136:	b292      	uxth	r2, r2
 8006138:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	1c9a      	adds	r2, r3, #2
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800614a:	b29b      	uxth	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8006156:	e015      	b.n	8006184 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006158:	f7fe fb70 	bl	800483c <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d803      	bhi.n	8006170 <HAL_SPI_Receive+0x210>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d102      	bne.n	8006176 <HAL_SPI_Receive+0x216>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006182:	e01b      	b.n	80061bc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1c6      	bne.n	800611e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fb5b 	bl	8006850 <SPI_EndRxTransaction>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d002      	beq.n	80061a6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	75fb      	strb	r3, [r7, #23]
 80061b2:	e003      	b.n	80061bc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b08a      	sub	sp, #40	@ 0x28
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061dc:	2301      	movs	r3, #1
 80061de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x26>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e20a      	b.n	800660a <HAL_SPI_TransmitReceive+0x43c>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061fc:	f7fe fb1e 	bl	800483c <HAL_GetTick>
 8006200:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006208:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006210:	887b      	ldrh	r3, [r7, #2]
 8006212:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006214:	887b      	ldrh	r3, [r7, #2]
 8006216:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006218:	7efb      	ldrb	r3, [r7, #27]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d00e      	beq.n	800623c <HAL_SPI_TransmitReceive+0x6e>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006224:	d106      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d102      	bne.n	8006234 <HAL_SPI_TransmitReceive+0x66>
 800622e:	7efb      	ldrb	r3, [r7, #27]
 8006230:	2b04      	cmp	r3, #4
 8006232:	d003      	beq.n	800623c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006234:	2302      	movs	r3, #2
 8006236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800623a:	e1e0      	b.n	80065fe <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_SPI_TransmitReceive+0x80>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <HAL_SPI_TransmitReceive+0x80>
 8006248:	887b      	ldrh	r3, [r7, #2]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006254:	e1d3      	b.n	80065fe <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b04      	cmp	r3, #4
 8006260:	d003      	beq.n	800626a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2205      	movs	r2, #5
 8006266:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	887a      	ldrh	r2, [r7, #2]
 800627a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	887a      	ldrh	r2, [r7, #2]
 8006282:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	887a      	ldrh	r2, [r7, #2]
 8006290:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	887a      	ldrh	r2, [r7, #2]
 8006296:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062ac:	d802      	bhi.n	80062b4 <HAL_SPI_TransmitReceive+0xe6>
 80062ae:	8a3b      	ldrh	r3, [r7, #16]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d908      	bls.n	80062c6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062c2:	605a      	str	r2, [r3, #4]
 80062c4:	e007      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062d4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e0:	2b40      	cmp	r3, #64	@ 0x40
 80062e2:	d007      	beq.n	80062f4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062fc:	f240 8081 	bls.w	8006402 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_SPI_TransmitReceive+0x140>
 8006308:	8a7b      	ldrh	r3, [r7, #18]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d16d      	bne.n	80063ea <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006312:	881a      	ldrh	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631e:	1c9a      	adds	r2, r3, #2
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006332:	e05a      	b.n	80063ea <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d11b      	bne.n	800637a <HAL_SPI_TransmitReceive+0x1ac>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006346:	b29b      	uxth	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d016      	beq.n	800637a <HAL_SPI_TransmitReceive+0x1ac>
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	2b01      	cmp	r3, #1
 8006350:	d113      	bne.n	800637a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006356:	881a      	ldrh	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006362:	1c9a      	adds	r2, r3, #2
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	3b01      	subs	r3, #1
 8006370:	b29a      	uxth	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b01      	cmp	r3, #1
 8006386:	d11c      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x1f4>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d016      	beq.n	80063c2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	b292      	uxth	r2, r2
 80063a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	1c9a      	adds	r2, r3, #2
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063be:	2301      	movs	r3, #1
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063c2:	f7fe fa3b 	bl	800483c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d80b      	bhi.n	80063ea <HAL_SPI_TransmitReceive+0x21c>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d8:	d007      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80063e8:	e109      	b.n	80065fe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d19f      	bne.n	8006334 <HAL_SPI_TransmitReceive+0x166>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d199      	bne.n	8006334 <HAL_SPI_TransmitReceive+0x166>
 8006400:	e0e3      	b.n	80065ca <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x244>
 800640a:	8a7b      	ldrh	r3, [r7, #18]
 800640c:	2b01      	cmp	r3, #1
 800640e:	f040 80cf 	bne.w	80065b0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006416:	b29b      	uxth	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d912      	bls.n	8006442 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006420:	881a      	ldrh	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642c:	1c9a      	adds	r2, r3, #2
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006436:	b29b      	uxth	r3, r3
 8006438:	3b02      	subs	r3, #2
 800643a:	b29a      	uxth	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006440:	e0b6      	b.n	80065b0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	330c      	adds	r3, #12
 800644c:	7812      	ldrb	r2, [r2, #0]
 800644e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006468:	e0a2      	b.n	80065b0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b02      	cmp	r3, #2
 8006476:	d134      	bne.n	80064e2 <HAL_SPI_TransmitReceive+0x314>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800647c:	b29b      	uxth	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d02f      	beq.n	80064e2 <HAL_SPI_TransmitReceive+0x314>
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	2b01      	cmp	r3, #1
 8006486:	d12c      	bne.n	80064e2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b01      	cmp	r3, #1
 8006490:	d912      	bls.n	80064b8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064a2:	1c9a      	adds	r2, r3, #2
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b02      	subs	r3, #2
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064b6:	e012      	b.n	80064de <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	330c      	adds	r3, #12
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b29a      	uxth	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d148      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x3b4>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d042      	beq.n	8006582 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	d923      	bls.n	8006550 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	b292      	uxth	r2, r2
 8006514:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	1c9a      	adds	r2, r3, #2
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b02      	subs	r3, #2
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b01      	cmp	r3, #1
 800653c:	d81f      	bhi.n	800657e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800654c:	605a      	str	r2, [r3, #4]
 800654e:	e016      	b.n	800657e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f103 020c 	add.w	r2, r3, #12
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655c:	7812      	ldrb	r2, [r2, #0]
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006572:	b29b      	uxth	r3, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800657e:	2301      	movs	r3, #1
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006582:	f7fe f95b 	bl	800483c <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800658e:	429a      	cmp	r2, r3
 8006590:	d803      	bhi.n	800659a <HAL_SPI_TransmitReceive+0x3cc>
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006598:	d102      	bne.n	80065a0 <HAL_SPI_TransmitReceive+0x3d2>
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	2b00      	cmp	r3, #0
 800659e:	d107      	bne.n	80065b0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80065ae:	e026      	b.n	80065fe <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f47f af57 	bne.w	800646a <HAL_SPI_TransmitReceive+0x29c>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f47f af50 	bne.w	800646a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065ca:	69fa      	ldr	r2, [r7, #28]
 80065cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f996 	bl	8006900 <SPI_EndRxTxTransaction>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f4:	e003      	b.n	80065fe <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006606:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800660a:	4618      	mov	r0, r3
 800660c:	3728      	adds	r7, #40	@ 0x28
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
	...

08006614 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	603b      	str	r3, [r7, #0]
 8006620:	4613      	mov	r3, r2
 8006622:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006624:	f7fe f90a 	bl	800483c <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	1a9b      	subs	r3, r3, r2
 800662e:	683a      	ldr	r2, [r7, #0]
 8006630:	4413      	add	r3, r2
 8006632:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006634:	f7fe f902 	bl	800483c <HAL_GetTick>
 8006638:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800663a:	4b39      	ldr	r3, [pc, #228]	@ (8006720 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	015b      	lsls	r3, r3, #5
 8006640:	0d1b      	lsrs	r3, r3, #20
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	fb02 f303 	mul.w	r3, r2, r3
 8006648:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800664a:	e054      	b.n	80066f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d050      	beq.n	80066f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006654:	f7fe f8f2 	bl	800483c <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	69fa      	ldr	r2, [r7, #28]
 8006660:	429a      	cmp	r2, r3
 8006662:	d902      	bls.n	800666a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d13d      	bne.n	80066e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006678:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006682:	d111      	bne.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800668c:	d004      	beq.n	8006698 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006696:	d107      	bne.n	80066a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b0:	d10f      	bne.n	80066d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e017      	b.n	8006716 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	4013      	ands	r3, r2
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	429a      	cmp	r2, r3
 8006704:	bf0c      	ite	eq
 8006706:	2301      	moveq	r3, #1
 8006708:	2300      	movne	r3, #0
 800670a:	b2db      	uxtb	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	429a      	cmp	r2, r3
 8006712:	d19b      	bne.n	800664c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3720      	adds	r7, #32
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20000000 	.word	0x20000000

08006724 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	@ 0x28
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
 8006730:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006736:	f7fe f881 	bl	800483c <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673e:	1a9b      	subs	r3, r3, r2
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	4413      	add	r3, r2
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006746:	f7fe f879 	bl	800483c <HAL_GetTick>
 800674a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006754:	4b3d      	ldr	r3, [pc, #244]	@ (800684c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	4613      	mov	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	00da      	lsls	r2, r3, #3
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	0d1b      	lsrs	r3, r3, #20
 8006764:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800676c:	e060      	b.n	8006830 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006774:	d107      	bne.n	8006786 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006784:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678c:	d050      	beq.n	8006830 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800678e:	f7fe f855 	bl	800483c <HAL_GetTick>
 8006792:	4602      	mov	r2, r0
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800679a:	429a      	cmp	r2, r3
 800679c:	d902      	bls.n	80067a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d13d      	bne.n	8006820 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067bc:	d111      	bne.n	80067e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067c6:	d004      	beq.n	80067d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d0:	d107      	bne.n	80067e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067ea:	d10f      	bne.n	800680c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800680a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e010      	b.n	8006842 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	3b01      	subs	r3, #1
 800682e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4013      	ands	r3, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	429a      	cmp	r2, r3
 800683e:	d196      	bne.n	800676e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3728      	adds	r7, #40	@ 0x28
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20000000 	.word	0x20000000

08006850 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006864:	d111      	bne.n	800688a <SPI_EndRxTransaction+0x3a>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800686e:	d004      	beq.n	800687a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006878:	d107      	bne.n	800688a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006888:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2200      	movs	r2, #0
 8006892:	2180      	movs	r1, #128	@ 0x80
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f7ff febd 	bl	8006614 <SPI_WaitFlagStateUntilTimeout>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068a4:	f043 0220 	orr.w	r2, r3, #32
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e023      	b.n	80068f8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068b8:	d11d      	bne.n	80068f6 <SPI_EndRxTransaction+0xa6>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068c2:	d004      	beq.n	80068ce <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068cc:	d113      	bne.n	80068f6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f7ff ff22 	bl	8006724 <SPI_WaitFifoStateUntilTimeout>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d007      	beq.n	80068f6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ea:	f043 0220 	orr.w	r2, r3, #32
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80068f2:	2303      	movs	r3, #3
 80068f4:	e000      	b.n	80068f8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af02      	add	r7, sp, #8
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ff03 	bl	8006724 <SPI_WaitFifoStateUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e027      	b.n	8006984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2200      	movs	r2, #0
 800693c:	2180      	movs	r1, #128	@ 0x80
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff fe68 	bl	8006614 <SPI_WaitFlagStateUntilTimeout>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d007      	beq.n	800695a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694e:	f043 0220 	orr.w	r2, r3, #32
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e014      	b.n	8006984 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2200      	movs	r2, #0
 8006962:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff fedc 	bl	8006724 <SPI_WaitFifoStateUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d007      	beq.n	8006982 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006976:	f043 0220 	orr.w	r2, r3, #32
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e000      	b.n	8006984 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e049      	b.n	8006a32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f841 	bl	8006a3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3304      	adds	r3, #4
 80069c8:	4619      	mov	r1, r3
 80069ca:	4610      	mov	r0, r2
 80069cc:	f000 f9da 	bl	8006d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
	...

08006a50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d001      	beq.n	8006a68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e04f      	b.n	8006b08 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68da      	ldr	r2, [r3, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a23      	ldr	r2, [pc, #140]	@ (8006b14 <HAL_TIM_Base_Start_IT+0xc4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d01d      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0x76>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a92:	d018      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0x76>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1f      	ldr	r2, [pc, #124]	@ (8006b18 <HAL_TIM_Base_Start_IT+0xc8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0x76>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b1c <HAL_TIM_Base_Start_IT+0xcc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0x76>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1c      	ldr	r2, [pc, #112]	@ (8006b20 <HAL_TIM_Base_Start_IT+0xd0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0x76>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b24 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIM_Base_Start_IT+0x76>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a19      	ldr	r2, [pc, #100]	@ (8006b28 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d115      	bne.n	8006af2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	4b17      	ldr	r3, [pc, #92]	@ (8006b2c <HAL_TIM_Base_Start_IT+0xdc>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b06      	cmp	r3, #6
 8006ad6:	d015      	beq.n	8006b04 <HAL_TIM_Base_Start_IT+0xb4>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ade:	d011      	beq.n	8006b04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af0:	e008      	b.n	8006b04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f042 0201 	orr.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	e000      	b.n	8006b06 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40013400 	.word	0x40013400
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	00010007 	.word	0x00010007

08006b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d020      	beq.n	8006b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0202 	mvn.w	r2, #2
 8006b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f8e4 	bl	8006d48 <HAL_TIM_IC_CaptureCallback>
 8006b80:	e005      	b.n	8006b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f8d6 	bl	8006d34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f8e7 	bl	8006d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d020      	beq.n	8006be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01b      	beq.n	8006be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0204 	mvn.w	r2, #4
 8006bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8be 	bl	8006d48 <HAL_TIM_IC_CaptureCallback>
 8006bcc:	e005      	b.n	8006bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8b0 	bl	8006d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f8c1 	bl	8006d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d020      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01b      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0208 	mvn.w	r2, #8
 8006bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2204      	movs	r2, #4
 8006c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f898 	bl	8006d48 <HAL_TIM_IC_CaptureCallback>
 8006c18:	e005      	b.n	8006c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f88a 	bl	8006d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f89b 	bl	8006d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d020      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01b      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0210 	mvn.w	r2, #16
 8006c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f872 	bl	8006d48 <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f864 	bl	8006d34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f875 	bl	8006d5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00c      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d007      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0201 	mvn.w	r2, #1
 8006c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fa fe26 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00c      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d007      	beq.n	8006cc0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f906 	bl	8006ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d007      	beq.n	8006ce4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f8fe 	bl	8006ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00c      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d007      	beq.n	8006d08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f834 	bl	8006d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	f003 0320 	and.w	r3, r3, #32
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00c      	beq.n	8006d2c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0220 	mvn.w	r2, #32
 8006d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f8c6 	bl	8006eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a40      	ldr	r2, [pc, #256]	@ (8006e98 <TIM_Base_SetConfig+0x114>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <TIM_Base_SetConfig+0x40>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006da2:	d00f      	beq.n	8006dc4 <TIM_Base_SetConfig+0x40>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a3d      	ldr	r2, [pc, #244]	@ (8006e9c <TIM_Base_SetConfig+0x118>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00b      	beq.n	8006dc4 <TIM_Base_SetConfig+0x40>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a3c      	ldr	r2, [pc, #240]	@ (8006ea0 <TIM_Base_SetConfig+0x11c>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d007      	beq.n	8006dc4 <TIM_Base_SetConfig+0x40>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a3b      	ldr	r2, [pc, #236]	@ (8006ea4 <TIM_Base_SetConfig+0x120>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d003      	beq.n	8006dc4 <TIM_Base_SetConfig+0x40>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a3a      	ldr	r2, [pc, #232]	@ (8006ea8 <TIM_Base_SetConfig+0x124>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d108      	bne.n	8006dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a2f      	ldr	r2, [pc, #188]	@ (8006e98 <TIM_Base_SetConfig+0x114>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d01f      	beq.n	8006e1e <TIM_Base_SetConfig+0x9a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de4:	d01b      	beq.n	8006e1e <TIM_Base_SetConfig+0x9a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e9c <TIM_Base_SetConfig+0x118>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d017      	beq.n	8006e1e <TIM_Base_SetConfig+0x9a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a2b      	ldr	r2, [pc, #172]	@ (8006ea0 <TIM_Base_SetConfig+0x11c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d013      	beq.n	8006e1e <TIM_Base_SetConfig+0x9a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a2a      	ldr	r2, [pc, #168]	@ (8006ea4 <TIM_Base_SetConfig+0x120>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d00f      	beq.n	8006e1e <TIM_Base_SetConfig+0x9a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a29      	ldr	r2, [pc, #164]	@ (8006ea8 <TIM_Base_SetConfig+0x124>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d00b      	beq.n	8006e1e <TIM_Base_SetConfig+0x9a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a28      	ldr	r2, [pc, #160]	@ (8006eac <TIM_Base_SetConfig+0x128>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d007      	beq.n	8006e1e <TIM_Base_SetConfig+0x9a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a27      	ldr	r2, [pc, #156]	@ (8006eb0 <TIM_Base_SetConfig+0x12c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d003      	beq.n	8006e1e <TIM_Base_SetConfig+0x9a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a26      	ldr	r2, [pc, #152]	@ (8006eb4 <TIM_Base_SetConfig+0x130>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d108      	bne.n	8006e30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a10      	ldr	r2, [pc, #64]	@ (8006e98 <TIM_Base_SetConfig+0x114>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00f      	beq.n	8006e7c <TIM_Base_SetConfig+0xf8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a12      	ldr	r2, [pc, #72]	@ (8006ea8 <TIM_Base_SetConfig+0x124>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00b      	beq.n	8006e7c <TIM_Base_SetConfig+0xf8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a11      	ldr	r2, [pc, #68]	@ (8006eac <TIM_Base_SetConfig+0x128>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d007      	beq.n	8006e7c <TIM_Base_SetConfig+0xf8>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a10      	ldr	r2, [pc, #64]	@ (8006eb0 <TIM_Base_SetConfig+0x12c>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d003      	beq.n	8006e7c <TIM_Base_SetConfig+0xf8>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a0f      	ldr	r2, [pc, #60]	@ (8006eb4 <TIM_Base_SetConfig+0x130>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d103      	bne.n	8006e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	691a      	ldr	r2, [r3, #16]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	615a      	str	r2, [r3, #20]
}
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40000800 	.word	0x40000800
 8006ea4:	40000c00 	.word	0x40000c00
 8006ea8:	40013400 	.word	0x40013400
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40014400 	.word	0x40014400
 8006eb4:	40014800 	.word	0x40014800

08006eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006ef8:	4b05      	ldr	r3, [pc, #20]	@ (8006f10 <SysTick_Handler+0x1c>)
 8006efa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006efc:	f001 fe4e 	bl	8008b9c <xTaskGetSchedulerState>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d001      	beq.n	8006f0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006f06:	f002 fd47 	bl	8009998 <xPortSysTickHandler>
  }
}
 8006f0a:	bf00      	nop
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	e000e010 	.word	0xe000e010

08006f14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4a07      	ldr	r2, [pc, #28]	@ (8006f40 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	4a06      	ldr	r2, [pc, #24]	@ (8006f44 <vApplicationGetIdleTaskMemory+0x30>)
 8006f2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2280      	movs	r2, #128	@ 0x80
 8006f30:	601a      	str	r2, [r3, #0]
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	20000268 	.word	0x20000268
 8006f44:	20000310 	.word	0x20000310

08006f48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a07      	ldr	r2, [pc, #28]	@ (8006f74 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4a06      	ldr	r2, [pc, #24]	@ (8006f78 <vApplicationGetTimerTaskMemory+0x30>)
 8006f5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f66:	601a      	str	r2, [r3, #0]
}
 8006f68:	bf00      	nop
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	20000510 	.word	0x20000510
 8006f78:	200005b8 	.word	0x200005b8

08006f7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f103 0208 	add.w	r2, r3, #8
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f04f 32ff 	mov.w	r2, #4294967295
 8006f94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f103 0208 	add.w	r2, r3, #8
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f103 0208 	add.w	r2, r3, #8
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fca:	bf00      	nop
 8006fcc:	370c      	adds	r7, #12
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b085      	sub	sp, #20
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	601a      	str	r2, [r3, #0]
}
 8007012:	bf00      	nop
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d103      	bne.n	800703e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	e00c      	b.n	8007058 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3308      	adds	r3, #8
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	e002      	b.n	800704c <vListInsert+0x2e>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	429a      	cmp	r2, r3
 8007056:	d2f6      	bcs.n	8007046 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	601a      	str	r2, [r3, #0]
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6892      	ldr	r2, [r2, #8]
 80070a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6852      	ldr	r2, [r2, #4]
 80070b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d103      	bne.n	80070c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	1e5a      	subs	r2, r3, #1
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10b      	bne.n	8007110 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800710a:	bf00      	nop
 800710c:	bf00      	nop
 800710e:	e7fd      	b.n	800710c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007110:	f002 fbb2 	bl	8009878 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711c:	68f9      	ldr	r1, [r7, #12]
 800711e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007120:	fb01 f303 	mul.w	r3, r1, r3
 8007124:	441a      	add	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2200      	movs	r2, #0
 800712e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007140:	3b01      	subs	r3, #1
 8007142:	68f9      	ldr	r1, [r7, #12]
 8007144:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007146:	fb01 f303 	mul.w	r3, r1, r3
 800714a:	441a      	add	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	22ff      	movs	r2, #255	@ 0xff
 8007154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	22ff      	movs	r2, #255	@ 0xff
 800715c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d114      	bne.n	8007190 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01a      	beq.n	80071a4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3310      	adds	r3, #16
 8007172:	4618      	mov	r0, r3
 8007174:	f001 fb4c 	bl	8008810 <xTaskRemoveFromEventList>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d012      	beq.n	80071a4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800717e:	4b0d      	ldr	r3, [pc, #52]	@ (80071b4 <xQueueGenericReset+0xd0>)
 8007180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	e009      	b.n	80071a4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3310      	adds	r3, #16
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fef1 	bl	8006f7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3324      	adds	r3, #36	@ 0x24
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff feec 	bl	8006f7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80071a4:	f002 fb9a 	bl	80098dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071a8:	2301      	movs	r3, #1
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	e000ed04 	.word	0xe000ed04

080071b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08e      	sub	sp, #56	@ 0x38
 80071bc:	af02      	add	r7, sp, #8
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071fc:	bf00      	nop
 80071fe:	bf00      	nop
 8007200:	e7fd      	b.n	80071fe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <xQueueGenericCreateStatic+0x56>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <xQueueGenericCreateStatic+0x5a>
 800720e:	2301      	movs	r3, #1
 8007210:	e000      	b.n	8007214 <xQueueGenericCreateStatic+0x5c>
 8007212:	2300      	movs	r3, #0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	623b      	str	r3, [r7, #32]
}
 800722a:	bf00      	nop
 800722c:	bf00      	nop
 800722e:	e7fd      	b.n	800722c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d102      	bne.n	800723c <xQueueGenericCreateStatic+0x84>
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <xQueueGenericCreateStatic+0x88>
 800723c:	2301      	movs	r3, #1
 800723e:	e000      	b.n	8007242 <xQueueGenericCreateStatic+0x8a>
 8007240:	2300      	movs	r3, #0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10b      	bne.n	800725e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	61fb      	str	r3, [r7, #28]
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	e7fd      	b.n	800725a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800725e:	2350      	movs	r3, #80	@ 0x50
 8007260:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b50      	cmp	r3, #80	@ 0x50
 8007266:	d00b      	beq.n	8007280 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	61bb      	str	r3, [r7, #24]
}
 800727a:	bf00      	nop
 800727c:	bf00      	nop
 800727e:	e7fd      	b.n	800727c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007280:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00d      	beq.n	80072a8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007294:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	4613      	mov	r3, r2
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f840 	bl	8007328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3730      	adds	r7, #48	@ 0x30
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b08a      	sub	sp, #40	@ 0x28
 80072b6:	af02      	add	r7, sp, #8
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	4613      	mov	r3, r2
 80072be:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10b      	bne.n	80072de <xQueueGenericCreate+0x2c>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	613b      	str	r3, [r7, #16]
}
 80072d8:	bf00      	nop
 80072da:	bf00      	nop
 80072dc:	e7fd      	b.n	80072da <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	3350      	adds	r3, #80	@ 0x50
 80072ec:	4618      	mov	r0, r3
 80072ee:	f002 fbe5 	bl	8009abc <pvPortMalloc>
 80072f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d011      	beq.n	800731e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3350      	adds	r3, #80	@ 0x50
 8007302:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800730c:	79fa      	ldrb	r2, [r7, #7]
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	9300      	str	r3, [sp, #0]
 8007312:	4613      	mov	r3, r2
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 f805 	bl	8007328 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800731e:	69bb      	ldr	r3, [r7, #24]
	}
 8007320:	4618      	mov	r0, r3
 8007322:	3720      	adds	r7, #32
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d103      	bne.n	8007344 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	601a      	str	r2, [r3, #0]
 8007342:	e002      	b.n	800734a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007356:	2101      	movs	r1, #1
 8007358:	69b8      	ldr	r0, [r7, #24]
 800735a:	f7ff fec3 	bl	80070e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00e      	beq.n	800739a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800738e:	2300      	movs	r3, #0
 8007390:	2200      	movs	r2, #0
 8007392:	2100      	movs	r1, #0
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 f81d 	bl	80073d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	4603      	mov	r3, r0
 80073aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80073ac:	2301      	movs	r3, #1
 80073ae:	617b      	str	r3, [r7, #20]
 80073b0:	2300      	movs	r3, #0
 80073b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	461a      	mov	r2, r3
 80073b8:	6939      	ldr	r1, [r7, #16]
 80073ba:	6978      	ldr	r0, [r7, #20]
 80073bc:	f7ff ff79 	bl	80072b2 <xQueueGenericCreate>
 80073c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f7ff ffd3 	bl	800736e <prvInitialiseMutex>

		return xNewQueue;
 80073c8:	68fb      	ldr	r3, [r7, #12]
	}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	@ 0x38
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073e2:	2300      	movs	r3, #0
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10b      	bne.n	8007408 <xQueueGenericSend+0x34>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	e7fd      	b.n	8007404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <xQueueGenericSend+0x42>
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <xQueueGenericSend+0x46>
 8007416:	2301      	movs	r3, #1
 8007418:	e000      	b.n	800741c <xQueueGenericSend+0x48>
 800741a:	2300      	movs	r3, #0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10b      	bne.n	8007438 <xQueueGenericSend+0x64>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d103      	bne.n	8007446 <xQueueGenericSend+0x72>
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <xQueueGenericSend+0x76>
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <xQueueGenericSend+0x78>
 800744a:	2300      	movs	r3, #0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10b      	bne.n	8007468 <xQueueGenericSend+0x94>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	623b      	str	r3, [r7, #32]
}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	e7fd      	b.n	8007464 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007468:	f001 fb98 	bl	8008b9c <xTaskGetSchedulerState>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <xQueueGenericSend+0xa4>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <xQueueGenericSend+0xa8>
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <xQueueGenericSend+0xaa>
 800747c:	2300      	movs	r3, #0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10b      	bne.n	800749a <xQueueGenericSend+0xc6>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	61fb      	str	r3, [r7, #28]
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800749a:	f002 f9ed 	bl	8009878 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d302      	bcc.n	80074b0 <xQueueGenericSend+0xdc>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d129      	bne.n	8007504 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074b6:	f000 fb37 	bl	8007b28 <prvCopyDataToQueue>
 80074ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d010      	beq.n	80074e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	3324      	adds	r3, #36	@ 0x24
 80074c8:	4618      	mov	r0, r3
 80074ca:	f001 f9a1 	bl	8008810 <xTaskRemoveFromEventList>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d013      	beq.n	80074fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074d4:	4b3f      	ldr	r3, [pc, #252]	@ (80075d4 <xQueueGenericSend+0x200>)
 80074d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	e00a      	b.n	80074fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074ec:	4b39      	ldr	r3, [pc, #228]	@ (80075d4 <xQueueGenericSend+0x200>)
 80074ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074fc:	f002 f9ee 	bl	80098dc <vPortExitCritical>
				return pdPASS;
 8007500:	2301      	movs	r3, #1
 8007502:	e063      	b.n	80075cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d103      	bne.n	8007512 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800750a:	f002 f9e7 	bl	80098dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800750e:	2300      	movs	r3, #0
 8007510:	e05c      	b.n	80075cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007518:	f107 0314 	add.w	r3, r7, #20
 800751c:	4618      	mov	r0, r3
 800751e:	f001 f9db 	bl	80088d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007522:	2301      	movs	r3, #1
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007526:	f002 f9d9 	bl	80098dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800752a:	f000 ff43 	bl	80083b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800752e:	f002 f9a3 	bl	8009878 <vPortEnterCritical>
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007538:	b25b      	sxtb	r3, r3
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753e:	d103      	bne.n	8007548 <xQueueGenericSend+0x174>
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800754e:	b25b      	sxtb	r3, r3
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007554:	d103      	bne.n	800755e <xQueueGenericSend+0x18a>
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800755e:	f002 f9bd 	bl	80098dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007562:	1d3a      	adds	r2, r7, #4
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f001 f9ca 	bl	8008904 <xTaskCheckForTimeOut>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d124      	bne.n	80075c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007576:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007578:	f000 fbce 	bl	8007d18 <prvIsQueueFull>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d018      	beq.n	80075b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007584:	3310      	adds	r3, #16
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4611      	mov	r1, r2
 800758a:	4618      	mov	r0, r3
 800758c:	f001 f8ee 	bl	800876c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007592:	f000 fb59 	bl	8007c48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007596:	f000 ff1b 	bl	80083d0 <xTaskResumeAll>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	f47f af7c 	bne.w	800749a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80075a2:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <xQueueGenericSend+0x200>)
 80075a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	e772      	b.n	800749a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075b6:	f000 fb47 	bl	8007c48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ba:	f000 ff09 	bl	80083d0 <xTaskResumeAll>
 80075be:	e76c      	b.n	800749a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075c2:	f000 fb41 	bl	8007c48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075c6:	f000 ff03 	bl	80083d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3738      	adds	r7, #56	@ 0x38
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b090      	sub	sp, #64	@ 0x40
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10b      	bne.n	8007608 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <xQueueGenericSendFromISR+0x3e>
 800760e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <xQueueGenericSendFromISR+0x42>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <xQueueGenericSendFromISR+0x44>
 800761a:	2300      	movs	r3, #0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10b      	bne.n	8007638 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007632:	bf00      	nop
 8007634:	bf00      	nop
 8007636:	e7fd      	b.n	8007634 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b02      	cmp	r3, #2
 800763c:	d103      	bne.n	8007646 <xQueueGenericSendFromISR+0x6e>
 800763e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <xQueueGenericSendFromISR+0x72>
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <xQueueGenericSendFromISR+0x74>
 800764a:	2300      	movs	r3, #0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10b      	bne.n	8007668 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007654:	f383 8811 	msr	BASEPRI, r3
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	f3bf 8f4f 	dsb	sy
 8007660:	623b      	str	r3, [r7, #32]
}
 8007662:	bf00      	nop
 8007664:	bf00      	nop
 8007666:	e7fd      	b.n	8007664 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007668:	f002 f9e6 	bl	8009a38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800766c:	f3ef 8211 	mrs	r2, BASEPRI
 8007670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	61fa      	str	r2, [r7, #28]
 8007682:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007684:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007686:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800768c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800768e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007690:	429a      	cmp	r2, r3
 8007692:	d302      	bcc.n	800769a <xQueueGenericSendFromISR+0xc2>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d12f      	bne.n	80076fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	68b9      	ldr	r1, [r7, #8]
 80076ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80076b0:	f000 fa3a 	bl	8007b28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80076b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80076b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076bc:	d112      	bne.n	80076e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d016      	beq.n	80076f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c8:	3324      	adds	r3, #36	@ 0x24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 f8a0 	bl	8008810 <xTaskRemoveFromEventList>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00e      	beq.n	80076f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00b      	beq.n	80076f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	e007      	b.n	80076f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80076e8:	3301      	adds	r3, #1
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	b25a      	sxtb	r2, r3
 80076ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80076f4:	2301      	movs	r3, #1
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80076f8:	e001      	b.n	80076fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007700:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007708:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800770a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800770c:	4618      	mov	r0, r3
 800770e:	3740      	adds	r7, #64	@ 0x40
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08c      	sub	sp, #48	@ 0x30
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007720:	2300      	movs	r3, #0
 8007722:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10b      	bne.n	8007746 <xQueueReceive+0x32>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	623b      	str	r3, [r7, #32]
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	e7fd      	b.n	8007742 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <xQueueReceive+0x40>
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <xQueueReceive+0x44>
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <xQueueReceive+0x46>
 8007758:	2300      	movs	r3, #0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <xQueueReceive+0x62>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	61fb      	str	r3, [r7, #28]
}
 8007770:	bf00      	nop
 8007772:	bf00      	nop
 8007774:	e7fd      	b.n	8007772 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007776:	f001 fa11 	bl	8008b9c <xTaskGetSchedulerState>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d102      	bne.n	8007786 <xQueueReceive+0x72>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <xQueueReceive+0x76>
 8007786:	2301      	movs	r3, #1
 8007788:	e000      	b.n	800778c <xQueueReceive+0x78>
 800778a:	2300      	movs	r3, #0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10b      	bne.n	80077a8 <xQueueReceive+0x94>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	61bb      	str	r3, [r7, #24]
}
 80077a2:	bf00      	nop
 80077a4:	bf00      	nop
 80077a6:	e7fd      	b.n	80077a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077a8:	f002 f866 	bl	8009878 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d01f      	beq.n	80077f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077bc:	f000 fa1e 	bl	8007bfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c2:	1e5a      	subs	r2, r3, #1
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00f      	beq.n	80077f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d2:	3310      	adds	r3, #16
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 f81b 	bl	8008810 <xTaskRemoveFromEventList>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d007      	beq.n	80077f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077e0:	4b3c      	ldr	r3, [pc, #240]	@ (80078d4 <xQueueReceive+0x1c0>)
 80077e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077e6:	601a      	str	r2, [r3, #0]
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077f0:	f002 f874 	bl	80098dc <vPortExitCritical>
				return pdPASS;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e069      	b.n	80078cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d103      	bne.n	8007806 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077fe:	f002 f86d 	bl	80098dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007802:	2300      	movs	r3, #0
 8007804:	e062      	b.n	80078cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d106      	bne.n	800781a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800780c:	f107 0310 	add.w	r3, r7, #16
 8007810:	4618      	mov	r0, r3
 8007812:	f001 f861 	bl	80088d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007816:	2301      	movs	r3, #1
 8007818:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800781a:	f002 f85f 	bl	80098dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800781e:	f000 fdc9 	bl	80083b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007822:	f002 f829 	bl	8009878 <vPortEnterCritical>
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800782c:	b25b      	sxtb	r3, r3
 800782e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007832:	d103      	bne.n	800783c <xQueueReceive+0x128>
 8007834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007836:	2200      	movs	r2, #0
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800783c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007842:	b25b      	sxtb	r3, r3
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007848:	d103      	bne.n	8007852 <xQueueReceive+0x13e>
 800784a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007852:	f002 f843 	bl	80098dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007856:	1d3a      	adds	r2, r7, #4
 8007858:	f107 0310 	add.w	r3, r7, #16
 800785c:	4611      	mov	r1, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f001 f850 	bl	8008904 <xTaskCheckForTimeOut>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d123      	bne.n	80078b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800786a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800786c:	f000 fa3e 	bl	8007cec <prvIsQueueEmpty>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d017      	beq.n	80078a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	3324      	adds	r3, #36	@ 0x24
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	4611      	mov	r1, r2
 800787e:	4618      	mov	r0, r3
 8007880:	f000 ff74 	bl	800876c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007884:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007886:	f000 f9df 	bl	8007c48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800788a:	f000 fda1 	bl	80083d0 <xTaskResumeAll>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d189      	bne.n	80077a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007894:	4b0f      	ldr	r3, [pc, #60]	@ (80078d4 <xQueueReceive+0x1c0>)
 8007896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	e780      	b.n	80077a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80078a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078a8:	f000 f9ce 	bl	8007c48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078ac:	f000 fd90 	bl	80083d0 <xTaskResumeAll>
 80078b0:	e77a      	b.n	80077a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80078b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078b4:	f000 f9c8 	bl	8007c48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078b8:	f000 fd8a 	bl	80083d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078be:	f000 fa15 	bl	8007cec <prvIsQueueEmpty>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f43f af6f 	beq.w	80077a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3730      	adds	r7, #48	@ 0x30
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	e000ed04 	.word	0xe000ed04

080078d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08e      	sub	sp, #56	@ 0x38
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80078e2:	2300      	movs	r3, #0
 80078e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80078ea:	2300      	movs	r3, #0
 80078ec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10b      	bne.n	800790c <xQueueSemaphoreTake+0x34>
	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	623b      	str	r3, [r7, #32]
}
 8007906:	bf00      	nop
 8007908:	bf00      	nop
 800790a:	e7fd      	b.n	8007908 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800790c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800790e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	61fb      	str	r3, [r7, #28]
}
 8007926:	bf00      	nop
 8007928:	bf00      	nop
 800792a:	e7fd      	b.n	8007928 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800792c:	f001 f936 	bl	8008b9c <xTaskGetSchedulerState>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d102      	bne.n	800793c <xQueueSemaphoreTake+0x64>
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <xQueueSemaphoreTake+0x68>
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <xQueueSemaphoreTake+0x6a>
 8007940:	2300      	movs	r3, #0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10b      	bne.n	800795e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	61bb      	str	r3, [r7, #24]
}
 8007958:	bf00      	nop
 800795a:	bf00      	nop
 800795c:	e7fd      	b.n	800795a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800795e:	f001 ff8b 	bl	8009878 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007966:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796a:	2b00      	cmp	r3, #0
 800796c:	d024      	beq.n	80079b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800796e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007970:	1e5a      	subs	r2, r3, #1
 8007972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007974:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d104      	bne.n	8007988 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800797e:	f001 fa87 	bl	8008e90 <pvTaskIncrementMutexHeldCount>
 8007982:	4602      	mov	r2, r0
 8007984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007986:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00f      	beq.n	80079b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007992:	3310      	adds	r3, #16
 8007994:	4618      	mov	r0, r3
 8007996:	f000 ff3b 	bl	8008810 <xTaskRemoveFromEventList>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079a0:	4b54      	ldr	r3, [pc, #336]	@ (8007af4 <xQueueSemaphoreTake+0x21c>)
 80079a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079b0:	f001 ff94 	bl	80098dc <vPortExitCritical>
				return pdPASS;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e098      	b.n	8007aea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d112      	bne.n	80079e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	617b      	str	r3, [r7, #20]
}
 80079d6:	bf00      	nop
 80079d8:	bf00      	nop
 80079da:	e7fd      	b.n	80079d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80079dc:	f001 ff7e 	bl	80098dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079e0:	2300      	movs	r3, #0
 80079e2:	e082      	b.n	8007aea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d106      	bne.n	80079f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 ff72 	bl	80088d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079f4:	2301      	movs	r3, #1
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079f8:	f001 ff70 	bl	80098dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079fc:	f000 fcda 	bl	80083b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a00:	f001 ff3a 	bl	8009878 <vPortEnterCritical>
 8007a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a0a:	b25b      	sxtb	r3, r3
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d103      	bne.n	8007a1a <xQueueSemaphoreTake+0x142>
 8007a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a20:	b25b      	sxtb	r3, r3
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d103      	bne.n	8007a30 <xQueueSemaphoreTake+0x158>
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a30:	f001 ff54 	bl	80098dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a34:	463a      	mov	r2, r7
 8007a36:	f107 030c 	add.w	r3, r7, #12
 8007a3a:	4611      	mov	r1, r2
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 ff61 	bl	8008904 <xTaskCheckForTimeOut>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d132      	bne.n	8007aae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a4a:	f000 f94f 	bl	8007cec <prvIsQueueEmpty>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d026      	beq.n	8007aa2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007a5c:	f001 ff0c 	bl	8009878 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f001 f8b7 	bl	8008bd8 <xTaskPriorityInherit>
 8007a6a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007a6c:	f001 ff36 	bl	80098dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a72:	3324      	adds	r3, #36	@ 0x24
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	4611      	mov	r1, r2
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f000 fe77 	bl	800876c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a80:	f000 f8e2 	bl	8007c48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a84:	f000 fca4 	bl	80083d0 <xTaskResumeAll>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f47f af67 	bne.w	800795e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007a90:	4b18      	ldr	r3, [pc, #96]	@ (8007af4 <xQueueSemaphoreTake+0x21c>)
 8007a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	e75d      	b.n	800795e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007aa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007aa4:	f000 f8d0 	bl	8007c48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aa8:	f000 fc92 	bl	80083d0 <xTaskResumeAll>
 8007aac:	e757      	b.n	800795e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007aae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ab0:	f000 f8ca 	bl	8007c48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ab4:	f000 fc8c 	bl	80083d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ab8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007aba:	f000 f917 	bl	8007cec <prvIsQueueEmpty>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	f43f af4c 	beq.w	800795e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00d      	beq.n	8007ae8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007acc:	f001 fed4 	bl	8009878 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ad0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ad2:	f000 f811 	bl	8007af8 <prvGetDisinheritPriorityAfterTimeout>
 8007ad6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f001 f952 	bl	8008d88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ae4:	f001 fefa 	bl	80098dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ae8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3738      	adds	r7, #56	@ 0x38
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	e000ed04 	.word	0xe000ed04

08007af8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d006      	beq.n	8007b16 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	e001      	b.n	8007b1a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
	}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b34:	2300      	movs	r3, #0
 8007b36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10d      	bne.n	8007b62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d14d      	bne.n	8007bea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f001 f8a8 	bl	8008ca8 <xTaskPriorityDisinherit>
 8007b58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	609a      	str	r2, [r3, #8]
 8007b60:	e043      	b.n	8007bea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d119      	bne.n	8007b9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6858      	ldr	r0, [r3, #4]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b70:	461a      	mov	r2, r3
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	f002 fa3a 	bl	8009fec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b80:	441a      	add	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d32b      	bcc.n	8007bea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	e026      	b.n	8007bea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	68d8      	ldr	r0, [r3, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	f002 fa20 	bl	8009fec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb4:	425b      	negs	r3, r3
 8007bb6:	441a      	add	r2, r3
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d207      	bcs.n	8007bd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd0:	425b      	negs	r3, r3
 8007bd2:	441a      	add	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d105      	bne.n	8007bea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1c5a      	adds	r2, r3, #1
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007bf2:	697b      	ldr	r3, [r7, #20]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d018      	beq.n	8007c40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c16:	441a      	add	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d303      	bcc.n	8007c30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68d9      	ldr	r1, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6838      	ldr	r0, [r7, #0]
 8007c3c:	f002 f9d6 	bl	8009fec <memcpy>
	}
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c50:	f001 fe12 	bl	8009878 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c5c:	e011      	b.n	8007c82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d012      	beq.n	8007c8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	3324      	adds	r3, #36	@ 0x24
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fdd0 	bl	8008810 <xTaskRemoveFromEventList>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c76:	f000 fea9 	bl	80089cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	dce9      	bgt.n	8007c5e <prvUnlockQueue+0x16>
 8007c8a:	e000      	b.n	8007c8e <prvUnlockQueue+0x46>
					break;
 8007c8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	22ff      	movs	r2, #255	@ 0xff
 8007c92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007c96:	f001 fe21 	bl	80098dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c9a:	f001 fded 	bl	8009878 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ca4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ca6:	e011      	b.n	8007ccc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d012      	beq.n	8007cd6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fdab 	bl	8008810 <xTaskRemoveFromEventList>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007cc0:	f000 fe84 	bl	80089cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ccc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	dce9      	bgt.n	8007ca8 <prvUnlockQueue+0x60>
 8007cd4:	e000      	b.n	8007cd8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cd6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	22ff      	movs	r2, #255	@ 0xff
 8007cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007ce0:	f001 fdfc 	bl	80098dc <vPortExitCritical>
}
 8007ce4:	bf00      	nop
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cf4:	f001 fdc0 	bl	8009878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	e001      	b.n	8007d0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d0a:	f001 fde7 	bl	80098dc <vPortExitCritical>

	return xReturn;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d20:	f001 fdaa 	bl	8009878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d102      	bne.n	8007d36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	e001      	b.n	8007d3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d36:	2300      	movs	r3, #0
 8007d38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d3a:	f001 fdcf 	bl	80098dc <vPortExitCritical>

	return xReturn;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	e014      	b.n	8007d82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d58:	4a0f      	ldr	r2, [pc, #60]	@ (8007d98 <vQueueAddToRegistry+0x50>)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d64:	490c      	ldr	r1, [pc, #48]	@ (8007d98 <vQueueAddToRegistry+0x50>)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d98 <vQueueAddToRegistry+0x50>)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	4413      	add	r3, r2
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d7a:	e006      	b.n	8007d8a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b07      	cmp	r3, #7
 8007d86:	d9e7      	bls.n	8007d58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d88:	bf00      	nop
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	200009b8 	.word	0x200009b8

08007d9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007dac:	f001 fd64 	bl	8009878 <vPortEnterCritical>
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007db6:	b25b      	sxtb	r3, r3
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbc:	d103      	bne.n	8007dc6 <vQueueWaitForMessageRestricted+0x2a>
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dcc:	b25b      	sxtb	r3, r3
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	d103      	bne.n	8007ddc <vQueueWaitForMessageRestricted+0x40>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ddc:	f001 fd7e 	bl	80098dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d106      	bne.n	8007df6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	3324      	adds	r3, #36	@ 0x24
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	68b9      	ldr	r1, [r7, #8]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fce1 	bl	80087b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007df6:	6978      	ldr	r0, [r7, #20]
 8007df8:	f7ff ff26 	bl	8007c48 <prvUnlockQueue>
	}
 8007dfc:	bf00      	nop
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08e      	sub	sp, #56	@ 0x38
 8007e08:	af04      	add	r7, sp, #16
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10b      	bne.n	8007e30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	623b      	str	r3, [r7, #32]
}
 8007e2a:	bf00      	nop
 8007e2c:	bf00      	nop
 8007e2e:	e7fd      	b.n	8007e2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10b      	bne.n	8007e4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	61fb      	str	r3, [r7, #28]
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	e7fd      	b.n	8007e4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e4e:	23a8      	movs	r3, #168	@ 0xa8
 8007e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2ba8      	cmp	r3, #168	@ 0xa8
 8007e56:	d00b      	beq.n	8007e70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	61bb      	str	r3, [r7, #24]
}
 8007e6a:	bf00      	nop
 8007e6c:	bf00      	nop
 8007e6e:	e7fd      	b.n	8007e6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01e      	beq.n	8007eb6 <xTaskCreateStatic+0xb2>
 8007e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d01b      	beq.n	8007eb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e90:	2300      	movs	r3, #0
 8007e92:	9303      	str	r3, [sp, #12]
 8007e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e96:	9302      	str	r3, [sp, #8]
 8007e98:	f107 0314 	add.w	r3, r7, #20
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	68b9      	ldr	r1, [r7, #8]
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	f000 f851 	bl	8007f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007eae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007eb0:	f000 f8f6 	bl	80080a0 <prvAddNewTaskToReadyList>
 8007eb4:	e001      	b.n	8007eba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007eba:	697b      	ldr	r3, [r7, #20]
	}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3728      	adds	r7, #40	@ 0x28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08c      	sub	sp, #48	@ 0x30
 8007ec8:	af04      	add	r7, sp, #16
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ed4:	88fb      	ldrh	r3, [r7, #6]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f001 fdef 	bl	8009abc <pvPortMalloc>
 8007ede:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00e      	beq.n	8007f04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ee6:	20a8      	movs	r0, #168	@ 0xa8
 8007ee8:	f001 fde8 	bl	8009abc <pvPortMalloc>
 8007eec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d003      	beq.n	8007efc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007efa:	e005      	b.n	8007f08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007efc:	6978      	ldr	r0, [r7, #20]
 8007efe:	f001 feab 	bl	8009c58 <vPortFree>
 8007f02:	e001      	b.n	8007f08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d017      	beq.n	8007f3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f16:	88fa      	ldrh	r2, [r7, #6]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9303      	str	r3, [sp, #12]
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	9302      	str	r3, [sp, #8]
 8007f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f22:	9301      	str	r3, [sp, #4]
 8007f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f80f 	bl	8007f50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f32:	69f8      	ldr	r0, [r7, #28]
 8007f34:	f000 f8b4 	bl	80080a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e002      	b.n	8007f44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f44:	69bb      	ldr	r3, [r7, #24]
	}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b088      	sub	sp, #32
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f60:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	461a      	mov	r2, r3
 8007f68:	21a5      	movs	r1, #165	@ 0xa5
 8007f6a:	f001 ffb5 	bl	8009ed8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	f023 0307 	bic.w	r3, r3, #7
 8007f86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00b      	beq.n	8007faa <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	617b      	str	r3, [r7, #20]
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	e7fd      	b.n	8007fa6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01f      	beq.n	8007ff0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61fb      	str	r3, [r7, #28]
 8007fb4:	e012      	b.n	8007fdc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	4413      	add	r3, r2
 8007fbc:	7819      	ldrb	r1, [r3, #0]
 8007fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3334      	adds	r3, #52	@ 0x34
 8007fc6:	460a      	mov	r2, r1
 8007fc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	4413      	add	r3, r2
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d006      	beq.n	8007fe4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	2b0f      	cmp	r3, #15
 8007fe0:	d9e9      	bls.n	8007fb6 <prvInitialiseNewTask+0x66>
 8007fe2:	e000      	b.n	8007fe6 <prvInitialiseNewTask+0x96>
			{
				break;
 8007fe4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007fee:	e003      	b.n	8007ff8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffa:	2b37      	cmp	r3, #55	@ 0x37
 8007ffc:	d901      	bls.n	8008002 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ffe:	2337      	movs	r3, #55	@ 0x37
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008006:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800800c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	2200      	movs	r2, #0
 8008012:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	3304      	adds	r3, #4
 8008018:	4618      	mov	r0, r3
 800801a:	f7fe ffcf 	bl	8006fbc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800801e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008020:	3318      	adds	r3, #24
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe ffca 	bl	8006fbc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800802c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008030:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800803c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008048:	2200      	movs	r2, #0
 800804a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	3354      	adds	r3, #84	@ 0x54
 8008052:	224c      	movs	r2, #76	@ 0x4c
 8008054:	2100      	movs	r1, #0
 8008056:	4618      	mov	r0, r3
 8008058:	f001 ff3e 	bl	8009ed8 <memset>
 800805c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805e:	4a0d      	ldr	r2, [pc, #52]	@ (8008094 <prvInitialiseNewTask+0x144>)
 8008060:	659a      	str	r2, [r3, #88]	@ 0x58
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	4a0c      	ldr	r2, [pc, #48]	@ (8008098 <prvInitialiseNewTask+0x148>)
 8008066:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806a:	4a0c      	ldr	r2, [pc, #48]	@ (800809c <prvInitialiseNewTask+0x14c>)
 800806c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800806e:	683a      	ldr	r2, [r7, #0]
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	69b8      	ldr	r0, [r7, #24]
 8008074:	f001 face 	bl	8009614 <pxPortInitialiseStack>
 8008078:	4602      	mov	r2, r0
 800807a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800807e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008080:	2b00      	cmp	r3, #0
 8008082:	d002      	beq.n	800808a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800808a:	bf00      	nop
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20001c04 	.word	0x20001c04
 8008098:	20001c6c 	.word	0x20001c6c
 800809c:	20001cd4 	.word	0x20001cd4

080080a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80080a8:	f001 fbe6 	bl	8009878 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80080ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008164 <prvAddNewTaskToReadyList+0xc4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	4a2c      	ldr	r2, [pc, #176]	@ (8008164 <prvAddNewTaskToReadyList+0xc4>)
 80080b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80080b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008168 <prvAddNewTaskToReadyList+0xc8>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d109      	bne.n	80080d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80080be:	4a2a      	ldr	r2, [pc, #168]	@ (8008168 <prvAddNewTaskToReadyList+0xc8>)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80080c4:	4b27      	ldr	r3, [pc, #156]	@ (8008164 <prvAddNewTaskToReadyList+0xc4>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d110      	bne.n	80080ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080cc:	f000 fca2 	bl	8008a14 <prvInitialiseTaskLists>
 80080d0:	e00d      	b.n	80080ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080d2:	4b26      	ldr	r3, [pc, #152]	@ (800816c <prvAddNewTaskToReadyList+0xcc>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080da:	4b23      	ldr	r3, [pc, #140]	@ (8008168 <prvAddNewTaskToReadyList+0xc8>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d802      	bhi.n	80080ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080e8:	4a1f      	ldr	r2, [pc, #124]	@ (8008168 <prvAddNewTaskToReadyList+0xc8>)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080ee:	4b20      	ldr	r3, [pc, #128]	@ (8008170 <prvAddNewTaskToReadyList+0xd0>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	4a1e      	ldr	r2, [pc, #120]	@ (8008170 <prvAddNewTaskToReadyList+0xd0>)
 80080f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80080f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008170 <prvAddNewTaskToReadyList+0xd0>)
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008104:	4b1b      	ldr	r3, [pc, #108]	@ (8008174 <prvAddNewTaskToReadyList+0xd4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d903      	bls.n	8008114 <prvAddNewTaskToReadyList+0x74>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	4a18      	ldr	r2, [pc, #96]	@ (8008174 <prvAddNewTaskToReadyList+0xd4>)
 8008112:	6013      	str	r3, [r2, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008118:	4613      	mov	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	4a15      	ldr	r2, [pc, #84]	@ (8008178 <prvAddNewTaskToReadyList+0xd8>)
 8008122:	441a      	add	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3304      	adds	r3, #4
 8008128:	4619      	mov	r1, r3
 800812a:	4610      	mov	r0, r2
 800812c:	f7fe ff53 	bl	8006fd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008130:	f001 fbd4 	bl	80098dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008134:	4b0d      	ldr	r3, [pc, #52]	@ (800816c <prvAddNewTaskToReadyList+0xcc>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d00e      	beq.n	800815a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800813c:	4b0a      	ldr	r3, [pc, #40]	@ (8008168 <prvAddNewTaskToReadyList+0xc8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008146:	429a      	cmp	r2, r3
 8008148:	d207      	bcs.n	800815a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800814a:	4b0c      	ldr	r3, [pc, #48]	@ (800817c <prvAddNewTaskToReadyList+0xdc>)
 800814c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000ecc 	.word	0x20000ecc
 8008168:	200009f8 	.word	0x200009f8
 800816c:	20000ed8 	.word	0x20000ed8
 8008170:	20000ee8 	.word	0x20000ee8
 8008174:	20000ed4 	.word	0x20000ed4
 8008178:	200009fc 	.word	0x200009fc
 800817c:	e000ed04 	.word	0xe000ed04

08008180 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008188:	f001 fb76 	bl	8009878 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d102      	bne.n	8008198 <vTaskDelete+0x18>
 8008192:	4b2d      	ldr	r3, [pc, #180]	@ (8008248 <vTaskDelete+0xc8>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	e000      	b.n	800819a <vTaskDelete+0x1a>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3304      	adds	r3, #4
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe ff75 	bl	8007090 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d004      	beq.n	80081b8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3318      	adds	r3, #24
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe ff6c 	bl	8007090 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80081b8:	4b24      	ldr	r3, [pc, #144]	@ (800824c <vTaskDelete+0xcc>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3301      	adds	r3, #1
 80081be:	4a23      	ldr	r2, [pc, #140]	@ (800824c <vTaskDelete+0xcc>)
 80081c0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80081c2:	4b21      	ldr	r3, [pc, #132]	@ (8008248 <vTaskDelete+0xc8>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d10b      	bne.n	80081e4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4619      	mov	r1, r3
 80081d2:	481f      	ldr	r0, [pc, #124]	@ (8008250 <vTaskDelete+0xd0>)
 80081d4:	f7fe feff 	bl	8006fd6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80081d8:	4b1e      	ldr	r3, [pc, #120]	@ (8008254 <vTaskDelete+0xd4>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	4a1d      	ldr	r2, [pc, #116]	@ (8008254 <vTaskDelete+0xd4>)
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	e009      	b.n	80081f8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80081e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008258 <vTaskDelete+0xd8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	4a1b      	ldr	r2, [pc, #108]	@ (8008258 <vTaskDelete+0xd8>)
 80081ec:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f000 fc7e 	bl	8008af0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80081f4:	f000 fcb2 	bl	8008b5c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80081f8:	f001 fb70 	bl	80098dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80081fc:	4b17      	ldr	r3, [pc, #92]	@ (800825c <vTaskDelete+0xdc>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01c      	beq.n	800823e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8008204:	4b10      	ldr	r3, [pc, #64]	@ (8008248 <vTaskDelete+0xc8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	429a      	cmp	r2, r3
 800820c:	d117      	bne.n	800823e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800820e:	4b14      	ldr	r3, [pc, #80]	@ (8008260 <vTaskDelete+0xe0>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00b      	beq.n	800822e <vTaskDelete+0xae>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	60bb      	str	r3, [r7, #8]
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	e7fd      	b.n	800822a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800822e:	4b0d      	ldr	r3, [pc, #52]	@ (8008264 <vTaskDelete+0xe4>)
 8008230:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	bf00      	nop
 8008248:	200009f8 	.word	0x200009f8
 800824c:	20000ee8 	.word	0x20000ee8
 8008250:	20000ea0 	.word	0x20000ea0
 8008254:	20000eb4 	.word	0x20000eb4
 8008258:	20000ecc 	.word	0x20000ecc
 800825c:	20000ed8 	.word	0x20000ed8
 8008260:	20000ef4 	.word	0x20000ef4
 8008264:	e000ed04 	.word	0xe000ed04

08008268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d018      	beq.n	80082ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800827a:	4b14      	ldr	r3, [pc, #80]	@ (80082cc <vTaskDelay+0x64>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00b      	beq.n	800829a <vTaskDelay+0x32>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60bb      	str	r3, [r7, #8]
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	e7fd      	b.n	8008296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800829a:	f000 f88b 	bl	80083b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800829e:	2100      	movs	r1, #0
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fe09 	bl	8008eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082a6:	f000 f893 	bl	80083d0 <xTaskResumeAll>
 80082aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d107      	bne.n	80082c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082b2:	4b07      	ldr	r3, [pc, #28]	@ (80082d0 <vTaskDelay+0x68>)
 80082b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000ef4 	.word	0x20000ef4
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	@ 0x28
 80082d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082da:	2300      	movs	r3, #0
 80082dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082e2:	463a      	mov	r2, r7
 80082e4:	1d39      	adds	r1, r7, #4
 80082e6:	f107 0308 	add.w	r3, r7, #8
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fe12 	bl	8006f14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68ba      	ldr	r2, [r7, #8]
 80082f6:	9202      	str	r2, [sp, #8]
 80082f8:	9301      	str	r3, [sp, #4]
 80082fa:	2300      	movs	r3, #0
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	2300      	movs	r3, #0
 8008300:	460a      	mov	r2, r1
 8008302:	4924      	ldr	r1, [pc, #144]	@ (8008394 <vTaskStartScheduler+0xc0>)
 8008304:	4824      	ldr	r0, [pc, #144]	@ (8008398 <vTaskStartScheduler+0xc4>)
 8008306:	f7ff fd7d 	bl	8007e04 <xTaskCreateStatic>
 800830a:	4603      	mov	r3, r0
 800830c:	4a23      	ldr	r2, [pc, #140]	@ (800839c <vTaskStartScheduler+0xc8>)
 800830e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008310:	4b22      	ldr	r3, [pc, #136]	@ (800839c <vTaskStartScheduler+0xc8>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008318:	2301      	movs	r3, #1
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	e001      	b.n	8008322 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d102      	bne.n	800832e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008328:	f000 fe1a 	bl	8008f60 <xTimerCreateTimerTask>
 800832c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d11b      	bne.n	800836c <vTaskStartScheduler+0x98>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	613b      	str	r3, [r7, #16]
}
 8008346:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008348:	4b15      	ldr	r3, [pc, #84]	@ (80083a0 <vTaskStartScheduler+0xcc>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3354      	adds	r3, #84	@ 0x54
 800834e:	4a15      	ldr	r2, [pc, #84]	@ (80083a4 <vTaskStartScheduler+0xd0>)
 8008350:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008352:	4b15      	ldr	r3, [pc, #84]	@ (80083a8 <vTaskStartScheduler+0xd4>)
 8008354:	f04f 32ff 	mov.w	r2, #4294967295
 8008358:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800835a:	4b14      	ldr	r3, [pc, #80]	@ (80083ac <vTaskStartScheduler+0xd8>)
 800835c:	2201      	movs	r2, #1
 800835e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008360:	4b13      	ldr	r3, [pc, #76]	@ (80083b0 <vTaskStartScheduler+0xdc>)
 8008362:	2200      	movs	r2, #0
 8008364:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008366:	f001 f9e3 	bl	8009730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800836a:	e00f      	b.n	800838c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	d10b      	bne.n	800838c <vTaskStartScheduler+0xb8>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	f383 8811 	msr	BASEPRI, r3
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f3bf 8f4f 	dsb	sy
 8008384:	60fb      	str	r3, [r7, #12]
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	e7fd      	b.n	8008388 <vTaskStartScheduler+0xb4>
}
 800838c:	bf00      	nop
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	0800aa08 	.word	0x0800aa08
 8008398:	080089e5 	.word	0x080089e5
 800839c:	20000ef0 	.word	0x20000ef0
 80083a0:	200009f8 	.word	0x200009f8
 80083a4:	20000018 	.word	0x20000018
 80083a8:	20000eec 	.word	0x20000eec
 80083ac:	20000ed8 	.word	0x20000ed8
 80083b0:	20000ed0 	.word	0x20000ed0

080083b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083b8:	4b04      	ldr	r3, [pc, #16]	@ (80083cc <vTaskSuspendAll+0x18>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3301      	adds	r3, #1
 80083be:	4a03      	ldr	r2, [pc, #12]	@ (80083cc <vTaskSuspendAll+0x18>)
 80083c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083c2:	bf00      	nop
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	20000ef4 	.word	0x20000ef4

080083d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083da:	2300      	movs	r3, #0
 80083dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083de:	4b42      	ldr	r3, [pc, #264]	@ (80084e8 <xTaskResumeAll+0x118>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d10b      	bne.n	80083fe <xTaskResumeAll+0x2e>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	f383 8811 	msr	BASEPRI, r3
 80083ee:	f3bf 8f6f 	isb	sy
 80083f2:	f3bf 8f4f 	dsb	sy
 80083f6:	603b      	str	r3, [r7, #0]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083fe:	f001 fa3b 	bl	8009878 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008402:	4b39      	ldr	r3, [pc, #228]	@ (80084e8 <xTaskResumeAll+0x118>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3b01      	subs	r3, #1
 8008408:	4a37      	ldr	r2, [pc, #220]	@ (80084e8 <xTaskResumeAll+0x118>)
 800840a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800840c:	4b36      	ldr	r3, [pc, #216]	@ (80084e8 <xTaskResumeAll+0x118>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d162      	bne.n	80084da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008414:	4b35      	ldr	r3, [pc, #212]	@ (80084ec <xTaskResumeAll+0x11c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d05e      	beq.n	80084da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800841c:	e02f      	b.n	800847e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841e:	4b34      	ldr	r3, [pc, #208]	@ (80084f0 <xTaskResumeAll+0x120>)
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3318      	adds	r3, #24
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe fe30 	bl	8007090 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3304      	adds	r3, #4
 8008434:	4618      	mov	r0, r3
 8008436:	f7fe fe2b 	bl	8007090 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800843e:	4b2d      	ldr	r3, [pc, #180]	@ (80084f4 <xTaskResumeAll+0x124>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d903      	bls.n	800844e <xTaskResumeAll+0x7e>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844a:	4a2a      	ldr	r2, [pc, #168]	@ (80084f4 <xTaskResumeAll+0x124>)
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008452:	4613      	mov	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4a27      	ldr	r2, [pc, #156]	@ (80084f8 <xTaskResumeAll+0x128>)
 800845c:	441a      	add	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3304      	adds	r3, #4
 8008462:	4619      	mov	r1, r3
 8008464:	4610      	mov	r0, r2
 8008466:	f7fe fdb6 	bl	8006fd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800846e:	4b23      	ldr	r3, [pc, #140]	@ (80084fc <xTaskResumeAll+0x12c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008474:	429a      	cmp	r2, r3
 8008476:	d302      	bcc.n	800847e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008478:	4b21      	ldr	r3, [pc, #132]	@ (8008500 <xTaskResumeAll+0x130>)
 800847a:	2201      	movs	r2, #1
 800847c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800847e:	4b1c      	ldr	r3, [pc, #112]	@ (80084f0 <xTaskResumeAll+0x120>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1cb      	bne.n	800841e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800848c:	f000 fb66 	bl	8008b5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008490:	4b1c      	ldr	r3, [pc, #112]	@ (8008504 <xTaskResumeAll+0x134>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d010      	beq.n	80084be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800849c:	f000 f846 	bl	800852c <xTaskIncrementTick>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084a6:	4b16      	ldr	r3, [pc, #88]	@ (8008500 <xTaskResumeAll+0x130>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1f1      	bne.n	800849c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80084b8:	4b12      	ldr	r3, [pc, #72]	@ (8008504 <xTaskResumeAll+0x134>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084be:	4b10      	ldr	r3, [pc, #64]	@ (8008500 <xTaskResumeAll+0x130>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d009      	beq.n	80084da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084c6:	2301      	movs	r3, #1
 80084c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008508 <xTaskResumeAll+0x138>)
 80084cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084da:	f001 f9ff 	bl	80098dc <vPortExitCritical>

	return xAlreadyYielded;
 80084de:	68bb      	ldr	r3, [r7, #8]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20000ef4 	.word	0x20000ef4
 80084ec:	20000ecc 	.word	0x20000ecc
 80084f0:	20000e8c 	.word	0x20000e8c
 80084f4:	20000ed4 	.word	0x20000ed4
 80084f8:	200009fc 	.word	0x200009fc
 80084fc:	200009f8 	.word	0x200009f8
 8008500:	20000ee0 	.word	0x20000ee0
 8008504:	20000edc 	.word	0x20000edc
 8008508:	e000ed04 	.word	0xe000ed04

0800850c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008512:	4b05      	ldr	r3, [pc, #20]	@ (8008528 <xTaskGetTickCount+0x1c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008518:	687b      	ldr	r3, [r7, #4]
}
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	20000ed0 	.word	0x20000ed0

0800852c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008532:	2300      	movs	r3, #0
 8008534:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008536:	4b4f      	ldr	r3, [pc, #316]	@ (8008674 <xTaskIncrementTick+0x148>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f040 8090 	bne.w	8008660 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008540:	4b4d      	ldr	r3, [pc, #308]	@ (8008678 <xTaskIncrementTick+0x14c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008548:	4a4b      	ldr	r2, [pc, #300]	@ (8008678 <xTaskIncrementTick+0x14c>)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d121      	bne.n	8008598 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008554:	4b49      	ldr	r3, [pc, #292]	@ (800867c <xTaskIncrementTick+0x150>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <xTaskIncrementTick+0x4a>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	603b      	str	r3, [r7, #0]
}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	e7fd      	b.n	8008572 <xTaskIncrementTick+0x46>
 8008576:	4b41      	ldr	r3, [pc, #260]	@ (800867c <xTaskIncrementTick+0x150>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60fb      	str	r3, [r7, #12]
 800857c:	4b40      	ldr	r3, [pc, #256]	@ (8008680 <xTaskIncrementTick+0x154>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a3e      	ldr	r2, [pc, #248]	@ (800867c <xTaskIncrementTick+0x150>)
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	4a3e      	ldr	r2, [pc, #248]	@ (8008680 <xTaskIncrementTick+0x154>)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	4b3e      	ldr	r3, [pc, #248]	@ (8008684 <xTaskIncrementTick+0x158>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	3301      	adds	r3, #1
 8008590:	4a3c      	ldr	r2, [pc, #240]	@ (8008684 <xTaskIncrementTick+0x158>)
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	f000 fae2 	bl	8008b5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008598:	4b3b      	ldr	r3, [pc, #236]	@ (8008688 <xTaskIncrementTick+0x15c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d349      	bcc.n	8008636 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085a2:	4b36      	ldr	r3, [pc, #216]	@ (800867c <xTaskIncrementTick+0x150>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ac:	4b36      	ldr	r3, [pc, #216]	@ (8008688 <xTaskIncrementTick+0x15c>)
 80085ae:	f04f 32ff 	mov.w	r2, #4294967295
 80085b2:	601a      	str	r2, [r3, #0]
					break;
 80085b4:	e03f      	b.n	8008636 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b6:	4b31      	ldr	r3, [pc, #196]	@ (800867c <xTaskIncrementTick+0x150>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d203      	bcs.n	80085d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085ce:	4a2e      	ldr	r2, [pc, #184]	@ (8008688 <xTaskIncrementTick+0x15c>)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085d4:	e02f      	b.n	8008636 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	3304      	adds	r3, #4
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fd58 	bl	8007090 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d004      	beq.n	80085f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3318      	adds	r3, #24
 80085ec:	4618      	mov	r0, r3
 80085ee:	f7fe fd4f 	bl	8007090 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085f6:	4b25      	ldr	r3, [pc, #148]	@ (800868c <xTaskIncrementTick+0x160>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d903      	bls.n	8008606 <xTaskIncrementTick+0xda>
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008602:	4a22      	ldr	r2, [pc, #136]	@ (800868c <xTaskIncrementTick+0x160>)
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860a:	4613      	mov	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4a1f      	ldr	r2, [pc, #124]	@ (8008690 <xTaskIncrementTick+0x164>)
 8008614:	441a      	add	r2, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	3304      	adds	r3, #4
 800861a:	4619      	mov	r1, r3
 800861c:	4610      	mov	r0, r2
 800861e:	f7fe fcda 	bl	8006fd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008626:	4b1b      	ldr	r3, [pc, #108]	@ (8008694 <xTaskIncrementTick+0x168>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862c:	429a      	cmp	r2, r3
 800862e:	d3b8      	bcc.n	80085a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008634:	e7b5      	b.n	80085a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008636:	4b17      	ldr	r3, [pc, #92]	@ (8008694 <xTaskIncrementTick+0x168>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863c:	4914      	ldr	r1, [pc, #80]	@ (8008690 <xTaskIncrementTick+0x164>)
 800863e:	4613      	mov	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	440b      	add	r3, r1
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b01      	cmp	r3, #1
 800864c:	d901      	bls.n	8008652 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800864e:	2301      	movs	r3, #1
 8008650:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008652:	4b11      	ldr	r3, [pc, #68]	@ (8008698 <xTaskIncrementTick+0x16c>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d007      	beq.n	800866a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800865a:	2301      	movs	r3, #1
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	e004      	b.n	800866a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008660:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <xTaskIncrementTick+0x170>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3301      	adds	r3, #1
 8008666:	4a0d      	ldr	r2, [pc, #52]	@ (800869c <xTaskIncrementTick+0x170>)
 8008668:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800866a:	697b      	ldr	r3, [r7, #20]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3718      	adds	r7, #24
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	20000ef4 	.word	0x20000ef4
 8008678:	20000ed0 	.word	0x20000ed0
 800867c:	20000e84 	.word	0x20000e84
 8008680:	20000e88 	.word	0x20000e88
 8008684:	20000ee4 	.word	0x20000ee4
 8008688:	20000eec 	.word	0x20000eec
 800868c:	20000ed4 	.word	0x20000ed4
 8008690:	200009fc 	.word	0x200009fc
 8008694:	200009f8 	.word	0x200009f8
 8008698:	20000ee0 	.word	0x20000ee0
 800869c:	20000edc 	.word	0x20000edc

080086a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086a6:	4b2b      	ldr	r3, [pc, #172]	@ (8008754 <vTaskSwitchContext+0xb4>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086ae:	4b2a      	ldr	r3, [pc, #168]	@ (8008758 <vTaskSwitchContext+0xb8>)
 80086b0:	2201      	movs	r2, #1
 80086b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086b4:	e047      	b.n	8008746 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80086b6:	4b28      	ldr	r3, [pc, #160]	@ (8008758 <vTaskSwitchContext+0xb8>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086bc:	4b27      	ldr	r3, [pc, #156]	@ (800875c <vTaskSwitchContext+0xbc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	e011      	b.n	80086e8 <vTaskSwitchContext+0x48>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10b      	bne.n	80086e2 <vTaskSwitchContext+0x42>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	607b      	str	r3, [r7, #4]
}
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	e7fd      	b.n	80086de <vTaskSwitchContext+0x3e>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	491d      	ldr	r1, [pc, #116]	@ (8008760 <vTaskSwitchContext+0xc0>)
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	440b      	add	r3, r1
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0e3      	beq.n	80086c4 <vTaskSwitchContext+0x24>
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4613      	mov	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4a16      	ldr	r2, [pc, #88]	@ (8008760 <vTaskSwitchContext+0xc0>)
 8008708:	4413      	add	r3, r2
 800870a:	60bb      	str	r3, [r7, #8]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	605a      	str	r2, [r3, #4]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	685a      	ldr	r2, [r3, #4]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	3308      	adds	r3, #8
 800871e:	429a      	cmp	r2, r3
 8008720:	d104      	bne.n	800872c <vTaskSwitchContext+0x8c>
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	685a      	ldr	r2, [r3, #4]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	605a      	str	r2, [r3, #4]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	4a0c      	ldr	r2, [pc, #48]	@ (8008764 <vTaskSwitchContext+0xc4>)
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	4a09      	ldr	r2, [pc, #36]	@ (800875c <vTaskSwitchContext+0xbc>)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800873c:	4b09      	ldr	r3, [pc, #36]	@ (8008764 <vTaskSwitchContext+0xc4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3354      	adds	r3, #84	@ 0x54
 8008742:	4a09      	ldr	r2, [pc, #36]	@ (8008768 <vTaskSwitchContext+0xc8>)
 8008744:	6013      	str	r3, [r2, #0]
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	20000ef4 	.word	0x20000ef4
 8008758:	20000ee0 	.word	0x20000ee0
 800875c:	20000ed4 	.word	0x20000ed4
 8008760:	200009fc 	.word	0x200009fc
 8008764:	200009f8 	.word	0x200009f8
 8008768:	20000018 	.word	0x20000018

0800876c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10b      	bne.n	8008794 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60fb      	str	r3, [r7, #12]
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008794:	4b07      	ldr	r3, [pc, #28]	@ (80087b4 <vTaskPlaceOnEventList+0x48>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3318      	adds	r3, #24
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7fe fc3e 	bl	800701e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087a2:	2101      	movs	r1, #1
 80087a4:	6838      	ldr	r0, [r7, #0]
 80087a6:	f000 fb87 	bl	8008eb8 <prvAddCurrentTaskToDelayedList>
}
 80087aa:	bf00      	nop
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200009f8 	.word	0x200009f8

080087b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10b      	bne.n	80087e2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	617b      	str	r3, [r7, #20]
}
 80087dc:	bf00      	nop
 80087de:	bf00      	nop
 80087e0:	e7fd      	b.n	80087de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087e2:	4b0a      	ldr	r3, [pc, #40]	@ (800880c <vTaskPlaceOnEventListRestricted+0x54>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3318      	adds	r3, #24
 80087e8:	4619      	mov	r1, r3
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f7fe fbf3 	bl	8006fd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80087f6:	f04f 33ff 	mov.w	r3, #4294967295
 80087fa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	68b8      	ldr	r0, [r7, #8]
 8008800:	f000 fb5a 	bl	8008eb8 <prvAddCurrentTaskToDelayedList>
	}
 8008804:	bf00      	nop
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	200009f8 	.word	0x200009f8

08008810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10b      	bne.n	800883e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	60fb      	str	r3, [r7, #12]
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	e7fd      	b.n	800883a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	3318      	adds	r3, #24
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fc24 	bl	8007090 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008848:	4b1d      	ldr	r3, [pc, #116]	@ (80088c0 <xTaskRemoveFromEventList+0xb0>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d11d      	bne.n	800888c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	3304      	adds	r3, #4
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fc1b 	bl	8007090 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800885e:	4b19      	ldr	r3, [pc, #100]	@ (80088c4 <xTaskRemoveFromEventList+0xb4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	429a      	cmp	r2, r3
 8008864:	d903      	bls.n	800886e <xTaskRemoveFromEventList+0x5e>
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886a:	4a16      	ldr	r2, [pc, #88]	@ (80088c4 <xTaskRemoveFromEventList+0xb4>)
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008872:	4613      	mov	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4413      	add	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4a13      	ldr	r2, [pc, #76]	@ (80088c8 <xTaskRemoveFromEventList+0xb8>)
 800887c:	441a      	add	r2, r3
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	3304      	adds	r3, #4
 8008882:	4619      	mov	r1, r3
 8008884:	4610      	mov	r0, r2
 8008886:	f7fe fba6 	bl	8006fd6 <vListInsertEnd>
 800888a:	e005      	b.n	8008898 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	3318      	adds	r3, #24
 8008890:	4619      	mov	r1, r3
 8008892:	480e      	ldr	r0, [pc, #56]	@ (80088cc <xTaskRemoveFromEventList+0xbc>)
 8008894:	f7fe fb9f 	bl	8006fd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889c:	4b0c      	ldr	r3, [pc, #48]	@ (80088d0 <xTaskRemoveFromEventList+0xc0>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d905      	bls.n	80088b2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088a6:	2301      	movs	r3, #1
 80088a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088aa:	4b0a      	ldr	r3, [pc, #40]	@ (80088d4 <xTaskRemoveFromEventList+0xc4>)
 80088ac:	2201      	movs	r2, #1
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	e001      	b.n	80088b6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088b2:	2300      	movs	r3, #0
 80088b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088b6:	697b      	ldr	r3, [r7, #20]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	20000ef4 	.word	0x20000ef4
 80088c4:	20000ed4 	.word	0x20000ed4
 80088c8:	200009fc 	.word	0x200009fc
 80088cc:	20000e8c 	.word	0x20000e8c
 80088d0:	200009f8 	.word	0x200009f8
 80088d4:	20000ee0 	.word	0x20000ee0

080088d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088e0:	4b06      	ldr	r3, [pc, #24]	@ (80088fc <vTaskInternalSetTimeOutState+0x24>)
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088e8:	4b05      	ldr	r3, [pc, #20]	@ (8008900 <vTaskInternalSetTimeOutState+0x28>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	605a      	str	r2, [r3, #4]
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	20000ee4 	.word	0x20000ee4
 8008900:	20000ed0 	.word	0x20000ed0

08008904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10b      	bne.n	800892c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	613b      	str	r3, [r7, #16]
}
 8008926:	bf00      	nop
 8008928:	bf00      	nop
 800892a:	e7fd      	b.n	8008928 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10b      	bne.n	800894a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	60fb      	str	r3, [r7, #12]
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop
 8008948:	e7fd      	b.n	8008946 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800894a:	f000 ff95 	bl	8009878 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800894e:	4b1d      	ldr	r3, [pc, #116]	@ (80089c4 <xTaskCheckForTimeOut+0xc0>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008966:	d102      	bne.n	800896e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008968:	2300      	movs	r3, #0
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	e023      	b.n	80089b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	4b15      	ldr	r3, [pc, #84]	@ (80089c8 <xTaskCheckForTimeOut+0xc4>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	429a      	cmp	r2, r3
 8008978:	d007      	beq.n	800898a <xTaskCheckForTimeOut+0x86>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	69ba      	ldr	r2, [r7, #24]
 8008980:	429a      	cmp	r2, r3
 8008982:	d302      	bcc.n	800898a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008984:	2301      	movs	r3, #1
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	e015      	b.n	80089b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	429a      	cmp	r2, r3
 8008992:	d20b      	bcs.n	80089ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681a      	ldr	r2, [r3, #0]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	1ad2      	subs	r2, r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7ff ff99 	bl	80088d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e004      	b.n	80089b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089b2:	2301      	movs	r3, #1
 80089b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089b6:	f000 ff91 	bl	80098dc <vPortExitCritical>

	return xReturn;
 80089ba:	69fb      	ldr	r3, [r7, #28]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3720      	adds	r7, #32
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20000ed0 	.word	0x20000ed0
 80089c8:	20000ee4 	.word	0x20000ee4

080089cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089d0:	4b03      	ldr	r3, [pc, #12]	@ (80089e0 <vTaskMissedYield+0x14>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	601a      	str	r2, [r3, #0]
}
 80089d6:	bf00      	nop
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	20000ee0 	.word	0x20000ee0

080089e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089ec:	f000 f852 	bl	8008a94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089f0:	4b06      	ldr	r3, [pc, #24]	@ (8008a0c <prvIdleTask+0x28>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d9f9      	bls.n	80089ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80089f8:	4b05      	ldr	r3, [pc, #20]	@ (8008a10 <prvIdleTask+0x2c>)
 80089fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a08:	e7f0      	b.n	80089ec <prvIdleTask+0x8>
 8008a0a:	bf00      	nop
 8008a0c:	200009fc 	.word	0x200009fc
 8008a10:	e000ed04 	.word	0xe000ed04

08008a14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	607b      	str	r3, [r7, #4]
 8008a1e:	e00c      	b.n	8008a3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4a12      	ldr	r2, [pc, #72]	@ (8008a74 <prvInitialiseTaskLists+0x60>)
 8008a2c:	4413      	add	r3, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7fe faa4 	bl	8006f7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3301      	adds	r3, #1
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b37      	cmp	r3, #55	@ 0x37
 8008a3e:	d9ef      	bls.n	8008a20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a40:	480d      	ldr	r0, [pc, #52]	@ (8008a78 <prvInitialiseTaskLists+0x64>)
 8008a42:	f7fe fa9b 	bl	8006f7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a46:	480d      	ldr	r0, [pc, #52]	@ (8008a7c <prvInitialiseTaskLists+0x68>)
 8008a48:	f7fe fa98 	bl	8006f7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a4c:	480c      	ldr	r0, [pc, #48]	@ (8008a80 <prvInitialiseTaskLists+0x6c>)
 8008a4e:	f7fe fa95 	bl	8006f7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a52:	480c      	ldr	r0, [pc, #48]	@ (8008a84 <prvInitialiseTaskLists+0x70>)
 8008a54:	f7fe fa92 	bl	8006f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a58:	480b      	ldr	r0, [pc, #44]	@ (8008a88 <prvInitialiseTaskLists+0x74>)
 8008a5a:	f7fe fa8f 	bl	8006f7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a8c <prvInitialiseTaskLists+0x78>)
 8008a60:	4a05      	ldr	r2, [pc, #20]	@ (8008a78 <prvInitialiseTaskLists+0x64>)
 8008a62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a64:	4b0a      	ldr	r3, [pc, #40]	@ (8008a90 <prvInitialiseTaskLists+0x7c>)
 8008a66:	4a05      	ldr	r2, [pc, #20]	@ (8008a7c <prvInitialiseTaskLists+0x68>)
 8008a68:	601a      	str	r2, [r3, #0]
}
 8008a6a:	bf00      	nop
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	200009fc 	.word	0x200009fc
 8008a78:	20000e5c 	.word	0x20000e5c
 8008a7c:	20000e70 	.word	0x20000e70
 8008a80:	20000e8c 	.word	0x20000e8c
 8008a84:	20000ea0 	.word	0x20000ea0
 8008a88:	20000eb8 	.word	0x20000eb8
 8008a8c:	20000e84 	.word	0x20000e84
 8008a90:	20000e88 	.word	0x20000e88

08008a94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b082      	sub	sp, #8
 8008a98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a9a:	e019      	b.n	8008ad0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a9c:	f000 feec 	bl	8009878 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa0:	4b10      	ldr	r3, [pc, #64]	@ (8008ae4 <prvCheckTasksWaitingTermination+0x50>)
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3304      	adds	r3, #4
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe faef 	bl	8007090 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ae8 <prvCheckTasksWaitingTermination+0x54>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8008ae8 <prvCheckTasksWaitingTermination+0x54>)
 8008aba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008abc:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <prvCheckTasksWaitingTermination+0x58>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8008aec <prvCheckTasksWaitingTermination+0x58>)
 8008ac4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ac6:	f000 ff09 	bl	80098dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f810 	bl	8008af0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ad0:	4b06      	ldr	r3, [pc, #24]	@ (8008aec <prvCheckTasksWaitingTermination+0x58>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e1      	bne.n	8008a9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ad8:	bf00      	nop
 8008ada:	bf00      	nop
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	20000ea0 	.word	0x20000ea0
 8008ae8:	20000ecc 	.word	0x20000ecc
 8008aec:	20000eb4 	.word	0x20000eb4

08008af0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3354      	adds	r3, #84	@ 0x54
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 f9f3 	bl	8009ee8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d108      	bne.n	8008b1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b10:	4618      	mov	r0, r3
 8008b12:	f001 f8a1 	bl	8009c58 <vPortFree>
				vPortFree( pxTCB );
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 f89e 	bl	8009c58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b1c:	e019      	b.n	8008b52 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d103      	bne.n	8008b30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f001 f895 	bl	8009c58 <vPortFree>
	}
 8008b2e:	e010      	b.n	8008b52 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d00b      	beq.n	8008b52 <prvDeleteTCB+0x62>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	60fb      	str	r3, [r7, #12]
}
 8008b4c:	bf00      	nop
 8008b4e:	bf00      	nop
 8008b50:	e7fd      	b.n	8008b4e <prvDeleteTCB+0x5e>
	}
 8008b52:	bf00      	nop
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b62:	4b0c      	ldr	r3, [pc, #48]	@ (8008b94 <prvResetNextTaskUnblockTime+0x38>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d104      	bne.n	8008b76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b98 <prvResetNextTaskUnblockTime+0x3c>)
 8008b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008b72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b74:	e008      	b.n	8008b88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b76:	4b07      	ldr	r3, [pc, #28]	@ (8008b94 <prvResetNextTaskUnblockTime+0x38>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	4a04      	ldr	r2, [pc, #16]	@ (8008b98 <prvResetNextTaskUnblockTime+0x3c>)
 8008b86:	6013      	str	r3, [r2, #0]
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	20000e84 	.word	0x20000e84
 8008b98:	20000eec 	.word	0x20000eec

08008b9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd0 <xTaskGetSchedulerState+0x34>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d102      	bne.n	8008bb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008baa:	2301      	movs	r3, #1
 8008bac:	607b      	str	r3, [r7, #4]
 8008bae:	e008      	b.n	8008bc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bb0:	4b08      	ldr	r3, [pc, #32]	@ (8008bd4 <xTaskGetSchedulerState+0x38>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d102      	bne.n	8008bbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bb8:	2302      	movs	r3, #2
 8008bba:	607b      	str	r3, [r7, #4]
 8008bbc:	e001      	b.n	8008bc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bc2:	687b      	ldr	r3, [r7, #4]
	}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	20000ed8 	.word	0x20000ed8
 8008bd4:	20000ef4 	.word	0x20000ef4

08008bd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008be4:	2300      	movs	r3, #0
 8008be6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d051      	beq.n	8008c92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8008c9c <xTaskPriorityInherit+0xc4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d241      	bcs.n	8008c80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	db06      	blt.n	8008c12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c04:	4b25      	ldr	r3, [pc, #148]	@ (8008c9c <xTaskPriorityInherit+0xc4>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	6959      	ldr	r1, [r3, #20]
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4a1f      	ldr	r2, [pc, #124]	@ (8008ca0 <xTaskPriorityInherit+0xc8>)
 8008c24:	4413      	add	r3, r2
 8008c26:	4299      	cmp	r1, r3
 8008c28:	d122      	bne.n	8008c70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe fa2e 	bl	8007090 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c34:	4b19      	ldr	r3, [pc, #100]	@ (8008c9c <xTaskPriorityInherit+0xc4>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c42:	4b18      	ldr	r3, [pc, #96]	@ (8008ca4 <xTaskPriorityInherit+0xcc>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d903      	bls.n	8008c52 <xTaskPriorityInherit+0x7a>
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4e:	4a15      	ldr	r2, [pc, #84]	@ (8008ca4 <xTaskPriorityInherit+0xcc>)
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4a10      	ldr	r2, [pc, #64]	@ (8008ca0 <xTaskPriorityInherit+0xc8>)
 8008c60:	441a      	add	r2, r3
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	3304      	adds	r3, #4
 8008c66:	4619      	mov	r1, r3
 8008c68:	4610      	mov	r0, r2
 8008c6a:	f7fe f9b4 	bl	8006fd6 <vListInsertEnd>
 8008c6e:	e004      	b.n	8008c7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c70:	4b0a      	ldr	r3, [pc, #40]	@ (8008c9c <xTaskPriorityInherit+0xc4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	e008      	b.n	8008c92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c84:	4b05      	ldr	r3, [pc, #20]	@ (8008c9c <xTaskPriorityInherit+0xc4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d201      	bcs.n	8008c92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c92:	68fb      	ldr	r3, [r7, #12]
	}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	200009f8 	.word	0x200009f8
 8008ca0:	200009fc 	.word	0x200009fc
 8008ca4:	20000ed4 	.word	0x20000ed4

08008ca8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d058      	beq.n	8008d70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8008d7c <xTaskPriorityDisinherit+0xd4>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d00b      	beq.n	8008ce0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	60fb      	str	r3, [r7, #12]
}
 8008cda:	bf00      	nop
 8008cdc:	bf00      	nop
 8008cde:	e7fd      	b.n	8008cdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10b      	bne.n	8008d00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cec:	f383 8811 	msr	BASEPRI, r3
 8008cf0:	f3bf 8f6f 	isb	sy
 8008cf4:	f3bf 8f4f 	dsb	sy
 8008cf8:	60bb      	str	r3, [r7, #8]
}
 8008cfa:	bf00      	nop
 8008cfc:	bf00      	nop
 8008cfe:	e7fd      	b.n	8008cfc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d04:	1e5a      	subs	r2, r3, #1
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d02c      	beq.n	8008d70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d128      	bne.n	8008d70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	3304      	adds	r3, #4
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe f9b4 	bl	8007090 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d40:	4b0f      	ldr	r3, [pc, #60]	@ (8008d80 <xTaskPriorityDisinherit+0xd8>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d903      	bls.n	8008d50 <xTaskPriorityDisinherit+0xa8>
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8008d80 <xTaskPriorityDisinherit+0xd8>)
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4a09      	ldr	r2, [pc, #36]	@ (8008d84 <xTaskPriorityDisinherit+0xdc>)
 8008d5e:	441a      	add	r2, r3
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f7fe f935 	bl	8006fd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d70:	697b      	ldr	r3, [r7, #20]
	}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200009f8 	.word	0x200009f8
 8008d80:	20000ed4 	.word	0x20000ed4
 8008d84:	200009fc 	.word	0x200009fc

08008d88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d96:	2301      	movs	r3, #1
 8008d98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d06c      	beq.n	8008e7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60fb      	str	r3, [r7, #12]
}
 8008dba:	bf00      	nop
 8008dbc:	bf00      	nop
 8008dbe:	e7fd      	b.n	8008dbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d902      	bls.n	8008dd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	e002      	b.n	8008dd6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dda:	69fa      	ldr	r2, [r7, #28]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d04c      	beq.n	8008e7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d147      	bne.n	8008e7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dea:	4b26      	ldr	r3, [pc, #152]	@ (8008e84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d10b      	bne.n	8008e0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	60bb      	str	r3, [r7, #8]
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	e7fd      	b.n	8008e08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e0c:	69bb      	ldr	r3, [r7, #24]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	db04      	blt.n	8008e2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	6959      	ldr	r1, [r3, #20]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4a13      	ldr	r2, [pc, #76]	@ (8008e88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e3a:	4413      	add	r3, r2
 8008e3c:	4299      	cmp	r1, r3
 8008e3e:	d11c      	bne.n	8008e7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4618      	mov	r0, r3
 8008e46:	f7fe f923 	bl	8007090 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008e8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d903      	bls.n	8008e5e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8008e8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e5c:	6013      	str	r3, [r2, #0]
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4a07      	ldr	r2, [pc, #28]	@ (8008e88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e6c:	441a      	add	r2, r3
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	3304      	adds	r3, #4
 8008e72:	4619      	mov	r1, r3
 8008e74:	4610      	mov	r0, r2
 8008e76:	f7fe f8ae 	bl	8006fd6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e7a:	bf00      	nop
 8008e7c:	3720      	adds	r7, #32
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	200009f8 	.word	0x200009f8
 8008e88:	200009fc 	.word	0x200009fc
 8008e8c:	20000ed4 	.word	0x20000ed4

08008e90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e90:	b480      	push	{r7}
 8008e92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e94:	4b07      	ldr	r3, [pc, #28]	@ (8008eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e9c:	4b05      	ldr	r3, [pc, #20]	@ (8008eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ea2:	3201      	adds	r2, #1
 8008ea4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	@ (8008eb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
	}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	200009f8 	.word	0x200009f8

08008eb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ec2:	4b21      	ldr	r3, [pc, #132]	@ (8008f48 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ec8:	4b20      	ldr	r3, [pc, #128]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe f8de 	bl	8007090 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eda:	d10a      	bne.n	8008ef2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d007      	beq.n	8008ef2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4619      	mov	r1, r3
 8008eea:	4819      	ldr	r0, [pc, #100]	@ (8008f50 <prvAddCurrentTaskToDelayedList+0x98>)
 8008eec:	f7fe f873 	bl	8006fd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ef0:	e026      	b.n	8008f40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008efa:	4b14      	ldr	r3, [pc, #80]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68ba      	ldr	r2, [r7, #8]
 8008f00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d209      	bcs.n	8008f1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f0a:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4619      	mov	r1, r3
 8008f16:	4610      	mov	r0, r2
 8008f18:	f7fe f881 	bl	800701e <vListInsert>
}
 8008f1c:	e010      	b.n	8008f40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b0a      	ldr	r3, [pc, #40]	@ (8008f4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3304      	adds	r3, #4
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7fe f877 	bl	800701e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f30:	4b0a      	ldr	r3, [pc, #40]	@ (8008f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d202      	bcs.n	8008f40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f3a:	4a08      	ldr	r2, [pc, #32]	@ (8008f5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	6013      	str	r3, [r2, #0]
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000ed0 	.word	0x20000ed0
 8008f4c:	200009f8 	.word	0x200009f8
 8008f50:	20000eb8 	.word	0x20000eb8
 8008f54:	20000e88 	.word	0x20000e88
 8008f58:	20000e84 	.word	0x20000e84
 8008f5c:	20000eec 	.word	0x20000eec

08008f60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08a      	sub	sp, #40	@ 0x28
 8008f64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f6a:	f000 fb13 	bl	8009594 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe4 <xTimerCreateTimerTask+0x84>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d021      	beq.n	8008fba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f7e:	1d3a      	adds	r2, r7, #4
 8008f80:	f107 0108 	add.w	r1, r7, #8
 8008f84:	f107 030c 	add.w	r3, r7, #12
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fd ffdd 	bl	8006f48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	9202      	str	r2, [sp, #8]
 8008f96:	9301      	str	r3, [sp, #4]
 8008f98:	2302      	movs	r3, #2
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	460a      	mov	r2, r1
 8008fa0:	4911      	ldr	r1, [pc, #68]	@ (8008fe8 <xTimerCreateTimerTask+0x88>)
 8008fa2:	4812      	ldr	r0, [pc, #72]	@ (8008fec <xTimerCreateTimerTask+0x8c>)
 8008fa4:	f7fe ff2e 	bl	8007e04 <xTaskCreateStatic>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4a11      	ldr	r2, [pc, #68]	@ (8008ff0 <xTimerCreateTimerTask+0x90>)
 8008fac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fae:	4b10      	ldr	r3, [pc, #64]	@ (8008ff0 <xTimerCreateTimerTask+0x90>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10b      	bne.n	8008fd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	613b      	str	r3, [r7, #16]
}
 8008fd2:	bf00      	nop
 8008fd4:	bf00      	nop
 8008fd6:	e7fd      	b.n	8008fd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fd8:	697b      	ldr	r3, [r7, #20]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000f28 	.word	0x20000f28
 8008fe8:	0800aa10 	.word	0x0800aa10
 8008fec:	0800912d 	.word	0x0800912d
 8008ff0:	20000f2c 	.word	0x20000f2c

08008ff4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b08a      	sub	sp, #40	@ 0x28
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009002:	2300      	movs	r3, #0
 8009004:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10b      	bne.n	8009024 <xTimerGenericCommand+0x30>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	623b      	str	r3, [r7, #32]
}
 800901e:	bf00      	nop
 8009020:	bf00      	nop
 8009022:	e7fd      	b.n	8009020 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009024:	4b19      	ldr	r3, [pc, #100]	@ (800908c <xTimerGenericCommand+0x98>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d02a      	beq.n	8009082 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b05      	cmp	r3, #5
 800903c:	dc18      	bgt.n	8009070 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800903e:	f7ff fdad 	bl	8008b9c <xTaskGetSchedulerState>
 8009042:	4603      	mov	r3, r0
 8009044:	2b02      	cmp	r3, #2
 8009046:	d109      	bne.n	800905c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009048:	4b10      	ldr	r3, [pc, #64]	@ (800908c <xTimerGenericCommand+0x98>)
 800904a:	6818      	ldr	r0, [r3, #0]
 800904c:	f107 0110 	add.w	r1, r7, #16
 8009050:	2300      	movs	r3, #0
 8009052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009054:	f7fe f9be 	bl	80073d4 <xQueueGenericSend>
 8009058:	6278      	str	r0, [r7, #36]	@ 0x24
 800905a:	e012      	b.n	8009082 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800905c:	4b0b      	ldr	r3, [pc, #44]	@ (800908c <xTimerGenericCommand+0x98>)
 800905e:	6818      	ldr	r0, [r3, #0]
 8009060:	f107 0110 	add.w	r1, r7, #16
 8009064:	2300      	movs	r3, #0
 8009066:	2200      	movs	r2, #0
 8009068:	f7fe f9b4 	bl	80073d4 <xQueueGenericSend>
 800906c:	6278      	str	r0, [r7, #36]	@ 0x24
 800906e:	e008      	b.n	8009082 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009070:	4b06      	ldr	r3, [pc, #24]	@ (800908c <xTimerGenericCommand+0x98>)
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	f107 0110 	add.w	r1, r7, #16
 8009078:	2300      	movs	r3, #0
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	f7fe faac 	bl	80075d8 <xQueueGenericSendFromISR>
 8009080:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009084:	4618      	mov	r0, r3
 8009086:	3728      	adds	r7, #40	@ 0x28
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	20000f28 	.word	0x20000f28

08009090 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af02      	add	r7, sp, #8
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800909a:	4b23      	ldr	r3, [pc, #140]	@ (8009128 <prvProcessExpiredTimer+0x98>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	3304      	adds	r3, #4
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fd fff1 	bl	8007090 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d023      	beq.n	8009104 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	699a      	ldr	r2, [r3, #24]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	18d1      	adds	r1, r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	6978      	ldr	r0, [r7, #20]
 80090ca:	f000 f8d5 	bl	8009278 <prvInsertTimerInActiveList>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d020      	beq.n	8009116 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090d4:	2300      	movs	r3, #0
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	2300      	movs	r3, #0
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	2100      	movs	r1, #0
 80090de:	6978      	ldr	r0, [r7, #20]
 80090e0:	f7ff ff88 	bl	8008ff4 <xTimerGenericCommand>
 80090e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d114      	bne.n	8009116 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	60fb      	str	r3, [r7, #12]
}
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
 8009102:	e7fd      	b.n	8009100 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800910a:	f023 0301 	bic.w	r3, r3, #1
 800910e:	b2da      	uxtb	r2, r3
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	6978      	ldr	r0, [r7, #20]
 800911c:	4798      	blx	r3
}
 800911e:	bf00      	nop
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000f20 	.word	0x20000f20

0800912c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009134:	f107 0308 	add.w	r3, r7, #8
 8009138:	4618      	mov	r0, r3
 800913a:	f000 f859 	bl	80091f0 <prvGetNextExpireTime>
 800913e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	4619      	mov	r1, r3
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 f805 	bl	8009154 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800914a:	f000 f8d7 	bl	80092fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800914e:	bf00      	nop
 8009150:	e7f0      	b.n	8009134 <prvTimerTask+0x8>
	...

08009154 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800915e:	f7ff f929 	bl	80083b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009162:	f107 0308 	add.w	r3, r7, #8
 8009166:	4618      	mov	r0, r3
 8009168:	f000 f866 	bl	8009238 <prvSampleTimeNow>
 800916c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d130      	bne.n	80091d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10a      	bne.n	8009190 <prvProcessTimerOrBlockTask+0x3c>
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	429a      	cmp	r2, r3
 8009180:	d806      	bhi.n	8009190 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009182:	f7ff f925 	bl	80083d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff ff81 	bl	8009090 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800918e:	e024      	b.n	80091da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d008      	beq.n	80091a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009196:	4b13      	ldr	r3, [pc, #76]	@ (80091e4 <prvProcessTimerOrBlockTask+0x90>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <prvProcessTimerOrBlockTask+0x50>
 80091a0:	2301      	movs	r3, #1
 80091a2:	e000      	b.n	80091a6 <prvProcessTimerOrBlockTask+0x52>
 80091a4:	2300      	movs	r3, #0
 80091a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091a8:	4b0f      	ldr	r3, [pc, #60]	@ (80091e8 <prvProcessTimerOrBlockTask+0x94>)
 80091aa:	6818      	ldr	r0, [r3, #0]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	4619      	mov	r1, r3
 80091b6:	f7fe fdf1 	bl	8007d9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091ba:	f7ff f909 	bl	80083d0 <xTaskResumeAll>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091c4:	4b09      	ldr	r3, [pc, #36]	@ (80091ec <prvProcessTimerOrBlockTask+0x98>)
 80091c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091ca:	601a      	str	r2, [r3, #0]
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	f3bf 8f6f 	isb	sy
}
 80091d4:	e001      	b.n	80091da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091d6:	f7ff f8fb 	bl	80083d0 <xTaskResumeAll>
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20000f24 	.word	0x20000f24
 80091e8:	20000f28 	.word	0x20000f28
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80091f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009234 <prvGetNextExpireTime+0x44>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <prvGetNextExpireTime+0x16>
 8009202:	2201      	movs	r2, #1
 8009204:	e000      	b.n	8009208 <prvGetNextExpireTime+0x18>
 8009206:	2200      	movs	r2, #0
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d105      	bne.n	8009220 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009214:	4b07      	ldr	r3, [pc, #28]	@ (8009234 <prvGetNextExpireTime+0x44>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68db      	ldr	r3, [r3, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	e001      	b.n	8009224 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009220:	2300      	movs	r3, #0
 8009222:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009224:	68fb      	ldr	r3, [r7, #12]
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	20000f20 	.word	0x20000f20

08009238 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009240:	f7ff f964 	bl	800850c <xTaskGetTickCount>
 8009244:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009246:	4b0b      	ldr	r3, [pc, #44]	@ (8009274 <prvSampleTimeNow+0x3c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	429a      	cmp	r2, r3
 800924e:	d205      	bcs.n	800925c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009250:	f000 f93a 	bl	80094c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	e002      	b.n	8009262 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009262:	4a04      	ldr	r2, [pc, #16]	@ (8009274 <prvSampleTimeNow+0x3c>)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009268:	68fb      	ldr	r3, [r7, #12]
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20000f30 	.word	0x20000f30

08009278 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
 8009284:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009286:	2300      	movs	r3, #0
 8009288:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	68ba      	ldr	r2, [r7, #8]
 800928e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	429a      	cmp	r2, r3
 800929c:	d812      	bhi.n	80092c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	1ad2      	subs	r2, r2, r3
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	699b      	ldr	r3, [r3, #24]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d302      	bcc.n	80092b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092ac:	2301      	movs	r3, #1
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	e01b      	b.n	80092ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092b2:	4b10      	ldr	r3, [pc, #64]	@ (80092f4 <prvInsertTimerInActiveList+0x7c>)
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3304      	adds	r3, #4
 80092ba:	4619      	mov	r1, r3
 80092bc:	4610      	mov	r0, r2
 80092be:	f7fd feae 	bl	800701e <vListInsert>
 80092c2:	e012      	b.n	80092ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d206      	bcs.n	80092da <prvInsertTimerInActiveList+0x62>
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d302      	bcc.n	80092da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	e007      	b.n	80092ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092da:	4b07      	ldr	r3, [pc, #28]	@ (80092f8 <prvInsertTimerInActiveList+0x80>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7fd fe9a 	bl	800701e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092ea:	697b      	ldr	r3, [r7, #20]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	20000f24 	.word	0x20000f24
 80092f8:	20000f20 	.word	0x20000f20

080092fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08e      	sub	sp, #56	@ 0x38
 8009300:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009302:	e0ce      	b.n	80094a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	da19      	bge.n	800933e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800930a:	1d3b      	adds	r3, r7, #4
 800930c:	3304      	adds	r3, #4
 800930e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10b      	bne.n	800932e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	61fb      	str	r3, [r7, #28]
}
 8009328:	bf00      	nop
 800932a:	bf00      	nop
 800932c:	e7fd      	b.n	800932a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800932e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009334:	6850      	ldr	r0, [r2, #4]
 8009336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009338:	6892      	ldr	r2, [r2, #8]
 800933a:	4611      	mov	r1, r2
 800933c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f2c0 80ae 	blt.w	80094a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800934a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d004      	beq.n	800935c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009354:	3304      	adds	r3, #4
 8009356:	4618      	mov	r0, r3
 8009358:	f7fd fe9a 	bl	8007090 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800935c:	463b      	mov	r3, r7
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff ff6a 	bl	8009238 <prvSampleTimeNow>
 8009364:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2b09      	cmp	r3, #9
 800936a:	f200 8097 	bhi.w	800949c <prvProcessReceivedCommands+0x1a0>
 800936e:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <prvProcessReceivedCommands+0x78>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	0800939d 	.word	0x0800939d
 8009378:	0800939d 	.word	0x0800939d
 800937c:	0800939d 	.word	0x0800939d
 8009380:	08009413 	.word	0x08009413
 8009384:	08009427 	.word	0x08009427
 8009388:	08009473 	.word	0x08009473
 800938c:	0800939d 	.word	0x0800939d
 8009390:	0800939d 	.word	0x0800939d
 8009394:	08009413 	.word	0x08009413
 8009398:	08009427 	.word	0x08009427
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800939c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	18d1      	adds	r1, r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093bc:	f7ff ff5c 	bl	8009278 <prvInsertTimerInActiveList>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d06c      	beq.n	80094a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d061      	beq.n	80094a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e0:	699b      	ldr	r3, [r3, #24]
 80093e2:	441a      	add	r2, r3
 80093e4:	2300      	movs	r3, #0
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	2300      	movs	r3, #0
 80093ea:	2100      	movs	r1, #0
 80093ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ee:	f7ff fe01 	bl	8008ff4 <xTimerGenericCommand>
 80093f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d152      	bne.n	80094a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	61bb      	str	r3, [r7, #24]
}
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	e7fd      	b.n	800940e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009418:	f023 0301 	bic.w	r3, r3, #1
 800941c:	b2da      	uxtb	r2, r3
 800941e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009420:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009424:	e03d      	b.n	80094a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800942c:	f043 0301 	orr.w	r3, r3, #1
 8009430:	b2da      	uxtb	r2, r3
 8009432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009434:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10b      	bne.n	800945e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944a:	f383 8811 	msr	BASEPRI, r3
 800944e:	f3bf 8f6f 	isb	sy
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	617b      	str	r3, [r7, #20]
}
 8009458:	bf00      	nop
 800945a:	bf00      	nop
 800945c:	e7fd      	b.n	800945a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800945e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009460:	699a      	ldr	r2, [r3, #24]
 8009462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009464:	18d1      	adds	r1, r2, r3
 8009466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800946a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800946c:	f7ff ff04 	bl	8009278 <prvInsertTimerInActiveList>
					break;
 8009470:	e017      	b.n	80094a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b00      	cmp	r3, #0
 800947e:	d103      	bne.n	8009488 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009480:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009482:	f000 fbe9 	bl	8009c58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009486:	e00c      	b.n	80094a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800948e:	f023 0301 	bic.w	r3, r3, #1
 8009492:	b2da      	uxtb	r2, r3
 8009494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009496:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800949a:	e002      	b.n	80094a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80094a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094a2:	4b08      	ldr	r3, [pc, #32]	@ (80094c4 <prvProcessReceivedCommands+0x1c8>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	1d39      	adds	r1, r7, #4
 80094a8:	2200      	movs	r2, #0
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fe f932 	bl	8007714 <xQueueReceive>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f47f af26 	bne.w	8009304 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	3730      	adds	r7, #48	@ 0x30
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000f28 	.word	0x20000f28

080094c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094ce:	e049      	b.n	8009564 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094d0:	4b2e      	ldr	r3, [pc, #184]	@ (800958c <prvSwitchTimerLists+0xc4>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094da:	4b2c      	ldr	r3, [pc, #176]	@ (800958c <prvSwitchTimerLists+0xc4>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	3304      	adds	r3, #4
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fd fdd1 	bl	8007090 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094fc:	f003 0304 	and.w	r3, r3, #4
 8009500:	2b00      	cmp	r3, #0
 8009502:	d02f      	beq.n	8009564 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	4413      	add	r3, r2
 800950c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	429a      	cmp	r2, r3
 8009514:	d90e      	bls.n	8009534 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	68ba      	ldr	r2, [r7, #8]
 800951a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009522:	4b1a      	ldr	r3, [pc, #104]	@ (800958c <prvSwitchTimerLists+0xc4>)
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	3304      	adds	r3, #4
 800952a:	4619      	mov	r1, r3
 800952c:	4610      	mov	r0, r2
 800952e:	f7fd fd76 	bl	800701e <vListInsert>
 8009532:	e017      	b.n	8009564 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009534:	2300      	movs	r3, #0
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	2300      	movs	r3, #0
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	2100      	movs	r1, #0
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7ff fd58 	bl	8008ff4 <xTimerGenericCommand>
 8009544:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10b      	bne.n	8009564 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	603b      	str	r3, [r7, #0]
}
 800955e:	bf00      	nop
 8009560:	bf00      	nop
 8009562:	e7fd      	b.n	8009560 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009564:	4b09      	ldr	r3, [pc, #36]	@ (800958c <prvSwitchTimerLists+0xc4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d1b0      	bne.n	80094d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800956e:	4b07      	ldr	r3, [pc, #28]	@ (800958c <prvSwitchTimerLists+0xc4>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009574:	4b06      	ldr	r3, [pc, #24]	@ (8009590 <prvSwitchTimerLists+0xc8>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a04      	ldr	r2, [pc, #16]	@ (800958c <prvSwitchTimerLists+0xc4>)
 800957a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800957c:	4a04      	ldr	r2, [pc, #16]	@ (8009590 <prvSwitchTimerLists+0xc8>)
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	6013      	str	r3, [r2, #0]
}
 8009582:	bf00      	nop
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	20000f20 	.word	0x20000f20
 8009590:	20000f24 	.word	0x20000f24

08009594 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800959a:	f000 f96d 	bl	8009878 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800959e:	4b15      	ldr	r3, [pc, #84]	@ (80095f4 <prvCheckForValidListAndQueue+0x60>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d120      	bne.n	80095e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80095a6:	4814      	ldr	r0, [pc, #80]	@ (80095f8 <prvCheckForValidListAndQueue+0x64>)
 80095a8:	f7fd fce8 	bl	8006f7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80095ac:	4813      	ldr	r0, [pc, #76]	@ (80095fc <prvCheckForValidListAndQueue+0x68>)
 80095ae:	f7fd fce5 	bl	8006f7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80095b2:	4b13      	ldr	r3, [pc, #76]	@ (8009600 <prvCheckForValidListAndQueue+0x6c>)
 80095b4:	4a10      	ldr	r2, [pc, #64]	@ (80095f8 <prvCheckForValidListAndQueue+0x64>)
 80095b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80095b8:	4b12      	ldr	r3, [pc, #72]	@ (8009604 <prvCheckForValidListAndQueue+0x70>)
 80095ba:	4a10      	ldr	r2, [pc, #64]	@ (80095fc <prvCheckForValidListAndQueue+0x68>)
 80095bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095be:	2300      	movs	r3, #0
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	4b11      	ldr	r3, [pc, #68]	@ (8009608 <prvCheckForValidListAndQueue+0x74>)
 80095c4:	4a11      	ldr	r2, [pc, #68]	@ (800960c <prvCheckForValidListAndQueue+0x78>)
 80095c6:	2110      	movs	r1, #16
 80095c8:	200a      	movs	r0, #10
 80095ca:	f7fd fdf5 	bl	80071b8 <xQueueGenericCreateStatic>
 80095ce:	4603      	mov	r3, r0
 80095d0:	4a08      	ldr	r2, [pc, #32]	@ (80095f4 <prvCheckForValidListAndQueue+0x60>)
 80095d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095d4:	4b07      	ldr	r3, [pc, #28]	@ (80095f4 <prvCheckForValidListAndQueue+0x60>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d005      	beq.n	80095e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095dc:	4b05      	ldr	r3, [pc, #20]	@ (80095f4 <prvCheckForValidListAndQueue+0x60>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	490b      	ldr	r1, [pc, #44]	@ (8009610 <prvCheckForValidListAndQueue+0x7c>)
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fe fbb0 	bl	8007d48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095e8:	f000 f978 	bl	80098dc <vPortExitCritical>
}
 80095ec:	bf00      	nop
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	20000f28 	.word	0x20000f28
 80095f8:	20000ef8 	.word	0x20000ef8
 80095fc:	20000f0c 	.word	0x20000f0c
 8009600:	20000f20 	.word	0x20000f20
 8009604:	20000f24 	.word	0x20000f24
 8009608:	20000fd4 	.word	0x20000fd4
 800960c:	20000f34 	.word	0x20000f34
 8009610:	0800aa18 	.word	0x0800aa18

08009614 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3b04      	subs	r3, #4
 8009624:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800962c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3b04      	subs	r3, #4
 8009632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f023 0201 	bic.w	r2, r3, #1
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3b04      	subs	r3, #4
 8009642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009644:	4a0c      	ldr	r2, [pc, #48]	@ (8009678 <pxPortInitialiseStack+0x64>)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3b14      	subs	r3, #20
 800964e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3b04      	subs	r3, #4
 800965a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f06f 0202 	mvn.w	r2, #2
 8009662:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	3b20      	subs	r3, #32
 8009668:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800966a:	68fb      	ldr	r3, [r7, #12]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3714      	adds	r7, #20
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	0800967d 	.word	0x0800967d

0800967c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009686:	4b13      	ldr	r3, [pc, #76]	@ (80096d4 <prvTaskExitError+0x58>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d00b      	beq.n	80096a8 <prvTaskExitError+0x2c>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009694:	f383 8811 	msr	BASEPRI, r3
 8009698:	f3bf 8f6f 	isb	sy
 800969c:	f3bf 8f4f 	dsb	sy
 80096a0:	60fb      	str	r3, [r7, #12]
}
 80096a2:	bf00      	nop
 80096a4:	bf00      	nop
 80096a6:	e7fd      	b.n	80096a4 <prvTaskExitError+0x28>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ac:	f383 8811 	msr	BASEPRI, r3
 80096b0:	f3bf 8f6f 	isb	sy
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	60bb      	str	r3, [r7, #8]
}
 80096ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096bc:	bf00      	nop
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d0fc      	beq.n	80096be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	20000014 	.word	0x20000014
	...

080096e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096e0:	4b07      	ldr	r3, [pc, #28]	@ (8009700 <pxCurrentTCBConst2>)
 80096e2:	6819      	ldr	r1, [r3, #0]
 80096e4:	6808      	ldr	r0, [r1, #0]
 80096e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ea:	f380 8809 	msr	PSP, r0
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8811 	msr	BASEPRI, r0
 80096fa:	4770      	bx	lr
 80096fc:	f3af 8000 	nop.w

08009700 <pxCurrentTCBConst2>:
 8009700:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop

08009708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009708:	4808      	ldr	r0, [pc, #32]	@ (800972c <prvPortStartFirstTask+0x24>)
 800970a:	6800      	ldr	r0, [r0, #0]
 800970c:	6800      	ldr	r0, [r0, #0]
 800970e:	f380 8808 	msr	MSP, r0
 8009712:	f04f 0000 	mov.w	r0, #0
 8009716:	f380 8814 	msr	CONTROL, r0
 800971a:	b662      	cpsie	i
 800971c:	b661      	cpsie	f
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	df00      	svc	0
 8009728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800972a:	bf00      	nop
 800972c:	e000ed08 	.word	0xe000ed08

08009730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009736:	4b47      	ldr	r3, [pc, #284]	@ (8009854 <xPortStartScheduler+0x124>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a47      	ldr	r2, [pc, #284]	@ (8009858 <xPortStartScheduler+0x128>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d10b      	bne.n	8009758 <xPortStartScheduler+0x28>
	__asm volatile
 8009740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009744:	f383 8811 	msr	BASEPRI, r3
 8009748:	f3bf 8f6f 	isb	sy
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	613b      	str	r3, [r7, #16]
}
 8009752:	bf00      	nop
 8009754:	bf00      	nop
 8009756:	e7fd      	b.n	8009754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009758:	4b3e      	ldr	r3, [pc, #248]	@ (8009854 <xPortStartScheduler+0x124>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a3f      	ldr	r2, [pc, #252]	@ (800985c <xPortStartScheduler+0x12c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d10b      	bne.n	800977a <xPortStartScheduler+0x4a>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	60fb      	str	r3, [r7, #12]
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	e7fd      	b.n	8009776 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800977a:	4b39      	ldr	r3, [pc, #228]	@ (8009860 <xPortStartScheduler+0x130>)
 800977c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b2db      	uxtb	r3, r3
 8009784:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	22ff      	movs	r2, #255	@ 0xff
 800978a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	b2db      	uxtb	r3, r3
 8009798:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800979c:	b2da      	uxtb	r2, r3
 800979e:	4b31      	ldr	r3, [pc, #196]	@ (8009864 <xPortStartScheduler+0x134>)
 80097a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097a2:	4b31      	ldr	r3, [pc, #196]	@ (8009868 <xPortStartScheduler+0x138>)
 80097a4:	2207      	movs	r2, #7
 80097a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097a8:	e009      	b.n	80097be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80097aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009868 <xPortStartScheduler+0x138>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009868 <xPortStartScheduler+0x138>)
 80097b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c6:	2b80      	cmp	r3, #128	@ 0x80
 80097c8:	d0ef      	beq.n	80097aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097ca:	4b27      	ldr	r3, [pc, #156]	@ (8009868 <xPortStartScheduler+0x138>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f1c3 0307 	rsb	r3, r3, #7
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d00b      	beq.n	80097ee <xPortStartScheduler+0xbe>
	__asm volatile
 80097d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	60bb      	str	r3, [r7, #8]
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	e7fd      	b.n	80097ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009868 <xPortStartScheduler+0x138>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	021b      	lsls	r3, r3, #8
 80097f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009868 <xPortStartScheduler+0x138>)
 80097f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009868 <xPortStartScheduler+0x138>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009800:	4a19      	ldr	r2, [pc, #100]	@ (8009868 <xPortStartScheduler+0x138>)
 8009802:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	b2da      	uxtb	r2, r3
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800980c:	4b17      	ldr	r3, [pc, #92]	@ (800986c <xPortStartScheduler+0x13c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a16      	ldr	r2, [pc, #88]	@ (800986c <xPortStartScheduler+0x13c>)
 8009812:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009816:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009818:	4b14      	ldr	r3, [pc, #80]	@ (800986c <xPortStartScheduler+0x13c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a13      	ldr	r2, [pc, #76]	@ (800986c <xPortStartScheduler+0x13c>)
 800981e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009822:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009824:	f000 f8da 	bl	80099dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009828:	4b11      	ldr	r3, [pc, #68]	@ (8009870 <xPortStartScheduler+0x140>)
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800982e:	f000 f8f9 	bl	8009a24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009832:	4b10      	ldr	r3, [pc, #64]	@ (8009874 <xPortStartScheduler+0x144>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a0f      	ldr	r2, [pc, #60]	@ (8009874 <xPortStartScheduler+0x144>)
 8009838:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800983c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800983e:	f7ff ff63 	bl	8009708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009842:	f7fe ff2d 	bl	80086a0 <vTaskSwitchContext>
	prvTaskExitError();
 8009846:	f7ff ff19 	bl	800967c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	e000ed00 	.word	0xe000ed00
 8009858:	410fc271 	.word	0x410fc271
 800985c:	410fc270 	.word	0x410fc270
 8009860:	e000e400 	.word	0xe000e400
 8009864:	20001024 	.word	0x20001024
 8009868:	20001028 	.word	0x20001028
 800986c:	e000ed20 	.word	0xe000ed20
 8009870:	20000014 	.word	0x20000014
 8009874:	e000ef34 	.word	0xe000ef34

08009878 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
	__asm volatile
 800987e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009882:	f383 8811 	msr	BASEPRI, r3
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	f3bf 8f4f 	dsb	sy
 800988e:	607b      	str	r3, [r7, #4]
}
 8009890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009892:	4b10      	ldr	r3, [pc, #64]	@ (80098d4 <vPortEnterCritical+0x5c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3301      	adds	r3, #1
 8009898:	4a0e      	ldr	r2, [pc, #56]	@ (80098d4 <vPortEnterCritical+0x5c>)
 800989a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800989c:	4b0d      	ldr	r3, [pc, #52]	@ (80098d4 <vPortEnterCritical+0x5c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d110      	bne.n	80098c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098a4:	4b0c      	ldr	r3, [pc, #48]	@ (80098d8 <vPortEnterCritical+0x60>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	603b      	str	r3, [r7, #0]
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	e7fd      	b.n	80098c2 <vPortEnterCritical+0x4a>
	}
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000014 	.word	0x20000014
 80098d8:	e000ed04 	.word	0xe000ed04

080098dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098e2:	4b12      	ldr	r3, [pc, #72]	@ (800992c <vPortExitCritical+0x50>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10b      	bne.n	8009902 <vPortExitCritical+0x26>
	__asm volatile
 80098ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	607b      	str	r3, [r7, #4]
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	e7fd      	b.n	80098fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009902:	4b0a      	ldr	r3, [pc, #40]	@ (800992c <vPortExitCritical+0x50>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3b01      	subs	r3, #1
 8009908:	4a08      	ldr	r2, [pc, #32]	@ (800992c <vPortExitCritical+0x50>)
 800990a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800990c:	4b07      	ldr	r3, [pc, #28]	@ (800992c <vPortExitCritical+0x50>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d105      	bne.n	8009920 <vPortExitCritical+0x44>
 8009914:	2300      	movs	r3, #0
 8009916:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	f383 8811 	msr	BASEPRI, r3
}
 800991e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr
 800992c:	20000014 	.word	0x20000014

08009930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009930:	f3ef 8009 	mrs	r0, PSP
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	4b15      	ldr	r3, [pc, #84]	@ (8009990 <pxCurrentTCBConst>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	f01e 0f10 	tst.w	lr, #16
 8009940:	bf08      	it	eq
 8009942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994a:	6010      	str	r0, [r2, #0]
 800994c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009950:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009954:	f380 8811 	msr	BASEPRI, r0
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f7fe fe9e 	bl	80086a0 <vTaskSwitchContext>
 8009964:	f04f 0000 	mov.w	r0, #0
 8009968:	f380 8811 	msr	BASEPRI, r0
 800996c:	bc09      	pop	{r0, r3}
 800996e:	6819      	ldr	r1, [r3, #0]
 8009970:	6808      	ldr	r0, [r1, #0]
 8009972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009976:	f01e 0f10 	tst.w	lr, #16
 800997a:	bf08      	it	eq
 800997c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009980:	f380 8809 	msr	PSP, r0
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	f3af 8000 	nop.w

08009990 <pxCurrentTCBConst>:
 8009990:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop

08009998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a2:	f383 8811 	msr	BASEPRI, r3
 80099a6:	f3bf 8f6f 	isb	sy
 80099aa:	f3bf 8f4f 	dsb	sy
 80099ae:	607b      	str	r3, [r7, #4]
}
 80099b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099b2:	f7fe fdbb 	bl	800852c <xTaskIncrementTick>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d003      	beq.n	80099c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099bc:	4b06      	ldr	r3, [pc, #24]	@ (80099d8 <xPortSysTickHandler+0x40>)
 80099be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	2300      	movs	r3, #0
 80099c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	f383 8811 	msr	BASEPRI, r3
}
 80099ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009a10 <vPortSetupTimerInterrupt+0x34>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009a14 <vPortSetupTimerInterrupt+0x38>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009a18 <vPortSetupTimerInterrupt+0x3c>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a0a      	ldr	r2, [pc, #40]	@ (8009a1c <vPortSetupTimerInterrupt+0x40>)
 80099f2:	fba2 2303 	umull	r2, r3, r2, r3
 80099f6:	099b      	lsrs	r3, r3, #6
 80099f8:	4a09      	ldr	r2, [pc, #36]	@ (8009a20 <vPortSetupTimerInterrupt+0x44>)
 80099fa:	3b01      	subs	r3, #1
 80099fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099fe:	4b04      	ldr	r3, [pc, #16]	@ (8009a10 <vPortSetupTimerInterrupt+0x34>)
 8009a00:	2207      	movs	r2, #7
 8009a02:	601a      	str	r2, [r3, #0]
}
 8009a04:	bf00      	nop
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	e000e010 	.word	0xe000e010
 8009a14:	e000e018 	.word	0xe000e018
 8009a18:	20000000 	.word	0x20000000
 8009a1c:	10624dd3 	.word	0x10624dd3
 8009a20:	e000e014 	.word	0xe000e014

08009a24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a34 <vPortEnableVFP+0x10>
 8009a28:	6801      	ldr	r1, [r0, #0]
 8009a2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a2e:	6001      	str	r1, [r0, #0]
 8009a30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a32:	bf00      	nop
 8009a34:	e000ed88 	.word	0xe000ed88

08009a38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a3e:	f3ef 8305 	mrs	r3, IPSR
 8009a42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2b0f      	cmp	r3, #15
 8009a48:	d915      	bls.n	8009a76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a4a:	4a18      	ldr	r2, [pc, #96]	@ (8009aac <vPortValidateInterruptPriority+0x74>)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	4413      	add	r3, r2
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a54:	4b16      	ldr	r3, [pc, #88]	@ (8009ab0 <vPortValidateInterruptPriority+0x78>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	7afa      	ldrb	r2, [r7, #11]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d20b      	bcs.n	8009a76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	607b      	str	r3, [r7, #4]
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	e7fd      	b.n	8009a72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a76:	4b0f      	ldr	r3, [pc, #60]	@ (8009ab4 <vPortValidateInterruptPriority+0x7c>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab8 <vPortValidateInterruptPriority+0x80>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d90b      	bls.n	8009a9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	603b      	str	r3, [r7, #0]
}
 8009a98:	bf00      	nop
 8009a9a:	bf00      	nop
 8009a9c:	e7fd      	b.n	8009a9a <vPortValidateInterruptPriority+0x62>
	}
 8009a9e:	bf00      	nop
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	e000e3f0 	.word	0xe000e3f0
 8009ab0:	20001024 	.word	0x20001024
 8009ab4:	e000ed0c 	.word	0xe000ed0c
 8009ab8:	20001028 	.word	0x20001028

08009abc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08a      	sub	sp, #40	@ 0x28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ac8:	f7fe fc74 	bl	80083b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009acc:	4b5c      	ldr	r3, [pc, #368]	@ (8009c40 <pvPortMalloc+0x184>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d101      	bne.n	8009ad8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ad4:	f000 f924 	bl	8009d20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c44 <pvPortMalloc+0x188>)
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4013      	ands	r3, r2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f040 8095 	bne.w	8009c10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01e      	beq.n	8009b2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009aec:	2208      	movs	r2, #8
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4413      	add	r3, r2
 8009af2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d015      	beq.n	8009b2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f023 0307 	bic.w	r3, r3, #7
 8009b04:	3308      	adds	r3, #8
 8009b06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00b      	beq.n	8009b2a <pvPortMalloc+0x6e>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	617b      	str	r3, [r7, #20]
}
 8009b24:	bf00      	nop
 8009b26:	bf00      	nop
 8009b28:	e7fd      	b.n	8009b26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d06f      	beq.n	8009c10 <pvPortMalloc+0x154>
 8009b30:	4b45      	ldr	r3, [pc, #276]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d86a      	bhi.n	8009c10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b3a:	4b44      	ldr	r3, [pc, #272]	@ (8009c4c <pvPortMalloc+0x190>)
 8009b3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b3e:	4b43      	ldr	r3, [pc, #268]	@ (8009c4c <pvPortMalloc+0x190>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b44:	e004      	b.n	8009b50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d903      	bls.n	8009b62 <pvPortMalloc+0xa6>
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1f1      	bne.n	8009b46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b62:	4b37      	ldr	r3, [pc, #220]	@ (8009c40 <pvPortMalloc+0x184>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d051      	beq.n	8009c10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2208      	movs	r2, #8
 8009b72:	4413      	add	r3, r2
 8009b74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	1ad2      	subs	r2, r2, r3
 8009b86:	2308      	movs	r3, #8
 8009b88:	005b      	lsls	r3, r3, #1
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d920      	bls.n	8009bd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d00b      	beq.n	8009bb8 <pvPortMalloc+0xfc>
	__asm volatile
 8009ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	613b      	str	r3, [r7, #16]
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	e7fd      	b.n	8009bb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	1ad2      	subs	r2, r2, r3
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bca:	69b8      	ldr	r0, [r7, #24]
 8009bcc:	f000 f90a 	bl	8009de4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	4a1b      	ldr	r2, [pc, #108]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009bdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bde:	4b1a      	ldr	r3, [pc, #104]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c50 <pvPortMalloc+0x194>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d203      	bcs.n	8009bf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bea:	4b17      	ldr	r3, [pc, #92]	@ (8009c48 <pvPortMalloc+0x18c>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a18      	ldr	r2, [pc, #96]	@ (8009c50 <pvPortMalloc+0x194>)
 8009bf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	4b13      	ldr	r3, [pc, #76]	@ (8009c44 <pvPortMalloc+0x188>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c06:	4b13      	ldr	r3, [pc, #76]	@ (8009c54 <pvPortMalloc+0x198>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	4a11      	ldr	r2, [pc, #68]	@ (8009c54 <pvPortMalloc+0x198>)
 8009c0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c10:	f7fe fbde 	bl	80083d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f003 0307 	and.w	r3, r3, #7
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00b      	beq.n	8009c36 <pvPortMalloc+0x17a>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60fb      	str	r3, [r7, #12]
}
 8009c30:	bf00      	nop
 8009c32:	bf00      	nop
 8009c34:	e7fd      	b.n	8009c32 <pvPortMalloc+0x176>
	return pvReturn;
 8009c36:	69fb      	ldr	r3, [r7, #28]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3728      	adds	r7, #40	@ 0x28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	20001bec 	.word	0x20001bec
 8009c44:	20001c00 	.word	0x20001c00
 8009c48:	20001bf0 	.word	0x20001bf0
 8009c4c:	20001be4 	.word	0x20001be4
 8009c50:	20001bf4 	.word	0x20001bf4
 8009c54:	20001bf8 	.word	0x20001bf8

08009c58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b086      	sub	sp, #24
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d04f      	beq.n	8009d0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c6a:	2308      	movs	r3, #8
 8009c6c:	425b      	negs	r3, r3
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	4413      	add	r3, r2
 8009c72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	4b25      	ldr	r3, [pc, #148]	@ (8009d14 <vPortFree+0xbc>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4013      	ands	r3, r2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10b      	bne.n	8009c9e <vPortFree+0x46>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	60fb      	str	r3, [r7, #12]
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00b      	beq.n	8009cbe <vPortFree+0x66>
	__asm volatile
 8009ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009caa:	f383 8811 	msr	BASEPRI, r3
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	f3bf 8f4f 	dsb	sy
 8009cb6:	60bb      	str	r3, [r7, #8]
}
 8009cb8:	bf00      	nop
 8009cba:	bf00      	nop
 8009cbc:	e7fd      	b.n	8009cba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	4b14      	ldr	r3, [pc, #80]	@ (8009d14 <vPortFree+0xbc>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01e      	beq.n	8009d0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d11a      	bne.n	8009d0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009d14 <vPortFree+0xbc>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	43db      	mvns	r3, r3
 8009cde:	401a      	ands	r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ce4:	f7fe fb66 	bl	80083b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	4b0a      	ldr	r3, [pc, #40]	@ (8009d18 <vPortFree+0xc0>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	4a09      	ldr	r2, [pc, #36]	@ (8009d18 <vPortFree+0xc0>)
 8009cf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009cf6:	6938      	ldr	r0, [r7, #16]
 8009cf8:	f000 f874 	bl	8009de4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cfc:	4b07      	ldr	r3, [pc, #28]	@ (8009d1c <vPortFree+0xc4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	3301      	adds	r3, #1
 8009d02:	4a06      	ldr	r2, [pc, #24]	@ (8009d1c <vPortFree+0xc4>)
 8009d04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d06:	f7fe fb63 	bl	80083d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d0a:	bf00      	nop
 8009d0c:	3718      	adds	r7, #24
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20001c00 	.word	0x20001c00
 8009d18:	20001bf0 	.word	0x20001bf0
 8009d1c:	20001bfc 	.word	0x20001bfc

08009d20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d26:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009d2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d2c:	4b27      	ldr	r3, [pc, #156]	@ (8009dcc <prvHeapInit+0xac>)
 8009d2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f003 0307 	and.w	r3, r3, #7
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d00c      	beq.n	8009d54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3307      	adds	r3, #7
 8009d3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0307 	bic.w	r3, r3, #7
 8009d46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	1ad3      	subs	r3, r2, r3
 8009d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8009dcc <prvHeapInit+0xac>)
 8009d50:	4413      	add	r3, r2
 8009d52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d58:	4a1d      	ldr	r2, [pc, #116]	@ (8009dd0 <prvHeapInit+0xb0>)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8009dd0 <prvHeapInit+0xb0>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	4413      	add	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d6c:	2208      	movs	r2, #8
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1a9b      	subs	r3, r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0307 	bic.w	r3, r3, #7
 8009d7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4a15      	ldr	r2, [pc, #84]	@ (8009dd4 <prvHeapInit+0xb4>)
 8009d80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d82:	4b14      	ldr	r3, [pc, #80]	@ (8009dd4 <prvHeapInit+0xb4>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2200      	movs	r2, #0
 8009d88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d8a:	4b12      	ldr	r3, [pc, #72]	@ (8009dd4 <prvHeapInit+0xb4>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	1ad2      	subs	r2, r2, r3
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009da0:	4b0c      	ldr	r3, [pc, #48]	@ (8009dd4 <prvHeapInit+0xb4>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	4a0a      	ldr	r2, [pc, #40]	@ (8009dd8 <prvHeapInit+0xb8>)
 8009dae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	4a09      	ldr	r2, [pc, #36]	@ (8009ddc <prvHeapInit+0xbc>)
 8009db6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009db8:	4b09      	ldr	r3, [pc, #36]	@ (8009de0 <prvHeapInit+0xc0>)
 8009dba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009dbe:	601a      	str	r2, [r3, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	2000102c 	.word	0x2000102c
 8009dd0:	20001be4 	.word	0x20001be4
 8009dd4:	20001bec 	.word	0x20001bec
 8009dd8:	20001bf4 	.word	0x20001bf4
 8009ddc:	20001bf0 	.word	0x20001bf0
 8009de0:	20001c00 	.word	0x20001c00

08009de4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dec:	4b28      	ldr	r3, [pc, #160]	@ (8009e90 <prvInsertBlockIntoFreeList+0xac>)
 8009dee:	60fb      	str	r3, [r7, #12]
 8009df0:	e002      	b.n	8009df8 <prvInsertBlockIntoFreeList+0x14>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	60fb      	str	r3, [r7, #12]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d8f7      	bhi.n	8009df2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	68ba      	ldr	r2, [r7, #8]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d108      	bne.n	8009e26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	685a      	ldr	r2, [r3, #4]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	441a      	add	r2, r3
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	441a      	add	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d118      	bne.n	8009e6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	4b15      	ldr	r3, [pc, #84]	@ (8009e94 <prvInsertBlockIntoFreeList+0xb0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d00d      	beq.n	8009e62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	441a      	add	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	e008      	b.n	8009e74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e62:	4b0c      	ldr	r3, [pc, #48]	@ (8009e94 <prvInsertBlockIntoFreeList+0xb0>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	e003      	b.n	8009e74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d002      	beq.n	8009e82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	20001be4 	.word	0x20001be4
 8009e94:	20001bec 	.word	0x20001bec

08009e98 <siprintf>:
 8009e98:	b40e      	push	{r1, r2, r3}
 8009e9a:	b500      	push	{lr}
 8009e9c:	b09c      	sub	sp, #112	@ 0x70
 8009e9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ea0:	9002      	str	r0, [sp, #8]
 8009ea2:	9006      	str	r0, [sp, #24]
 8009ea4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ea8:	4809      	ldr	r0, [pc, #36]	@ (8009ed0 <siprintf+0x38>)
 8009eaa:	9107      	str	r1, [sp, #28]
 8009eac:	9104      	str	r1, [sp, #16]
 8009eae:	4909      	ldr	r1, [pc, #36]	@ (8009ed4 <siprintf+0x3c>)
 8009eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb4:	9105      	str	r1, [sp, #20]
 8009eb6:	6800      	ldr	r0, [r0, #0]
 8009eb8:	9301      	str	r3, [sp, #4]
 8009eba:	a902      	add	r1, sp, #8
 8009ebc:	f000 f9f8 	bl	800a2b0 <_svfiprintf_r>
 8009ec0:	9b02      	ldr	r3, [sp, #8]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	701a      	strb	r2, [r3, #0]
 8009ec6:	b01c      	add	sp, #112	@ 0x70
 8009ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ecc:	b003      	add	sp, #12
 8009ece:	4770      	bx	lr
 8009ed0:	20000018 	.word	0x20000018
 8009ed4:	ffff0208 	.word	0xffff0208

08009ed8 <memset>:
 8009ed8:	4402      	add	r2, r0
 8009eda:	4603      	mov	r3, r0
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d100      	bne.n	8009ee2 <memset+0xa>
 8009ee0:	4770      	bx	lr
 8009ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ee6:	e7f9      	b.n	8009edc <memset+0x4>

08009ee8 <_reclaim_reent>:
 8009ee8:	4b29      	ldr	r3, [pc, #164]	@ (8009f90 <_reclaim_reent+0xa8>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	4283      	cmp	r3, r0
 8009eee:	b570      	push	{r4, r5, r6, lr}
 8009ef0:	4604      	mov	r4, r0
 8009ef2:	d04b      	beq.n	8009f8c <_reclaim_reent+0xa4>
 8009ef4:	69c3      	ldr	r3, [r0, #28]
 8009ef6:	b1ab      	cbz	r3, 8009f24 <_reclaim_reent+0x3c>
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	b16b      	cbz	r3, 8009f18 <_reclaim_reent+0x30>
 8009efc:	2500      	movs	r5, #0
 8009efe:	69e3      	ldr	r3, [r4, #28]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	5959      	ldr	r1, [r3, r5]
 8009f04:	2900      	cmp	r1, #0
 8009f06:	d13b      	bne.n	8009f80 <_reclaim_reent+0x98>
 8009f08:	3504      	adds	r5, #4
 8009f0a:	2d80      	cmp	r5, #128	@ 0x80
 8009f0c:	d1f7      	bne.n	8009efe <_reclaim_reent+0x16>
 8009f0e:	69e3      	ldr	r3, [r4, #28]
 8009f10:	4620      	mov	r0, r4
 8009f12:	68d9      	ldr	r1, [r3, #12]
 8009f14:	f000 f878 	bl	800a008 <_free_r>
 8009f18:	69e3      	ldr	r3, [r4, #28]
 8009f1a:	6819      	ldr	r1, [r3, #0]
 8009f1c:	b111      	cbz	r1, 8009f24 <_reclaim_reent+0x3c>
 8009f1e:	4620      	mov	r0, r4
 8009f20:	f000 f872 	bl	800a008 <_free_r>
 8009f24:	6961      	ldr	r1, [r4, #20]
 8009f26:	b111      	cbz	r1, 8009f2e <_reclaim_reent+0x46>
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 f86d 	bl	800a008 <_free_r>
 8009f2e:	69e1      	ldr	r1, [r4, #28]
 8009f30:	b111      	cbz	r1, 8009f38 <_reclaim_reent+0x50>
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 f868 	bl	800a008 <_free_r>
 8009f38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009f3a:	b111      	cbz	r1, 8009f42 <_reclaim_reent+0x5a>
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 f863 	bl	800a008 <_free_r>
 8009f42:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f44:	b111      	cbz	r1, 8009f4c <_reclaim_reent+0x64>
 8009f46:	4620      	mov	r0, r4
 8009f48:	f000 f85e 	bl	800a008 <_free_r>
 8009f4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009f4e:	b111      	cbz	r1, 8009f56 <_reclaim_reent+0x6e>
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 f859 	bl	800a008 <_free_r>
 8009f56:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009f58:	b111      	cbz	r1, 8009f60 <_reclaim_reent+0x78>
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 f854 	bl	800a008 <_free_r>
 8009f60:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009f62:	b111      	cbz	r1, 8009f6a <_reclaim_reent+0x82>
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 f84f 	bl	800a008 <_free_r>
 8009f6a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009f6c:	b111      	cbz	r1, 8009f74 <_reclaim_reent+0x8c>
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 f84a 	bl	800a008 <_free_r>
 8009f74:	6a23      	ldr	r3, [r4, #32]
 8009f76:	b14b      	cbz	r3, 8009f8c <_reclaim_reent+0xa4>
 8009f78:	4620      	mov	r0, r4
 8009f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f7e:	4718      	bx	r3
 8009f80:	680e      	ldr	r6, [r1, #0]
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f840 	bl	800a008 <_free_r>
 8009f88:	4631      	mov	r1, r6
 8009f8a:	e7bb      	b.n	8009f04 <_reclaim_reent+0x1c>
 8009f8c:	bd70      	pop	{r4, r5, r6, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000018 	.word	0x20000018

08009f94 <__errno>:
 8009f94:	4b01      	ldr	r3, [pc, #4]	@ (8009f9c <__errno+0x8>)
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	20000018 	.word	0x20000018

08009fa0 <__libc_init_array>:
 8009fa0:	b570      	push	{r4, r5, r6, lr}
 8009fa2:	4d0d      	ldr	r5, [pc, #52]	@ (8009fd8 <__libc_init_array+0x38>)
 8009fa4:	4c0d      	ldr	r4, [pc, #52]	@ (8009fdc <__libc_init_array+0x3c>)
 8009fa6:	1b64      	subs	r4, r4, r5
 8009fa8:	10a4      	asrs	r4, r4, #2
 8009faa:	2600      	movs	r6, #0
 8009fac:	42a6      	cmp	r6, r4
 8009fae:	d109      	bne.n	8009fc4 <__libc_init_array+0x24>
 8009fb0:	4d0b      	ldr	r5, [pc, #44]	@ (8009fe0 <__libc_init_array+0x40>)
 8009fb2:	4c0c      	ldr	r4, [pc, #48]	@ (8009fe4 <__libc_init_array+0x44>)
 8009fb4:	f000 fcac 	bl	800a910 <_init>
 8009fb8:	1b64      	subs	r4, r4, r5
 8009fba:	10a4      	asrs	r4, r4, #2
 8009fbc:	2600      	movs	r6, #0
 8009fbe:	42a6      	cmp	r6, r4
 8009fc0:	d105      	bne.n	8009fce <__libc_init_array+0x2e>
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
 8009fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc8:	4798      	blx	r3
 8009fca:	3601      	adds	r6, #1
 8009fcc:	e7ee      	b.n	8009fac <__libc_init_array+0xc>
 8009fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd2:	4798      	blx	r3
 8009fd4:	3601      	adds	r6, #1
 8009fd6:	e7f2      	b.n	8009fbe <__libc_init_array+0x1e>
 8009fd8:	0800ac00 	.word	0x0800ac00
 8009fdc:	0800ac00 	.word	0x0800ac00
 8009fe0:	0800ac00 	.word	0x0800ac00
 8009fe4:	0800ac04 	.word	0x0800ac04

08009fe8 <__retarget_lock_acquire_recursive>:
 8009fe8:	4770      	bx	lr

08009fea <__retarget_lock_release_recursive>:
 8009fea:	4770      	bx	lr

08009fec <memcpy>:
 8009fec:	440a      	add	r2, r1
 8009fee:	4291      	cmp	r1, r2
 8009ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff4:	d100      	bne.n	8009ff8 <memcpy+0xc>
 8009ff6:	4770      	bx	lr
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a002:	4291      	cmp	r1, r2
 800a004:	d1f9      	bne.n	8009ffa <memcpy+0xe>
 800a006:	bd10      	pop	{r4, pc}

0800a008 <_free_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4605      	mov	r5, r0
 800a00c:	2900      	cmp	r1, #0
 800a00e:	d041      	beq.n	800a094 <_free_r+0x8c>
 800a010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a014:	1f0c      	subs	r4, r1, #4
 800a016:	2b00      	cmp	r3, #0
 800a018:	bfb8      	it	lt
 800a01a:	18e4      	addlt	r4, r4, r3
 800a01c:	f000 f8e0 	bl	800a1e0 <__malloc_lock>
 800a020:	4a1d      	ldr	r2, [pc, #116]	@ (800a098 <_free_r+0x90>)
 800a022:	6813      	ldr	r3, [r2, #0]
 800a024:	b933      	cbnz	r3, 800a034 <_free_r+0x2c>
 800a026:	6063      	str	r3, [r4, #4]
 800a028:	6014      	str	r4, [r2, #0]
 800a02a:	4628      	mov	r0, r5
 800a02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a030:	f000 b8dc 	b.w	800a1ec <__malloc_unlock>
 800a034:	42a3      	cmp	r3, r4
 800a036:	d908      	bls.n	800a04a <_free_r+0x42>
 800a038:	6820      	ldr	r0, [r4, #0]
 800a03a:	1821      	adds	r1, r4, r0
 800a03c:	428b      	cmp	r3, r1
 800a03e:	bf01      	itttt	eq
 800a040:	6819      	ldreq	r1, [r3, #0]
 800a042:	685b      	ldreq	r3, [r3, #4]
 800a044:	1809      	addeq	r1, r1, r0
 800a046:	6021      	streq	r1, [r4, #0]
 800a048:	e7ed      	b.n	800a026 <_free_r+0x1e>
 800a04a:	461a      	mov	r2, r3
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	b10b      	cbz	r3, 800a054 <_free_r+0x4c>
 800a050:	42a3      	cmp	r3, r4
 800a052:	d9fa      	bls.n	800a04a <_free_r+0x42>
 800a054:	6811      	ldr	r1, [r2, #0]
 800a056:	1850      	adds	r0, r2, r1
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d10b      	bne.n	800a074 <_free_r+0x6c>
 800a05c:	6820      	ldr	r0, [r4, #0]
 800a05e:	4401      	add	r1, r0
 800a060:	1850      	adds	r0, r2, r1
 800a062:	4283      	cmp	r3, r0
 800a064:	6011      	str	r1, [r2, #0]
 800a066:	d1e0      	bne.n	800a02a <_free_r+0x22>
 800a068:	6818      	ldr	r0, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	6053      	str	r3, [r2, #4]
 800a06e:	4408      	add	r0, r1
 800a070:	6010      	str	r0, [r2, #0]
 800a072:	e7da      	b.n	800a02a <_free_r+0x22>
 800a074:	d902      	bls.n	800a07c <_free_r+0x74>
 800a076:	230c      	movs	r3, #12
 800a078:	602b      	str	r3, [r5, #0]
 800a07a:	e7d6      	b.n	800a02a <_free_r+0x22>
 800a07c:	6820      	ldr	r0, [r4, #0]
 800a07e:	1821      	adds	r1, r4, r0
 800a080:	428b      	cmp	r3, r1
 800a082:	bf04      	itt	eq
 800a084:	6819      	ldreq	r1, [r3, #0]
 800a086:	685b      	ldreq	r3, [r3, #4]
 800a088:	6063      	str	r3, [r4, #4]
 800a08a:	bf04      	itt	eq
 800a08c:	1809      	addeq	r1, r1, r0
 800a08e:	6021      	streq	r1, [r4, #0]
 800a090:	6054      	str	r4, [r2, #4]
 800a092:	e7ca      	b.n	800a02a <_free_r+0x22>
 800a094:	bd38      	pop	{r3, r4, r5, pc}
 800a096:	bf00      	nop
 800a098:	20001d48 	.word	0x20001d48

0800a09c <sbrk_aligned>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	4e0f      	ldr	r6, [pc, #60]	@ (800a0dc <sbrk_aligned+0x40>)
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	6831      	ldr	r1, [r6, #0]
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	b911      	cbnz	r1, 800a0ae <sbrk_aligned+0x12>
 800a0a8:	f000 fba6 	bl	800a7f8 <_sbrk_r>
 800a0ac:	6030      	str	r0, [r6, #0]
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	f000 fba1 	bl	800a7f8 <_sbrk_r>
 800a0b6:	1c43      	adds	r3, r0, #1
 800a0b8:	d103      	bne.n	800a0c2 <sbrk_aligned+0x26>
 800a0ba:	f04f 34ff 	mov.w	r4, #4294967295
 800a0be:	4620      	mov	r0, r4
 800a0c0:	bd70      	pop	{r4, r5, r6, pc}
 800a0c2:	1cc4      	adds	r4, r0, #3
 800a0c4:	f024 0403 	bic.w	r4, r4, #3
 800a0c8:	42a0      	cmp	r0, r4
 800a0ca:	d0f8      	beq.n	800a0be <sbrk_aligned+0x22>
 800a0cc:	1a21      	subs	r1, r4, r0
 800a0ce:	4628      	mov	r0, r5
 800a0d0:	f000 fb92 	bl	800a7f8 <_sbrk_r>
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d1f2      	bne.n	800a0be <sbrk_aligned+0x22>
 800a0d8:	e7ef      	b.n	800a0ba <sbrk_aligned+0x1e>
 800a0da:	bf00      	nop
 800a0dc:	20001d44 	.word	0x20001d44

0800a0e0 <_malloc_r>:
 800a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	1ccd      	adds	r5, r1, #3
 800a0e6:	f025 0503 	bic.w	r5, r5, #3
 800a0ea:	3508      	adds	r5, #8
 800a0ec:	2d0c      	cmp	r5, #12
 800a0ee:	bf38      	it	cc
 800a0f0:	250c      	movcc	r5, #12
 800a0f2:	2d00      	cmp	r5, #0
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	db01      	blt.n	800a0fc <_malloc_r+0x1c>
 800a0f8:	42a9      	cmp	r1, r5
 800a0fa:	d904      	bls.n	800a106 <_malloc_r+0x26>
 800a0fc:	230c      	movs	r3, #12
 800a0fe:	6033      	str	r3, [r6, #0]
 800a100:	2000      	movs	r0, #0
 800a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a106:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1dc <_malloc_r+0xfc>
 800a10a:	f000 f869 	bl	800a1e0 <__malloc_lock>
 800a10e:	f8d8 3000 	ldr.w	r3, [r8]
 800a112:	461c      	mov	r4, r3
 800a114:	bb44      	cbnz	r4, 800a168 <_malloc_r+0x88>
 800a116:	4629      	mov	r1, r5
 800a118:	4630      	mov	r0, r6
 800a11a:	f7ff ffbf 	bl	800a09c <sbrk_aligned>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	4604      	mov	r4, r0
 800a122:	d158      	bne.n	800a1d6 <_malloc_r+0xf6>
 800a124:	f8d8 4000 	ldr.w	r4, [r8]
 800a128:	4627      	mov	r7, r4
 800a12a:	2f00      	cmp	r7, #0
 800a12c:	d143      	bne.n	800a1b6 <_malloc_r+0xd6>
 800a12e:	2c00      	cmp	r4, #0
 800a130:	d04b      	beq.n	800a1ca <_malloc_r+0xea>
 800a132:	6823      	ldr	r3, [r4, #0]
 800a134:	4639      	mov	r1, r7
 800a136:	4630      	mov	r0, r6
 800a138:	eb04 0903 	add.w	r9, r4, r3
 800a13c:	f000 fb5c 	bl	800a7f8 <_sbrk_r>
 800a140:	4581      	cmp	r9, r0
 800a142:	d142      	bne.n	800a1ca <_malloc_r+0xea>
 800a144:	6821      	ldr	r1, [r4, #0]
 800a146:	1a6d      	subs	r5, r5, r1
 800a148:	4629      	mov	r1, r5
 800a14a:	4630      	mov	r0, r6
 800a14c:	f7ff ffa6 	bl	800a09c <sbrk_aligned>
 800a150:	3001      	adds	r0, #1
 800a152:	d03a      	beq.n	800a1ca <_malloc_r+0xea>
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	442b      	add	r3, r5
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	f8d8 3000 	ldr.w	r3, [r8]
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	bb62      	cbnz	r2, 800a1bc <_malloc_r+0xdc>
 800a162:	f8c8 7000 	str.w	r7, [r8]
 800a166:	e00f      	b.n	800a188 <_malloc_r+0xa8>
 800a168:	6822      	ldr	r2, [r4, #0]
 800a16a:	1b52      	subs	r2, r2, r5
 800a16c:	d420      	bmi.n	800a1b0 <_malloc_r+0xd0>
 800a16e:	2a0b      	cmp	r2, #11
 800a170:	d917      	bls.n	800a1a2 <_malloc_r+0xc2>
 800a172:	1961      	adds	r1, r4, r5
 800a174:	42a3      	cmp	r3, r4
 800a176:	6025      	str	r5, [r4, #0]
 800a178:	bf18      	it	ne
 800a17a:	6059      	strne	r1, [r3, #4]
 800a17c:	6863      	ldr	r3, [r4, #4]
 800a17e:	bf08      	it	eq
 800a180:	f8c8 1000 	streq.w	r1, [r8]
 800a184:	5162      	str	r2, [r4, r5]
 800a186:	604b      	str	r3, [r1, #4]
 800a188:	4630      	mov	r0, r6
 800a18a:	f000 f82f 	bl	800a1ec <__malloc_unlock>
 800a18e:	f104 000b 	add.w	r0, r4, #11
 800a192:	1d23      	adds	r3, r4, #4
 800a194:	f020 0007 	bic.w	r0, r0, #7
 800a198:	1ac2      	subs	r2, r0, r3
 800a19a:	bf1c      	itt	ne
 800a19c:	1a1b      	subne	r3, r3, r0
 800a19e:	50a3      	strne	r3, [r4, r2]
 800a1a0:	e7af      	b.n	800a102 <_malloc_r+0x22>
 800a1a2:	6862      	ldr	r2, [r4, #4]
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	bf0c      	ite	eq
 800a1a8:	f8c8 2000 	streq.w	r2, [r8]
 800a1ac:	605a      	strne	r2, [r3, #4]
 800a1ae:	e7eb      	b.n	800a188 <_malloc_r+0xa8>
 800a1b0:	4623      	mov	r3, r4
 800a1b2:	6864      	ldr	r4, [r4, #4]
 800a1b4:	e7ae      	b.n	800a114 <_malloc_r+0x34>
 800a1b6:	463c      	mov	r4, r7
 800a1b8:	687f      	ldr	r7, [r7, #4]
 800a1ba:	e7b6      	b.n	800a12a <_malloc_r+0x4a>
 800a1bc:	461a      	mov	r2, r3
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	d1fb      	bne.n	800a1bc <_malloc_r+0xdc>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	6053      	str	r3, [r2, #4]
 800a1c8:	e7de      	b.n	800a188 <_malloc_r+0xa8>
 800a1ca:	230c      	movs	r3, #12
 800a1cc:	6033      	str	r3, [r6, #0]
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f000 f80c 	bl	800a1ec <__malloc_unlock>
 800a1d4:	e794      	b.n	800a100 <_malloc_r+0x20>
 800a1d6:	6005      	str	r5, [r0, #0]
 800a1d8:	e7d6      	b.n	800a188 <_malloc_r+0xa8>
 800a1da:	bf00      	nop
 800a1dc:	20001d48 	.word	0x20001d48

0800a1e0 <__malloc_lock>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	@ (800a1e8 <__malloc_lock+0x8>)
 800a1e2:	f7ff bf01 	b.w	8009fe8 <__retarget_lock_acquire_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	20001d40 	.word	0x20001d40

0800a1ec <__malloc_unlock>:
 800a1ec:	4801      	ldr	r0, [pc, #4]	@ (800a1f4 <__malloc_unlock+0x8>)
 800a1ee:	f7ff befc 	b.w	8009fea <__retarget_lock_release_recursive>
 800a1f2:	bf00      	nop
 800a1f4:	20001d40 	.word	0x20001d40

0800a1f8 <__ssputs_r>:
 800a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	688e      	ldr	r6, [r1, #8]
 800a1fe:	461f      	mov	r7, r3
 800a200:	42be      	cmp	r6, r7
 800a202:	680b      	ldr	r3, [r1, #0]
 800a204:	4682      	mov	sl, r0
 800a206:	460c      	mov	r4, r1
 800a208:	4690      	mov	r8, r2
 800a20a:	d82d      	bhi.n	800a268 <__ssputs_r+0x70>
 800a20c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a210:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a214:	d026      	beq.n	800a264 <__ssputs_r+0x6c>
 800a216:	6965      	ldr	r5, [r4, #20]
 800a218:	6909      	ldr	r1, [r1, #16]
 800a21a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a21e:	eba3 0901 	sub.w	r9, r3, r1
 800a222:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a226:	1c7b      	adds	r3, r7, #1
 800a228:	444b      	add	r3, r9
 800a22a:	106d      	asrs	r5, r5, #1
 800a22c:	429d      	cmp	r5, r3
 800a22e:	bf38      	it	cc
 800a230:	461d      	movcc	r5, r3
 800a232:	0553      	lsls	r3, r2, #21
 800a234:	d527      	bpl.n	800a286 <__ssputs_r+0x8e>
 800a236:	4629      	mov	r1, r5
 800a238:	f7ff ff52 	bl	800a0e0 <_malloc_r>
 800a23c:	4606      	mov	r6, r0
 800a23e:	b360      	cbz	r0, 800a29a <__ssputs_r+0xa2>
 800a240:	6921      	ldr	r1, [r4, #16]
 800a242:	464a      	mov	r2, r9
 800a244:	f7ff fed2 	bl	8009fec <memcpy>
 800a248:	89a3      	ldrh	r3, [r4, #12]
 800a24a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a252:	81a3      	strh	r3, [r4, #12]
 800a254:	6126      	str	r6, [r4, #16]
 800a256:	6165      	str	r5, [r4, #20]
 800a258:	444e      	add	r6, r9
 800a25a:	eba5 0509 	sub.w	r5, r5, r9
 800a25e:	6026      	str	r6, [r4, #0]
 800a260:	60a5      	str	r5, [r4, #8]
 800a262:	463e      	mov	r6, r7
 800a264:	42be      	cmp	r6, r7
 800a266:	d900      	bls.n	800a26a <__ssputs_r+0x72>
 800a268:	463e      	mov	r6, r7
 800a26a:	6820      	ldr	r0, [r4, #0]
 800a26c:	4632      	mov	r2, r6
 800a26e:	4641      	mov	r1, r8
 800a270:	f000 faa8 	bl	800a7c4 <memmove>
 800a274:	68a3      	ldr	r3, [r4, #8]
 800a276:	1b9b      	subs	r3, r3, r6
 800a278:	60a3      	str	r3, [r4, #8]
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	4433      	add	r3, r6
 800a27e:	6023      	str	r3, [r4, #0]
 800a280:	2000      	movs	r0, #0
 800a282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a286:	462a      	mov	r2, r5
 800a288:	f000 fac6 	bl	800a818 <_realloc_r>
 800a28c:	4606      	mov	r6, r0
 800a28e:	2800      	cmp	r0, #0
 800a290:	d1e0      	bne.n	800a254 <__ssputs_r+0x5c>
 800a292:	6921      	ldr	r1, [r4, #16]
 800a294:	4650      	mov	r0, sl
 800a296:	f7ff feb7 	bl	800a008 <_free_r>
 800a29a:	230c      	movs	r3, #12
 800a29c:	f8ca 3000 	str.w	r3, [sl]
 800a2a0:	89a3      	ldrh	r3, [r4, #12]
 800a2a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2a6:	81a3      	strh	r3, [r4, #12]
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	e7e9      	b.n	800a282 <__ssputs_r+0x8a>
	...

0800a2b0 <_svfiprintf_r>:
 800a2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	4698      	mov	r8, r3
 800a2b6:	898b      	ldrh	r3, [r1, #12]
 800a2b8:	061b      	lsls	r3, r3, #24
 800a2ba:	b09d      	sub	sp, #116	@ 0x74
 800a2bc:	4607      	mov	r7, r0
 800a2be:	460d      	mov	r5, r1
 800a2c0:	4614      	mov	r4, r2
 800a2c2:	d510      	bpl.n	800a2e6 <_svfiprintf_r+0x36>
 800a2c4:	690b      	ldr	r3, [r1, #16]
 800a2c6:	b973      	cbnz	r3, 800a2e6 <_svfiprintf_r+0x36>
 800a2c8:	2140      	movs	r1, #64	@ 0x40
 800a2ca:	f7ff ff09 	bl	800a0e0 <_malloc_r>
 800a2ce:	6028      	str	r0, [r5, #0]
 800a2d0:	6128      	str	r0, [r5, #16]
 800a2d2:	b930      	cbnz	r0, 800a2e2 <_svfiprintf_r+0x32>
 800a2d4:	230c      	movs	r3, #12
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	b01d      	add	sp, #116	@ 0x74
 800a2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e2:	2340      	movs	r3, #64	@ 0x40
 800a2e4:	616b      	str	r3, [r5, #20]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ea:	2320      	movs	r3, #32
 800a2ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2f4:	2330      	movs	r3, #48	@ 0x30
 800a2f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a494 <_svfiprintf_r+0x1e4>
 800a2fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2fe:	f04f 0901 	mov.w	r9, #1
 800a302:	4623      	mov	r3, r4
 800a304:	469a      	mov	sl, r3
 800a306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a30a:	b10a      	cbz	r2, 800a310 <_svfiprintf_r+0x60>
 800a30c:	2a25      	cmp	r2, #37	@ 0x25
 800a30e:	d1f9      	bne.n	800a304 <_svfiprintf_r+0x54>
 800a310:	ebba 0b04 	subs.w	fp, sl, r4
 800a314:	d00b      	beq.n	800a32e <_svfiprintf_r+0x7e>
 800a316:	465b      	mov	r3, fp
 800a318:	4622      	mov	r2, r4
 800a31a:	4629      	mov	r1, r5
 800a31c:	4638      	mov	r0, r7
 800a31e:	f7ff ff6b 	bl	800a1f8 <__ssputs_r>
 800a322:	3001      	adds	r0, #1
 800a324:	f000 80a7 	beq.w	800a476 <_svfiprintf_r+0x1c6>
 800a328:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a32a:	445a      	add	r2, fp
 800a32c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a32e:	f89a 3000 	ldrb.w	r3, [sl]
 800a332:	2b00      	cmp	r3, #0
 800a334:	f000 809f 	beq.w	800a476 <_svfiprintf_r+0x1c6>
 800a338:	2300      	movs	r3, #0
 800a33a:	f04f 32ff 	mov.w	r2, #4294967295
 800a33e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a342:	f10a 0a01 	add.w	sl, sl, #1
 800a346:	9304      	str	r3, [sp, #16]
 800a348:	9307      	str	r3, [sp, #28]
 800a34a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a34e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a350:	4654      	mov	r4, sl
 800a352:	2205      	movs	r2, #5
 800a354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a358:	484e      	ldr	r0, [pc, #312]	@ (800a494 <_svfiprintf_r+0x1e4>)
 800a35a:	f7f5 ff39 	bl	80001d0 <memchr>
 800a35e:	9a04      	ldr	r2, [sp, #16]
 800a360:	b9d8      	cbnz	r0, 800a39a <_svfiprintf_r+0xea>
 800a362:	06d0      	lsls	r0, r2, #27
 800a364:	bf44      	itt	mi
 800a366:	2320      	movmi	r3, #32
 800a368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a36c:	0711      	lsls	r1, r2, #28
 800a36e:	bf44      	itt	mi
 800a370:	232b      	movmi	r3, #43	@ 0x2b
 800a372:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a376:	f89a 3000 	ldrb.w	r3, [sl]
 800a37a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a37c:	d015      	beq.n	800a3aa <_svfiprintf_r+0xfa>
 800a37e:	9a07      	ldr	r2, [sp, #28]
 800a380:	4654      	mov	r4, sl
 800a382:	2000      	movs	r0, #0
 800a384:	f04f 0c0a 	mov.w	ip, #10
 800a388:	4621      	mov	r1, r4
 800a38a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a38e:	3b30      	subs	r3, #48	@ 0x30
 800a390:	2b09      	cmp	r3, #9
 800a392:	d94b      	bls.n	800a42c <_svfiprintf_r+0x17c>
 800a394:	b1b0      	cbz	r0, 800a3c4 <_svfiprintf_r+0x114>
 800a396:	9207      	str	r2, [sp, #28]
 800a398:	e014      	b.n	800a3c4 <_svfiprintf_r+0x114>
 800a39a:	eba0 0308 	sub.w	r3, r0, r8
 800a39e:	fa09 f303 	lsl.w	r3, r9, r3
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	46a2      	mov	sl, r4
 800a3a8:	e7d2      	b.n	800a350 <_svfiprintf_r+0xa0>
 800a3aa:	9b03      	ldr	r3, [sp, #12]
 800a3ac:	1d19      	adds	r1, r3, #4
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	9103      	str	r1, [sp, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	bfbb      	ittet	lt
 800a3b6:	425b      	neglt	r3, r3
 800a3b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a3bc:	9307      	strge	r3, [sp, #28]
 800a3be:	9307      	strlt	r3, [sp, #28]
 800a3c0:	bfb8      	it	lt
 800a3c2:	9204      	strlt	r2, [sp, #16]
 800a3c4:	7823      	ldrb	r3, [r4, #0]
 800a3c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3c8:	d10a      	bne.n	800a3e0 <_svfiprintf_r+0x130>
 800a3ca:	7863      	ldrb	r3, [r4, #1]
 800a3cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ce:	d132      	bne.n	800a436 <_svfiprintf_r+0x186>
 800a3d0:	9b03      	ldr	r3, [sp, #12]
 800a3d2:	1d1a      	adds	r2, r3, #4
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	9203      	str	r2, [sp, #12]
 800a3d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3dc:	3402      	adds	r4, #2
 800a3de:	9305      	str	r3, [sp, #20]
 800a3e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4a4 <_svfiprintf_r+0x1f4>
 800a3e4:	7821      	ldrb	r1, [r4, #0]
 800a3e6:	2203      	movs	r2, #3
 800a3e8:	4650      	mov	r0, sl
 800a3ea:	f7f5 fef1 	bl	80001d0 <memchr>
 800a3ee:	b138      	cbz	r0, 800a400 <_svfiprintf_r+0x150>
 800a3f0:	9b04      	ldr	r3, [sp, #16]
 800a3f2:	eba0 000a 	sub.w	r0, r0, sl
 800a3f6:	2240      	movs	r2, #64	@ 0x40
 800a3f8:	4082      	lsls	r2, r0
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	3401      	adds	r4, #1
 800a3fe:	9304      	str	r3, [sp, #16]
 800a400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a404:	4824      	ldr	r0, [pc, #144]	@ (800a498 <_svfiprintf_r+0x1e8>)
 800a406:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a40a:	2206      	movs	r2, #6
 800a40c:	f7f5 fee0 	bl	80001d0 <memchr>
 800a410:	2800      	cmp	r0, #0
 800a412:	d036      	beq.n	800a482 <_svfiprintf_r+0x1d2>
 800a414:	4b21      	ldr	r3, [pc, #132]	@ (800a49c <_svfiprintf_r+0x1ec>)
 800a416:	bb1b      	cbnz	r3, 800a460 <_svfiprintf_r+0x1b0>
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	3307      	adds	r3, #7
 800a41c:	f023 0307 	bic.w	r3, r3, #7
 800a420:	3308      	adds	r3, #8
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a426:	4433      	add	r3, r6
 800a428:	9309      	str	r3, [sp, #36]	@ 0x24
 800a42a:	e76a      	b.n	800a302 <_svfiprintf_r+0x52>
 800a42c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a430:	460c      	mov	r4, r1
 800a432:	2001      	movs	r0, #1
 800a434:	e7a8      	b.n	800a388 <_svfiprintf_r+0xd8>
 800a436:	2300      	movs	r3, #0
 800a438:	3401      	adds	r4, #1
 800a43a:	9305      	str	r3, [sp, #20]
 800a43c:	4619      	mov	r1, r3
 800a43e:	f04f 0c0a 	mov.w	ip, #10
 800a442:	4620      	mov	r0, r4
 800a444:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a448:	3a30      	subs	r2, #48	@ 0x30
 800a44a:	2a09      	cmp	r2, #9
 800a44c:	d903      	bls.n	800a456 <_svfiprintf_r+0x1a6>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0c6      	beq.n	800a3e0 <_svfiprintf_r+0x130>
 800a452:	9105      	str	r1, [sp, #20]
 800a454:	e7c4      	b.n	800a3e0 <_svfiprintf_r+0x130>
 800a456:	fb0c 2101 	mla	r1, ip, r1, r2
 800a45a:	4604      	mov	r4, r0
 800a45c:	2301      	movs	r3, #1
 800a45e:	e7f0      	b.n	800a442 <_svfiprintf_r+0x192>
 800a460:	ab03      	add	r3, sp, #12
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	462a      	mov	r2, r5
 800a466:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a0 <_svfiprintf_r+0x1f0>)
 800a468:	a904      	add	r1, sp, #16
 800a46a:	4638      	mov	r0, r7
 800a46c:	f3af 8000 	nop.w
 800a470:	1c42      	adds	r2, r0, #1
 800a472:	4606      	mov	r6, r0
 800a474:	d1d6      	bne.n	800a424 <_svfiprintf_r+0x174>
 800a476:	89ab      	ldrh	r3, [r5, #12]
 800a478:	065b      	lsls	r3, r3, #25
 800a47a:	f53f af2d 	bmi.w	800a2d8 <_svfiprintf_r+0x28>
 800a47e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a480:	e72c      	b.n	800a2dc <_svfiprintf_r+0x2c>
 800a482:	ab03      	add	r3, sp, #12
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	462a      	mov	r2, r5
 800a488:	4b05      	ldr	r3, [pc, #20]	@ (800a4a0 <_svfiprintf_r+0x1f0>)
 800a48a:	a904      	add	r1, sp, #16
 800a48c:	4638      	mov	r0, r7
 800a48e:	f000 f879 	bl	800a584 <_printf_i>
 800a492:	e7ed      	b.n	800a470 <_svfiprintf_r+0x1c0>
 800a494:	0800abc4 	.word	0x0800abc4
 800a498:	0800abce 	.word	0x0800abce
 800a49c:	00000000 	.word	0x00000000
 800a4a0:	0800a1f9 	.word	0x0800a1f9
 800a4a4:	0800abca 	.word	0x0800abca

0800a4a8 <_printf_common>:
 800a4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ac:	4616      	mov	r6, r2
 800a4ae:	4698      	mov	r8, r3
 800a4b0:	688a      	ldr	r2, [r1, #8]
 800a4b2:	690b      	ldr	r3, [r1, #16]
 800a4b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	bfb8      	it	lt
 800a4bc:	4613      	movlt	r3, r2
 800a4be:	6033      	str	r3, [r6, #0]
 800a4c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	460c      	mov	r4, r1
 800a4c8:	b10a      	cbz	r2, 800a4ce <_printf_common+0x26>
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	6033      	str	r3, [r6, #0]
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	0699      	lsls	r1, r3, #26
 800a4d2:	bf42      	ittt	mi
 800a4d4:	6833      	ldrmi	r3, [r6, #0]
 800a4d6:	3302      	addmi	r3, #2
 800a4d8:	6033      	strmi	r3, [r6, #0]
 800a4da:	6825      	ldr	r5, [r4, #0]
 800a4dc:	f015 0506 	ands.w	r5, r5, #6
 800a4e0:	d106      	bne.n	800a4f0 <_printf_common+0x48>
 800a4e2:	f104 0a19 	add.w	sl, r4, #25
 800a4e6:	68e3      	ldr	r3, [r4, #12]
 800a4e8:	6832      	ldr	r2, [r6, #0]
 800a4ea:	1a9b      	subs	r3, r3, r2
 800a4ec:	42ab      	cmp	r3, r5
 800a4ee:	dc26      	bgt.n	800a53e <_printf_common+0x96>
 800a4f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4f4:	6822      	ldr	r2, [r4, #0]
 800a4f6:	3b00      	subs	r3, #0
 800a4f8:	bf18      	it	ne
 800a4fa:	2301      	movne	r3, #1
 800a4fc:	0692      	lsls	r2, r2, #26
 800a4fe:	d42b      	bmi.n	800a558 <_printf_common+0xb0>
 800a500:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a504:	4641      	mov	r1, r8
 800a506:	4638      	mov	r0, r7
 800a508:	47c8      	blx	r9
 800a50a:	3001      	adds	r0, #1
 800a50c:	d01e      	beq.n	800a54c <_printf_common+0xa4>
 800a50e:	6823      	ldr	r3, [r4, #0]
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	f003 0306 	and.w	r3, r3, #6
 800a516:	2b04      	cmp	r3, #4
 800a518:	bf02      	ittt	eq
 800a51a:	68e5      	ldreq	r5, [r4, #12]
 800a51c:	6833      	ldreq	r3, [r6, #0]
 800a51e:	1aed      	subeq	r5, r5, r3
 800a520:	68a3      	ldr	r3, [r4, #8]
 800a522:	bf0c      	ite	eq
 800a524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a528:	2500      	movne	r5, #0
 800a52a:	4293      	cmp	r3, r2
 800a52c:	bfc4      	itt	gt
 800a52e:	1a9b      	subgt	r3, r3, r2
 800a530:	18ed      	addgt	r5, r5, r3
 800a532:	2600      	movs	r6, #0
 800a534:	341a      	adds	r4, #26
 800a536:	42b5      	cmp	r5, r6
 800a538:	d11a      	bne.n	800a570 <_printf_common+0xc8>
 800a53a:	2000      	movs	r0, #0
 800a53c:	e008      	b.n	800a550 <_printf_common+0xa8>
 800a53e:	2301      	movs	r3, #1
 800a540:	4652      	mov	r2, sl
 800a542:	4641      	mov	r1, r8
 800a544:	4638      	mov	r0, r7
 800a546:	47c8      	blx	r9
 800a548:	3001      	adds	r0, #1
 800a54a:	d103      	bne.n	800a554 <_printf_common+0xac>
 800a54c:	f04f 30ff 	mov.w	r0, #4294967295
 800a550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a554:	3501      	adds	r5, #1
 800a556:	e7c6      	b.n	800a4e6 <_printf_common+0x3e>
 800a558:	18e1      	adds	r1, r4, r3
 800a55a:	1c5a      	adds	r2, r3, #1
 800a55c:	2030      	movs	r0, #48	@ 0x30
 800a55e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a562:	4422      	add	r2, r4
 800a564:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a568:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a56c:	3302      	adds	r3, #2
 800a56e:	e7c7      	b.n	800a500 <_printf_common+0x58>
 800a570:	2301      	movs	r3, #1
 800a572:	4622      	mov	r2, r4
 800a574:	4641      	mov	r1, r8
 800a576:	4638      	mov	r0, r7
 800a578:	47c8      	blx	r9
 800a57a:	3001      	adds	r0, #1
 800a57c:	d0e6      	beq.n	800a54c <_printf_common+0xa4>
 800a57e:	3601      	adds	r6, #1
 800a580:	e7d9      	b.n	800a536 <_printf_common+0x8e>
	...

0800a584 <_printf_i>:
 800a584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a588:	7e0f      	ldrb	r7, [r1, #24]
 800a58a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a58c:	2f78      	cmp	r7, #120	@ 0x78
 800a58e:	4691      	mov	r9, r2
 800a590:	4680      	mov	r8, r0
 800a592:	460c      	mov	r4, r1
 800a594:	469a      	mov	sl, r3
 800a596:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a59a:	d807      	bhi.n	800a5ac <_printf_i+0x28>
 800a59c:	2f62      	cmp	r7, #98	@ 0x62
 800a59e:	d80a      	bhi.n	800a5b6 <_printf_i+0x32>
 800a5a0:	2f00      	cmp	r7, #0
 800a5a2:	f000 80d2 	beq.w	800a74a <_printf_i+0x1c6>
 800a5a6:	2f58      	cmp	r7, #88	@ 0x58
 800a5a8:	f000 80b9 	beq.w	800a71e <_printf_i+0x19a>
 800a5ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5b4:	e03a      	b.n	800a62c <_printf_i+0xa8>
 800a5b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5ba:	2b15      	cmp	r3, #21
 800a5bc:	d8f6      	bhi.n	800a5ac <_printf_i+0x28>
 800a5be:	a101      	add	r1, pc, #4	@ (adr r1, 800a5c4 <_printf_i+0x40>)
 800a5c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5c4:	0800a61d 	.word	0x0800a61d
 800a5c8:	0800a631 	.word	0x0800a631
 800a5cc:	0800a5ad 	.word	0x0800a5ad
 800a5d0:	0800a5ad 	.word	0x0800a5ad
 800a5d4:	0800a5ad 	.word	0x0800a5ad
 800a5d8:	0800a5ad 	.word	0x0800a5ad
 800a5dc:	0800a631 	.word	0x0800a631
 800a5e0:	0800a5ad 	.word	0x0800a5ad
 800a5e4:	0800a5ad 	.word	0x0800a5ad
 800a5e8:	0800a5ad 	.word	0x0800a5ad
 800a5ec:	0800a5ad 	.word	0x0800a5ad
 800a5f0:	0800a731 	.word	0x0800a731
 800a5f4:	0800a65b 	.word	0x0800a65b
 800a5f8:	0800a6eb 	.word	0x0800a6eb
 800a5fc:	0800a5ad 	.word	0x0800a5ad
 800a600:	0800a5ad 	.word	0x0800a5ad
 800a604:	0800a753 	.word	0x0800a753
 800a608:	0800a5ad 	.word	0x0800a5ad
 800a60c:	0800a65b 	.word	0x0800a65b
 800a610:	0800a5ad 	.word	0x0800a5ad
 800a614:	0800a5ad 	.word	0x0800a5ad
 800a618:	0800a6f3 	.word	0x0800a6f3
 800a61c:	6833      	ldr	r3, [r6, #0]
 800a61e:	1d1a      	adds	r2, r3, #4
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6032      	str	r2, [r6, #0]
 800a624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a628:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a62c:	2301      	movs	r3, #1
 800a62e:	e09d      	b.n	800a76c <_printf_i+0x1e8>
 800a630:	6833      	ldr	r3, [r6, #0]
 800a632:	6820      	ldr	r0, [r4, #0]
 800a634:	1d19      	adds	r1, r3, #4
 800a636:	6031      	str	r1, [r6, #0]
 800a638:	0606      	lsls	r6, r0, #24
 800a63a:	d501      	bpl.n	800a640 <_printf_i+0xbc>
 800a63c:	681d      	ldr	r5, [r3, #0]
 800a63e:	e003      	b.n	800a648 <_printf_i+0xc4>
 800a640:	0645      	lsls	r5, r0, #25
 800a642:	d5fb      	bpl.n	800a63c <_printf_i+0xb8>
 800a644:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a648:	2d00      	cmp	r5, #0
 800a64a:	da03      	bge.n	800a654 <_printf_i+0xd0>
 800a64c:	232d      	movs	r3, #45	@ 0x2d
 800a64e:	426d      	negs	r5, r5
 800a650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a654:	4859      	ldr	r0, [pc, #356]	@ (800a7bc <_printf_i+0x238>)
 800a656:	230a      	movs	r3, #10
 800a658:	e011      	b.n	800a67e <_printf_i+0xfa>
 800a65a:	6821      	ldr	r1, [r4, #0]
 800a65c:	6833      	ldr	r3, [r6, #0]
 800a65e:	0608      	lsls	r0, r1, #24
 800a660:	f853 5b04 	ldr.w	r5, [r3], #4
 800a664:	d402      	bmi.n	800a66c <_printf_i+0xe8>
 800a666:	0649      	lsls	r1, r1, #25
 800a668:	bf48      	it	mi
 800a66a:	b2ad      	uxthmi	r5, r5
 800a66c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a66e:	4853      	ldr	r0, [pc, #332]	@ (800a7bc <_printf_i+0x238>)
 800a670:	6033      	str	r3, [r6, #0]
 800a672:	bf14      	ite	ne
 800a674:	230a      	movne	r3, #10
 800a676:	2308      	moveq	r3, #8
 800a678:	2100      	movs	r1, #0
 800a67a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a67e:	6866      	ldr	r6, [r4, #4]
 800a680:	60a6      	str	r6, [r4, #8]
 800a682:	2e00      	cmp	r6, #0
 800a684:	bfa2      	ittt	ge
 800a686:	6821      	ldrge	r1, [r4, #0]
 800a688:	f021 0104 	bicge.w	r1, r1, #4
 800a68c:	6021      	strge	r1, [r4, #0]
 800a68e:	b90d      	cbnz	r5, 800a694 <_printf_i+0x110>
 800a690:	2e00      	cmp	r6, #0
 800a692:	d04b      	beq.n	800a72c <_printf_i+0x1a8>
 800a694:	4616      	mov	r6, r2
 800a696:	fbb5 f1f3 	udiv	r1, r5, r3
 800a69a:	fb03 5711 	mls	r7, r3, r1, r5
 800a69e:	5dc7      	ldrb	r7, [r0, r7]
 800a6a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6a4:	462f      	mov	r7, r5
 800a6a6:	42bb      	cmp	r3, r7
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	d9f4      	bls.n	800a696 <_printf_i+0x112>
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d10b      	bne.n	800a6c8 <_printf_i+0x144>
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	07df      	lsls	r7, r3, #31
 800a6b4:	d508      	bpl.n	800a6c8 <_printf_i+0x144>
 800a6b6:	6923      	ldr	r3, [r4, #16]
 800a6b8:	6861      	ldr	r1, [r4, #4]
 800a6ba:	4299      	cmp	r1, r3
 800a6bc:	bfde      	ittt	le
 800a6be:	2330      	movle	r3, #48	@ 0x30
 800a6c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6c8:	1b92      	subs	r2, r2, r6
 800a6ca:	6122      	str	r2, [r4, #16]
 800a6cc:	f8cd a000 	str.w	sl, [sp]
 800a6d0:	464b      	mov	r3, r9
 800a6d2:	aa03      	add	r2, sp, #12
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	4640      	mov	r0, r8
 800a6d8:	f7ff fee6 	bl	800a4a8 <_printf_common>
 800a6dc:	3001      	adds	r0, #1
 800a6de:	d14a      	bne.n	800a776 <_printf_i+0x1f2>
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	b004      	add	sp, #16
 800a6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	f043 0320 	orr.w	r3, r3, #32
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	4833      	ldr	r0, [pc, #204]	@ (800a7c0 <_printf_i+0x23c>)
 800a6f4:	2778      	movs	r7, #120	@ 0x78
 800a6f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	6831      	ldr	r1, [r6, #0]
 800a6fe:	061f      	lsls	r7, r3, #24
 800a700:	f851 5b04 	ldr.w	r5, [r1], #4
 800a704:	d402      	bmi.n	800a70c <_printf_i+0x188>
 800a706:	065f      	lsls	r7, r3, #25
 800a708:	bf48      	it	mi
 800a70a:	b2ad      	uxthmi	r5, r5
 800a70c:	6031      	str	r1, [r6, #0]
 800a70e:	07d9      	lsls	r1, r3, #31
 800a710:	bf44      	itt	mi
 800a712:	f043 0320 	orrmi.w	r3, r3, #32
 800a716:	6023      	strmi	r3, [r4, #0]
 800a718:	b11d      	cbz	r5, 800a722 <_printf_i+0x19e>
 800a71a:	2310      	movs	r3, #16
 800a71c:	e7ac      	b.n	800a678 <_printf_i+0xf4>
 800a71e:	4827      	ldr	r0, [pc, #156]	@ (800a7bc <_printf_i+0x238>)
 800a720:	e7e9      	b.n	800a6f6 <_printf_i+0x172>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	f023 0320 	bic.w	r3, r3, #32
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	e7f6      	b.n	800a71a <_printf_i+0x196>
 800a72c:	4616      	mov	r6, r2
 800a72e:	e7bd      	b.n	800a6ac <_printf_i+0x128>
 800a730:	6833      	ldr	r3, [r6, #0]
 800a732:	6825      	ldr	r5, [r4, #0]
 800a734:	6961      	ldr	r1, [r4, #20]
 800a736:	1d18      	adds	r0, r3, #4
 800a738:	6030      	str	r0, [r6, #0]
 800a73a:	062e      	lsls	r6, r5, #24
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	d501      	bpl.n	800a744 <_printf_i+0x1c0>
 800a740:	6019      	str	r1, [r3, #0]
 800a742:	e002      	b.n	800a74a <_printf_i+0x1c6>
 800a744:	0668      	lsls	r0, r5, #25
 800a746:	d5fb      	bpl.n	800a740 <_printf_i+0x1bc>
 800a748:	8019      	strh	r1, [r3, #0]
 800a74a:	2300      	movs	r3, #0
 800a74c:	6123      	str	r3, [r4, #16]
 800a74e:	4616      	mov	r6, r2
 800a750:	e7bc      	b.n	800a6cc <_printf_i+0x148>
 800a752:	6833      	ldr	r3, [r6, #0]
 800a754:	1d1a      	adds	r2, r3, #4
 800a756:	6032      	str	r2, [r6, #0]
 800a758:	681e      	ldr	r6, [r3, #0]
 800a75a:	6862      	ldr	r2, [r4, #4]
 800a75c:	2100      	movs	r1, #0
 800a75e:	4630      	mov	r0, r6
 800a760:	f7f5 fd36 	bl	80001d0 <memchr>
 800a764:	b108      	cbz	r0, 800a76a <_printf_i+0x1e6>
 800a766:	1b80      	subs	r0, r0, r6
 800a768:	6060      	str	r0, [r4, #4]
 800a76a:	6863      	ldr	r3, [r4, #4]
 800a76c:	6123      	str	r3, [r4, #16]
 800a76e:	2300      	movs	r3, #0
 800a770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a774:	e7aa      	b.n	800a6cc <_printf_i+0x148>
 800a776:	6923      	ldr	r3, [r4, #16]
 800a778:	4632      	mov	r2, r6
 800a77a:	4649      	mov	r1, r9
 800a77c:	4640      	mov	r0, r8
 800a77e:	47d0      	blx	sl
 800a780:	3001      	adds	r0, #1
 800a782:	d0ad      	beq.n	800a6e0 <_printf_i+0x15c>
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	079b      	lsls	r3, r3, #30
 800a788:	d413      	bmi.n	800a7b2 <_printf_i+0x22e>
 800a78a:	68e0      	ldr	r0, [r4, #12]
 800a78c:	9b03      	ldr	r3, [sp, #12]
 800a78e:	4298      	cmp	r0, r3
 800a790:	bfb8      	it	lt
 800a792:	4618      	movlt	r0, r3
 800a794:	e7a6      	b.n	800a6e4 <_printf_i+0x160>
 800a796:	2301      	movs	r3, #1
 800a798:	4632      	mov	r2, r6
 800a79a:	4649      	mov	r1, r9
 800a79c:	4640      	mov	r0, r8
 800a79e:	47d0      	blx	sl
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d09d      	beq.n	800a6e0 <_printf_i+0x15c>
 800a7a4:	3501      	adds	r5, #1
 800a7a6:	68e3      	ldr	r3, [r4, #12]
 800a7a8:	9903      	ldr	r1, [sp, #12]
 800a7aa:	1a5b      	subs	r3, r3, r1
 800a7ac:	42ab      	cmp	r3, r5
 800a7ae:	dcf2      	bgt.n	800a796 <_printf_i+0x212>
 800a7b0:	e7eb      	b.n	800a78a <_printf_i+0x206>
 800a7b2:	2500      	movs	r5, #0
 800a7b4:	f104 0619 	add.w	r6, r4, #25
 800a7b8:	e7f5      	b.n	800a7a6 <_printf_i+0x222>
 800a7ba:	bf00      	nop
 800a7bc:	0800abd5 	.word	0x0800abd5
 800a7c0:	0800abe6 	.word	0x0800abe6

0800a7c4 <memmove>:
 800a7c4:	4288      	cmp	r0, r1
 800a7c6:	b510      	push	{r4, lr}
 800a7c8:	eb01 0402 	add.w	r4, r1, r2
 800a7cc:	d902      	bls.n	800a7d4 <memmove+0x10>
 800a7ce:	4284      	cmp	r4, r0
 800a7d0:	4623      	mov	r3, r4
 800a7d2:	d807      	bhi.n	800a7e4 <memmove+0x20>
 800a7d4:	1e43      	subs	r3, r0, #1
 800a7d6:	42a1      	cmp	r1, r4
 800a7d8:	d008      	beq.n	800a7ec <memmove+0x28>
 800a7da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7e2:	e7f8      	b.n	800a7d6 <memmove+0x12>
 800a7e4:	4402      	add	r2, r0
 800a7e6:	4601      	mov	r1, r0
 800a7e8:	428a      	cmp	r2, r1
 800a7ea:	d100      	bne.n	800a7ee <memmove+0x2a>
 800a7ec:	bd10      	pop	{r4, pc}
 800a7ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7f6:	e7f7      	b.n	800a7e8 <memmove+0x24>

0800a7f8 <_sbrk_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d06      	ldr	r5, [pc, #24]	@ (800a814 <_sbrk_r+0x1c>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	602b      	str	r3, [r5, #0]
 800a804:	f7f7 faf8 	bl	8001df8 <_sbrk>
 800a808:	1c43      	adds	r3, r0, #1
 800a80a:	d102      	bne.n	800a812 <_sbrk_r+0x1a>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b103      	cbz	r3, 800a812 <_sbrk_r+0x1a>
 800a810:	6023      	str	r3, [r4, #0]
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	20001d3c 	.word	0x20001d3c

0800a818 <_realloc_r>:
 800a818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a81c:	4680      	mov	r8, r0
 800a81e:	4615      	mov	r5, r2
 800a820:	460c      	mov	r4, r1
 800a822:	b921      	cbnz	r1, 800a82e <_realloc_r+0x16>
 800a824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a828:	4611      	mov	r1, r2
 800a82a:	f7ff bc59 	b.w	800a0e0 <_malloc_r>
 800a82e:	b92a      	cbnz	r2, 800a83c <_realloc_r+0x24>
 800a830:	f7ff fbea 	bl	800a008 <_free_r>
 800a834:	2400      	movs	r4, #0
 800a836:	4620      	mov	r0, r4
 800a838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a83c:	f000 f81a 	bl	800a874 <_malloc_usable_size_r>
 800a840:	4285      	cmp	r5, r0
 800a842:	4606      	mov	r6, r0
 800a844:	d802      	bhi.n	800a84c <_realloc_r+0x34>
 800a846:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a84a:	d8f4      	bhi.n	800a836 <_realloc_r+0x1e>
 800a84c:	4629      	mov	r1, r5
 800a84e:	4640      	mov	r0, r8
 800a850:	f7ff fc46 	bl	800a0e0 <_malloc_r>
 800a854:	4607      	mov	r7, r0
 800a856:	2800      	cmp	r0, #0
 800a858:	d0ec      	beq.n	800a834 <_realloc_r+0x1c>
 800a85a:	42b5      	cmp	r5, r6
 800a85c:	462a      	mov	r2, r5
 800a85e:	4621      	mov	r1, r4
 800a860:	bf28      	it	cs
 800a862:	4632      	movcs	r2, r6
 800a864:	f7ff fbc2 	bl	8009fec <memcpy>
 800a868:	4621      	mov	r1, r4
 800a86a:	4640      	mov	r0, r8
 800a86c:	f7ff fbcc 	bl	800a008 <_free_r>
 800a870:	463c      	mov	r4, r7
 800a872:	e7e0      	b.n	800a836 <_realloc_r+0x1e>

0800a874 <_malloc_usable_size_r>:
 800a874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a878:	1f18      	subs	r0, r3, #4
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	bfbc      	itt	lt
 800a87e:	580b      	ldrlt	r3, [r1, r0]
 800a880:	18c0      	addlt	r0, r0, r3
 800a882:	4770      	bx	lr

0800a884 <round>:
 800a884:	ec51 0b10 	vmov	r0, r1, d0
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a88e:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800a892:	2a13      	cmp	r2, #19
 800a894:	460b      	mov	r3, r1
 800a896:	4605      	mov	r5, r0
 800a898:	dc1b      	bgt.n	800a8d2 <round+0x4e>
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	da0b      	bge.n	800a8b6 <round+0x32>
 800a89e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	bf04      	itt	eq
 800a8a6:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800a8aa:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	e015      	b.n	800a8e2 <round+0x5e>
 800a8b6:	4c15      	ldr	r4, [pc, #84]	@ (800a90c <round+0x88>)
 800a8b8:	4114      	asrs	r4, r2
 800a8ba:	ea04 0601 	and.w	r6, r4, r1
 800a8be:	4306      	orrs	r6, r0
 800a8c0:	d00f      	beq.n	800a8e2 <round+0x5e>
 800a8c2:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800a8c6:	fa41 f202 	asr.w	r2, r1, r2
 800a8ca:	4413      	add	r3, r2
 800a8cc:	ea23 0304 	bic.w	r3, r3, r4
 800a8d0:	e7ed      	b.n	800a8ae <round+0x2a>
 800a8d2:	2a33      	cmp	r2, #51	@ 0x33
 800a8d4:	dd08      	ble.n	800a8e8 <round+0x64>
 800a8d6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800a8da:	d102      	bne.n	800a8e2 <round+0x5e>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	f7f5 fccd 	bl	800027c <__adddf3>
 800a8e2:	ec41 0b10 	vmov	d0, r0, r1
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800a8ec:	f04f 34ff 	mov.w	r4, #4294967295
 800a8f0:	40f4      	lsrs	r4, r6
 800a8f2:	4204      	tst	r4, r0
 800a8f4:	d0f5      	beq.n	800a8e2 <round+0x5e>
 800a8f6:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	408a      	lsls	r2, r1
 800a8fe:	1952      	adds	r2, r2, r5
 800a900:	bf28      	it	cs
 800a902:	3301      	addcs	r3, #1
 800a904:	ea22 0204 	bic.w	r2, r2, r4
 800a908:	e7d2      	b.n	800a8b0 <round+0x2c>
 800a90a:	bf00      	nop
 800a90c:	000fffff 	.word	0x000fffff

0800a910 <_init>:
 800a910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a912:	bf00      	nop
 800a914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a916:	bc08      	pop	{r3}
 800a918:	469e      	mov	lr, r3
 800a91a:	4770      	bx	lr

0800a91c <_fini>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	bf00      	nop
 800a920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a922:	bc08      	pop	{r3}
 800a924:	469e      	mov	lr, r3
 800a926:	4770      	bx	lr
