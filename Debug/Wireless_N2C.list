
Wireless_N2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000623c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080063cc  080063cc  000073cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006524  08006524  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006524  08006524  00007524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800652c  0800652c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800652c  0800652c  0000752c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006530  08006530  00007530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006534  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cd0  20000060  08006594  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00001e00  20001d30  08006594  00008d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187f2  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039dd  00000000  00000000  00020882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00024260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001119  00000000  00000000  000258a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007117  00000000  00000000  000269c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d82  00000000  00000000  0002dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105207  00000000  00000000  0004785a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014ca61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d8  00000000  00000000  0014caa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00152b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063b4 	.word	0x080063b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080063b4 	.word	0x080063b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <split_data>:
char az_str2[13];
char bc_str2[13];
char bz_str2[13];

// Decode Raw Bytes Measurement into Global Variables
void split_data(uint8_t measurments1[], uint8_t measurments2[]) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	// x and y axis from first 2 bytes
	stick_x1 = measurments1[0];
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	781a      	ldrb	r2, [r3, #0]
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <split_data+0x238>)
 8000280:	701a      	strb	r2, [r3, #0]
	stick_y1 = measurments1[1];
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	785a      	ldrb	r2, [r3, #1]
 8000286:	4b89      	ldr	r3, [pc, #548]	@ (80004ac <split_data+0x23c>)
 8000288:	701a      	strb	r2, [r3, #0]

	// x and y axis from first 2 bytes
	stick_x2 = measurments2[0];
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	781a      	ldrb	r2, [r3, #0]
 800028e:	4b88      	ldr	r3, [pc, #544]	@ (80004b0 <split_data+0x240>)
 8000290:	701a      	strb	r2, [r3, #0]
	stick_y2 = measurments2[1];
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	785a      	ldrb	r2, [r3, #1]
 8000296:	4b87      	ldr	r3, [pc, #540]	@ (80004b4 <split_data+0x244>)
 8000298:	701a      	strb	r2, [r3, #0]

	// Might want to Reset accelerometer values
	acc_x1 = 0;
 800029a:	4b87      	ldr	r3, [pc, #540]	@ (80004b8 <split_data+0x248>)
 800029c:	2200      	movs	r2, #0
 800029e:	801a      	strh	r2, [r3, #0]
	acc_y1 = 0;
 80002a0:	4b86      	ldr	r3, [pc, #536]	@ (80004bc <split_data+0x24c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	801a      	strh	r2, [r3, #0]
	acc_z1 = 0;
 80002a6:	4b86      	ldr	r3, [pc, #536]	@ (80004c0 <split_data+0x250>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	801a      	strh	r2, [r3, #0]

	// Might want to Reset accelerometer values
	acc_x2 = 0;
 80002ac:	4b85      	ldr	r3, [pc, #532]	@ (80004c4 <split_data+0x254>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	801a      	strh	r2, [r3, #0]
	acc_y2 = 0;
 80002b2:	4b85      	ldr	r3, [pc, #532]	@ (80004c8 <split_data+0x258>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	801a      	strh	r2, [r3, #0]
	acc_z2 = 0;
 80002b8:	4b84      	ldr	r3, [pc, #528]	@ (80004cc <split_data+0x25c>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	801a      	strh	r2, [r3, #0]

	// higher 8 bits of accelerometer from next 3 bytes
	acc_x1 |= (measurments1[2] << 2);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	3302      	adds	r3, #2
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	b21a      	sxth	r2, r3
 80002c8:	4b7b      	ldr	r3, [pc, #492]	@ (80004b8 <split_data+0x248>)
 80002ca:	881b      	ldrh	r3, [r3, #0]
 80002cc:	b29b      	uxth	r3, r3
 80002ce:	b21b      	sxth	r3, r3
 80002d0:	4313      	orrs	r3, r2
 80002d2:	b21b      	sxth	r3, r3
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b78      	ldr	r3, [pc, #480]	@ (80004b8 <split_data+0x248>)
 80002d8:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (measurments1[3] << 2);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3303      	adds	r3, #3
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	4b75      	ldr	r3, [pc, #468]	@ (80004bc <split_data+0x24c>)
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	b21b      	sxth	r3, r3
 80002ec:	4313      	orrs	r3, r2
 80002ee:	b21b      	sxth	r3, r3
 80002f0:	b29a      	uxth	r2, r3
 80002f2:	4b72      	ldr	r3, [pc, #456]	@ (80004bc <split_data+0x24c>)
 80002f4:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (measurments1[4] << 2);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3304      	adds	r3, #4
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	b21a      	sxth	r2, r3
 8000300:	4b6f      	ldr	r3, [pc, #444]	@ (80004c0 <split_data+0x250>)
 8000302:	881b      	ldrh	r3, [r3, #0]
 8000304:	b29b      	uxth	r3, r3
 8000306:	b21b      	sxth	r3, r3
 8000308:	4313      	orrs	r3, r2
 800030a:	b21b      	sxth	r3, r3
 800030c:	b29a      	uxth	r2, r3
 800030e:	4b6c      	ldr	r3, [pc, #432]	@ (80004c0 <split_data+0x250>)
 8000310:	801a      	strh	r2, [r3, #0]

	// higher 8 bits of accelerometer from next 3 bytes
	acc_x2 |= (measurments2[2] << 2);
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	3302      	adds	r3, #2
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	b21a      	sxth	r2, r3
 800031c:	4b69      	ldr	r3, [pc, #420]	@ (80004c4 <split_data+0x254>)
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	b29b      	uxth	r3, r3
 8000322:	b21b      	sxth	r3, r3
 8000324:	4313      	orrs	r3, r2
 8000326:	b21b      	sxth	r3, r3
 8000328:	b29a      	uxth	r2, r3
 800032a:	4b66      	ldr	r3, [pc, #408]	@ (80004c4 <split_data+0x254>)
 800032c:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (measurments2[3] << 2);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	3303      	adds	r3, #3
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	b21a      	sxth	r2, r3
 8000338:	4b63      	ldr	r3, [pc, #396]	@ (80004c8 <split_data+0x258>)
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	b29b      	uxth	r3, r3
 800033e:	b21b      	sxth	r3, r3
 8000340:	4313      	orrs	r3, r2
 8000342:	b21b      	sxth	r3, r3
 8000344:	b29a      	uxth	r2, r3
 8000346:	4b60      	ldr	r3, [pc, #384]	@ (80004c8 <split_data+0x258>)
 8000348:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (measurments2[4] << 2);
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	3304      	adds	r3, #4
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	b21a      	sxth	r2, r3
 8000354:	4b5d      	ldr	r3, [pc, #372]	@ (80004cc <split_data+0x25c>)
 8000356:	881b      	ldrh	r3, [r3, #0]
 8000358:	b29b      	uxth	r3, r3
 800035a:	b21b      	sxth	r3, r3
 800035c:	4313      	orrs	r3, r2
 800035e:	b21b      	sxth	r3, r3
 8000360:	b29a      	uxth	r2, r3
 8000362:	4b5a      	ldr	r3, [pc, #360]	@ (80004cc <split_data+0x25c>)
 8000364:	801a      	strh	r2, [r3, #0]

	// lower 2 bits from last byte
	acc_x1 |= (((1 << 2) - 1) & (measurments1[5] >> 3));
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3305      	adds	r3, #5
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	08db      	lsrs	r3, r3, #3
 800036e:	b2db      	uxtb	r3, r3
 8000370:	b21b      	sxth	r3, r3
 8000372:	f003 0303 	and.w	r3, r3, #3
 8000376:	b21a      	sxth	r2, r3
 8000378:	4b4f      	ldr	r3, [pc, #316]	@ (80004b8 <split_data+0x248>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	b21b      	sxth	r3, r3
 8000380:	4313      	orrs	r3, r2
 8000382:	b21b      	sxth	r3, r3
 8000384:	b29a      	uxth	r2, r3
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <split_data+0x248>)
 8000388:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (((1 << 2) - 1) & (measurments1[5] >> 5));
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3305      	adds	r3, #5
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	095b      	lsrs	r3, r3, #5
 8000392:	b2db      	uxtb	r3, r3
 8000394:	b21b      	sxth	r3, r3
 8000396:	f003 0303 	and.w	r3, r3, #3
 800039a:	b21a      	sxth	r2, r3
 800039c:	4b47      	ldr	r3, [pc, #284]	@ (80004bc <split_data+0x24c>)
 800039e:	881b      	ldrh	r3, [r3, #0]
 80003a0:	b29b      	uxth	r3, r3
 80003a2:	b21b      	sxth	r3, r3
 80003a4:	4313      	orrs	r3, r2
 80003a6:	b21b      	sxth	r3, r3
 80003a8:	b29a      	uxth	r2, r3
 80003aa:	4b44      	ldr	r3, [pc, #272]	@ (80004bc <split_data+0x24c>)
 80003ac:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (((1 << 2) - 1) & (measurments1[5] >> 7));
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3305      	adds	r3, #5
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	09db      	lsrs	r3, r3, #7
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b41      	ldr	r3, [pc, #260]	@ (80004c0 <split_data+0x250>)
 80003bc:	881b      	ldrh	r3, [r3, #0]
 80003be:	b29b      	uxth	r3, r3
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b29a      	uxth	r2, r3
 80003c4:	4b3e      	ldr	r3, [pc, #248]	@ (80004c0 <split_data+0x250>)
 80003c6:	801a      	strh	r2, [r3, #0]

	// lower 2 bits from last byte
	acc_x2 |= (((1 << 2) - 1) & (measurments2[5] >> 3));
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	3305      	adds	r3, #5
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	08db      	lsrs	r3, r3, #3
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	b21b      	sxth	r3, r3
 80003d4:	f003 0303 	and.w	r3, r3, #3
 80003d8:	b21a      	sxth	r2, r3
 80003da:	4b3a      	ldr	r3, [pc, #232]	@ (80004c4 <split_data+0x254>)
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	b29b      	uxth	r3, r3
 80003e0:	b21b      	sxth	r3, r3
 80003e2:	4313      	orrs	r3, r2
 80003e4:	b21b      	sxth	r3, r3
 80003e6:	b29a      	uxth	r2, r3
 80003e8:	4b36      	ldr	r3, [pc, #216]	@ (80004c4 <split_data+0x254>)
 80003ea:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (((1 << 2) - 1) & (measurments2[5] >> 5));
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	3305      	adds	r3, #5
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	095b      	lsrs	r3, r3, #5
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	b21b      	sxth	r3, r3
 80003f8:	f003 0303 	and.w	r3, r3, #3
 80003fc:	b21a      	sxth	r2, r3
 80003fe:	4b32      	ldr	r3, [pc, #200]	@ (80004c8 <split_data+0x258>)
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	b29b      	uxth	r3, r3
 8000404:	b21b      	sxth	r3, r3
 8000406:	4313      	orrs	r3, r2
 8000408:	b21b      	sxth	r3, r3
 800040a:	b29a      	uxth	r2, r3
 800040c:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <split_data+0x258>)
 800040e:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (((1 << 2) - 1) & (measurments2[5] >> 7));
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	3305      	adds	r3, #5
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	09db      	lsrs	r3, r3, #7
 8000418:	b2db      	uxtb	r3, r3
 800041a:	461a      	mov	r2, r3
 800041c:	4b2b      	ldr	r3, [pc, #172]	@ (80004cc <split_data+0x25c>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	b29b      	uxth	r3, r3
 8000422:	4313      	orrs	r3, r2
 8000424:	b29a      	uxth	r2, r3
 8000426:	4b29      	ldr	r3, [pc, #164]	@ (80004cc <split_data+0x25c>)
 8000428:	801a      	strh	r2, [r3, #0]

	// Buttons are last 2 bits of last byte
	button_c1 = (1 & ~(measurments1[5] >> 1));
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	3305      	adds	r3, #5
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	085b      	lsrs	r3, r3, #1
 8000432:	b2db      	uxtb	r3, r3
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	bf0c      	ite	eq
 800043c:	2301      	moveq	r3, #1
 800043e:	2300      	movne	r3, #0
 8000440:	b2db      	uxtb	r3, r3
 8000442:	461a      	mov	r2, r3
 8000444:	4b22      	ldr	r3, [pc, #136]	@ (80004d0 <split_data+0x260>)
 8000446:	701a      	strb	r2, [r3, #0]
	button_z1 = (1 & ~(measurments1[5] >> 0));
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3305      	adds	r3, #5
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	2b00      	cmp	r3, #0
 8000454:	bf0c      	ite	eq
 8000456:	2301      	moveq	r3, #1
 8000458:	2300      	movne	r3, #0
 800045a:	b2db      	uxtb	r3, r3
 800045c:	461a      	mov	r2, r3
 800045e:	4b1d      	ldr	r3, [pc, #116]	@ (80004d4 <split_data+0x264>)
 8000460:	701a      	strb	r2, [r3, #0]

	// Buttons are last 2 bits of last byte
	button_c2 = (1 & ~(measurments2[5] >> 1));
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	3305      	adds	r3, #5
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	085b      	lsrs	r3, r3, #1
 800046a:	b2db      	uxtb	r3, r3
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	2b00      	cmp	r3, #0
 8000472:	bf0c      	ite	eq
 8000474:	2301      	moveq	r3, #1
 8000476:	2300      	movne	r3, #0
 8000478:	b2db      	uxtb	r3, r3
 800047a:	461a      	mov	r2, r3
 800047c:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <split_data+0x268>)
 800047e:	701a      	strb	r2, [r3, #0]
	button_z2 = (1 & ~(measurments2[5] >> 0));
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	3305      	adds	r3, #5
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	2b00      	cmp	r3, #0
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	461a      	mov	r2, r3
 8000496:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <split_data+0x26c>)
 8000498:	701a      	strb	r2, [r3, #0]
}
 800049a:	bf00      	nop
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	2000007c 	.word	0x2000007c
 80004ac:	2000007d 	.word	0x2000007d
 80004b0:	20000086 	.word	0x20000086
 80004b4:	20000087 	.word	0x20000087
 80004b8:	2000007e 	.word	0x2000007e
 80004bc:	20000080 	.word	0x20000080
 80004c0:	20000082 	.word	0x20000082
 80004c4:	20000088 	.word	0x20000088
 80004c8:	2000008a 	.word	0x2000008a
 80004cc:	2000008c 	.word	0x2000008c
 80004d0:	20000084 	.word	0x20000084
 80004d4:	20000085 	.word	0x20000085
 80004d8:	2000008e 	.word	0x2000008e
 80004dc:	2000008f 	.word	0x2000008f

080004e0 <print_data>:

// Uploads data to serial port
void print_data() {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	// Convert Data to Strings
	sprintf(sx_str1, "StickX1:%i", stick_x1);
 80004e4:	4b4d      	ldr	r3, [pc, #308]	@ (800061c <print_data+0x13c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	461a      	mov	r2, r3
 80004ec:	494c      	ldr	r1, [pc, #304]	@ (8000620 <print_data+0x140>)
 80004ee:	484d      	ldr	r0, [pc, #308]	@ (8000624 <print_data+0x144>)
 80004f0:	f005 fa6a 	bl	80059c8 <siprintf>
	sprintf(sy_str1, "StickY1:%i", stick_y1);
 80004f4:	4b4c      	ldr	r3, [pc, #304]	@ (8000628 <print_data+0x148>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	494b      	ldr	r1, [pc, #300]	@ (800062c <print_data+0x14c>)
 80004fe:	484c      	ldr	r0, [pc, #304]	@ (8000630 <print_data+0x150>)
 8000500:	f005 fa62 	bl	80059c8 <siprintf>

	sprintf(ax_str1, "AccX1:%i", acc_x1);
 8000504:	4b4b      	ldr	r3, [pc, #300]	@ (8000634 <print_data+0x154>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	b29b      	uxth	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	494a      	ldr	r1, [pc, #296]	@ (8000638 <print_data+0x158>)
 800050e:	484b      	ldr	r0, [pc, #300]	@ (800063c <print_data+0x15c>)
 8000510:	f005 fa5a 	bl	80059c8 <siprintf>
	sprintf(ay_str1, "AccY1:%i", acc_y1);
 8000514:	4b4a      	ldr	r3, [pc, #296]	@ (8000640 <print_data+0x160>)
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	b29b      	uxth	r3, r3
 800051a:	461a      	mov	r2, r3
 800051c:	4949      	ldr	r1, [pc, #292]	@ (8000644 <print_data+0x164>)
 800051e:	484a      	ldr	r0, [pc, #296]	@ (8000648 <print_data+0x168>)
 8000520:	f005 fa52 	bl	80059c8 <siprintf>
	sprintf(az_str1, "AccZ1:%i", acc_z1);
 8000524:	4b49      	ldr	r3, [pc, #292]	@ (800064c <print_data+0x16c>)
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	b29b      	uxth	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	4948      	ldr	r1, [pc, #288]	@ (8000650 <print_data+0x170>)
 800052e:	4849      	ldr	r0, [pc, #292]	@ (8000654 <print_data+0x174>)
 8000530:	f005 fa4a 	bl	80059c8 <siprintf>

	sprintf(bc_str1, "ButtonC1:%i", button_c1);
 8000534:	4b48      	ldr	r3, [pc, #288]	@ (8000658 <print_data+0x178>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	461a      	mov	r2, r3
 800053c:	4947      	ldr	r1, [pc, #284]	@ (800065c <print_data+0x17c>)
 800053e:	4848      	ldr	r0, [pc, #288]	@ (8000660 <print_data+0x180>)
 8000540:	f005 fa42 	bl	80059c8 <siprintf>
	sprintf(bz_str1, "ButtonZ1:%i", button_z1);
 8000544:	4b47      	ldr	r3, [pc, #284]	@ (8000664 <print_data+0x184>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	461a      	mov	r2, r3
 800054c:	4946      	ldr	r1, [pc, #280]	@ (8000668 <print_data+0x188>)
 800054e:	4847      	ldr	r0, [pc, #284]	@ (800066c <print_data+0x18c>)
 8000550:	f005 fa3a 	bl	80059c8 <siprintf>

	// Convert Data to Strings
	sprintf(sx_str2, "StickX2:%i", stick_x2);
 8000554:	4b46      	ldr	r3, [pc, #280]	@ (8000670 <print_data+0x190>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	4945      	ldr	r1, [pc, #276]	@ (8000674 <print_data+0x194>)
 800055e:	4846      	ldr	r0, [pc, #280]	@ (8000678 <print_data+0x198>)
 8000560:	f005 fa32 	bl	80059c8 <siprintf>
	sprintf(sy_str2, "StickY2:%i", stick_y2);
 8000564:	4b45      	ldr	r3, [pc, #276]	@ (800067c <print_data+0x19c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	4944      	ldr	r1, [pc, #272]	@ (8000680 <print_data+0x1a0>)
 800056e:	4845      	ldr	r0, [pc, #276]	@ (8000684 <print_data+0x1a4>)
 8000570:	f005 fa2a 	bl	80059c8 <siprintf>

	sprintf(ax_str2, "AccX2:%i", acc_x2);
 8000574:	4b44      	ldr	r3, [pc, #272]	@ (8000688 <print_data+0x1a8>)
 8000576:	881b      	ldrh	r3, [r3, #0]
 8000578:	b29b      	uxth	r3, r3
 800057a:	461a      	mov	r2, r3
 800057c:	4943      	ldr	r1, [pc, #268]	@ (800068c <print_data+0x1ac>)
 800057e:	4844      	ldr	r0, [pc, #272]	@ (8000690 <print_data+0x1b0>)
 8000580:	f005 fa22 	bl	80059c8 <siprintf>
	sprintf(ay_str2, "AccY2:%i", acc_y2);
 8000584:	4b43      	ldr	r3, [pc, #268]	@ (8000694 <print_data+0x1b4>)
 8000586:	881b      	ldrh	r3, [r3, #0]
 8000588:	b29b      	uxth	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	4942      	ldr	r1, [pc, #264]	@ (8000698 <print_data+0x1b8>)
 800058e:	4843      	ldr	r0, [pc, #268]	@ (800069c <print_data+0x1bc>)
 8000590:	f005 fa1a 	bl	80059c8 <siprintf>
	sprintf(az_str2, "AccZ2:%i", acc_z2);
 8000594:	4b42      	ldr	r3, [pc, #264]	@ (80006a0 <print_data+0x1c0>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	b29b      	uxth	r3, r3
 800059a:	461a      	mov	r2, r3
 800059c:	4941      	ldr	r1, [pc, #260]	@ (80006a4 <print_data+0x1c4>)
 800059e:	4842      	ldr	r0, [pc, #264]	@ (80006a8 <print_data+0x1c8>)
 80005a0:	f005 fa12 	bl	80059c8 <siprintf>

	sprintf(bc_str2, "ButtonC2:%i", button_c2);
 80005a4:	4b41      	ldr	r3, [pc, #260]	@ (80006ac <print_data+0x1cc>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	461a      	mov	r2, r3
 80005ac:	4940      	ldr	r1, [pc, #256]	@ (80006b0 <print_data+0x1d0>)
 80005ae:	4841      	ldr	r0, [pc, #260]	@ (80006b4 <print_data+0x1d4>)
 80005b0:	f005 fa0a 	bl	80059c8 <siprintf>
	sprintf(bz_str2, "ButtonZ2:%i", button_z2);
 80005b4:	4b40      	ldr	r3, [pc, #256]	@ (80006b8 <print_data+0x1d8>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	493f      	ldr	r1, [pc, #252]	@ (80006bc <print_data+0x1dc>)
 80005be:	4840      	ldr	r0, [pc, #256]	@ (80006c0 <print_data+0x1e0>)
 80005c0:	f005 fa02 	bl	80059c8 <siprintf>

	// Print strings to terminal
	UART_PrintLn(sx_str1);
 80005c4:	4817      	ldr	r0, [pc, #92]	@ (8000624 <print_data+0x144>)
 80005c6:	f000 ff31 	bl	800142c <UART_PrintLn>
	UART_PrintLn(sy_str1);
 80005ca:	4819      	ldr	r0, [pc, #100]	@ (8000630 <print_data+0x150>)
 80005cc:	f000 ff2e 	bl	800142c <UART_PrintLn>
	UART_PrintLn(ax_str1);
 80005d0:	481a      	ldr	r0, [pc, #104]	@ (800063c <print_data+0x15c>)
 80005d2:	f000 ff2b 	bl	800142c <UART_PrintLn>
	UART_PrintLn(ay_str1);
 80005d6:	481c      	ldr	r0, [pc, #112]	@ (8000648 <print_data+0x168>)
 80005d8:	f000 ff28 	bl	800142c <UART_PrintLn>
	UART_PrintLn(az_str1);
 80005dc:	481d      	ldr	r0, [pc, #116]	@ (8000654 <print_data+0x174>)
 80005de:	f000 ff25 	bl	800142c <UART_PrintLn>
	UART_PrintLn(bc_str1);
 80005e2:	481f      	ldr	r0, [pc, #124]	@ (8000660 <print_data+0x180>)
 80005e4:	f000 ff22 	bl	800142c <UART_PrintLn>
	UART_PrintLn(bz_str1);
 80005e8:	4820      	ldr	r0, [pc, #128]	@ (800066c <print_data+0x18c>)
 80005ea:	f000 ff1f 	bl	800142c <UART_PrintLn>

	// Print strings to terminal
	UART_PrintLn(sx_str2);
 80005ee:	4822      	ldr	r0, [pc, #136]	@ (8000678 <print_data+0x198>)
 80005f0:	f000 ff1c 	bl	800142c <UART_PrintLn>
	UART_PrintLn(sy_str2);
 80005f4:	4823      	ldr	r0, [pc, #140]	@ (8000684 <print_data+0x1a4>)
 80005f6:	f000 ff19 	bl	800142c <UART_PrintLn>
	UART_PrintLn(ax_str2);
 80005fa:	4825      	ldr	r0, [pc, #148]	@ (8000690 <print_data+0x1b0>)
 80005fc:	f000 ff16 	bl	800142c <UART_PrintLn>
	UART_PrintLn(ay_str2);
 8000600:	4826      	ldr	r0, [pc, #152]	@ (800069c <print_data+0x1bc>)
 8000602:	f000 ff13 	bl	800142c <UART_PrintLn>
	UART_PrintLn(az_str2);
 8000606:	4828      	ldr	r0, [pc, #160]	@ (80006a8 <print_data+0x1c8>)
 8000608:	f000 ff10 	bl	800142c <UART_PrintLn>
	UART_PrintLn(bc_str2);
 800060c:	4829      	ldr	r0, [pc, #164]	@ (80006b4 <print_data+0x1d4>)
 800060e:	f000 ff0d 	bl	800142c <UART_PrintLn>
	UART_PrintLn(bz_str2);
 8000612:	482b      	ldr	r0, [pc, #172]	@ (80006c0 <print_data+0x1e0>)
 8000614:	f000 ff0a 	bl	800142c <UART_PrintLn>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000007c 	.word	0x2000007c
 8000620:	080063cc 	.word	0x080063cc
 8000624:	20000090 	.word	0x20000090
 8000628:	2000007d 	.word	0x2000007d
 800062c:	080063d8 	.word	0x080063d8
 8000630:	200000a0 	.word	0x200000a0
 8000634:	2000007e 	.word	0x2000007e
 8000638:	080063e4 	.word	0x080063e4
 800063c:	200000b0 	.word	0x200000b0
 8000640:	20000080 	.word	0x20000080
 8000644:	080063f0 	.word	0x080063f0
 8000648:	200000c0 	.word	0x200000c0
 800064c:	20000082 	.word	0x20000082
 8000650:	080063fc 	.word	0x080063fc
 8000654:	200000d0 	.word	0x200000d0
 8000658:	20000084 	.word	0x20000084
 800065c:	08006408 	.word	0x08006408
 8000660:	200000e0 	.word	0x200000e0
 8000664:	20000085 	.word	0x20000085
 8000668:	08006414 	.word	0x08006414
 800066c:	200000f0 	.word	0x200000f0
 8000670:	20000086 	.word	0x20000086
 8000674:	08006420 	.word	0x08006420
 8000678:	20000100 	.word	0x20000100
 800067c:	20000087 	.word	0x20000087
 8000680:	0800642c 	.word	0x0800642c
 8000684:	20000110 	.word	0x20000110
 8000688:	20000088 	.word	0x20000088
 800068c:	08006438 	.word	0x08006438
 8000690:	20000120 	.word	0x20000120
 8000694:	2000008a 	.word	0x2000008a
 8000698:	08006444 	.word	0x08006444
 800069c:	20000130 	.word	0x20000130
 80006a0:	2000008c 	.word	0x2000008c
 80006a4:	08006450 	.word	0x08006450
 80006a8:	20000140 	.word	0x20000140
 80006ac:	2000008e 	.word	0x2000008e
 80006b0:	0800645c 	.word	0x0800645c
 80006b4:	20000150 	.word	0x20000150
 80006b8:	2000008f 	.word	0x2000008f
 80006bc:	08006468 	.word	0x08006468
 80006c0:	20000160 	.word	0x20000160

080006c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b33      	ldr	r3, [pc, #204]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4a32      	ldr	r2, [pc, #200]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e6:	4b30      	ldr	r3, [pc, #192]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a2c      	ldr	r2, [pc, #176]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a26      	ldr	r2, [pc, #152]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <MX_GPIO_Init+0xe4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SDN_GPIO_Port, SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072c:	f001 f994 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2140      	movs	r1, #64	@ 0x40
 8000734:	481d      	ldr	r0, [pc, #116]	@ (80007ac <MX_GPIO_Init+0xe8>)
 8000736:	f001 f98f 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 800073a:	2380      	movs	r3, #128	@ 0x80
 800073c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4818      	ldr	r0, [pc, #96]	@ (80007b0 <MX_GPIO_Init+0xec>)
 8000750:	f000 ffd8 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SDN_Pin;
 8000754:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000758:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SDN_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000770:	f000 ffc8 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000774:	2340      	movs	r3, #64	@ 0x40
 8000776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	4808      	ldr	r0, [pc, #32]	@ (80007ac <MX_GPIO_Init+0xe8>)
 800078c:	f000 ffba 	bl	8001704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2105      	movs	r1, #5
 8000794:	2017      	movs	r0, #23
 8000796:	f000 ff8b 	bl	80016b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800079a:	2017      	movs	r0, #23
 800079c:	f000 ffa4 	bl	80016e8 <HAL_NVIC_EnableIRQ>

}
 80007a0:	bf00      	nop
 80007a2:	3720      	adds	r7, #32
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000
 80007ac:	48000400 	.word	0x48000400
 80007b0:	48000800 	.word	0x48000800

080007b4 <I2C_GPIO_Init1>:
#include "FreeRTOS.h"                   // ARM.FreeRTOS::RTOS:Core
#include "task.h"                       // ARM.FreeRTOS::RTOS:Core
#include "event_groups.h"               // ARM.FreeRTOS::RTOS:Event Groups
#include "semphr.h"                     // ARM.FreeRTOS::RTOS:Core

void I2C_GPIO_Init1(void) {
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 80007b8:	4b20      	ldr	r3, [pc, #128]	@ (800083c <I2C_GPIO_Init1+0x88>)
 80007ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007bc:	4a1f      	ldr	r2, [pc, #124]	@ (800083c <I2C_GPIO_Init1+0x88>)
 80007be:	f043 0302 	orr.w	r3, r3, #2
 80007c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C1EN);
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <I2C_GPIO_Init1+0x88>)
 80007c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c8:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <I2C_GPIO_Init1+0x88>)
 80007ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ce:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 8 and 9 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE8 | GPIO_MODER_MODE9);
 80007d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 80007d6:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80007da:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE8_1 | GPIO_MODER_MODE9_1);
 80007dc:	4b18      	ldr	r3, [pc, #96]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 80007e2:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 80007e6:	6013      	str	r3, [r2, #0]

	// Set Pins 8 and 9 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 80007e8:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	4a14      	ldr	r2, [pc, #80]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 80007ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80007f2:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT8 | GPIO_OTYPER_OT9);
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 80007fa:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80007fe:	6053      	str	r3, [r2, #4]

	// Set pints 8 and 9 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED9);
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	4a0e      	ldr	r2, [pc, #56]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 8000806:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800080a:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED8_1 | GPIO_OSPEEDR_OSPEED9_1);
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a0b      	ldr	r2, [pc, #44]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 8000812:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000816:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL8 | GPIO_AFRH_AFSEL9);
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 800081a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800081c:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 800081e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000822:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= ((4 << GPIO_AFRH_AFSEL8_Pos) | 4 << GPIO_AFRH_AFSEL9_Pos);
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 8000826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000828:	4a05      	ldr	r2, [pc, #20]	@ (8000840 <I2C_GPIO_Init1+0x8c>)
 800082a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800082e:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000
 8000840:	48000400 	.word	0x48000400

08000844 <I2C_GPIO_Init2>:

void I2C_GPIO_Init2(void) {
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
	// Configure GPIOC for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN);
 8000848:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <I2C_GPIO_Init2+0x88>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084c:	4a1f      	ldr	r2, [pc, #124]	@ (80008cc <I2C_GPIO_Init2+0x88>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C3EN);
 8000854:	4b1d      	ldr	r3, [pc, #116]	@ (80008cc <I2C_GPIO_Init2+0x88>)
 8000856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000858:	4a1c      	ldr	r2, [pc, #112]	@ (80008cc <I2C_GPIO_Init2+0x88>)
 800085a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800085e:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 0 and 1 to AF mode
	GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1);
 8000860:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1a      	ldr	r2, [pc, #104]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 8000866:	f023 030f 	bic.w	r3, r3, #15
 800086a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_1 | GPIO_MODER_MODE1_1);
 800086c:	4b18      	ldr	r3, [pc, #96]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a17      	ldr	r2, [pc, #92]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 8000872:	f043 030a 	orr.w	r3, r3, #10
 8000876:	6013      	str	r3, [r2, #0]

	// Set Pins 0 and 1 to open drain
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 8000878:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 800087e:	f023 0303 	bic.w	r3, r3, #3
 8000882:	6053      	str	r3, [r2, #4]
	GPIOC->OTYPER |= (GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1);
 8000884:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	4a11      	ldr	r2, [pc, #68]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 800088a:	f043 0303 	orr.w	r3, r3, #3
 800088e:	6053      	str	r3, [r2, #4]

	// Set pints 0 and 1 to high speed
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1);
 8000890:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 8000896:	f023 030f 	bic.w	r3, r3, #15
 800089a:	6093      	str	r3, [r2, #8]
	GPIOC->OTYPER |= (GPIO_OSPEEDR_OSPEED0_1 | GPIO_OSPEEDR_OSPEED1_1);
 800089c:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 80008a2:	f043 030a 	orr.w	r3, r3, #10
 80008a6:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOC->AFR[0] &= ~(GPIO_AFRL_AFSEL0 | GPIO_AFRL_AFSEL1);
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 80008aa:	6a1b      	ldr	r3, [r3, #32]
 80008ac:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 80008ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80008b2:	6213      	str	r3, [r2, #32]
	GPIOC->AFR[0] |=
 80008b4:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 80008b6:	6a1b      	ldr	r3, [r3, #32]
 80008b8:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <I2C_GPIO_Init2+0x8c>)
 80008ba:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80008be:	6213      	str	r3, [r2, #32]
			((4 << GPIO_AFRL_AFSEL0_Pos) | 4 << GPIO_AFRL_AFSEL1_Pos);
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000800 	.word	0x48000800

080008d4 <I2C_init1>:

void I2C_init1() {
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
	I2C1->CR1 &= ~I2C_CR1_PE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <I2C_init1+0x44>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <I2C_init1+0x44>)
 80008de:	f023 0301 	bic.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <I2C_init1+0x44>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0b      	ldr	r2, [pc, #44]	@ (8000918 <I2C_init1+0x44>)
 80008ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008ee:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;
 80008f0:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <I2C_init1+0x44>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a08      	ldr	r2, [pc, #32]	@ (8000918 <I2C_init1+0x44>)
 80008f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80008fa:	6013      	str	r3, [r2, #0]

	I2C1->TIMINGR = 0x10909CEC;
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <I2C_init1+0x44>)
 80008fe:	4a07      	ldr	r2, [pc, #28]	@ (800091c <I2C_init1+0x48>)
 8000900:	611a      	str	r2, [r3, #16]

	I2C1->CR1 |= I2C_CR1_PE;
 8000902:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <I2C_init1+0x44>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a04      	ldr	r2, [pc, #16]	@ (8000918 <I2C_init1+0x44>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6013      	str	r3, [r2, #0]
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40005400 	.word	0x40005400
 800091c:	10909cec 	.word	0x10909cec

08000920 <I2C_init2>:

void I2C_init2() {
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	I2C3->CR1 &= ~I2C_CR1_PE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <I2C_init2+0x44>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0e      	ldr	r2, [pc, #56]	@ (8000964 <I2C_init2+0x44>)
 800092a:	f023 0301 	bic.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]

	I2C3->CR1 &= ~I2C_CR1_ANFOFF;
 8000930:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <I2C_init2+0x44>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0b      	ldr	r2, [pc, #44]	@ (8000964 <I2C_init2+0x44>)
 8000936:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800093a:	6013      	str	r3, [r2, #0]
	I2C3->CR1 &= ~I2C_CR1_NOSTRETCH;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <I2C_init2+0x44>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a08      	ldr	r2, [pc, #32]	@ (8000964 <I2C_init2+0x44>)
 8000942:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000946:	6013      	str	r3, [r2, #0]

	I2C3->TIMINGR = 0x10909CEC;
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <I2C_init2+0x44>)
 800094a:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <I2C_init2+0x48>)
 800094c:	611a      	str	r2, [r3, #16]

	I2C3->CR1 |= I2C_CR1_PE;
 800094e:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <I2C_init2+0x44>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a04      	ldr	r2, [pc, #16]	@ (8000964 <I2C_init2+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6013      	str	r3, [r2, #0]
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40005c00 	.word	0x40005c00
 8000968:	10909cec 	.word	0x10909cec

0800096c <N2C_Config1>:

/******************************* NUNCHUCK #1 ********************************/

void N2C_Config1() {
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 800097e:	2300      	movs	r3, #0
 8000980:	71bb      	strb	r3, [r7, #6]
 8000982:	e060      	b.n	8000a46 <N2C_Config1+0xda>
		I2C_init1();
 8000984:	f7ff ffa6 	bl	80008d4 <I2C_init1>

		/* Clear and then set AUTOEND bit to 1 */
		I2C1->CR2 &= ~(I2C_CR2_AUTOEND);
 8000988:	4b33      	ldr	r3, [pc, #204]	@ (8000a58 <N2C_Config1+0xec>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4a32      	ldr	r2, [pc, #200]	@ (8000a58 <N2C_Config1+0xec>)
 800098e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000992:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (I2C_CR2_AUTOEND);
 8000994:	4b30      	ldr	r3, [pc, #192]	@ (8000a58 <N2C_Config1+0xec>)
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	4a2f      	ldr	r2, [pc, #188]	@ (8000a58 <N2C_Config1+0xec>)
 800099a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800099e:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 80009a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a58 <N2C_Config1+0xec>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000a58 <N2C_Config1+0xec>)
 80009a6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80009aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80009ae:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 80009b0:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <N2C_Config1+0xec>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	4a28      	ldr	r2, [pc, #160]	@ (8000a58 <N2C_Config1+0xec>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ba:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 80009bc:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <N2C_Config1+0xec>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	4a25      	ldr	r2, [pc, #148]	@ (8000a58 <N2C_Config1+0xec>)
 80009c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80009c6:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C1->CR2 |= (N2C_ADDR << 1);
 80009c8:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <N2C_Config1+0xec>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	4a22      	ldr	r2, [pc, #136]	@ (8000a58 <N2C_Config1+0xec>)
 80009ce:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 80009d2:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C1->CR2 |= I2C_CR2_START;
 80009d4:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <N2C_Config1+0xec>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a58 <N2C_Config1+0xec>)
 80009da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009de:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 80009e0:	bf00      	nop
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <N2C_Config1+0xec>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d0f9      	beq.n	80009e2 <N2C_Config1+0x76>
			;

		/* Get Data */
		data = N2C_data(step);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 f9e3 	bl	8000dbc <N2C_data>
 80009f6:	4603      	mov	r3, r0
 80009f8:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 80009fa:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <N2C_Config1+0xec>)
 80009fc:	797b      	ldrb	r3, [r7, #5]
 80009fe:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000a00:	bf00      	nop
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <N2C_Config1+0xec>)
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f9      	beq.n	8000a02 <N2C_Config1+0x96>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	3301      	adds	r3, #1
 8000a12:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f9d0 	bl	8000dbc <N2C_data>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 8000a20:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <N2C_Config1+0xec>)
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C1->ISR & I2C_ISR_STOPF))
 8000a26:	bf00      	nop
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <N2C_Config1+0xec>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0320 	and.w	r3, r3, #32
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d0f9      	beq.n	8000a28 <N2C_Config1+0xbc>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	3301      	adds	r3, #1
 8000a38:	71fb      	strb	r3, [r7, #7]

		/* Delay for 1ms */
		vTaskDelay(pdMS_TO_TICKS(10));
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f003 fab0 	bl	8003fa0 <vTaskDelay>
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	3301      	adds	r3, #1
 8000a44:	71bb      	strb	r3, [r7, #6]
 8000a46:	79bb      	ldrb	r3, [r7, #6]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d99b      	bls.n	8000984 <N2C_Config1+0x18>
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40005400 	.word	0x40005400

08000a5c <N2C_Read1>:

void N2C_Read1(uint8_t *measurments) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8000a64:	2305      	movs	r3, #5
 8000a66:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C_init1();
 8000a6c:	f7ff ff32 	bl	80008d4 <I2C_init1>

	I2C1->CR2 = 0;
 8000a70:	4b47      	ldr	r3, [pc, #284]	@ (8000b90 <N2C_Read1+0x134>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C1->CR2 |= I2C_CR2_AUTOEND;
 8000a76:	4b46      	ldr	r3, [pc, #280]	@ (8000b90 <N2C_Read1+0x134>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	4a45      	ldr	r2, [pc, #276]	@ (8000b90 <N2C_Read1+0x134>)
 8000a7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a80:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000a82:	4b43      	ldr	r3, [pc, #268]	@ (8000b90 <N2C_Read1+0x134>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	4a42      	ldr	r2, [pc, #264]	@ (8000b90 <N2C_Read1+0x134>)
 8000a88:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000a90:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8000a92:	4b3f      	ldr	r3, [pc, #252]	@ (8000b90 <N2C_Read1+0x134>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	4a3e      	ldr	r2, [pc, #248]	@ (8000b90 <N2C_Read1+0x134>)
 8000a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a9c:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 8000a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b90 <N2C_Read1+0x134>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	4a3b      	ldr	r2, [pc, #236]	@ (8000b90 <N2C_Read1+0x134>)
 8000aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000aa8:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 8000aaa:	4b39      	ldr	r3, [pc, #228]	@ (8000b90 <N2C_Read1+0x134>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a38      	ldr	r2, [pc, #224]	@ (8000b90 <N2C_Read1+0x134>)
 8000ab0:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000ab4:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8000ab6:	4b36      	ldr	r3, [pc, #216]	@ (8000b90 <N2C_Read1+0x134>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	4a35      	ldr	r2, [pc, #212]	@ (8000b90 <N2C_Read1+0x134>)
 8000abc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ac0:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000ac2:	bf00      	nop
 8000ac4:	4b32      	ldr	r3, [pc, #200]	@ (8000b90 <N2C_Read1+0x134>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d0f9      	beq.n	8000ac4 <N2C_Read1+0x68>
		;

	/* Get Data */
	data = N2C_data(step);
 8000ad0:	7bbb      	ldrb	r3, [r7, #14]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f972 	bl	8000dbc <N2C_data>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C1->TXDR |= data;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <N2C_Read1+0x134>)
 8000ade:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ae0:	7b7b      	ldrb	r3, [r7, #13]
 8000ae2:	492b      	ldr	r1, [pc, #172]	@ (8000b90 <N2C_Read1+0x134>)
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C1->ISR & I2C_ISR_STOPF))
 8000ae8:	bf00      	nop
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <N2C_Read1+0x134>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f003 0320 	and.w	r3, r3, #32
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f9      	beq.n	8000aea <N2C_Read1+0x8e>
		;

	/* Delay for 1ms */
	vTaskDelay(pdMS_TO_TICKS(10));
 8000af6:	200a      	movs	r0, #10
 8000af8:	f003 fa52 	bl	8003fa0 <vTaskDelay>

	///// Read Measurements /////

	I2C1->CR2 &= ~I2C_CR2_AUTOEND;
 8000afc:	4b24      	ldr	r3, [pc, #144]	@ (8000b90 <N2C_Read1+0x134>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	4a23      	ldr	r2, [pc, #140]	@ (8000b90 <N2C_Read1+0x134>)
 8000b02:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000b06:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C1 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000b08:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <N2C_Read1+0x134>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a20      	ldr	r2, [pc, #128]	@ (8000b90 <N2C_Read1+0x134>)
 8000b0e:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000b16:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C1->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <N2C_Read1+0x134>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b90 <N2C_Read1+0x134>)
 8000b1e:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8000b22:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C1->CR2 |= I2C_CR2_RD_WRN;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <N2C_Read1+0x134>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4a19      	ldr	r2, [pc, #100]	@ (8000b90 <N2C_Read1+0x134>)
 8000b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b2e:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 8000b30:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <N2C_Read1+0x134>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	4a16      	ldr	r2, [pc, #88]	@ (8000b90 <N2C_Read1+0x134>)
 8000b36:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000b3a:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <N2C_Read1+0x134>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	4a13      	ldr	r2, [pc, #76]	@ (8000b90 <N2C_Read1+0x134>)
 8000b42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b46:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e010      	b.n	8000b70 <N2C_Read1+0x114>
		/* Wait until byte is received */
		while (!(I2C1->ISR & I2C_ISR_RXNE))
 8000b4e:	bf00      	nop
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <N2C_Read1+0x134>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0f9      	beq.n	8000b50 <N2C_Read1+0xf4>
			;

		/* Receive byte */
		measurments[i] = I2C1->RXDR;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <N2C_Read1+0x134>)
 8000b5e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	d9eb      	bls.n	8000b4e <N2C_Read1+0xf2>
	}

	I2C1->CR2 |= (I2C_CR2_STOP);
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <N2C_Read1+0x134>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	4a05      	ldr	r2, [pc, #20]	@ (8000b90 <N2C_Read1+0x134>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b80:	6053      	str	r3, [r2, #4]

	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8000b82:	200a      	movs	r0, #10
 8000b84:	f003 fa0c 	bl	8003fa0 <vTaskDelay>
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40005400 	.word	0x40005400

08000b94 <N2C_Config2>:

/******************************* NUNCHUCK #2 ********************************/

void N2C_Config2() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	71bb      	strb	r3, [r7, #6]
 8000baa:	e060      	b.n	8000c6e <N2C_Config2+0xda>
		I2C_init2();
 8000bac:	f7ff feb8 	bl	8000920 <I2C_init2>

		/* Clear and then set AUTOEND bit to 1 */
		I2C3->CR2 &= ~(I2C_CR2_AUTOEND);
 8000bb0:	4b33      	ldr	r3, [pc, #204]	@ (8000c80 <N2C_Config2+0xec>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a32      	ldr	r2, [pc, #200]	@ (8000c80 <N2C_Config2+0xec>)
 8000bb6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000bba:	6053      	str	r3, [r2, #4]
		I2C3->CR2 |= (I2C_CR2_AUTOEND);
 8000bbc:	4b30      	ldr	r3, [pc, #192]	@ (8000c80 <N2C_Config2+0xec>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c80 <N2C_Config2+0xec>)
 8000bc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bc6:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <N2C_Config2+0xec>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8000c80 <N2C_Config2+0xec>)
 8000bce:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000bd6:	6053      	str	r3, [r2, #4]
		I2C3->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000bd8:	4b29      	ldr	r3, [pc, #164]	@ (8000c80 <N2C_Config2+0xec>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <N2C_Config2+0xec>)
 8000bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be2:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C3->CR2 &= ~I2C_CR2_RD_WRN;
 8000be4:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <N2C_Config2+0xec>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4a25      	ldr	r2, [pc, #148]	@ (8000c80 <N2C_Config2+0xec>)
 8000bea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000bee:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C3->CR2 |= (N2C_ADDR << 1);
 8000bf0:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <N2C_Config2+0xec>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	@ (8000c80 <N2C_Config2+0xec>)
 8000bf6:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000bfa:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C3->CR2 |= I2C_CR2_START;
 8000bfc:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <N2C_Config2+0xec>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	4a1f      	ldr	r2, [pc, #124]	@ (8000c80 <N2C_Config2+0xec>)
 8000c02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c06:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C3->ISR & I2C_ISR_TXIS))
 8000c08:	bf00      	nop
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <N2C_Config2+0xec>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f9      	beq.n	8000c0a <N2C_Config2+0x76>
			;

		/* Get Data */
		data = N2C_data(step);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f8cf 	bl	8000dbc <N2C_data>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C3->TXDR = data;
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <N2C_Config2+0xec>)
 8000c24:	797b      	ldrb	r3, [r7, #5]
 8000c26:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C3->ISR & I2C_ISR_TXIS))
 8000c28:	bf00      	nop
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <N2C_Config2+0xec>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f9      	beq.n	8000c2a <N2C_Config2+0x96>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f8bc 	bl	8000dbc <N2C_data>
 8000c44:	4603      	mov	r3, r0
 8000c46:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C3->TXDR = data;
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <N2C_Config2+0xec>)
 8000c4a:	797b      	ldrb	r3, [r7, #5]
 8000c4c:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C3->ISR & I2C_ISR_STOPF))
 8000c4e:	bf00      	nop
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <N2C_Config2+0xec>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d0f9      	beq.n	8000c50 <N2C_Config2+0xbc>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	71fb      	strb	r3, [r7, #7]

		/* Delay for 1ms */
		//HAL_Delay(1);
		vTaskDelay(pdMS_TO_TICKS(10));
 8000c62:	200a      	movs	r0, #10
 8000c64:	f003 f99c 	bl	8003fa0 <vTaskDelay>
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	71bb      	strb	r3, [r7, #6]
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d99b      	bls.n	8000bac <N2C_Config2+0x18>
	}
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40005c00 	.word	0x40005c00

08000c84 <N2C_Read2>:

void N2C_Read2(uint8_t *measurments) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C_init2();
 8000c94:	f7ff fe44 	bl	8000920 <I2C_init2>

	I2C3->CR2 = 0;
 8000c98:	4b47      	ldr	r3, [pc, #284]	@ (8000db8 <N2C_Read2+0x134>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C3->CR2 |= I2C_CR2_AUTOEND;
 8000c9e:	4b46      	ldr	r3, [pc, #280]	@ (8000db8 <N2C_Read2+0x134>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	4a45      	ldr	r2, [pc, #276]	@ (8000db8 <N2C_Read2+0x134>)
 8000ca4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ca8:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000caa:	4b43      	ldr	r3, [pc, #268]	@ (8000db8 <N2C_Read2+0x134>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	4a42      	ldr	r2, [pc, #264]	@ (8000db8 <N2C_Read2+0x134>)
 8000cb0:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000cb8:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C3->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8000cba:	4b3f      	ldr	r3, [pc, #252]	@ (8000db8 <N2C_Read2+0x134>)
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4a3e      	ldr	r2, [pc, #248]	@ (8000db8 <N2C_Read2+0x134>)
 8000cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cc4:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C3->CR2 &= ~I2C_CR2_RD_WRN;
 8000cc6:	4b3c      	ldr	r3, [pc, #240]	@ (8000db8 <N2C_Read2+0x134>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	4a3b      	ldr	r2, [pc, #236]	@ (8000db8 <N2C_Read2+0x134>)
 8000ccc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000cd0:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C3->CR2 |= (N2C_ADDR << 1);
 8000cd2:	4b39      	ldr	r3, [pc, #228]	@ (8000db8 <N2C_Read2+0x134>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	4a38      	ldr	r2, [pc, #224]	@ (8000db8 <N2C_Read2+0x134>)
 8000cd8:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000cdc:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C3->CR2 |= I2C_CR2_START;
 8000cde:	4b36      	ldr	r3, [pc, #216]	@ (8000db8 <N2C_Read2+0x134>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	4a35      	ldr	r2, [pc, #212]	@ (8000db8 <N2C_Read2+0x134>)
 8000ce4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ce8:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C3->ISR & I2C_ISR_TXIS))
 8000cea:	bf00      	nop
 8000cec:	4b32      	ldr	r3, [pc, #200]	@ (8000db8 <N2C_Read2+0x134>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f9      	beq.n	8000cec <N2C_Read2+0x68>
		;

	/* Get Data */
	data = N2C_data(step);
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f85e 	bl	8000dbc <N2C_data>
 8000d00:	4603      	mov	r3, r0
 8000d02:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C3->TXDR |= data;
 8000d04:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <N2C_Read2+0x134>)
 8000d06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d08:	7b7b      	ldrb	r3, [r7, #13]
 8000d0a:	492b      	ldr	r1, [pc, #172]	@ (8000db8 <N2C_Read2+0x134>)
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C3->ISR & I2C_ISR_STOPF))
 8000d10:	bf00      	nop
 8000d12:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <N2C_Read2+0x134>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0f9      	beq.n	8000d12 <N2C_Read2+0x8e>
		;

	/* Delay for 1ms */
	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f003 f93e 	bl	8003fa0 <vTaskDelay>

	///// Read Measurements /////

	I2C3->CR2 &= ~I2C_CR2_AUTOEND;
 8000d24:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <N2C_Read2+0x134>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	4a23      	ldr	r2, [pc, #140]	@ (8000db8 <N2C_Read2+0x134>)
 8000d2a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000d2e:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C3 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C3->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000d30:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <N2C_Read2+0x134>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	4a20      	ldr	r2, [pc, #128]	@ (8000db8 <N2C_Read2+0x134>)
 8000d36:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000d3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d3e:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C3->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 8000d40:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <N2C_Read2+0x134>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a1c      	ldr	r2, [pc, #112]	@ (8000db8 <N2C_Read2+0x134>)
 8000d46:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8000d4a:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C3->CR2 |= I2C_CR2_RD_WRN;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000db8 <N2C_Read2+0x134>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	4a19      	ldr	r2, [pc, #100]	@ (8000db8 <N2C_Read2+0x134>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d56:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C3->CR2 |= (N2C_ADDR << 1);
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <N2C_Read2+0x134>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	4a16      	ldr	r2, [pc, #88]	@ (8000db8 <N2C_Read2+0x134>)
 8000d5e:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000d62:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C3->CR2 |= I2C_CR2_START;
 8000d64:	4b14      	ldr	r3, [pc, #80]	@ (8000db8 <N2C_Read2+0x134>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <N2C_Read2+0x134>)
 8000d6a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d6e:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e010      	b.n	8000d98 <N2C_Read2+0x114>
		/* Wait until byte is received */
		while (!(I2C3->ISR & I2C_ISR_RXNE))
 8000d76:	bf00      	nop
 8000d78:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <N2C_Read2+0x134>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f9      	beq.n	8000d78 <N2C_Read2+0xf4>
			;

		/* Receive byte */
		measurments[i] = I2C3->RXDR;
 8000d84:	4b0c      	ldr	r3, [pc, #48]	@ (8000db8 <N2C_Read2+0x134>)
 8000d86:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000d88:	7bfb      	ldrb	r3, [r7, #15]
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2ca      	uxtb	r2, r1
 8000d90:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	2b05      	cmp	r3, #5
 8000d9c:	d9eb      	bls.n	8000d76 <N2C_Read2+0xf2>
	}

	I2C3->CR2 |= (I2C_CR2_STOP);
 8000d9e:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <N2C_Read2+0x134>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <N2C_Read2+0x134>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da8:	6053      	str	r3, [r2, #4]

	//HAL_Delay(1);
	vTaskDelay(pdMS_TO_TICKS(10));
 8000daa:	200a      	movs	r0, #10
 8000dac:	f003 f8f8 	bl	8003fa0 <vTaskDelay>
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005c00 	.word	0x40005c00

08000dbc <N2C_data>:

/* Returns the appropriate byte to be sent over I2C */
uint8_t N2C_data(uint8_t step) {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (step) {
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d818      	bhi.n	8000e00 <N2C_data+0x44>
 8000dce:	a201      	add	r2, pc, #4	@ (adr r2, 8000dd4 <N2C_data+0x18>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000de9 	.word	0x08000de9
 8000dd8:	08000def 	.word	0x08000def
 8000ddc:	08000df5 	.word	0x08000df5
 8000de0:	08000dfb 	.word	0x08000dfb
 8000de4:	08000dfb 	.word	0x08000dfb
	case 1:
		data = 0xF0;
 8000de8:	23f0      	movs	r3, #240	@ 0xf0
 8000dea:	73fb      	strb	r3, [r7, #15]
		break;
 8000dec:	e008      	b.n	8000e00 <N2C_data+0x44>
	case 2:
		data = 0x55;
 8000dee:	2355      	movs	r3, #85	@ 0x55
 8000df0:	73fb      	strb	r3, [r7, #15]
		break;
 8000df2:	e005      	b.n	8000e00 <N2C_data+0x44>
	case 3:
		data = 0xFB;
 8000df4:	23fb      	movs	r3, #251	@ 0xfb
 8000df6:	73fb      	strb	r3, [r7, #15]
		break;
 8000df8:	e002      	b.n	8000e00 <N2C_data+0x44>
	case 4:
	case 5:
		data = 0x00;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73fb      	strb	r3, [r7, #15]
		break;
 8000dfe:	bf00      	nop
	}

	return data;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e16:	f000 fb5a 	bl	80014ce <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000e1a:	f000 f88b 	bl	8000f34 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e1e:	f7ff fc51 	bl	80006c4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000e22:	f000 f8f1 	bl	8001008 <MX_SPI1_Init>

	/* Set up RTOS */

	/* Create the tasks */
	retVal = xTaskCreate(Task1, "Set Up Program", configMINIMAL_STACK_SIZE * 2,
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <main+0x7c>)
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	2328      	movs	r3, #40	@ 0x28
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e34:	4916      	ldr	r1, [pc, #88]	@ (8000e90 <main+0x80>)
 8000e36:	4817      	ldr	r0, [pc, #92]	@ (8000e94 <main+0x84>)
 8000e38:	f002 fee0 	bl	8003bfc <xTaskCreate>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4a16      	ldr	r2, [pc, #88]	@ (8000e98 <main+0x88>)
 8000e40:	6013      	str	r3, [r2, #0]
	NULL, osPriorityHigh, &task1Handler);
	if (retVal != pdPASS) {
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <main+0x88>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d001      	beq.n	8000e4e <main+0x3e>
		while (1)
 8000e4a:	bf00      	nop
 8000e4c:	e7fd      	b.n	8000e4a <main+0x3a>
			;
	} // check if task creation failed

	sendDataSema = xSemaphoreCreateBinary();
 8000e4e:	2203      	movs	r2, #3
 8000e50:	2100      	movs	r1, #0
 8000e52:	2001      	movs	r0, #1
 8000e54:	f002 f9f1 	bl	800323a <xQueueGenericCreate>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a10      	ldr	r2, [pc, #64]	@ (8000e9c <main+0x8c>)
 8000e5c:	6013      	str	r3, [r2, #0]
	if (sendDataSema == NULL) {
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <main+0x8c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <main+0x5a>
		while (1)
 8000e66:	bf00      	nop
 8000e68:	e7fd      	b.n	8000e66 <main+0x56>
			;
	} // check if binary semaphore creation failed

	transmitMutex = xSemaphoreCreateMutex();
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f002 fa5d 	bl	800332a <xQueueCreateMutex>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea0 <main+0x90>)
 8000e74:	6013      	str	r3, [r2, #0]
	if (transmitMutex == NULL) {
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <main+0x90>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <main+0x72>
		while (1)
 8000e7e:	bf00      	nop
 8000e80:	e7fd      	b.n	8000e7e <main+0x6e>
			;
	} // check if mutex creation failed

	/* Start scheduler */
	vTaskStartScheduler();
 8000e82:	f003 f8c3 	bl	800400c <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 8000e86:	bf00      	nop
 8000e88:	e7fd      	b.n	8000e86 <main+0x76>
 8000e8a:	bf00      	nop
 8000e8c:	20000170 	.word	0x20000170
 8000e90:	08006474 	.word	0x08006474
 8000e94:	08000ea5 	.word	0x08000ea5
 8000e98:	20000180 	.word	0x20000180
 8000e9c:	20000178 	.word	0x20000178
 8000ea0:	2000017c 	.word	0x2000017c

08000ea4 <Task1>:
}

/* Define Tasks --------------------------------------------------------------*/

/* Configure Device */
void Task1(void *argument) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Configure Peripherals
		UART_Init();
 8000eac:	f000 fa54 	bl	8001358 <UART_Init>
		I2C_GPIO_Init1();
 8000eb0:	f7ff fc80 	bl	80007b4 <I2C_GPIO_Init1>
		I2C_GPIO_Init2();
 8000eb4:	f7ff fcc6 	bl	8000844 <I2C_GPIO_Init2>
		N2C_Config1();
 8000eb8:	f7ff fd58 	bl	800096c <N2C_Config1>
		N2C_Config2();
 8000ebc:	f7ff fe6a 	bl	8000b94 <N2C_Config2>

		retVal = xTaskCreate(Task2, "Send Data", configMINIMAL_STACK_SIZE * 2,
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <Task1+0x4c>)
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	2318      	movs	r3, #24
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ece:	4909      	ldr	r1, [pc, #36]	@ (8000ef4 <Task1+0x50>)
 8000ed0:	4809      	ldr	r0, [pc, #36]	@ (8000ef8 <Task1+0x54>)
 8000ed2:	f002 fe93 	bl	8003bfc <xTaskCreate>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a08      	ldr	r2, [pc, #32]	@ (8000efc <Task1+0x58>)
 8000eda:	6013      	str	r3, [r2, #0]
		NULL, osPriorityNormal, &task2Handler);
		if (retVal != pdPASS) {
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <Task1+0x58>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d001      	beq.n	8000ee8 <Task1+0x44>
			while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <Task1+0x40>
				;
		} // check if task creation failed

		// Task not needed for rest of program duration, so delete it
		vTaskDelete(NULL);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f002 ffe5 	bl	8003eb8 <vTaskDelete>
		UART_Init();
 8000eee:	e7dd      	b.n	8000eac <Task1+0x8>
 8000ef0:	20000174 	.word	0x20000174
 8000ef4:	08006484 	.word	0x08006484
 8000ef8:	08000f01 	.word	0x08000f01
 8000efc:	20000180 	.word	0x20000180

08000f00 <Task2>:
	}
}

/* Send Data */
void Task2(void *argument) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Get measurements for Nunchuck #1
		N2C_Read1(measurments1);
 8000f08:	4808      	ldr	r0, [pc, #32]	@ (8000f2c <Task2+0x2c>)
 8000f0a:	f7ff fda7 	bl	8000a5c <N2C_Read1>

		// Get measurements for Nunchuck #2
		N2C_Read2(measurments2);
 8000f0e:	4808      	ldr	r0, [pc, #32]	@ (8000f30 <Task2+0x30>)
 8000f10:	f7ff feb8 	bl	8000c84 <N2C_Read2>

		// Decode Raw Bytes Measurement into Global Variables
		split_data(measurments1, measurments2);
 8000f14:	4906      	ldr	r1, [pc, #24]	@ (8000f30 <Task2+0x30>)
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <Task2+0x2c>)
 8000f18:	f7ff f9aa 	bl	8000270 <split_data>

		// Uploads data to serial port
		print_data();
 8000f1c:	f7ff fae0 	bl	80004e0 <print_data>

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 8000f20:	2005      	movs	r0, #5
 8000f22:	f003 f83d 	bl	8003fa0 <vTaskDelay>
		N2C_Read1(measurments1);
 8000f26:	bf00      	nop
 8000f28:	e7ee      	b.n	8000f08 <Task2+0x8>
 8000f2a:	bf00      	nop
 8000f2c:	20000184 	.word	0x20000184
 8000f30:	2000018c 	.word	0x2000018c

08000f34 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b096      	sub	sp, #88	@ 0x58
 8000f38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	2244      	movs	r2, #68	@ 0x44
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f004 fd60 	bl	8005a08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f56:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f5a:	f000 fdc7 	bl	8001aec <HAL_PWREx_ControlVoltageScaling>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000f64:	f000 f84a 	bl	8000ffc <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f70:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f72:	2310      	movs	r3, #16
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000f82:	230a      	movs	r3, #10
 8000f84:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f86:	2307      	movs	r3, #7
 8000f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fdfe 	bl	8001b98 <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x72>
		Error_Handler();
 8000fa2:	f000 f82b 	bl	8000ffc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000faa:	2303      	movs	r3, #3
 8000fac:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2104      	movs	r1, #4
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 f9c6 	bl	8002350 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x9a>
		Error_Handler();
 8000fca:	f000 f817 	bl	8000ffc <Error_Handler>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	3758      	adds	r7, #88	@ 0x58
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000fea:	f000 fa89 	bl	8001500 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40014800 	.word	0x40014800

08000ffc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <Error_Handler+0x8>

08001008 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <MX_SPI1_Init+0x74>)
 800100e:	4a1c      	ldr	r2, [pc, #112]	@ (8001080 <MX_SPI1_Init+0x78>)
 8001010:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001012:	4b1a      	ldr	r3, [pc, #104]	@ (800107c <MX_SPI1_Init+0x74>)
 8001014:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001018:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800101a:	4b18      	ldr	r3, [pc, #96]	@ (800107c <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001020:	4b16      	ldr	r3, [pc, #88]	@ (800107c <MX_SPI1_Init+0x74>)
 8001022:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001026:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001028:	4b14      	ldr	r3, [pc, #80]	@ (800107c <MX_SPI1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102e:	4b13      	ldr	r3, [pc, #76]	@ (800107c <MX_SPI1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_SPI1_Init+0x74>)
 8001036:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800103a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_SPI1_Init+0x74>)
 800103e:	2210      	movs	r2, #16
 8001040:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_SPI1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_SPI1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <MX_SPI1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_SPI1_Init+0x74>)
 8001056:	2207      	movs	r2, #7
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <MX_SPI1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_SPI1_Init+0x74>)
 8001062:	2208      	movs	r2, #8
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_SPI1_Init+0x74>)
 8001068:	f001 fbb2 	bl	80027d0 <HAL_SPI_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001072:	f7ff ffc3 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000194 	.word	0x20000194
 8001080:	40013000 	.word	0x40013000

08001084 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a25      	ldr	r2, [pc, #148]	@ (8001138 <HAL_SPI_MspInit+0xb4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d144      	bne.n	8001130 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <HAL_SPI_MspInit+0xb8>)
 80010a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010aa:	4a24      	ldr	r2, [pc, #144]	@ (800113c <HAL_SPI_MspInit+0xb8>)
 80010ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <HAL_SPI_MspInit+0xb8>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b1f      	ldr	r3, [pc, #124]	@ (800113c <HAL_SPI_MspInit+0xb8>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <HAL_SPI_MspInit+0xb8>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_SPI_MspInit+0xb8>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_SPI_MspInit+0xb8>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	4a18      	ldr	r2, [pc, #96]	@ (800113c <HAL_SPI_MspInit+0xb8>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e2:	4b16      	ldr	r3, [pc, #88]	@ (800113c <HAL_SPI_MspInit+0xb8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ee:	23c0      	movs	r3, #192	@ 0xc0
 80010f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f2:	2302      	movs	r3, #2
 80010f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fa:	2303      	movs	r3, #3
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010fe:	2305      	movs	r3, #5
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110c:	f000 fafa 	bl	8001704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001110:	2308      	movs	r3, #8
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	2303      	movs	r3, #3
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001120:	2305      	movs	r3, #5
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <HAL_SPI_MspInit+0xbc>)
 800112c:	f000 faea 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	@ 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40013000 	.word	0x40013000
 800113c:	40021000 	.word	0x40021000
 8001140:	48000400 	.word	0x48000400

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <HAL_MspInit+0x4c>)
 800114c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800114e:	4a10      	ldr	r2, [pc, #64]	@ (8001190 <HAL_MspInit+0x4c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6613      	str	r3, [r2, #96]	@ 0x60
 8001156:	4b0e      	ldr	r3, [pc, #56]	@ (8001190 <HAL_MspInit+0x4c>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <HAL_MspInit+0x4c>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <HAL_MspInit+0x4c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116c:	6593      	str	r3, [r2, #88]	@ 0x58
 800116e:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_MspInit+0x4c>)
 8001170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	210f      	movs	r1, #15
 800117e:	f06f 0001 	mvn.w	r0, #1
 8001182:	f000 fa95 	bl	80016b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	@ 0x30
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80011a2:	4b2e      	ldr	r3, [pc, #184]	@ (800125c <HAL_InitTick+0xc8>)
 80011a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a6:	4a2d      	ldr	r2, [pc, #180]	@ (800125c <HAL_InitTick+0xc8>)
 80011a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ae:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <HAL_InitTick+0xc8>)
 80011b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ba:	f107 020c 	add.w	r2, r7, #12
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 fa71 	bl	80026ac <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011ca:	f001 fa59 	bl	8002680 <HAL_RCC_GetPCLK2Freq>
 80011ce:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011d2:	4a23      	ldr	r2, [pc, #140]	@ (8001260 <HAL_InitTick+0xcc>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	0c9b      	lsrs	r3, r3, #18
 80011da:	3b01      	subs	r3, #1
 80011dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_InitTick+0xd0>)
 80011e0:	4a21      	ldr	r2, [pc, #132]	@ (8001268 <HAL_InitTick+0xd4>)
 80011e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <HAL_InitTick+0xd0>)
 80011e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011ea:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80011ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001264 <HAL_InitTick+0xd0>)
 80011ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f0:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <HAL_InitTick+0xd0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_InitTick+0xd0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <HAL_InitTick+0xd0>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001204:	4817      	ldr	r0, [pc, #92]	@ (8001264 <HAL_InitTick+0xd0>)
 8001206:	f001 fb86 	bl	8002916 <HAL_TIM_Base_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001210:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001214:	2b00      	cmp	r3, #0
 8001216:	d11b      	bne.n	8001250 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001218:	4812      	ldr	r0, [pc, #72]	@ (8001264 <HAL_InitTick+0xd0>)
 800121a:	f001 fbdd 	bl	80029d8 <HAL_TIM_Base_Start_IT>
 800121e:	4603      	mov	r3, r0
 8001220:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001224:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001228:	2b00      	cmp	r3, #0
 800122a:	d111      	bne.n	8001250 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800122c:	201a      	movs	r0, #26
 800122e:	f000 fa5b 	bl	80016e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d808      	bhi.n	800124a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8001238:	2200      	movs	r2, #0
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	201a      	movs	r0, #26
 800123e:	f000 fa37 	bl	80016b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <HAL_InitTick+0xd8>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	e002      	b.n	8001250 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001254:	4618      	mov	r0, r3
 8001256:	3730      	adds	r7, #48	@ 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	431bde83 	.word	0x431bde83
 8001264:	200001f8 	.word	0x200001f8
 8001268:	40014800 	.word	0x40014800
 800126c:	20000004 	.word	0x20000004

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <NMI_Handler+0x4>

08001278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <MemManage_Handler+0x4>

08001288 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <UsageFault_Handler+0x4>

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 80012aa:	2080      	movs	r0, #128	@ 0x80
 80012ac:	f000 fbec 	bl	8001a88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012ba:	f001 fbfd 	bl	8002ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200001f8 	.word	0x200001f8

080012c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d0:	4a14      	ldr	r2, [pc, #80]	@ (8001324 <_sbrk+0x5c>)
 80012d2:	4b15      	ldr	r3, [pc, #84]	@ (8001328 <_sbrk+0x60>)
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012dc:	4b13      	ldr	r3, [pc, #76]	@ (800132c <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <_sbrk+0x64>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	@ (8001330 <_sbrk+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ea:	4b10      	ldr	r3, [pc, #64]	@ (800132c <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d207      	bcs.n	8001308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f8:	f004 fbe4 	bl	8005ac4 <__errno>
 80012fc:	4603      	mov	r3, r0
 80012fe:	220c      	movs	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e009      	b.n	800131c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001308:	4b08      	ldr	r3, [pc, #32]	@ (800132c <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130e:	4b07      	ldr	r3, [pc, #28]	@ (800132c <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	4a05      	ldr	r2, [pc, #20]	@ (800132c <_sbrk+0x64>)
 8001318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20018000 	.word	0x20018000
 8001328:	00000f00 	.word	0x00000f00
 800132c:	20000244 	.word	0x20000244
 8001330:	20001d30 	.word	0x20001d30

08001334 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <SystemInit+0x20>)
 800133a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <SystemInit+0x20>)
 8001340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <UART_Init>:
 */

#include "main.h"
#include "uart.h"

void UART_Init(void) {
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
	// Configure GPIOA for USART2
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 800135c:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <UART_Init+0x98>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001360:	4a23      	ldr	r2, [pc, #140]	@ (80013f0 <UART_Init+0x98>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN);
 8001368:	4b21      	ldr	r3, [pc, #132]	@ (80013f0 <UART_Init+0x98>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800136c:	4a20      	ldr	r2, [pc, #128]	@ (80013f0 <UART_Init+0x98>)
 800136e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001372:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 2 and 3 to AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8001374:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800137e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001382:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 8001384:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800138e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001392:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 8001394:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800139e:	f423 43ee 	bic.w	r3, r3, #30464	@ 0x7700
 80013a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 80013a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80013ae:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80013b2:	6213      	str	r3, [r2, #32]
	 * TE		1
	 * RE		1
	 * USEM		0
	 * UE		1
	 */
	USART2->CR1 |= (0b000100000);
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <UART_Init+0x9c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <UART_Init+0x9c>)
 80013ba:	f043 0320 	orr.w	r3, r3, #32
 80013be:	6013      	str	r3, [r2, #0]

	// Configure BR
	USART2->BRR = (694);
 80013c0:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <UART_Init+0x9c>)
 80013c2:	f240 22b6 	movw	r2, #694	@ 0x2b6
 80013c6:	60da      	str	r2, [r3, #12]

	// Enable  bits
	USART2->CR1 |= (0b1101);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <UART_Init+0x9c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a09      	ldr	r2, [pc, #36]	@ (80013f4 <UART_Init+0x9c>)
 80013ce:	f043 030d 	orr.w	r3, r3, #13
 80013d2:	6013      	str	r3, [r2, #0]

	// Enable interupts
	NVIC->ISER[1] |= (1 << (USART2_IRQn & 0X1F));
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <UART_Init+0xa0>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <UART_Init+0xa0>)
 80013da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013de:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80013e0:	b662      	cpsie	i
}
 80013e2:	bf00      	nop
	__enable_irq();

}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40004400 	.word	0x40004400
 80013f8:	e000e100 	.word	0xe000e100

080013fc <UART_Print_Char>:

// Prints a character to the UART serial connection
void UART_Print_Char(char character) {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	while (!(USART2->ISR & 1 << 7)) {
 8001406:	bf00      	nop
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <UART_Print_Char+0x2c>)
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001410:	2b00      	cmp	r3, #0
 8001412:	d0f9      	beq.n	8001408 <UART_Print_Char+0xc>
	};
	USART2->TDR = character;
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <UART_Print_Char+0x2c>)
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	b292      	uxth	r2, r2
 800141a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	40004400 	.word	0x40004400

0800142c <UART_PrintLn>:

// Prints a character to the UART serial connection and appends a NEWLINE char
void UART_PrintLn(char *output) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 8001438:	e009      	b.n	800144e <UART_PrintLn+0x22>
		UART_Print_Char(output[i]);
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ffda 	bl	80013fc <UART_Print_Char>
		i++;
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ef      	bne.n	800143a <UART_PrintLn+0xe>
	}
	// Finish with new line and return cairage chars
	while (!(USART2->ISR & 1 << 7)) {
 800145a:	bf00      	nop
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <UART_PrintLn+0x4c>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f9      	beq.n	800145c <UART_PrintLn+0x30>
	};
	USART2->TDR = '\n';
 8001468:	4b03      	ldr	r3, [pc, #12]	@ (8001478 <UART_PrintLn+0x4c>)
 800146a:	220a      	movs	r2, #10
 800146c:	851a      	strh	r2, [r3, #40]	@ 0x28
	//while(!(USART2 -> ISR & 1 << 7)){};
	//USART2 -> TDR = '\r';
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40004400 	.word	0x40004400

0800147c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001480:	f7ff ff58 	bl	8001334 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	@ (80014bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <LoopForever+0xe>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	@ (80014c8 <LoopForever+0x16>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014aa:	f004 fb11 	bl	8005ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ae:	f7ff fcaf 	bl	8000e10 <main>

080014b2 <LoopForever>:

LoopForever:
    b LoopForever
 80014b2:	e7fe      	b.n	80014b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014c0:	08006534 	.word	0x08006534
  ldr r2, =_sbss
 80014c4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014c8:	20001d30 	.word	0x20001d30

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>

080014ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f8de 	bl	800169a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	200f      	movs	r0, #15
 80014e0:	f7ff fe58 	bl	8001194 <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d002      	beq.n	80014f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	e001      	b.n	80014f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014f0:	f7ff fe28 	bl	8001144 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f4:	79fb      	ldrb	r3, [r7, #7]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <HAL_IncTick+0x20>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_IncTick+0x24>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4413      	add	r3, r2
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <HAL_IncTick+0x24>)
 8001512:	6013      	str	r3, [r2, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000008 	.word	0x20000008
 8001524:	20000248 	.word	0x20000248

08001528 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b03      	ldr	r3, [pc, #12]	@ (800153c <HAL_GetTick+0x14>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000248 	.word	0x20000248

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	@ (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	@ (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	@ (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff ff4c 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c2:	f7ff ff61 	bl	8001588 <__NVIC_GetPriorityGrouping>
 80016c6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	68b9      	ldr	r1, [r7, #8]
 80016cc:	6978      	ldr	r0, [r7, #20]
 80016ce:	f7ff ffb1 	bl	8001634 <NVIC_EncodePriority>
 80016d2:	4602      	mov	r2, r0
 80016d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff80 	bl	80015e0 <__NVIC_SetPriority>
}
 80016e0:	bf00      	nop
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff54 	bl	80015a4 <__NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001712:	e17f      	b.n	8001a14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8171 	beq.w	8001a0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b01      	cmp	r3, #1
 8001736:	d005      	beq.n	8001744 <HAL_GPIO_Init+0x40>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d130      	bne.n	80017a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800177a:	2201      	movs	r2, #1
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	091b      	lsrs	r3, r3, #4
 8001790:	f003 0201 	and.w	r2, r3, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d118      	bne.n	80017e4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	08db      	lsrs	r3, r3, #3
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d017      	beq.n	8001820 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d123      	bne.n	8001874 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	6939      	ldr	r1, [r7, #16]
 8001870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80ac 	beq.w	8001a0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a34 <HAL_GPIO_Init+0x330>)
 80018b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001a34 <HAL_GPIO_Init+0x330>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80018c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a34 <HAL_GPIO_Init+0x330>)
 80018c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ce:	4a5a      	ldr	r2, [pc, #360]	@ (8001a38 <HAL_GPIO_Init+0x334>)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018f8:	d025      	beq.n	8001946 <HAL_GPIO_Init+0x242>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4f      	ldr	r2, [pc, #316]	@ (8001a3c <HAL_GPIO_Init+0x338>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01f      	beq.n	8001942 <HAL_GPIO_Init+0x23e>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4e      	ldr	r2, [pc, #312]	@ (8001a40 <HAL_GPIO_Init+0x33c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x23a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a44 <HAL_GPIO_Init+0x340>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x236>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4c      	ldr	r2, [pc, #304]	@ (8001a48 <HAL_GPIO_Init+0x344>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x232>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a4c <HAL_GPIO_Init+0x348>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x22e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4a      	ldr	r2, [pc, #296]	@ (8001a50 <HAL_GPIO_Init+0x34c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x22a>
 800192a:	2306      	movs	r3, #6
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x244>
 800192e:	2307      	movs	r3, #7
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x244>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x244>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x244>
 8001946:	2300      	movs	r3, #0
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001958:	4937      	ldr	r1, [pc, #220]	@ (8001a38 <HAL_GPIO_Init+0x334>)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001966:	4b3b      	ldr	r3, [pc, #236]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800198a:	4a32      	ldr	r2, [pc, #200]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001990:	4b30      	ldr	r3, [pc, #192]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019b4:	4a27      	ldr	r2, [pc, #156]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ba:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019de:	4a1d      	ldr	r2, [pc, #116]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a08:	4a12      	ldr	r2, [pc, #72]	@ (8001a54 <HAL_GPIO_Init+0x350>)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f47f ae78 	bne.w	8001714 <HAL_GPIO_Init+0x10>
  }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000
 8001a3c:	48000400 	.word	0x48000400
 8001a40:	48000800 	.word	0x48000800
 8001a44:	48000c00 	.word	0x48000c00
 8001a48:	48001000 	.word	0x48001000
 8001a4c:	48001400 	.word	0x48001400
 8001a50:	48001800 	.word	0x48001800
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a94:	695a      	ldr	r2, [r3, #20]
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001aa0:	88fb      	ldrh	r3, [r7, #6]
 8001aa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f806 	bl	8001ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ad4:	4b04      	ldr	r3, [pc, #16]	@ (8001ae8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40007000 	.word	0x40007000

08001aec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001afa:	d130      	bne.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001afc:	4b23      	ldr	r3, [pc, #140]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b08:	d038      	beq.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0a:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b12:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2232      	movs	r2, #50	@ 0x32
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	4a1b      	ldr	r2, [pc, #108]	@ (8001b94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b30:	e002      	b.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b44:	d102      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f2      	bne.n	8001b32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b58:	d110      	bne.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e00f      	b.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b6a:	d007      	beq.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b6c:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b74:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	20000000 	.word	0x20000000
 8001b94:	431bde83 	.word	0x431bde83

08001b98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e3ca      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001baa:	4b97      	ldr	r3, [pc, #604]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb4:	4b94      	ldr	r3, [pc, #592]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80e4 	beq.w	8001d94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <HAL_RCC_OscConfig+0x4a>
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	f040 808b 	bne.w	8001cf0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	f040 8087 	bne.w	8001cf0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001be2:	4b89      	ldr	r3, [pc, #548]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x62>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e3a2      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1a      	ldr	r2, [r3, #32]
 8001bfe:	4b82      	ldr	r3, [pc, #520]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <HAL_RCC_OscConfig+0x7c>
 8001c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c12:	e005      	b.n	8001c20 <HAL_RCC_OscConfig+0x88>
 8001c14:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d223      	bcs.n	8001c6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 fd71 	bl	8002710 <RCC_SetFlashLatencyFromMSIRange>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e383      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c38:	4b73      	ldr	r3, [pc, #460]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a72      	ldr	r2, [pc, #456]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	f043 0308 	orr.w	r3, r3, #8
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b70      	ldr	r3, [pc, #448]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	496d      	ldr	r1, [pc, #436]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c56:	4b6c      	ldr	r3, [pc, #432]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4968      	ldr	r1, [pc, #416]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
 8001c6a:	e025      	b.n	8001cb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6c:	4b66      	ldr	r3, [pc, #408]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a65      	ldr	r2, [pc, #404]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b63      	ldr	r3, [pc, #396]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4960      	ldr	r1, [pc, #384]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	495b      	ldr	r1, [pc, #364]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fd31 	bl	8002710 <RCC_SetFlashLatencyFromMSIRange>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e343      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb8:	f000 fc4a 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b52      	ldr	r3, [pc, #328]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	4950      	ldr	r1, [pc, #320]	@ (8001e0c <HAL_RCC_OscConfig+0x274>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001e10 <HAL_RCC_OscConfig+0x278>)
 8001cd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cd8:	4b4e      	ldr	r3, [pc, #312]	@ (8001e14 <HAL_RCC_OscConfig+0x27c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fa59 	bl	8001194 <HAL_InitTick>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d052      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	e327      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d032      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cf8:	4b43      	ldr	r3, [pc, #268]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a42      	ldr	r2, [pc, #264]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fc10 	bl	8001528 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fc0c 	bl	8001528 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e310      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d2a:	4b37      	ldr	r3, [pc, #220]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a36      	ldr	r2, [pc, #216]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	4931      	ldr	r1, [pc, #196]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d48:	4b2f      	ldr	r3, [pc, #188]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	492c      	ldr	r1, [pc, #176]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
 8001d5c:	e01a      	b.n	8001d94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a29      	ldr	r2, [pc, #164]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d6a:	f7ff fbdd 	bl	8001528 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d72:	f7ff fbd9 	bl	8001528 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e2dd      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d84:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x1da>
 8001d90:	e000      	b.n	8001d94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d074      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x21a>
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b0c      	cmp	r3, #12
 8001daa:	d10e      	bne.n	8001dca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d10b      	bne.n	8001dca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d064      	beq.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d160      	bne.n	8001e88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e2ba      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd2:	d106      	bne.n	8001de2 <HAL_RCC_OscConfig+0x24a>
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e026      	b.n	8001e30 <HAL_RCC_OscConfig+0x298>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dea:	d115      	bne.n	8001e18 <HAL_RCC_OscConfig+0x280>
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b03      	ldr	r3, [pc, #12]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a02      	ldr	r2, [pc, #8]	@ (8001e08 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x298>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	080064a8 	.word	0x080064a8
 8001e10:	20000000 	.word	0x20000000
 8001e14:	20000004 	.word	0x20000004
 8001e18:	4ba0      	ldr	r3, [pc, #640]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a9f      	ldr	r2, [pc, #636]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	4b9d      	ldr	r3, [pc, #628]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a9c      	ldr	r2, [pc, #624]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d013      	beq.n	8001e60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	f7ff fb76 	bl	8001528 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fb72 	bl	8001528 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e276      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e52:	4b92      	ldr	r3, [pc, #584]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2a8>
 8001e5e:	e014      	b.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff fb62 	bl	8001528 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e68:	f7ff fb5e 	bl	8001528 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b64      	cmp	r3, #100	@ 0x64
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e262      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e7a:	4b88      	ldr	r3, [pc, #544]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2d0>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d060      	beq.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d005      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x310>
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d119      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d116      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea8:	4b7c      	ldr	r3, [pc, #496]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x328>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e23f      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b76      	ldr	r3, [pc, #472]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	4973      	ldr	r1, [pc, #460]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed4:	e040      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d023      	beq.n	8001f26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ede:	4b6f      	ldr	r3, [pc, #444]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eea:	f7ff fb1d 	bl	8001528 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fb19 	bl	8001528 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e21d      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f04:	4b65      	ldr	r3, [pc, #404]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f10:	4b62      	ldr	r3, [pc, #392]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	495f      	ldr	r1, [pc, #380]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
 8001f24:	e018      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f26:	4b5d      	ldr	r3, [pc, #372]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff faf9 	bl	8001528 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7ff faf5 	bl	8001528 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e1f9      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f4c:	4b53      	ldr	r3, [pc, #332]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d03c      	beq.n	8001fde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01c      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f72:	4a4a      	ldr	r2, [pc, #296]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7c:	f7ff fad4 	bl	8001528 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff fad0 	bl	8001528 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1d4      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f96:	4b41      	ldr	r3, [pc, #260]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0ef      	beq.n	8001f84 <HAL_RCC_OscConfig+0x3ec>
 8001fa4:	e01b      	b.n	8001fde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fac:	4a3b      	ldr	r2, [pc, #236]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb6:	f7ff fab7 	bl	8001528 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbe:	f7ff fab3 	bl	8001528 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e1b7      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd0:	4b32      	ldr	r3, [pc, #200]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1ef      	bne.n	8001fbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a6 	beq.w	8002138 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fec:	2300      	movs	r3, #0
 8001fee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10d      	bne.n	8002018 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002000:	4a26      	ldr	r2, [pc, #152]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002006:	6593      	str	r3, [r2, #88]	@ 0x58
 8002008:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002014:	2301      	movs	r3, #1
 8002016:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002018:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_RCC_OscConfig+0x508>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d118      	bne.n	8002056 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002024:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <HAL_RCC_OscConfig+0x508>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <HAL_RCC_OscConfig+0x508>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800202e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002030:	f7ff fa7a 	bl	8001528 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002038:	f7ff fa76 	bl	8001528 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e17a      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_RCC_OscConfig+0x508>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d108      	bne.n	8002070 <HAL_RCC_OscConfig+0x4d8>
 800205e:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800206e:	e029      	b.n	80020c4 <HAL_RCC_OscConfig+0x52c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b05      	cmp	r3, #5
 8002076:	d115      	bne.n	80020a4 <HAL_RCC_OscConfig+0x50c>
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 800207a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207e:	4a07      	ldr	r2, [pc, #28]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002088:	4b04      	ldr	r3, [pc, #16]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	4a03      	ldr	r2, [pc, #12]	@ (800209c <HAL_RCC_OscConfig+0x504>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002098:	e014      	b.n	80020c4 <HAL_RCC_OscConfig+0x52c>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
 80020a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020b4:	4b98      	ldr	r3, [pc, #608]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	4a97      	ldr	r2, [pc, #604]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80020bc:	f023 0304 	bic.w	r3, r3, #4
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff fa2c 	bl	8001528 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7ff fa28 	bl	8001528 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e12a      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80020ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0ed      	beq.n	80020d4 <HAL_RCC_OscConfig+0x53c>
 80020f8:	e015      	b.n	8002126 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7ff fa15 	bl	8001528 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7ff fa11 	bl	8001528 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e113      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002118:	4b7f      	ldr	r3, [pc, #508]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ed      	bne.n	8002102 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002126:	7ffb      	ldrb	r3, [r7, #31]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212c:	4b7a      	ldr	r3, [pc, #488]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	4a79      	ldr	r2, [pc, #484]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 8002132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002136:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80fe 	beq.w	800233e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	2b02      	cmp	r3, #2
 8002148:	f040 80d0 	bne.w	80022ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800214c:	4b72      	ldr	r3, [pc, #456]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	429a      	cmp	r2, r3
 800215e:	d130      	bne.n	80021c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	3b01      	subs	r3, #1
 800216c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d127      	bne.n	80021c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800217c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d11f      	bne.n	80021c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800218c:	2a07      	cmp	r2, #7
 800218e:	bf14      	ite	ne
 8002190:	2201      	movne	r2, #1
 8002192:	2200      	moveq	r2, #0
 8002194:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002196:	4293      	cmp	r3, r2
 8002198:	d113      	bne.n	80021c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	3b01      	subs	r3, #1
 80021a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	3b01      	subs	r3, #1
 80021bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d06e      	beq.n	80022a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d069      	beq.n	800229c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021c8:	4b53      	ldr	r3, [pc, #332]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021d4:	4b50      	ldr	r3, [pc, #320]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0ad      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80021ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021f0:	f7ff f99a 	bl	8001528 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7ff f996 	bl	8001528 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e09a      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800220a:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002216:	4b40      	ldr	r3, [pc, #256]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	4b40      	ldr	r3, [pc, #256]	@ (800231c <HAL_RCC_OscConfig+0x784>)
 800221c:	4013      	ands	r3, r2
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002226:	3a01      	subs	r2, #1
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002230:	0212      	lsls	r2, r2, #8
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002238:	0852      	lsrs	r2, r2, #1
 800223a:	3a01      	subs	r2, #1
 800223c:	0552      	lsls	r2, r2, #21
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002244:	0852      	lsrs	r2, r2, #1
 8002246:	3a01      	subs	r2, #1
 8002248:	0652      	lsls	r2, r2, #25
 800224a:	4311      	orrs	r1, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002250:	0912      	lsrs	r2, r2, #4
 8002252:	0452      	lsls	r2, r2, #17
 8002254:	430a      	orrs	r2, r1
 8002256:	4930      	ldr	r1, [pc, #192]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 8002258:	4313      	orrs	r3, r2
 800225a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800225c:	4b2e      	ldr	r3, [pc, #184]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2d      	ldr	r2, [pc, #180]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002268:	4b2b      	ldr	r3, [pc, #172]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a2a      	ldr	r2, [pc, #168]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002272:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002274:	f7ff f958 	bl	8001528 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f954 	bl	8001528 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e058      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	4b22      	ldr	r3, [pc, #136]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800229a:	e050      	b.n	800233e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e04f      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d148      	bne.n	800233e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a19      	ldr	r2, [pc, #100]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022b8:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4a16      	ldr	r2, [pc, #88]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022c4:	f7ff f930 	bl	8001528 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff f92c 	bl	8001528 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e030      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x734>
 80022ea:	e028      	b.n	800233e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d023      	beq.n	800233a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a08      	ldr	r2, [pc, #32]	@ (8002318 <HAL_RCC_OscConfig+0x780>)
 80022f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7ff f913 	bl	8001528 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	e00c      	b.n	8002320 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7ff f90f 	bl	8001528 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d905      	bls.n	8002320 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e013      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
 8002318:	40021000 	.word	0x40021000
 800231c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002320:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_RCC_OscConfig+0x7b0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1ec      	bne.n	8002306 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_RCC_OscConfig+0x7b0>)
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4905      	ldr	r1, [pc, #20]	@ (8002348 <HAL_RCC_OscConfig+0x7b0>)
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_RCC_OscConfig+0x7b4>)
 8002334:	4013      	ands	r3, r2
 8002336:	60cb      	str	r3, [r1, #12]
 8002338:	e001      	b.n	800233e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	feeefffc 	.word	0xfeeefffc

08002350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0e7      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b75      	ldr	r3, [pc, #468]	@ (800253c <HAL_RCC_ClockConfig+0x1ec>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b72      	ldr	r3, [pc, #456]	@ (800253c <HAL_RCC_ClockConfig+0x1ec>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4970      	ldr	r1, [pc, #448]	@ (800253c <HAL_RCC_ClockConfig+0x1ec>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b6e      	ldr	r3, [pc, #440]	@ (800253c <HAL_RCC_ClockConfig+0x1ec>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0cf      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d010      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	4b66      	ldr	r3, [pc, #408]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d908      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4960      	ldr	r1, [pc, #384]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d04c      	beq.n	8002468 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d121      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e0a6      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ee:	4b54      	ldr	r3, [pc, #336]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d115      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e09a      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002406:	4b4e      	ldr	r3, [pc, #312]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e08e      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002416:	4b4a      	ldr	r3, [pc, #296]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e086      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002426:	4b46      	ldr	r3, [pc, #280]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f023 0203 	bic.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	4943      	ldr	r1, [pc, #268]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	4313      	orrs	r3, r2
 8002436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002438:	f7ff f876 	bl	8001528 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	e00a      	b.n	8002456 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002440:	f7ff f872 	bl	8001528 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e06e      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 020c 	and.w	r2, r3, #12
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	429a      	cmp	r2, r3
 8002466:	d1eb      	bne.n	8002440 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	4b31      	ldr	r3, [pc, #196]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002480:	429a      	cmp	r2, r3
 8002482:	d208      	bcs.n	8002496 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002484:	4b2e      	ldr	r3, [pc, #184]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	492b      	ldr	r1, [pc, #172]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002496:	4b29      	ldr	r3, [pc, #164]	@ (800253c <HAL_RCC_ClockConfig+0x1ec>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d210      	bcs.n	80024c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a4:	4b25      	ldr	r3, [pc, #148]	@ (800253c <HAL_RCC_ClockConfig+0x1ec>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 0207 	bic.w	r2, r3, #7
 80024ac:	4923      	ldr	r1, [pc, #140]	@ (800253c <HAL_RCC_ClockConfig+0x1ec>)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b4:	4b21      	ldr	r3, [pc, #132]	@ (800253c <HAL_RCC_ClockConfig+0x1ec>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e036      	b.n	8002534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4918      	ldr	r1, [pc, #96]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024f0:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4910      	ldr	r1, [pc, #64]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002504:	f000 f824 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	091b      	lsrs	r3, r3, #4
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	490b      	ldr	r1, [pc, #44]	@ (8002544 <HAL_RCC_ClockConfig+0x1f4>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	fa22 f303 	lsr.w	r3, r2, r3
 8002520:	4a09      	ldr	r2, [pc, #36]	@ (8002548 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002524:	4b09      	ldr	r3, [pc, #36]	@ (800254c <HAL_RCC_ClockConfig+0x1fc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fe33 	bl	8001194 <HAL_InitTick>
 800252e:	4603      	mov	r3, r0
 8002530:	72fb      	strb	r3, [r7, #11]

  return status;
 8002532:	7afb      	ldrb	r3, [r7, #11]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
 8002544:	080064a8 	.word	0x080064a8
 8002548:	20000000 	.word	0x20000000
 800254c:	20000004 	.word	0x20000004

08002550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
 800255a:	2300      	movs	r3, #0
 800255c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255e:	4b3e      	ldr	r3, [pc, #248]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002568:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x34>
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d121      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d11e      	bne.n	80025c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002584:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002590:	4b31      	ldr	r3, [pc, #196]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	e005      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025ac:	4a2b      	ldr	r2, [pc, #172]	@ (800265c <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10d      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c0:	e00a      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d102      	bne.n	80025ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025c8:	4b25      	ldr	r3, [pc, #148]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	e004      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025d4:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x114>)
 80025d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	2b0c      	cmp	r3, #12
 80025dc:	d134      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d003      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d003      	beq.n	80025fc <HAL_RCC_GetSysClockFreq+0xac>
 80025f4:	e005      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x110>)
 80025f8:	617b      	str	r3, [r7, #20]
      break;
 80025fa:	e005      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCC_GetSysClockFreq+0x114>)
 80025fe:	617b      	str	r3, [r7, #20]
      break;
 8002600:	e002      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	617b      	str	r3, [r7, #20]
      break;
 8002606:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002608:	4b13      	ldr	r3, [pc, #76]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	3301      	adds	r3, #1
 8002614:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002616:	4b10      	ldr	r3, [pc, #64]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	fb03 f202 	mul.w	r2, r3, r2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x108>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	0e5b      	lsrs	r3, r3, #25
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	3301      	adds	r3, #1
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002648:	69bb      	ldr	r3, [r7, #24]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	080064c0 	.word	0x080064c0
 8002660:	00f42400 	.word	0x00f42400
 8002664:	007a1200 	.word	0x007a1200

08002668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800266c:	4b03      	ldr	r3, [pc, #12]	@ (800267c <HAL_RCC_GetHCLKFreq+0x14>)
 800266e:	681b      	ldr	r3, [r3, #0]
}
 8002670:	4618      	mov	r0, r3
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002684:	f7ff fff0 	bl	8002668 <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	0adb      	lsrs	r3, r3, #11
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4904      	ldr	r1, [pc, #16]	@ (80026a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40021000 	.word	0x40021000
 80026a8:	080064b8 	.word	0x080064b8

080026ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	220f      	movs	r2, #15
 80026ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_RCC_GetClockConfig+0x5c>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0203 	and.w	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80026c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <HAL_RCC_GetClockConfig+0x5c>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80026d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002708 <HAL_RCC_GetClockConfig+0x5c>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026e0:	4b09      	ldr	r3, [pc, #36]	@ (8002708 <HAL_RCC_GetClockConfig+0x5c>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	08db      	lsrs	r3, r3, #3
 80026e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026ee:	4b07      	ldr	r3, [pc, #28]	@ (800270c <HAL_RCC_GetClockConfig+0x60>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0207 	and.w	r2, r3, #7
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	40022000 	.word	0x40022000

08002710 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002718:	2300      	movs	r3, #0
 800271a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800271c:	4b2a      	ldr	r3, [pc, #168]	@ (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002728:	f7ff f9d2 	bl	8001ad0 <HAL_PWREx_GetVoltageRange>
 800272c:	6178      	str	r0, [r7, #20]
 800272e:	e014      	b.n	800275a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b25      	ldr	r3, [pc, #148]	@ (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	4a24      	ldr	r2, [pc, #144]	@ (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	@ 0x58
 800273c:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002748:	f7ff f9c2 	bl	8001ad0 <HAL_PWREx_GetVoltageRange>
 800274c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002752:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002758:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002760:	d10b      	bne.n	800277a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b80      	cmp	r3, #128	@ 0x80
 8002766:	d919      	bls.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2ba0      	cmp	r3, #160	@ 0xa0
 800276c:	d902      	bls.n	8002774 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800276e:	2302      	movs	r3, #2
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	e013      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002774:	2301      	movs	r3, #1
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	e010      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b80      	cmp	r3, #128	@ 0x80
 800277e:	d902      	bls.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002780:	2303      	movs	r3, #3
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e00a      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b80      	cmp	r3, #128	@ 0x80
 800278a:	d102      	bne.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800278c:	2302      	movs	r3, #2
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e004      	b.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b70      	cmp	r3, #112	@ 0x70
 8002796:	d101      	bne.n	800279c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002798:	2301      	movs	r3, #1
 800279a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800279c:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f023 0207 	bic.w	r2, r3, #7
 80027a4:	4909      	ldr	r1, [pc, #36]	@ (80027cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d001      	beq.n	80027be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	40022000 	.word	0x40022000

080027d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e095      	b.n	800290e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d108      	bne.n	80027fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027f2:	d009      	beq.n	8002808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
 80027fa:	e005      	b.n	8002808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe fc2e 	bl	8001084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800283e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002848:	d902      	bls.n	8002850 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	e002      	b.n	8002856 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002854:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800285e:	d007      	beq.n	8002870 <HAL_SPI_Init+0xa0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b2:	ea42 0103 	orr.w	r1, r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	0c1b      	lsrs	r3, r3, #16
 80028cc:	f003 0204 	and.w	r2, r3, #4
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80028ec:	ea42 0103 	orr.w	r1, r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e049      	b.n	80029bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f841 	bl	80029c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f000 f9d9 	bl	8002d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04f      	b.n	8002a90 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	@ (8002a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1a:	d018      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_TIM_Base_Start_IT+0xd4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_TIM_Base_Start_IT+0x76>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	@ (8002ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d115      	bne.n	8002a7a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b06      	cmp	r3, #6
 8002a5e:	d015      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a66:	d011      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f042 0201 	orr.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a78:	e008      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	e000      	b.n	8002a8e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40013400 	.word	0x40013400
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	00010007 	.word	0x00010007

08002ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d020      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f06f 0202 	mvn.w	r2, #2
 8002aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8e4 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002b08:	e005      	b.n	8002b16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f8d6 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f8e7 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01b      	beq.n	8002b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0204 	mvn.w	r2, #4
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8be 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8b0 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f8c1 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0208 	mvn.w	r2, #8
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f898 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f88a 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f89b 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0210 	mvn.w	r2, #16
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f872 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f864 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f875 	bl	8002ce4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00c      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d007      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0201 	mvn.w	r2, #1
 8002c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7fe f9da 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00c      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d007      	beq.n	8002c48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f906 	bl	8002e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00c      	beq.n	8002c6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8fe 	bl	8002e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00c      	beq.n	8002c90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d007      	beq.n	8002c90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f834 	bl	8002cf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00c      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0220 	mvn.w	r2, #32
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8c6 	bl	8002e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a40      	ldr	r2, [pc, #256]	@ (8002e20 <TIM_Base_SetConfig+0x114>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d2a:	d00f      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e24 <TIM_Base_SetConfig+0x118>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00b      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a3c      	ldr	r2, [pc, #240]	@ (8002e28 <TIM_Base_SetConfig+0x11c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d007      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3b      	ldr	r2, [pc, #236]	@ (8002e2c <TIM_Base_SetConfig+0x120>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d003      	beq.n	8002d4c <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3a      	ldr	r2, [pc, #232]	@ (8002e30 <TIM_Base_SetConfig+0x124>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d108      	bne.n	8002d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a2f      	ldr	r2, [pc, #188]	@ (8002e20 <TIM_Base_SetConfig+0x114>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01f      	beq.n	8002da6 <TIM_Base_SetConfig+0x9a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d6c:	d01b      	beq.n	8002da6 <TIM_Base_SetConfig+0x9a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a2c      	ldr	r2, [pc, #176]	@ (8002e24 <TIM_Base_SetConfig+0x118>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d017      	beq.n	8002da6 <TIM_Base_SetConfig+0x9a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2b      	ldr	r2, [pc, #172]	@ (8002e28 <TIM_Base_SetConfig+0x11c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <TIM_Base_SetConfig+0x9a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a2a      	ldr	r2, [pc, #168]	@ (8002e2c <TIM_Base_SetConfig+0x120>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00f      	beq.n	8002da6 <TIM_Base_SetConfig+0x9a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a29      	ldr	r2, [pc, #164]	@ (8002e30 <TIM_Base_SetConfig+0x124>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00b      	beq.n	8002da6 <TIM_Base_SetConfig+0x9a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a28      	ldr	r2, [pc, #160]	@ (8002e34 <TIM_Base_SetConfig+0x128>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a27      	ldr	r2, [pc, #156]	@ (8002e38 <TIM_Base_SetConfig+0x12c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a26      	ldr	r2, [pc, #152]	@ (8002e3c <TIM_Base_SetConfig+0x130>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d108      	bne.n	8002db8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a10      	ldr	r2, [pc, #64]	@ (8002e20 <TIM_Base_SetConfig+0x114>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00f      	beq.n	8002e04 <TIM_Base_SetConfig+0xf8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a12      	ldr	r2, [pc, #72]	@ (8002e30 <TIM_Base_SetConfig+0x124>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <TIM_Base_SetConfig+0xf8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a11      	ldr	r2, [pc, #68]	@ (8002e34 <TIM_Base_SetConfig+0x128>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d007      	beq.n	8002e04 <TIM_Base_SetConfig+0xf8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <TIM_Base_SetConfig+0x12c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d003      	beq.n	8002e04 <TIM_Base_SetConfig+0xf8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0f      	ldr	r2, [pc, #60]	@ (8002e3c <TIM_Base_SetConfig+0x130>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d103      	bne.n	8002e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	615a      	str	r2, [r3, #20]
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800
 8002e2c:	40000c00 	.word	0x40000c00
 8002e30:	40013400 	.word	0x40013400
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	40014800 	.word	0x40014800

08002e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <SysTick_Handler+0x1c>)
 8002e82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e84:	f001 fd26 	bl	80048d4 <xTaskGetSchedulerState>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d001      	beq.n	8002e92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e8e:	f002 fb1b 	bl	80054c8 <xPortSysTickHandler>
  }
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000e010 	.word	0xe000e010

08002e9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a07      	ldr	r2, [pc, #28]	@ (8002ec8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002eac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4a06      	ldr	r2, [pc, #24]	@ (8002ecc <vApplicationGetIdleTaskMemory+0x30>)
 8002eb2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2280      	movs	r2, #128	@ 0x80
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	2000024c 	.word	0x2000024c
 8002ecc:	200002f4 	.word	0x200002f4

08002ed0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a07      	ldr	r2, [pc, #28]	@ (8002efc <vApplicationGetTimerTaskMemory+0x2c>)
 8002ee0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4a06      	ldr	r2, [pc, #24]	@ (8002f00 <vApplicationGetTimerTaskMemory+0x30>)
 8002ee6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eee:	601a      	str	r2, [r3, #0]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	200004f4 	.word	0x200004f4
 8002f00:	2000059c 	.word	0x2000059c

08002f04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f103 0208 	add.w	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f04f 32ff 	mov.w	r2, #4294967295
 8002f1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f103 0208 	add.w	r2, r3, #8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f103 0208 	add.w	r2, r3, #8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d103      	bne.n	8002fc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e00c      	b.n	8002fe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e002      	b.n	8002fd4 <vListInsert+0x2e>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d2f6      	bcs.n	8002fce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	601a      	str	r2, [r3, #0]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6892      	ldr	r2, [r2, #8]
 800302e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6852      	ldr	r2, [r2, #4]
 8003038:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d103      	bne.n	800304c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	1e5a      	subs	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003098:	f002 f986 	bl	80053a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a4:	68f9      	ldr	r1, [r7, #12]
 80030a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	441a      	add	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c8:	3b01      	subs	r3, #1
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	441a      	add	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	22ff      	movs	r2, #255	@ 0xff
 80030dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	22ff      	movs	r2, #255	@ 0xff
 80030e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d114      	bne.n	8003118 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01a      	beq.n	800312c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3310      	adds	r3, #16
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 fa24 	bl	8004548 <xTaskRemoveFromEventList>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003106:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <xQueueGenericReset+0xd0>)
 8003108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	e009      	b.n	800312c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	3310      	adds	r3, #16
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fef1 	bl	8002f04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3324      	adds	r3, #36	@ 0x24
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff feec 	bl	8002f04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800312c:	f002 f96e 	bl	800540c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003130:	2301      	movs	r3, #1
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08e      	sub	sp, #56	@ 0x38
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003166:	bf00      	nop
 8003168:	bf00      	nop
 800316a:	e7fd      	b.n	8003168 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003184:	bf00      	nop
 8003186:	bf00      	nop
 8003188:	e7fd      	b.n	8003186 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <xQueueGenericCreateStatic+0x56>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <xQueueGenericCreateStatic+0x5a>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <xQueueGenericCreateStatic+0x5c>
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	623b      	str	r3, [r7, #32]
}
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <xQueueGenericCreateStatic+0x84>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <xQueueGenericCreateStatic+0x88>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <xQueueGenericCreateStatic+0x8a>
 80031c8:	2300      	movs	r3, #0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	61fb      	str	r3, [r7, #28]
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	e7fd      	b.n	80031e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031e6:	2350      	movs	r3, #80	@ 0x50
 80031e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b50      	cmp	r3, #80	@ 0x50
 80031ee:	d00b      	beq.n	8003208 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	61bb      	str	r3, [r7, #24]
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003208:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800320e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800321c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f840 	bl	80032b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003232:	4618      	mov	r0, r3
 8003234:	3730      	adds	r7, #48	@ 0x30
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800323a:	b580      	push	{r7, lr}
 800323c:	b08a      	sub	sp, #40	@ 0x28
 800323e:	af02      	add	r7, sp, #8
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	4613      	mov	r3, r2
 8003246:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <xQueueGenericCreate+0x2c>
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	613b      	str	r3, [r7, #16]
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	e7fd      	b.n	8003262 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	3350      	adds	r3, #80	@ 0x50
 8003274:	4618      	mov	r0, r3
 8003276:	f002 f9b9 	bl	80055ec <pvPortMalloc>
 800327a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d011      	beq.n	80032a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	3350      	adds	r3, #80	@ 0x50
 800328a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003294:	79fa      	ldrb	r2, [r7, #7]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	4613      	mov	r3, r2
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f805 	bl	80032b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032a6:	69bb      	ldr	r3, [r7, #24]
	}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3720      	adds	r7, #32
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e002      	b.n	80032d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032de:	2101      	movs	r1, #1
 80032e0:	69b8      	ldr	r0, [r7, #24]
 80032e2:	f7ff fec3 	bl	800306c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003316:	2300      	movs	r3, #0
 8003318:	2200      	movs	r2, #0
 800331a:	2100      	movs	r1, #0
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f81d 	bl	800335c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003334:	2301      	movs	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	461a      	mov	r2, r3
 8003340:	6939      	ldr	r1, [r7, #16]
 8003342:	6978      	ldr	r0, [r7, #20]
 8003344:	f7ff ff79 	bl	800323a <xQueueGenericCreate>
 8003348:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f7ff ffd3 	bl	80032f6 <prvInitialiseMutex>

		return xNewQueue;
 8003350:	68fb      	ldr	r3, [r7, #12]
	}
 8003352:	4618      	mov	r0, r3
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08e      	sub	sp, #56	@ 0x38
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800336a:	2300      	movs	r3, #0
 800336c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <xQueueGenericSend+0x34>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800338a:	bf00      	nop
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <xQueueGenericSend+0x42>
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <xQueueGenericSend+0x46>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <xQueueGenericSend+0x48>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <xQueueGenericSend+0x64>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d103      	bne.n	80033ce <xQueueGenericSend+0x72>
 80033c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <xQueueGenericSend+0x76>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueGenericSend+0x78>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <xQueueGenericSend+0x94>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	623b      	str	r3, [r7, #32]
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033f0:	f001 fa70 	bl	80048d4 <xTaskGetSchedulerState>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <xQueueGenericSend+0xa4>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <xQueueGenericSend+0xa8>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <xQueueGenericSend+0xaa>
 8003404:	2300      	movs	r3, #0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <xQueueGenericSend+0xc6>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	61fb      	str	r3, [r7, #28]
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	e7fd      	b.n	800341e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003422:	f001 ffc1 	bl	80053a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003428:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	429a      	cmp	r2, r3
 8003430:	d302      	bcc.n	8003438 <xQueueGenericSend+0xdc>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d129      	bne.n	800348c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800343e:	f000 fa0f 	bl	8003860 <prvCopyDataToQueue>
 8003442:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	2b00      	cmp	r3, #0
 800344a:	d010      	beq.n	800346e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344e:	3324      	adds	r3, #36	@ 0x24
 8003450:	4618      	mov	r0, r3
 8003452:	f001 f879 	bl	8004548 <xTaskRemoveFromEventList>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800345c:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <xQueueGenericSend+0x200>)
 800345e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	e00a      	b.n	8003484 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800346e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003474:	4b39      	ldr	r3, [pc, #228]	@ (800355c <xQueueGenericSend+0x200>)
 8003476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003484:	f001 ffc2 	bl	800540c <vPortExitCritical>
				return pdPASS;
 8003488:	2301      	movs	r3, #1
 800348a:	e063      	b.n	8003554 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003492:	f001 ffbb 	bl	800540c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003496:	2300      	movs	r3, #0
 8003498:	e05c      	b.n	8003554 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800349a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034a0:	f107 0314 	add.w	r3, r7, #20
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 f8b3 	bl	8004610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034aa:	2301      	movs	r3, #1
 80034ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034ae:	f001 ffad 	bl	800540c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034b2:	f000 fe1b 	bl	80040ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034b6:	f001 ff77 	bl	80053a8 <vPortEnterCritical>
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034c0:	b25b      	sxtb	r3, r3
 80034c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c6:	d103      	bne.n	80034d0 <xQueueGenericSend+0x174>
 80034c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034d6:	b25b      	sxtb	r3, r3
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d103      	bne.n	80034e6 <xQueueGenericSend+0x18a>
 80034de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034e6:	f001 ff91 	bl	800540c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ea:	1d3a      	adds	r2, r7, #4
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 f8a2 	bl	800463c <xTaskCheckForTimeOut>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d124      	bne.n	8003548 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003500:	f000 faa6 	bl	8003a50 <prvIsQueueFull>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d018      	beq.n	800353c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350c:	3310      	adds	r3, #16
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 ffc6 	bl	80044a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800351a:	f000 fa31 	bl	8003980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800351e:	f000 fdf3 	bl	8004108 <xTaskResumeAll>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	f47f af7c 	bne.w	8003422 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800352a:	4b0c      	ldr	r3, [pc, #48]	@ (800355c <xQueueGenericSend+0x200>)
 800352c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	e772      	b.n	8003422 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800353c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800353e:	f000 fa1f 	bl	8003980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003542:	f000 fde1 	bl	8004108 <xTaskResumeAll>
 8003546:	e76c      	b.n	8003422 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003548:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800354a:	f000 fa19 	bl	8003980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800354e:	f000 fddb 	bl	8004108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003554:	4618      	mov	r0, r3
 8003556:	3738      	adds	r7, #56	@ 0x38
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b090      	sub	sp, #64	@ 0x40
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357c:	f383 8811 	msr	BASEPRI, r3
 8003580:	f3bf 8f6f 	isb	sy
 8003584:	f3bf 8f4f 	dsb	sy
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800358a:	bf00      	nop
 800358c:	bf00      	nop
 800358e:	e7fd      	b.n	800358c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <xQueueGenericSendFromISR+0x3e>
 8003596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <xQueueGenericSendFromISR+0x42>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <xQueueGenericSendFromISR+0x44>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d103      	bne.n	80035ce <xQueueGenericSendFromISR+0x6e>
 80035c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <xQueueGenericSendFromISR+0x72>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <xQueueGenericSendFromISR+0x74>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	623b      	str	r3, [r7, #32]
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035f0:	f001 ffba 	bl	8005568 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035f4:	f3ef 8211 	mrs	r2, BASEPRI
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	61fa      	str	r2, [r7, #28]
 800360a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800360c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800360e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <xQueueGenericSendFromISR+0xc2>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d12f      	bne.n	8003682 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003628:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800362c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003630:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	68b9      	ldr	r1, [r7, #8]
 8003636:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003638:	f000 f912 	bl	8003860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800363c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d112      	bne.n	800366c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800364e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003650:	3324      	adds	r3, #36	@ 0x24
 8003652:	4618      	mov	r0, r3
 8003654:	f000 ff78 	bl	8004548 <xTaskRemoveFromEventList>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e007      	b.n	800367c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800366c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003670:	3301      	adds	r3, #1
 8003672:	b2db      	uxtb	r3, r3
 8003674:	b25a      	sxtb	r2, r3
 8003676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800367c:	2301      	movs	r3, #1
 800367e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003680:	e001      	b.n	8003686 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003682:	2300      	movs	r3, #0
 8003684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003688:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003690:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003694:	4618      	mov	r0, r3
 8003696:	3740      	adds	r7, #64	@ 0x40
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	@ 0x30
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <xQueueReceive+0x32>
	__asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	623b      	str	r3, [r7, #32]
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	e7fd      	b.n	80036ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d103      	bne.n	80036dc <xQueueReceive+0x40>
 80036d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <xQueueReceive+0x44>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <xQueueReceive+0x46>
 80036e0:	2300      	movs	r3, #0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10b      	bne.n	80036fe <xQueueReceive+0x62>
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	61fb      	str	r3, [r7, #28]
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	e7fd      	b.n	80036fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036fe:	f001 f8e9 	bl	80048d4 <xTaskGetSchedulerState>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d102      	bne.n	800370e <xQueueReceive+0x72>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <xQueueReceive+0x76>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <xQueueReceive+0x78>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <xQueueReceive+0x94>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	61bb      	str	r3, [r7, #24]
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003730:	f001 fe3a 	bl	80053a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01f      	beq.n	8003780 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003744:	f000 f8f6 	bl	8003934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	1e5a      	subs	r2, r3, #1
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00f      	beq.n	8003778 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375a:	3310      	adds	r3, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fef3 	bl	8004548 <xTaskRemoveFromEventList>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003768:	4b3c      	ldr	r3, [pc, #240]	@ (800385c <xQueueReceive+0x1c0>)
 800376a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003778:	f001 fe48 	bl	800540c <vPortExitCritical>
				return pdPASS;
 800377c:	2301      	movs	r3, #1
 800377e:	e069      	b.n	8003854 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003786:	f001 fe41 	bl	800540c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800378a:	2300      	movs	r3, #0
 800378c:	e062      	b.n	8003854 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800378e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	4618      	mov	r0, r3
 800379a:	f000 ff39 	bl	8004610 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800379e:	2301      	movs	r3, #1
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037a2:	f001 fe33 	bl	800540c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037a6:	f000 fca1 	bl	80040ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037aa:	f001 fdfd 	bl	80053a8 <vPortEnterCritical>
 80037ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037b4:	b25b      	sxtb	r3, r3
 80037b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ba:	d103      	bne.n	80037c4 <xQueueReceive+0x128>
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037ca:	b25b      	sxtb	r3, r3
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d103      	bne.n	80037da <xQueueReceive+0x13e>
 80037d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037da:	f001 fe17 	bl	800540c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037de:	1d3a      	adds	r2, r7, #4
 80037e0:	f107 0310 	add.w	r3, r7, #16
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 ff28 	bl	800463c <xTaskCheckForTimeOut>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d123      	bne.n	800383a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037f4:	f000 f916 	bl	8003a24 <prvIsQueueEmpty>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d017      	beq.n	800382e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	3324      	adds	r3, #36	@ 0x24
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f000 fe4c 	bl	80044a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800380c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800380e:	f000 f8b7 	bl	8003980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003812:	f000 fc79 	bl	8004108 <xTaskResumeAll>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d189      	bne.n	8003730 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800381c:	4b0f      	ldr	r3, [pc, #60]	@ (800385c <xQueueReceive+0x1c0>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
 800382c:	e780      	b.n	8003730 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800382e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003830:	f000 f8a6 	bl	8003980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003834:	f000 fc68 	bl	8004108 <xTaskResumeAll>
 8003838:	e77a      	b.n	8003730 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800383a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800383c:	f000 f8a0 	bl	8003980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003840:	f000 fc62 	bl	8004108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003846:	f000 f8ed 	bl	8003a24 <prvIsQueueEmpty>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f43f af6f 	beq.w	8003730 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003852:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003854:	4618      	mov	r0, r3
 8003856:	3730      	adds	r7, #48	@ 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10d      	bne.n	800389a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d14d      	bne.n	8003922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f840 	bl	8004910 <xTaskPriorityDisinherit>
 8003890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	e043      	b.n	8003922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d119      	bne.n	80038d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6858      	ldr	r0, [r3, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	461a      	mov	r2, r3
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	f002 f936 	bl	8005b1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	441a      	add	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d32b      	bcc.n	8003922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	e026      	b.n	8003922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68d8      	ldr	r0, [r3, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038dc:	461a      	mov	r2, r3
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	f002 f91c 	bl	8005b1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ec:	425b      	negs	r3, r3
 80038ee:	441a      	add	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d207      	bcs.n	8003910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	425b      	negs	r3, r3
 800390a:	441a      	add	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d105      	bne.n	8003922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	3b01      	subs	r3, #1
 8003920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800392a:	697b      	ldr	r3, [r7, #20]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d018      	beq.n	8003978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	441a      	add	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	d303      	bcc.n	8003968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68d9      	ldr	r1, [r3, #12]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	461a      	mov	r2, r3
 8003972:	6838      	ldr	r0, [r7, #0]
 8003974:	f002 f8d2 	bl	8005b1c <memcpy>
	}
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003988:	f001 fd0e 	bl	80053a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003994:	e011      	b.n	80039ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	2b00      	cmp	r3, #0
 800399c:	d012      	beq.n	80039c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3324      	adds	r3, #36	@ 0x24
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fdd0 	bl	8004548 <xTaskRemoveFromEventList>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80039ae:	f000 fea9 	bl	8004704 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	dce9      	bgt.n	8003996 <prvUnlockQueue+0x16>
 80039c2:	e000      	b.n	80039c6 <prvUnlockQueue+0x46>
					break;
 80039c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	22ff      	movs	r2, #255	@ 0xff
 80039ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80039ce:	f001 fd1d 	bl	800540c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039d2:	f001 fce9 	bl	80053a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039de:	e011      	b.n	8003a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d012      	beq.n	8003a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3310      	adds	r3, #16
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fdab 	bl	8004548 <xTaskRemoveFromEventList>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039f8:	f000 fe84 	bl	8004704 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039fc:	7bbb      	ldrb	r3, [r7, #14]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	dce9      	bgt.n	80039e0 <prvUnlockQueue+0x60>
 8003a0c:	e000      	b.n	8003a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	22ff      	movs	r2, #255	@ 0xff
 8003a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a18:	f001 fcf8 	bl	800540c <vPortExitCritical>
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a2c:	f001 fcbc 	bl	80053a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	e001      	b.n	8003a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a42:	f001 fce3 	bl	800540c <vPortExitCritical>

	return xReturn;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a58:	f001 fca6 	bl	80053a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d102      	bne.n	8003a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e001      	b.n	8003a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a72:	f001 fccb 	bl	800540c <vPortExitCritical>

	return xReturn;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e014      	b.n	8003aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a90:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad0 <vQueueAddToRegistry+0x50>)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10b      	bne.n	8003ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a9c:	490c      	ldr	r1, [pc, #48]	@ (8003ad0 <vQueueAddToRegistry+0x50>)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <vQueueAddToRegistry+0x50>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ab2:	e006      	b.n	8003ac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b07      	cmp	r3, #7
 8003abe:	d9e7      	bls.n	8003a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	2000099c 	.word	0x2000099c

08003ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ae4:	f001 fc60 	bl	80053a8 <vPortEnterCritical>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003aee:	b25b      	sxtb	r3, r3
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d103      	bne.n	8003afe <vQueueWaitForMessageRestricted+0x2a>
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b04:	b25b      	sxtb	r3, r3
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d103      	bne.n	8003b14 <vQueueWaitForMessageRestricted+0x40>
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b14:	f001 fc7a 	bl	800540c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3324      	adds	r3, #36	@ 0x24
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fce1 	bl	80044f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff26 	bl	8003980 <prvUnlockQueue>
	}
 8003b34:	bf00      	nop
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08e      	sub	sp, #56	@ 0x38
 8003b40:	af04      	add	r7, sp, #16
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10b      	bne.n	8003b68 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	623b      	str	r3, [r7, #32]
}
 8003b62:	bf00      	nop
 8003b64:	bf00      	nop
 8003b66:	e7fd      	b.n	8003b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10b      	bne.n	8003b86 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	61fb      	str	r3, [r7, #28]
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	e7fd      	b.n	8003b82 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b86:	23a8      	movs	r3, #168	@ 0xa8
 8003b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2ba8      	cmp	r3, #168	@ 0xa8
 8003b8e:	d00b      	beq.n	8003ba8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	61bb      	str	r3, [r7, #24]
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ba8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01e      	beq.n	8003bee <xTaskCreateStatic+0xb2>
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d01b      	beq.n	8003bee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bbe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bc8:	2300      	movs	r3, #0
 8003bca:	9303      	str	r3, [sp, #12]
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	9302      	str	r3, [sp, #8]
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f851 	bl	8003c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003be6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003be8:	f000 f8f6 	bl	8003dd8 <prvAddNewTaskToReadyList>
 8003bec:	e001      	b.n	8003bf2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bf2:	697b      	ldr	r3, [r7, #20]
	}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3728      	adds	r7, #40	@ 0x28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	@ 0x30
 8003c00:	af04      	add	r7, sp, #16
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 fceb 	bl	80055ec <pvPortMalloc>
 8003c16:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00e      	beq.n	8003c3c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c1e:	20a8      	movs	r0, #168	@ 0xa8
 8003c20:	f001 fce4 	bl	80055ec <pvPortMalloc>
 8003c24:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c32:	e005      	b.n	8003c40 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c34:	6978      	ldr	r0, [r7, #20]
 8003c36:	f001 fda7 	bl	8005788 <vPortFree>
 8003c3a:	e001      	b.n	8003c40 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d017      	beq.n	8003c76 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c4e:	88fa      	ldrh	r2, [r7, #6]
 8003c50:	2300      	movs	r3, #0
 8003c52:	9303      	str	r3, [sp, #12]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	9302      	str	r3, [sp, #8]
 8003c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f80f 	bl	8003c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c6a:	69f8      	ldr	r0, [r7, #28]
 8003c6c:	f000 f8b4 	bl	8003dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c70:	2301      	movs	r3, #1
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	e002      	b.n	8003c7c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c7c:	69bb      	ldr	r3, [r7, #24]
	}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3720      	adds	r7, #32
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	21a5      	movs	r1, #165	@ 0xa5
 8003ca2:	f001 feb1 	bl	8005a08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f023 0307 	bic.w	r3, r3, #7
 8003cbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f003 0307 	and.w	r3, r3, #7
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00b      	beq.n	8003ce2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	617b      	str	r3, [r7, #20]
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	e7fd      	b.n	8003cde <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01f      	beq.n	8003d28 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	e012      	b.n	8003d14 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	7819      	ldrb	r1, [r3, #0]
 8003cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3334      	adds	r3, #52	@ 0x34
 8003cfe:	460a      	mov	r2, r1
 8003d00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	d9e9      	bls.n	8003cee <prvInitialiseNewTask+0x66>
 8003d1a:	e000      	b.n	8003d1e <prvInitialiseNewTask+0x96>
			{
				break;
 8003d1c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d26:	e003      	b.n	8003d30 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d32:	2b37      	cmp	r3, #55	@ 0x37
 8003d34:	d901      	bls.n	8003d3a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d36:	2337      	movs	r3, #55	@ 0x37
 8003d38:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d44:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d48:	2200      	movs	r2, #0
 8003d4a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff f8f7 	bl	8002f44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d58:	3318      	adds	r3, #24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f8f2 	bl	8002f44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d68:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d74:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	3354      	adds	r3, #84	@ 0x54
 8003d8a:	224c      	movs	r2, #76	@ 0x4c
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f001 fe3a 	bl	8005a08 <memset>
 8003d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d96:	4a0d      	ldr	r2, [pc, #52]	@ (8003dcc <prvInitialiseNewTask+0x144>)
 8003d98:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd0 <prvInitialiseNewTask+0x148>)
 8003d9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da2:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd4 <prvInitialiseNewTask+0x14c>)
 8003da4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	69b8      	ldr	r0, [r7, #24]
 8003dac:	f001 f9ce 	bl	800514c <pxPortInitialiseStack>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dc2:	bf00      	nop
 8003dc4:	3720      	adds	r7, #32
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20001be8 	.word	0x20001be8
 8003dd0:	20001c50 	.word	0x20001c50
 8003dd4:	20001cb8 	.word	0x20001cb8

08003dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003de0:	f001 fae2 	bl	80053a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003de4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	4a2c      	ldr	r2, [pc, #176]	@ (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dee:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003df6:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dfc:	4b27      	ldr	r3, [pc, #156]	@ (8003e9c <prvAddNewTaskToReadyList+0xc4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d110      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e04:	f000 fca2 	bl	800474c <prvInitialiseTaskLists>
 8003e08:	e00d      	b.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <prvAddNewTaskToReadyList+0xcc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d109      	bne.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e12:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d802      	bhi.n	8003e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e26:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <prvAddNewTaskToReadyList+0xd0>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <prvAddNewTaskToReadyList+0xd4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d903      	bls.n	8003e4c <prvAddNewTaskToReadyList+0x74>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <prvAddNewTaskToReadyList+0xd4>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <prvAddNewTaskToReadyList+0xd8>)
 8003e5a:	441a      	add	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f7ff f87b 	bl	8002f5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e68:	f001 fad0 	bl	800540c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <prvAddNewTaskToReadyList+0xcc>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <prvAddNewTaskToReadyList+0xc8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d207      	bcs.n	8003e92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e82:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <prvAddNewTaskToReadyList+0xdc>)
 8003e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000eb0 	.word	0x20000eb0
 8003ea0:	200009dc 	.word	0x200009dc
 8003ea4:	20000ebc 	.word	0x20000ebc
 8003ea8:	20000ecc 	.word	0x20000ecc
 8003eac:	20000eb8 	.word	0x20000eb8
 8003eb0:	200009e0 	.word	0x200009e0
 8003eb4:	e000ed04 	.word	0xe000ed04

08003eb8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003ec0:	f001 fa72 	bl	80053a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d102      	bne.n	8003ed0 <vTaskDelete+0x18>
 8003eca:	4b2d      	ldr	r3, [pc, #180]	@ (8003f80 <vTaskDelete+0xc8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	e000      	b.n	8003ed2 <vTaskDelete+0x1a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff f89d 	bl	8003018 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3318      	adds	r3, #24
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff f894 	bl	8003018 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003ef0:	4b24      	ldr	r3, [pc, #144]	@ (8003f84 <vTaskDelete+0xcc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	4a23      	ldr	r2, [pc, #140]	@ (8003f84 <vTaskDelete+0xcc>)
 8003ef8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003efa:	4b21      	ldr	r3, [pc, #132]	@ (8003f80 <vTaskDelete+0xc8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d10b      	bne.n	8003f1c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	481f      	ldr	r0, [pc, #124]	@ (8003f88 <vTaskDelete+0xd0>)
 8003f0c:	f7ff f827 	bl	8002f5e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003f10:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <vTaskDelete+0xd4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	4a1d      	ldr	r2, [pc, #116]	@ (8003f8c <vTaskDelete+0xd4>)
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	e009      	b.n	8003f30 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f90 <vTaskDelete+0xd8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	4a1b      	ldr	r2, [pc, #108]	@ (8003f90 <vTaskDelete+0xd8>)
 8003f24:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fc7e 	bl	8004828 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003f2c:	f000 fcb2 	bl	8004894 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003f30:	f001 fa6c 	bl	800540c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003f34:	4b17      	ldr	r3, [pc, #92]	@ (8003f94 <vTaskDelete+0xdc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01c      	beq.n	8003f76 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8003f3c:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <vTaskDelete+0xc8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d117      	bne.n	8003f76 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003f46:	4b14      	ldr	r3, [pc, #80]	@ (8003f98 <vTaskDelete+0xe0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <vTaskDelete+0xae>
	__asm volatile
 8003f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	60bb      	str	r3, [r7, #8]
}
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	e7fd      	b.n	8003f62 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <vTaskDelete+0xe4>)
 8003f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f76:	bf00      	nop
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	200009dc 	.word	0x200009dc
 8003f84:	20000ecc 	.word	0x20000ecc
 8003f88:	20000e84 	.word	0x20000e84
 8003f8c:	20000e98 	.word	0x20000e98
 8003f90:	20000eb0 	.word	0x20000eb0
 8003f94:	20000ebc 	.word	0x20000ebc
 8003f98:	20000ed8 	.word	0x20000ed8
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d018      	beq.n	8003fe4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fb2:	4b14      	ldr	r3, [pc, #80]	@ (8004004 <vTaskDelay+0x64>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <vTaskDelay+0x32>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	60bb      	str	r3, [r7, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	e7fd      	b.n	8003fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fd2:	f000 f88b 	bl	80040ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fd09 	bl	80049f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fde:	f000 f893 	bl	8004108 <xTaskResumeAll>
 8003fe2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d107      	bne.n	8003ffa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003fea:	4b07      	ldr	r3, [pc, #28]	@ (8004008 <vTaskDelay+0x68>)
 8003fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000ed8 	.word	0x20000ed8
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08a      	sub	sp, #40	@ 0x28
 8004010:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800401a:	463a      	mov	r2, r7
 800401c:	1d39      	adds	r1, r7, #4
 800401e:	f107 0308 	add.w	r3, r7, #8
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe ff3a 	bl	8002e9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	9202      	str	r2, [sp, #8]
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	2300      	movs	r3, #0
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	2300      	movs	r3, #0
 8004038:	460a      	mov	r2, r1
 800403a:	4924      	ldr	r1, [pc, #144]	@ (80040cc <vTaskStartScheduler+0xc0>)
 800403c:	4824      	ldr	r0, [pc, #144]	@ (80040d0 <vTaskStartScheduler+0xc4>)
 800403e:	f7ff fd7d 	bl	8003b3c <xTaskCreateStatic>
 8004042:	4603      	mov	r3, r0
 8004044:	4a23      	ldr	r2, [pc, #140]	@ (80040d4 <vTaskStartScheduler+0xc8>)
 8004046:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004048:	4b22      	ldr	r3, [pc, #136]	@ (80040d4 <vTaskStartScheduler+0xc8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004050:	2301      	movs	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	e001      	b.n	800405a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d102      	bne.n	8004066 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004060:	f000 fd1a 	bl	8004a98 <xTimerCreateTimerTask>
 8004064:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d11b      	bne.n	80040a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	613b      	str	r3, [r7, #16]
}
 800407e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004080:	4b15      	ldr	r3, [pc, #84]	@ (80040d8 <vTaskStartScheduler+0xcc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3354      	adds	r3, #84	@ 0x54
 8004086:	4a15      	ldr	r2, [pc, #84]	@ (80040dc <vTaskStartScheduler+0xd0>)
 8004088:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <vTaskStartScheduler+0xd4>)
 800408c:	f04f 32ff 	mov.w	r2, #4294967295
 8004090:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004092:	4b14      	ldr	r3, [pc, #80]	@ (80040e4 <vTaskStartScheduler+0xd8>)
 8004094:	2201      	movs	r2, #1
 8004096:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004098:	4b13      	ldr	r3, [pc, #76]	@ (80040e8 <vTaskStartScheduler+0xdc>)
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800409e:	f001 f8df 	bl	8005260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040a2:	e00f      	b.n	80040c4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d10b      	bne.n	80040c4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	60fb      	str	r3, [r7, #12]
}
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <vTaskStartScheduler+0xb4>
}
 80040c4:	bf00      	nop
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	08006490 	.word	0x08006490
 80040d0:	0800471d 	.word	0x0800471d
 80040d4:	20000ed4 	.word	0x20000ed4
 80040d8:	200009dc 	.word	0x200009dc
 80040dc:	20000010 	.word	0x20000010
 80040e0:	20000ed0 	.word	0x20000ed0
 80040e4:	20000ebc 	.word	0x20000ebc
 80040e8:	20000eb4 	.word	0x20000eb4

080040ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040f0:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <vTaskSuspendAll+0x18>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	4a03      	ldr	r2, [pc, #12]	@ (8004104 <vTaskSuspendAll+0x18>)
 80040f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	20000ed8 	.word	0x20000ed8

08004108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004116:	4b42      	ldr	r3, [pc, #264]	@ (8004220 <xTaskResumeAll+0x118>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10b      	bne.n	8004136 <xTaskResumeAll+0x2e>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	603b      	str	r3, [r7, #0]
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	e7fd      	b.n	8004132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004136:	f001 f937 	bl	80053a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800413a:	4b39      	ldr	r3, [pc, #228]	@ (8004220 <xTaskResumeAll+0x118>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3b01      	subs	r3, #1
 8004140:	4a37      	ldr	r2, [pc, #220]	@ (8004220 <xTaskResumeAll+0x118>)
 8004142:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004144:	4b36      	ldr	r3, [pc, #216]	@ (8004220 <xTaskResumeAll+0x118>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d162      	bne.n	8004212 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800414c:	4b35      	ldr	r3, [pc, #212]	@ (8004224 <xTaskResumeAll+0x11c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d05e      	beq.n	8004212 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004154:	e02f      	b.n	80041b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004156:	4b34      	ldr	r3, [pc, #208]	@ (8004228 <xTaskResumeAll+0x120>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3318      	adds	r3, #24
 8004162:	4618      	mov	r0, r3
 8004164:	f7fe ff58 	bl	8003018 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3304      	adds	r3, #4
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe ff53 	bl	8003018 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004176:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <xTaskResumeAll+0x124>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d903      	bls.n	8004186 <xTaskResumeAll+0x7e>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	4a2a      	ldr	r2, [pc, #168]	@ (800422c <xTaskResumeAll+0x124>)
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4a27      	ldr	r2, [pc, #156]	@ (8004230 <xTaskResumeAll+0x128>)
 8004194:	441a      	add	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3304      	adds	r3, #4
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f7fe fede 	bl	8002f5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a6:	4b23      	ldr	r3, [pc, #140]	@ (8004234 <xTaskResumeAll+0x12c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d302      	bcc.n	80041b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80041b0:	4b21      	ldr	r3, [pc, #132]	@ (8004238 <xTaskResumeAll+0x130>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004228 <xTaskResumeAll+0x120>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1cb      	bne.n	8004156 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041c4:	f000 fb66 	bl	8004894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80041c8:	4b1c      	ldr	r3, [pc, #112]	@ (800423c <xTaskResumeAll+0x134>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041d4:	f000 f846 	bl	8004264 <xTaskIncrementTick>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80041de:	4b16      	ldr	r3, [pc, #88]	@ (8004238 <xTaskResumeAll+0x130>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f1      	bne.n	80041d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80041f0:	4b12      	ldr	r3, [pc, #72]	@ (800423c <xTaskResumeAll+0x134>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041f6:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <xTaskResumeAll+0x130>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d009      	beq.n	8004212 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041fe:	2301      	movs	r3, #1
 8004200:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004202:	4b0f      	ldr	r3, [pc, #60]	@ (8004240 <xTaskResumeAll+0x138>)
 8004204:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004212:	f001 f8fb 	bl	800540c <vPortExitCritical>

	return xAlreadyYielded;
 8004216:	68bb      	ldr	r3, [r7, #8]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000ed8 	.word	0x20000ed8
 8004224:	20000eb0 	.word	0x20000eb0
 8004228:	20000e70 	.word	0x20000e70
 800422c:	20000eb8 	.word	0x20000eb8
 8004230:	200009e0 	.word	0x200009e0
 8004234:	200009dc 	.word	0x200009dc
 8004238:	20000ec4 	.word	0x20000ec4
 800423c:	20000ec0 	.word	0x20000ec0
 8004240:	e000ed04 	.word	0xe000ed04

08004244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800424a:	4b05      	ldr	r3, [pc, #20]	@ (8004260 <xTaskGetTickCount+0x1c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004250:	687b      	ldr	r3, [r7, #4]
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000eb4 	.word	0x20000eb4

08004264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800426e:	4b4f      	ldr	r3, [pc, #316]	@ (80043ac <xTaskIncrementTick+0x148>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f040 8090 	bne.w	8004398 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004278:	4b4d      	ldr	r3, [pc, #308]	@ (80043b0 <xTaskIncrementTick+0x14c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3301      	adds	r3, #1
 800427e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004280:	4a4b      	ldr	r2, [pc, #300]	@ (80043b0 <xTaskIncrementTick+0x14c>)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d121      	bne.n	80042d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800428c:	4b49      	ldr	r3, [pc, #292]	@ (80043b4 <xTaskIncrementTick+0x150>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <xTaskIncrementTick+0x4a>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	603b      	str	r3, [r7, #0]
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	e7fd      	b.n	80042aa <xTaskIncrementTick+0x46>
 80042ae:	4b41      	ldr	r3, [pc, #260]	@ (80043b4 <xTaskIncrementTick+0x150>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	4b40      	ldr	r3, [pc, #256]	@ (80043b8 <xTaskIncrementTick+0x154>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a3e      	ldr	r2, [pc, #248]	@ (80043b4 <xTaskIncrementTick+0x150>)
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	4a3e      	ldr	r2, [pc, #248]	@ (80043b8 <xTaskIncrementTick+0x154>)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b3e      	ldr	r3, [pc, #248]	@ (80043bc <xTaskIncrementTick+0x158>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3301      	adds	r3, #1
 80042c8:	4a3c      	ldr	r2, [pc, #240]	@ (80043bc <xTaskIncrementTick+0x158>)
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	f000 fae2 	bl	8004894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042d0:	4b3b      	ldr	r3, [pc, #236]	@ (80043c0 <xTaskIncrementTick+0x15c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d349      	bcc.n	800436e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042da:	4b36      	ldr	r3, [pc, #216]	@ (80043b4 <xTaskIncrementTick+0x150>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d104      	bne.n	80042ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e4:	4b36      	ldr	r3, [pc, #216]	@ (80043c0 <xTaskIncrementTick+0x15c>)
 80042e6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ea:	601a      	str	r2, [r3, #0]
					break;
 80042ec:	e03f      	b.n	800436e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ee:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <xTaskIncrementTick+0x150>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d203      	bcs.n	800430e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004306:	4a2e      	ldr	r2, [pc, #184]	@ (80043c0 <xTaskIncrementTick+0x15c>)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800430c:	e02f      	b.n	800436e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	3304      	adds	r3, #4
 8004312:	4618      	mov	r0, r3
 8004314:	f7fe fe80 	bl	8003018 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431c:	2b00      	cmp	r3, #0
 800431e:	d004      	beq.n	800432a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3318      	adds	r3, #24
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe fe77 	bl	8003018 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432e:	4b25      	ldr	r3, [pc, #148]	@ (80043c4 <xTaskIncrementTick+0x160>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d903      	bls.n	800433e <xTaskIncrementTick+0xda>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433a:	4a22      	ldr	r2, [pc, #136]	@ (80043c4 <xTaskIncrementTick+0x160>)
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4a1f      	ldr	r2, [pc, #124]	@ (80043c8 <xTaskIncrementTick+0x164>)
 800434c:	441a      	add	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	3304      	adds	r3, #4
 8004352:	4619      	mov	r1, r3
 8004354:	4610      	mov	r0, r2
 8004356:	f7fe fe02 	bl	8002f5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800435e:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <xTaskIncrementTick+0x168>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	429a      	cmp	r2, r3
 8004366:	d3b8      	bcc.n	80042da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004368:	2301      	movs	r3, #1
 800436a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800436c:	e7b5      	b.n	80042da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800436e:	4b17      	ldr	r3, [pc, #92]	@ (80043cc <xTaskIncrementTick+0x168>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004374:	4914      	ldr	r1, [pc, #80]	@ (80043c8 <xTaskIncrementTick+0x164>)
 8004376:	4613      	mov	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d901      	bls.n	800438a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800438a:	4b11      	ldr	r3, [pc, #68]	@ (80043d0 <xTaskIncrementTick+0x16c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004392:	2301      	movs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e004      	b.n	80043a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004398:	4b0e      	ldr	r3, [pc, #56]	@ (80043d4 <xTaskIncrementTick+0x170>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	4a0d      	ldr	r2, [pc, #52]	@ (80043d4 <xTaskIncrementTick+0x170>)
 80043a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80043a2:	697b      	ldr	r3, [r7, #20]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	20000ed8 	.word	0x20000ed8
 80043b0:	20000eb4 	.word	0x20000eb4
 80043b4:	20000e68 	.word	0x20000e68
 80043b8:	20000e6c 	.word	0x20000e6c
 80043bc:	20000ec8 	.word	0x20000ec8
 80043c0:	20000ed0 	.word	0x20000ed0
 80043c4:	20000eb8 	.word	0x20000eb8
 80043c8:	200009e0 	.word	0x200009e0
 80043cc:	200009dc 	.word	0x200009dc
 80043d0:	20000ec4 	.word	0x20000ec4
 80043d4:	20000ec0 	.word	0x20000ec0

080043d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043de:	4b2b      	ldr	r3, [pc, #172]	@ (800448c <vTaskSwitchContext+0xb4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004490 <vTaskSwitchContext+0xb8>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043ec:	e047      	b.n	800447e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80043ee:	4b28      	ldr	r3, [pc, #160]	@ (8004490 <vTaskSwitchContext+0xb8>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f4:	4b27      	ldr	r3, [pc, #156]	@ (8004494 <vTaskSwitchContext+0xbc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	e011      	b.n	8004420 <vTaskSwitchContext+0x48>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10b      	bne.n	800441a <vTaskSwitchContext+0x42>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	607b      	str	r3, [r7, #4]
}
 8004414:	bf00      	nop
 8004416:	bf00      	nop
 8004418:	e7fd      	b.n	8004416 <vTaskSwitchContext+0x3e>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3b01      	subs	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	491d      	ldr	r1, [pc, #116]	@ (8004498 <vTaskSwitchContext+0xc0>)
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0e3      	beq.n	80043fc <vTaskSwitchContext+0x24>
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4a16      	ldr	r2, [pc, #88]	@ (8004498 <vTaskSwitchContext+0xc0>)
 8004440:	4413      	add	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	3308      	adds	r3, #8
 8004456:	429a      	cmp	r2, r3
 8004458:	d104      	bne.n	8004464 <vTaskSwitchContext+0x8c>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	4a0c      	ldr	r2, [pc, #48]	@ (800449c <vTaskSwitchContext+0xc4>)
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4a09      	ldr	r2, [pc, #36]	@ (8004494 <vTaskSwitchContext+0xbc>)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004474:	4b09      	ldr	r3, [pc, #36]	@ (800449c <vTaskSwitchContext+0xc4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3354      	adds	r3, #84	@ 0x54
 800447a:	4a09      	ldr	r2, [pc, #36]	@ (80044a0 <vTaskSwitchContext+0xc8>)
 800447c:	6013      	str	r3, [r2, #0]
}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000ed8 	.word	0x20000ed8
 8004490:	20000ec4 	.word	0x20000ec4
 8004494:	20000eb8 	.word	0x20000eb8
 8004498:	200009e0 	.word	0x200009e0
 800449c:	200009dc 	.word	0x200009dc
 80044a0:	20000010 	.word	0x20000010

080044a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	60fb      	str	r3, [r7, #12]
}
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	e7fd      	b.n	80044c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044cc:	4b07      	ldr	r3, [pc, #28]	@ (80044ec <vTaskPlaceOnEventList+0x48>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3318      	adds	r3, #24
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fe fd66 	bl	8002fa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044da:	2101      	movs	r1, #1
 80044dc:	6838      	ldr	r0, [r7, #0]
 80044de:	f000 fa87 	bl	80049f0 <prvAddCurrentTaskToDelayedList>
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	200009dc 	.word	0x200009dc

080044f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	617b      	str	r3, [r7, #20]
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800451a:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <vTaskPlaceOnEventListRestricted+0x54>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3318      	adds	r3, #24
 8004520:	4619      	mov	r1, r3
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7fe fd1b 	bl	8002f5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	68b8      	ldr	r0, [r7, #8]
 8004538:	f000 fa5a 	bl	80049f0 <prvAddCurrentTaskToDelayedList>
	}
 800453c:	bf00      	nop
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200009dc 	.word	0x200009dc

08004548 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	60fb      	str	r3, [r7, #12]
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	3318      	adds	r3, #24
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe fd4c 	bl	8003018 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004580:	4b1d      	ldr	r3, [pc, #116]	@ (80045f8 <xTaskRemoveFromEventList+0xb0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d11d      	bne.n	80045c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	3304      	adds	r3, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fd43 	bl	8003018 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004596:	4b19      	ldr	r3, [pc, #100]	@ (80045fc <xTaskRemoveFromEventList+0xb4>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d903      	bls.n	80045a6 <xTaskRemoveFromEventList+0x5e>
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	4a16      	ldr	r2, [pc, #88]	@ (80045fc <xTaskRemoveFromEventList+0xb4>)
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4a13      	ldr	r2, [pc, #76]	@ (8004600 <xTaskRemoveFromEventList+0xb8>)
 80045b4:	441a      	add	r2, r3
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	4610      	mov	r0, r2
 80045be:	f7fe fcce 	bl	8002f5e <vListInsertEnd>
 80045c2:	e005      	b.n	80045d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	3318      	adds	r3, #24
 80045c8:	4619      	mov	r1, r3
 80045ca:	480e      	ldr	r0, [pc, #56]	@ (8004604 <xTaskRemoveFromEventList+0xbc>)
 80045cc:	f7fe fcc7 	bl	8002f5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004608 <xTaskRemoveFromEventList+0xc0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045da:	429a      	cmp	r2, r3
 80045dc:	d905      	bls.n	80045ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045de:	2301      	movs	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045e2:	4b0a      	ldr	r3, [pc, #40]	@ (800460c <xTaskRemoveFromEventList+0xc4>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e001      	b.n	80045ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80045ee:	697b      	ldr	r3, [r7, #20]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000ed8 	.word	0x20000ed8
 80045fc:	20000eb8 	.word	0x20000eb8
 8004600:	200009e0 	.word	0x200009e0
 8004604:	20000e70 	.word	0x20000e70
 8004608:	200009dc 	.word	0x200009dc
 800460c:	20000ec4 	.word	0x20000ec4

08004610 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004618:	4b06      	ldr	r3, [pc, #24]	@ (8004634 <vTaskInternalSetTimeOutState+0x24>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004620:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <vTaskInternalSetTimeOutState+0x28>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	605a      	str	r2, [r3, #4]
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	20000ec8 	.word	0x20000ec8
 8004638:	20000eb4 	.word	0x20000eb4

0800463c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	613b      	str	r3, [r7, #16]
}
 800465e:	bf00      	nop
 8004660:	bf00      	nop
 8004662:	e7fd      	b.n	8004660 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	60fb      	str	r3, [r7, #12]
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	e7fd      	b.n	800467e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004682:	f000 fe91 	bl	80053a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004686:	4b1d      	ldr	r3, [pc, #116]	@ (80046fc <xTaskCheckForTimeOut+0xc0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d102      	bne.n	80046a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]
 80046a4:	e023      	b.n	80046ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	4b15      	ldr	r3, [pc, #84]	@ (8004700 <xTaskCheckForTimeOut+0xc4>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d007      	beq.n	80046c2 <xTaskCheckForTimeOut+0x86>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d302      	bcc.n	80046c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	e015      	b.n	80046ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d20b      	bcs.n	80046e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ff99 	bl	8004610 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e004      	b.n	80046ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046ee:	f000 fe8d 	bl	800540c <vPortExitCritical>

	return xReturn;
 80046f2:	69fb      	ldr	r3, [r7, #28]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3720      	adds	r7, #32
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20000eb4 	.word	0x20000eb4
 8004700:	20000ec8 	.word	0x20000ec8

08004704 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004708:	4b03      	ldr	r3, [pc, #12]	@ (8004718 <vTaskMissedYield+0x14>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	20000ec4 	.word	0x20000ec4

0800471c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004724:	f000 f852 	bl	80047cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004728:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <prvIdleTask+0x28>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d9f9      	bls.n	8004724 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <prvIdleTask+0x2c>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004740:	e7f0      	b.n	8004724 <prvIdleTask+0x8>
 8004742:	bf00      	nop
 8004744:	200009e0 	.word	0x200009e0
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	e00c      	b.n	8004772 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4a12      	ldr	r2, [pc, #72]	@ (80047ac <prvInitialiseTaskLists+0x60>)
 8004764:	4413      	add	r3, r2
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fbcc 	bl	8002f04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3301      	adds	r3, #1
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b37      	cmp	r3, #55	@ 0x37
 8004776:	d9ef      	bls.n	8004758 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004778:	480d      	ldr	r0, [pc, #52]	@ (80047b0 <prvInitialiseTaskLists+0x64>)
 800477a:	f7fe fbc3 	bl	8002f04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800477e:	480d      	ldr	r0, [pc, #52]	@ (80047b4 <prvInitialiseTaskLists+0x68>)
 8004780:	f7fe fbc0 	bl	8002f04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004784:	480c      	ldr	r0, [pc, #48]	@ (80047b8 <prvInitialiseTaskLists+0x6c>)
 8004786:	f7fe fbbd 	bl	8002f04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800478a:	480c      	ldr	r0, [pc, #48]	@ (80047bc <prvInitialiseTaskLists+0x70>)
 800478c:	f7fe fbba 	bl	8002f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004790:	480b      	ldr	r0, [pc, #44]	@ (80047c0 <prvInitialiseTaskLists+0x74>)
 8004792:	f7fe fbb7 	bl	8002f04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004796:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <prvInitialiseTaskLists+0x78>)
 8004798:	4a05      	ldr	r2, [pc, #20]	@ (80047b0 <prvInitialiseTaskLists+0x64>)
 800479a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800479c:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <prvInitialiseTaskLists+0x7c>)
 800479e:	4a05      	ldr	r2, [pc, #20]	@ (80047b4 <prvInitialiseTaskLists+0x68>)
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200009e0 	.word	0x200009e0
 80047b0:	20000e40 	.word	0x20000e40
 80047b4:	20000e54 	.word	0x20000e54
 80047b8:	20000e70 	.word	0x20000e70
 80047bc:	20000e84 	.word	0x20000e84
 80047c0:	20000e9c 	.word	0x20000e9c
 80047c4:	20000e68 	.word	0x20000e68
 80047c8:	20000e6c 	.word	0x20000e6c

080047cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047d2:	e019      	b.n	8004808 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047d4:	f000 fde8 	bl	80053a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047d8:	4b10      	ldr	r3, [pc, #64]	@ (800481c <prvCheckTasksWaitingTermination+0x50>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7fe fc17 	bl	8003018 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <prvCheckTasksWaitingTermination+0x54>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004820 <prvCheckTasksWaitingTermination+0x54>)
 80047f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <prvCheckTasksWaitingTermination+0x58>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004824 <prvCheckTasksWaitingTermination+0x58>)
 80047fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047fe:	f000 fe05 	bl	800540c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f810 	bl	8004828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <prvCheckTasksWaitingTermination+0x58>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e1      	bne.n	80047d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000e84 	.word	0x20000e84
 8004820:	20000eb0 	.word	0x20000eb0
 8004824:	20000e98 	.word	0x20000e98

08004828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3354      	adds	r3, #84	@ 0x54
 8004834:	4618      	mov	r0, r3
 8004836:	f001 f8ef 	bl	8005a18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004840:	2b00      	cmp	r3, #0
 8004842:	d108      	bne.n	8004856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	4618      	mov	r0, r3
 800484a:	f000 ff9d 	bl	8005788 <vPortFree>
				vPortFree( pxTCB );
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 ff9a 	bl	8005788 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004854:	e019      	b.n	800488a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800485c:	2b01      	cmp	r3, #1
 800485e:	d103      	bne.n	8004868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 ff91 	bl	8005788 <vPortFree>
	}
 8004866:	e010      	b.n	800488a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800486e:	2b02      	cmp	r3, #2
 8004870:	d00b      	beq.n	800488a <prvDeleteTCB+0x62>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	60fb      	str	r3, [r7, #12]
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop
 8004888:	e7fd      	b.n	8004886 <prvDeleteTCB+0x5e>
	}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800489a:	4b0c      	ldr	r3, [pc, #48]	@ (80048cc <prvResetNextTaskUnblockTime+0x38>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048a4:	4b0a      	ldr	r3, [pc, #40]	@ (80048d0 <prvResetNextTaskUnblockTime+0x3c>)
 80048a6:	f04f 32ff 	mov.w	r2, #4294967295
 80048aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048ac:	e008      	b.n	80048c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ae:	4b07      	ldr	r3, [pc, #28]	@ (80048cc <prvResetNextTaskUnblockTime+0x38>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4a04      	ldr	r2, [pc, #16]	@ (80048d0 <prvResetNextTaskUnblockTime+0x3c>)
 80048be:	6013      	str	r3, [r2, #0]
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr
 80048cc:	20000e68 	.word	0x20000e68
 80048d0:	20000ed0 	.word	0x20000ed0

080048d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048da:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <xTaskGetSchedulerState+0x34>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d102      	bne.n	80048e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048e2:	2301      	movs	r3, #1
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	e008      	b.n	80048fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e8:	4b08      	ldr	r3, [pc, #32]	@ (800490c <xTaskGetSchedulerState+0x38>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048f0:	2302      	movs	r3, #2
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	e001      	b.n	80048fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048fa:	687b      	ldr	r3, [r7, #4]
	}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	20000ebc 	.word	0x20000ebc
 800490c:	20000ed8 	.word	0x20000ed8

08004910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d058      	beq.n	80049d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004926:	4b2f      	ldr	r3, [pc, #188]	@ (80049e4 <xTaskPriorityDisinherit+0xd4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	429a      	cmp	r2, r3
 800492e:	d00b      	beq.n	8004948 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	60fb      	str	r3, [r7, #12]
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	e7fd      	b.n	8004944 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10b      	bne.n	8004968 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004954:	f383 8811 	msr	BASEPRI, r3
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	60bb      	str	r3, [r7, #8]
}
 8004962:	bf00      	nop
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800496c:	1e5a      	subs	r2, r3, #1
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497a:	429a      	cmp	r2, r3
 800497c:	d02c      	beq.n	80049d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004982:	2b00      	cmp	r3, #0
 8004984:	d128      	bne.n	80049d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	3304      	adds	r3, #4
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe fb44 	bl	8003018 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a8:	4b0f      	ldr	r3, [pc, #60]	@ (80049e8 <xTaskPriorityDisinherit+0xd8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d903      	bls.n	80049b8 <xTaskPriorityDisinherit+0xa8>
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	4a0c      	ldr	r2, [pc, #48]	@ (80049e8 <xTaskPriorityDisinherit+0xd8>)
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4a09      	ldr	r2, [pc, #36]	@ (80049ec <xTaskPriorityDisinherit+0xdc>)
 80049c6:	441a      	add	r2, r3
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f7fe fac5 	bl	8002f5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049d4:	2301      	movs	r3, #1
 80049d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049d8:	697b      	ldr	r3, [r7, #20]
	}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	200009dc 	.word	0x200009dc
 80049e8:	20000eb8 	.word	0x20000eb8
 80049ec:	200009e0 	.word	0x200009e0

080049f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049fa:	4b21      	ldr	r3, [pc, #132]	@ (8004a80 <prvAddCurrentTaskToDelayedList+0x90>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a00:	4b20      	ldr	r3, [pc, #128]	@ (8004a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe fb06 	bl	8003018 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d10a      	bne.n	8004a2a <prvAddCurrentTaskToDelayedList+0x3a>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d007      	beq.n	8004a2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	4619      	mov	r1, r3
 8004a22:	4819      	ldr	r0, [pc, #100]	@ (8004a88 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a24:	f7fe fa9b 	bl	8002f5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a28:	e026      	b.n	8004a78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4413      	add	r3, r2
 8004a30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a32:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d209      	bcs.n	8004a56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a42:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b0f      	ldr	r3, [pc, #60]	@ (8004a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f7fe faa9 	bl	8002fa6 <vListInsert>
}
 8004a54:	e010      	b.n	8004a78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a56:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	4619      	mov	r1, r3
 8004a62:	4610      	mov	r0, r2
 8004a64:	f7fe fa9f 	bl	8002fa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a68:	4b0a      	ldr	r3, [pc, #40]	@ (8004a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d202      	bcs.n	8004a78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a72:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6013      	str	r3, [r2, #0]
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000eb4 	.word	0x20000eb4
 8004a84:	200009dc 	.word	0x200009dc
 8004a88:	20000e9c 	.word	0x20000e9c
 8004a8c:	20000e6c 	.word	0x20000e6c
 8004a90:	20000e68 	.word	0x20000e68
 8004a94:	20000ed0 	.word	0x20000ed0

08004a98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	@ 0x28
 8004a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004aa2:	f000 fb13 	bl	80050cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8004b1c <xTimerCreateTimerTask+0x84>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d021      	beq.n	8004af2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004ab6:	1d3a      	adds	r2, r7, #4
 8004ab8:	f107 0108 	add.w	r1, r7, #8
 8004abc:	f107 030c 	add.w	r3, r7, #12
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fe fa05 	bl	8002ed0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	9202      	str	r2, [sp, #8]
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	460a      	mov	r2, r1
 8004ad8:	4911      	ldr	r1, [pc, #68]	@ (8004b20 <xTimerCreateTimerTask+0x88>)
 8004ada:	4812      	ldr	r0, [pc, #72]	@ (8004b24 <xTimerCreateTimerTask+0x8c>)
 8004adc:	f7ff f82e 	bl	8003b3c <xTaskCreateStatic>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	4a11      	ldr	r2, [pc, #68]	@ (8004b28 <xTimerCreateTimerTask+0x90>)
 8004ae4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ae6:	4b10      	ldr	r3, [pc, #64]	@ (8004b28 <xTimerCreateTimerTask+0x90>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004aee:	2301      	movs	r3, #1
 8004af0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	613b      	str	r3, [r7, #16]
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	e7fd      	b.n	8004b0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004b10:	697b      	ldr	r3, [r7, #20]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000f0c 	.word	0x20000f0c
 8004b20:	08006498 	.word	0x08006498
 8004b24:	08004c65 	.word	0x08004c65
 8004b28:	20000f10 	.word	0x20000f10

08004b2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	@ 0x28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10b      	bne.n	8004b5c <xTimerGenericCommand+0x30>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	623b      	str	r3, [r7, #32]
}
 8004b56:	bf00      	nop
 8004b58:	bf00      	nop
 8004b5a:	e7fd      	b.n	8004b58 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b5c:	4b19      	ldr	r3, [pc, #100]	@ (8004bc4 <xTimerGenericCommand+0x98>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d02a      	beq.n	8004bba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b05      	cmp	r3, #5
 8004b74:	dc18      	bgt.n	8004ba8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b76:	f7ff fead 	bl	80048d4 <xTaskGetSchedulerState>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d109      	bne.n	8004b94 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b80:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <xTimerGenericCommand+0x98>)
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	f107 0110 	add.w	r1, r7, #16
 8004b88:	2300      	movs	r3, #0
 8004b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b8c:	f7fe fbe6 	bl	800335c <xQueueGenericSend>
 8004b90:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b92:	e012      	b.n	8004bba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b94:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <xTimerGenericCommand+0x98>)
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	f107 0110 	add.w	r1, r7, #16
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f7fe fbdc 	bl	800335c <xQueueGenericSend>
 8004ba4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ba6:	e008      	b.n	8004bba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ba8:	4b06      	ldr	r3, [pc, #24]	@ (8004bc4 <xTimerGenericCommand+0x98>)
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	f107 0110 	add.w	r1, r7, #16
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	f7fe fcd4 	bl	8003560 <xQueueGenericSendFromISR>
 8004bb8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3728      	adds	r7, #40	@ 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000f0c 	.word	0x20000f0c

08004bc8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd2:	4b23      	ldr	r3, [pc, #140]	@ (8004c60 <prvProcessExpiredTimer+0x98>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe fa19 	bl	8003018 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d023      	beq.n	8004c3c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	18d1      	adds	r1, r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	6978      	ldr	r0, [r7, #20]
 8004c02:	f000 f8d5 	bl	8004db0 <prvInsertTimerInActiveList>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	2300      	movs	r3, #0
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	2100      	movs	r1, #0
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7ff ff88 	bl	8004b2c <xTimerGenericCommand>
 8004c1c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d114      	bne.n	8004c4e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	60fb      	str	r3, [r7, #12]
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	e7fd      	b.n	8004c38 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	6978      	ldr	r0, [r7, #20]
 8004c54:	4798      	blx	r3
}
 8004c56:	bf00      	nop
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000f04 	.word	0x20000f04

08004c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c6c:	f107 0308 	add.w	r3, r7, #8
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 f859 	bl	8004d28 <prvGetNextExpireTime>
 8004c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f805 	bl	8004c8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c82:	f000 f8d7 	bl	8004e34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c86:	bf00      	nop
 8004c88:	e7f0      	b.n	8004c6c <prvTimerTask+0x8>
	...

08004c8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c96:	f7ff fa29 	bl	80040ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c9a:	f107 0308 	add.w	r3, r7, #8
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 f866 	bl	8004d70 <prvSampleTimeNow>
 8004ca4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d130      	bne.n	8004d0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10a      	bne.n	8004cc8 <prvProcessTimerOrBlockTask+0x3c>
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d806      	bhi.n	8004cc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cba:	f7ff fa25 	bl	8004108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff81 	bl	8004bc8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004cc6:	e024      	b.n	8004d12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004cce:	4b13      	ldr	r3, [pc, #76]	@ (8004d1c <prvProcessTimerOrBlockTask+0x90>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <prvProcessTimerOrBlockTask+0x50>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <prvProcessTimerOrBlockTask+0x52>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d20 <prvProcessTimerOrBlockTask+0x94>)
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	4619      	mov	r1, r3
 8004cee:	f7fe fef1 	bl	8003ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004cf2:	f7ff fa09 	bl	8004108 <xTaskResumeAll>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004cfc:	4b09      	ldr	r3, [pc, #36]	@ (8004d24 <prvProcessTimerOrBlockTask+0x98>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
}
 8004d0c:	e001      	b.n	8004d12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d0e:	f7ff f9fb 	bl	8004108 <xTaskResumeAll>
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000f08 	.word	0x20000f08
 8004d20:	20000f0c 	.word	0x20000f0c
 8004d24:	e000ed04 	.word	0xe000ed04

08004d28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d30:	4b0e      	ldr	r3, [pc, #56]	@ (8004d6c <prvGetNextExpireTime+0x44>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <prvGetNextExpireTime+0x16>
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	e000      	b.n	8004d40 <prvGetNextExpireTime+0x18>
 8004d3e:	2200      	movs	r2, #0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d4c:	4b07      	ldr	r3, [pc, #28]	@ (8004d6c <prvGetNextExpireTime+0x44>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e001      	b.n	8004d5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20000f04 	.word	0x20000f04

08004d70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d78:	f7ff fa64 	bl	8004244 <xTaskGetTickCount>
 8004d7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <prvSampleTimeNow+0x3c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d205      	bcs.n	8004d94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d88:	f000 f93a 	bl	8005000 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e002      	b.n	8004d9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d9a:	4a04      	ldr	r2, [pc, #16]	@ (8004dac <prvSampleTimeNow+0x3c>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004da0:	68fb      	ldr	r3, [r7, #12]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20000f14 	.word	0x20000f14

08004db0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
 8004dbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d812      	bhi.n	8004dfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	1ad2      	subs	r2, r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d302      	bcc.n	8004dea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004de4:	2301      	movs	r3, #1
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	e01b      	b.n	8004e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <prvInsertTimerInActiveList+0x7c>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3304      	adds	r3, #4
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f7fe f8d6 	bl	8002fa6 <vListInsert>
 8004dfa:	e012      	b.n	8004e22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d206      	bcs.n	8004e12 <prvInsertTimerInActiveList+0x62>
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d302      	bcc.n	8004e12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e007      	b.n	8004e22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e12:	4b07      	ldr	r3, [pc, #28]	@ (8004e30 <prvInsertTimerInActiveList+0x80>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f7fe f8c2 	bl	8002fa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e22:	697b      	ldr	r3, [r7, #20]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000f08 	.word	0x20000f08
 8004e30:	20000f04 	.word	0x20000f04

08004e34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08e      	sub	sp, #56	@ 0x38
 8004e38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e3a:	e0ce      	b.n	8004fda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da19      	bge.n	8004e76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e42:	1d3b      	adds	r3, r7, #4
 8004e44:	3304      	adds	r3, #4
 8004e46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10b      	bne.n	8004e66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e52:	f383 8811 	msr	BASEPRI, r3
 8004e56:	f3bf 8f6f 	isb	sy
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	61fb      	str	r3, [r7, #28]
}
 8004e60:	bf00      	nop
 8004e62:	bf00      	nop
 8004e64:	e7fd      	b.n	8004e62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6c:	6850      	ldr	r0, [r2, #4]
 8004e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e70:	6892      	ldr	r2, [r2, #8]
 8004e72:	4611      	mov	r1, r2
 8004e74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f2c0 80ae 	blt.w	8004fda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe f8c2 	bl	8003018 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e94:	463b      	mov	r3, r7
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff ff6a 	bl	8004d70 <prvSampleTimeNow>
 8004e9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b09      	cmp	r3, #9
 8004ea2:	f200 8097 	bhi.w	8004fd4 <prvProcessReceivedCommands+0x1a0>
 8004ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8004eac <prvProcessReceivedCommands+0x78>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ed5 	.word	0x08004ed5
 8004eb0:	08004ed5 	.word	0x08004ed5
 8004eb4:	08004ed5 	.word	0x08004ed5
 8004eb8:	08004f4b 	.word	0x08004f4b
 8004ebc:	08004f5f 	.word	0x08004f5f
 8004ec0:	08004fab 	.word	0x08004fab
 8004ec4:	08004ed5 	.word	0x08004ed5
 8004ec8:	08004ed5 	.word	0x08004ed5
 8004ecc:	08004f4b 	.word	0x08004f4b
 8004ed0:	08004f5f 	.word	0x08004f5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	18d1      	adds	r1, r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ef4:	f7ff ff5c 	bl	8004db0 <prvInsertTimerInActiveList>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d06c      	beq.n	8004fd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d061      	beq.n	8004fd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	441a      	add	r2, r3
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	2300      	movs	r3, #0
 8004f22:	2100      	movs	r1, #0
 8004f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f26:	f7ff fe01 	bl	8004b2c <xTimerGenericCommand>
 8004f2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f2c:	6a3b      	ldr	r3, [r7, #32]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d152      	bne.n	8004fd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	61bb      	str	r3, [r7, #24]
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f5c:	e03d      	b.n	8004fda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f64:	f043 0301 	orr.w	r3, r3, #1
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	617b      	str	r3, [r7, #20]
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f98:	699a      	ldr	r2, [r3, #24]
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	18d1      	adds	r1, r2, r3
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fa4:	f7ff ff04 	bl	8004db0 <prvInsertTimerInActiveList>
					break;
 8004fa8:	e017      	b.n	8004fda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d103      	bne.n	8004fc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004fb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fba:	f000 fbe5 	bl	8005788 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004fbe:	e00c      	b.n	8004fda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004fc6:	f023 0301 	bic.w	r3, r3, #1
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004fd2:	e002      	b.n	8004fda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004fd4:	bf00      	nop
 8004fd6:	e000      	b.n	8004fda <prvProcessReceivedCommands+0x1a6>
					break;
 8004fd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fda:	4b08      	ldr	r3, [pc, #32]	@ (8004ffc <prvProcessReceivedCommands+0x1c8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	1d39      	adds	r1, r7, #4
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fb5a 	bl	800369c <xQueueReceive>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f47f af26 	bne.w	8004e3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	3730      	adds	r7, #48	@ 0x30
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000f0c 	.word	0x20000f0c

08005000 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005006:	e049      	b.n	800509c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005008:	4b2e      	ldr	r3, [pc, #184]	@ (80050c4 <prvSwitchTimerLists+0xc4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005012:	4b2c      	ldr	r3, [pc, #176]	@ (80050c4 <prvSwitchTimerLists+0xc4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3304      	adds	r3, #4
 8005020:	4618      	mov	r0, r3
 8005022:	f7fd fff9 	bl	8003018 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d02f      	beq.n	800509c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	429a      	cmp	r2, r3
 800504c:	d90e      	bls.n	800506c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800505a:	4b1a      	ldr	r3, [pc, #104]	@ (80050c4 <prvSwitchTimerLists+0xc4>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	3304      	adds	r3, #4
 8005062:	4619      	mov	r1, r3
 8005064:	4610      	mov	r0, r2
 8005066:	f7fd ff9e 	bl	8002fa6 <vListInsert>
 800506a:	e017      	b.n	800509c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800506c:	2300      	movs	r3, #0
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2300      	movs	r3, #0
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	2100      	movs	r1, #0
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff fd58 	bl	8004b2c <xTimerGenericCommand>
 800507c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10b      	bne.n	800509c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	603b      	str	r3, [r7, #0]
}
 8005096:	bf00      	nop
 8005098:	bf00      	nop
 800509a:	e7fd      	b.n	8005098 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800509c:	4b09      	ldr	r3, [pc, #36]	@ (80050c4 <prvSwitchTimerLists+0xc4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1b0      	bne.n	8005008 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050a6:	4b07      	ldr	r3, [pc, #28]	@ (80050c4 <prvSwitchTimerLists+0xc4>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050ac:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <prvSwitchTimerLists+0xc8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a04      	ldr	r2, [pc, #16]	@ (80050c4 <prvSwitchTimerLists+0xc4>)
 80050b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050b4:	4a04      	ldr	r2, [pc, #16]	@ (80050c8 <prvSwitchTimerLists+0xc8>)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	6013      	str	r3, [r2, #0]
}
 80050ba:	bf00      	nop
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000f04 	.word	0x20000f04
 80050c8:	20000f08 	.word	0x20000f08

080050cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80050d2:	f000 f969 	bl	80053a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80050d6:	4b15      	ldr	r3, [pc, #84]	@ (800512c <prvCheckForValidListAndQueue+0x60>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d120      	bne.n	8005120 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050de:	4814      	ldr	r0, [pc, #80]	@ (8005130 <prvCheckForValidListAndQueue+0x64>)
 80050e0:	f7fd ff10 	bl	8002f04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050e4:	4813      	ldr	r0, [pc, #76]	@ (8005134 <prvCheckForValidListAndQueue+0x68>)
 80050e6:	f7fd ff0d 	bl	8002f04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050ea:	4b13      	ldr	r3, [pc, #76]	@ (8005138 <prvCheckForValidListAndQueue+0x6c>)
 80050ec:	4a10      	ldr	r2, [pc, #64]	@ (8005130 <prvCheckForValidListAndQueue+0x64>)
 80050ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050f0:	4b12      	ldr	r3, [pc, #72]	@ (800513c <prvCheckForValidListAndQueue+0x70>)
 80050f2:	4a10      	ldr	r2, [pc, #64]	@ (8005134 <prvCheckForValidListAndQueue+0x68>)
 80050f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050f6:	2300      	movs	r3, #0
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	4b11      	ldr	r3, [pc, #68]	@ (8005140 <prvCheckForValidListAndQueue+0x74>)
 80050fc:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <prvCheckForValidListAndQueue+0x78>)
 80050fe:	2110      	movs	r1, #16
 8005100:	200a      	movs	r0, #10
 8005102:	f7fe f81d 	bl	8003140 <xQueueGenericCreateStatic>
 8005106:	4603      	mov	r3, r0
 8005108:	4a08      	ldr	r2, [pc, #32]	@ (800512c <prvCheckForValidListAndQueue+0x60>)
 800510a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800510c:	4b07      	ldr	r3, [pc, #28]	@ (800512c <prvCheckForValidListAndQueue+0x60>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005114:	4b05      	ldr	r3, [pc, #20]	@ (800512c <prvCheckForValidListAndQueue+0x60>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	490b      	ldr	r1, [pc, #44]	@ (8005148 <prvCheckForValidListAndQueue+0x7c>)
 800511a:	4618      	mov	r0, r3
 800511c:	f7fe fcb0 	bl	8003a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005120:	f000 f974 	bl	800540c <vPortExitCritical>
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000f0c 	.word	0x20000f0c
 8005130:	20000edc 	.word	0x20000edc
 8005134:	20000ef0 	.word	0x20000ef0
 8005138:	20000f04 	.word	0x20000f04
 800513c:	20000f08 	.word	0x20000f08
 8005140:	20000fb8 	.word	0x20000fb8
 8005144:	20000f18 	.word	0x20000f18
 8005148:	080064a0 	.word	0x080064a0

0800514c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3b04      	subs	r3, #4
 800515c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b04      	subs	r3, #4
 800516a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f023 0201 	bic.w	r2, r3, #1
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3b04      	subs	r3, #4
 800517a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800517c:	4a0c      	ldr	r2, [pc, #48]	@ (80051b0 <pxPortInitialiseStack+0x64>)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	3b14      	subs	r3, #20
 8005186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3b04      	subs	r3, #4
 8005192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f06f 0202 	mvn.w	r2, #2
 800519a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b20      	subs	r3, #32
 80051a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051a2:	68fb      	ldr	r3, [r7, #12]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	080051b5 	.word	0x080051b5

080051b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051be:	4b13      	ldr	r3, [pc, #76]	@ (800520c <prvTaskExitError+0x58>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d00b      	beq.n	80051e0 <prvTaskExitError+0x2c>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	60fb      	str	r3, [r7, #12]
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	e7fd      	b.n	80051dc <prvTaskExitError+0x28>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	60bb      	str	r3, [r7, #8]
}
 80051f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051f4:	bf00      	nop
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0fc      	beq.n	80051f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	2000000c 	.word	0x2000000c

08005210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005210:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <pxCurrentTCBConst2>)
 8005212:	6819      	ldr	r1, [r3, #0]
 8005214:	6808      	ldr	r0, [r1, #0]
 8005216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	f380 8809 	msr	PSP, r0
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f04f 0000 	mov.w	r0, #0
 8005226:	f380 8811 	msr	BASEPRI, r0
 800522a:	4770      	bx	lr
 800522c:	f3af 8000 	nop.w

08005230 <pxCurrentTCBConst2>:
 8005230:	200009dc 	.word	0x200009dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005238:	4808      	ldr	r0, [pc, #32]	@ (800525c <prvPortStartFirstTask+0x24>)
 800523a:	6800      	ldr	r0, [r0, #0]
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	f380 8808 	msr	MSP, r0
 8005242:	f04f 0000 	mov.w	r0, #0
 8005246:	f380 8814 	msr	CONTROL, r0
 800524a:	b662      	cpsie	i
 800524c:	b661      	cpsie	f
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	df00      	svc	0
 8005258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800525a:	bf00      	nop
 800525c:	e000ed08 	.word	0xe000ed08

08005260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005266:	4b47      	ldr	r3, [pc, #284]	@ (8005384 <xPortStartScheduler+0x124>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a47      	ldr	r2, [pc, #284]	@ (8005388 <xPortStartScheduler+0x128>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10b      	bne.n	8005288 <xPortStartScheduler+0x28>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	613b      	str	r3, [r7, #16]
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005288:	4b3e      	ldr	r3, [pc, #248]	@ (8005384 <xPortStartScheduler+0x124>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a3f      	ldr	r2, [pc, #252]	@ (800538c <xPortStartScheduler+0x12c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10b      	bne.n	80052aa <xPortStartScheduler+0x4a>
	__asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60fb      	str	r3, [r7, #12]
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop
 80052a8:	e7fd      	b.n	80052a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052aa:	4b39      	ldr	r3, [pc, #228]	@ (8005390 <xPortStartScheduler+0x130>)
 80052ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	22ff      	movs	r2, #255	@ 0xff
 80052ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	4b31      	ldr	r3, [pc, #196]	@ (8005394 <xPortStartScheduler+0x134>)
 80052d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052d2:	4b31      	ldr	r3, [pc, #196]	@ (8005398 <xPortStartScheduler+0x138>)
 80052d4:	2207      	movs	r2, #7
 80052d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d8:	e009      	b.n	80052ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80052da:	4b2f      	ldr	r3, [pc, #188]	@ (8005398 <xPortStartScheduler+0x138>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3b01      	subs	r3, #1
 80052e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005398 <xPortStartScheduler+0x138>)
 80052e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052e4:	78fb      	ldrb	r3, [r7, #3]
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052ee:	78fb      	ldrb	r3, [r7, #3]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f6:	2b80      	cmp	r3, #128	@ 0x80
 80052f8:	d0ef      	beq.n	80052da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052fa:	4b27      	ldr	r3, [pc, #156]	@ (8005398 <xPortStartScheduler+0x138>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f1c3 0307 	rsb	r3, r3, #7
 8005302:	2b04      	cmp	r3, #4
 8005304:	d00b      	beq.n	800531e <xPortStartScheduler+0xbe>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	60bb      	str	r3, [r7, #8]
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	e7fd      	b.n	800531a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800531e:	4b1e      	ldr	r3, [pc, #120]	@ (8005398 <xPortStartScheduler+0x138>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	4a1c      	ldr	r2, [pc, #112]	@ (8005398 <xPortStartScheduler+0x138>)
 8005326:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005328:	4b1b      	ldr	r3, [pc, #108]	@ (8005398 <xPortStartScheduler+0x138>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005330:	4a19      	ldr	r2, [pc, #100]	@ (8005398 <xPortStartScheduler+0x138>)
 8005332:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	b2da      	uxtb	r2, r3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800533c:	4b17      	ldr	r3, [pc, #92]	@ (800539c <xPortStartScheduler+0x13c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a16      	ldr	r2, [pc, #88]	@ (800539c <xPortStartScheduler+0x13c>)
 8005342:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005346:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005348:	4b14      	ldr	r3, [pc, #80]	@ (800539c <xPortStartScheduler+0x13c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a13      	ldr	r2, [pc, #76]	@ (800539c <xPortStartScheduler+0x13c>)
 800534e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005352:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005354:	f000 f8da 	bl	800550c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005358:	4b11      	ldr	r3, [pc, #68]	@ (80053a0 <xPortStartScheduler+0x140>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800535e:	f000 f8f9 	bl	8005554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005362:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <xPortStartScheduler+0x144>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a0f      	ldr	r2, [pc, #60]	@ (80053a4 <xPortStartScheduler+0x144>)
 8005368:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800536c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800536e:	f7ff ff63 	bl	8005238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005372:	f7ff f831 	bl	80043d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005376:	f7ff ff1d 	bl	80051b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	e000ed00 	.word	0xe000ed00
 8005388:	410fc271 	.word	0x410fc271
 800538c:	410fc270 	.word	0x410fc270
 8005390:	e000e400 	.word	0xe000e400
 8005394:	20001008 	.word	0x20001008
 8005398:	2000100c 	.word	0x2000100c
 800539c:	e000ed20 	.word	0xe000ed20
 80053a0:	2000000c 	.word	0x2000000c
 80053a4:	e000ef34 	.word	0xe000ef34

080053a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	607b      	str	r3, [r7, #4]
}
 80053c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80053c2:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <vPortEnterCritical+0x5c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3301      	adds	r3, #1
 80053c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005404 <vPortEnterCritical+0x5c>)
 80053ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80053cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005404 <vPortEnterCritical+0x5c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d110      	bne.n	80053f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <vPortEnterCritical+0x60>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	603b      	str	r3, [r7, #0]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <vPortEnterCritical+0x4a>
	}
}
 80053f6:	bf00      	nop
 80053f8:	370c      	adds	r7, #12
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	2000000c 	.word	0x2000000c
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005412:	4b12      	ldr	r3, [pc, #72]	@ (800545c <vPortExitCritical+0x50>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <vPortExitCritical+0x26>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	607b      	str	r3, [r7, #4]
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	e7fd      	b.n	800542e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005432:	4b0a      	ldr	r3, [pc, #40]	@ (800545c <vPortExitCritical+0x50>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3b01      	subs	r3, #1
 8005438:	4a08      	ldr	r2, [pc, #32]	@ (800545c <vPortExitCritical+0x50>)
 800543a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800543c:	4b07      	ldr	r3, [pc, #28]	@ (800545c <vPortExitCritical+0x50>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <vPortExitCritical+0x44>
 8005444:	2300      	movs	r3, #0
 8005446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f383 8811 	msr	BASEPRI, r3
}
 800544e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	2000000c 	.word	0x2000000c

08005460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005460:	f3ef 8009 	mrs	r0, PSP
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	4b15      	ldr	r3, [pc, #84]	@ (80054c0 <pxCurrentTCBConst>)
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	f01e 0f10 	tst.w	lr, #16
 8005470:	bf08      	it	eq
 8005472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547a:	6010      	str	r0, [r2, #0]
 800547c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005480:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005484:	f380 8811 	msr	BASEPRI, r0
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f7fe ffa2 	bl	80043d8 <vTaskSwitchContext>
 8005494:	f04f 0000 	mov.w	r0, #0
 8005498:	f380 8811 	msr	BASEPRI, r0
 800549c:	bc09      	pop	{r0, r3}
 800549e:	6819      	ldr	r1, [r3, #0]
 80054a0:	6808      	ldr	r0, [r1, #0]
 80054a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a6:	f01e 0f10 	tst.w	lr, #16
 80054aa:	bf08      	it	eq
 80054ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80054b0:	f380 8809 	msr	PSP, r0
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w

080054c0 <pxCurrentTCBConst>:
 80054c0:	200009dc 	.word	0x200009dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop

080054c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	607b      	str	r3, [r7, #4]
}
 80054e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054e2:	f7fe febf 	bl	8004264 <xTaskIncrementTick>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054ec:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <xPortSysTickHandler+0x40>)
 80054ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f383 8811 	msr	BASEPRI, r3
}
 80054fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005510:	4b0b      	ldr	r3, [pc, #44]	@ (8005540 <vPortSetupTimerInterrupt+0x34>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005516:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <vPortSetupTimerInterrupt+0x38>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800551c:	4b0a      	ldr	r3, [pc, #40]	@ (8005548 <vPortSetupTimerInterrupt+0x3c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a0a      	ldr	r2, [pc, #40]	@ (800554c <vPortSetupTimerInterrupt+0x40>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	4a09      	ldr	r2, [pc, #36]	@ (8005550 <vPortSetupTimerInterrupt+0x44>)
 800552a:	3b01      	subs	r3, #1
 800552c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800552e:	4b04      	ldr	r3, [pc, #16]	@ (8005540 <vPortSetupTimerInterrupt+0x34>)
 8005530:	2207      	movs	r2, #7
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	e000e010 	.word	0xe000e010
 8005544:	e000e018 	.word	0xe000e018
 8005548:	20000000 	.word	0x20000000
 800554c:	10624dd3 	.word	0x10624dd3
 8005550:	e000e014 	.word	0xe000e014

08005554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005554:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005564 <vPortEnableVFP+0x10>
 8005558:	6801      	ldr	r1, [r0, #0]
 800555a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800555e:	6001      	str	r1, [r0, #0]
 8005560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005562:	bf00      	nop
 8005564:	e000ed88 	.word	0xe000ed88

08005568 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800556e:	f3ef 8305 	mrs	r3, IPSR
 8005572:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b0f      	cmp	r3, #15
 8005578:	d915      	bls.n	80055a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800557a:	4a18      	ldr	r2, [pc, #96]	@ (80055dc <vPortValidateInterruptPriority+0x74>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005584:	4b16      	ldr	r3, [pc, #88]	@ (80055e0 <vPortValidateInterruptPriority+0x78>)
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	7afa      	ldrb	r2, [r7, #11]
 800558a:	429a      	cmp	r2, r3
 800558c:	d20b      	bcs.n	80055a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	607b      	str	r3, [r7, #4]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055a6:	4b0f      	ldr	r3, [pc, #60]	@ (80055e4 <vPortValidateInterruptPriority+0x7c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80055ae:	4b0e      	ldr	r3, [pc, #56]	@ (80055e8 <vPortValidateInterruptPriority+0x80>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d90b      	bls.n	80055ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	603b      	str	r3, [r7, #0]
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <vPortValidateInterruptPriority+0x62>
	}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	e000e3f0 	.word	0xe000e3f0
 80055e0:	20001008 	.word	0x20001008
 80055e4:	e000ed0c 	.word	0xe000ed0c
 80055e8:	2000100c 	.word	0x2000100c

080055ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055f8:	f7fe fd78 	bl	80040ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005770 <pvPortMalloc+0x184>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005604:	f000 f924 	bl	8005850 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005608:	4b5a      	ldr	r3, [pc, #360]	@ (8005774 <pvPortMalloc+0x188>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	f040 8095 	bne.w	8005740 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d01e      	beq.n	800565a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800561c:	2208      	movs	r2, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	2b00      	cmp	r3, #0
 800562c:	d015      	beq.n	800565a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f023 0307 	bic.w	r3, r3, #7
 8005634:	3308      	adds	r3, #8
 8005636:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <pvPortMalloc+0x6e>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	617b      	str	r3, [r7, #20]
}
 8005654:	bf00      	nop
 8005656:	bf00      	nop
 8005658:	e7fd      	b.n	8005656 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d06f      	beq.n	8005740 <pvPortMalloc+0x154>
 8005660:	4b45      	ldr	r3, [pc, #276]	@ (8005778 <pvPortMalloc+0x18c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d86a      	bhi.n	8005740 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800566a:	4b44      	ldr	r3, [pc, #272]	@ (800577c <pvPortMalloc+0x190>)
 800566c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800566e:	4b43      	ldr	r3, [pc, #268]	@ (800577c <pvPortMalloc+0x190>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005674:	e004      	b.n	8005680 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d903      	bls.n	8005692 <pvPortMalloc+0xa6>
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f1      	bne.n	8005676 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005692:	4b37      	ldr	r3, [pc, #220]	@ (8005770 <pvPortMalloc+0x184>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005698:	429a      	cmp	r2, r3
 800569a:	d051      	beq.n	8005740 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2208      	movs	r2, #8
 80056a2:	4413      	add	r3, r2
 80056a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	2308      	movs	r3, #8
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d920      	bls.n	8005700 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4413      	add	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00b      	beq.n	80056e8 <pvPortMalloc+0xfc>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	613b      	str	r3, [r7, #16]
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	e7fd      	b.n	80056e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1ad2      	subs	r2, r2, r3
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056fa:	69b8      	ldr	r0, [r7, #24]
 80056fc:	f000 f90a 	bl	8005914 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005700:	4b1d      	ldr	r3, [pc, #116]	@ (8005778 <pvPortMalloc+0x18c>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	4a1b      	ldr	r2, [pc, #108]	@ (8005778 <pvPortMalloc+0x18c>)
 800570c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800570e:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <pvPortMalloc+0x18c>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	4b1b      	ldr	r3, [pc, #108]	@ (8005780 <pvPortMalloc+0x194>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	429a      	cmp	r2, r3
 8005718:	d203      	bcs.n	8005722 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800571a:	4b17      	ldr	r3, [pc, #92]	@ (8005778 <pvPortMalloc+0x18c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a18      	ldr	r2, [pc, #96]	@ (8005780 <pvPortMalloc+0x194>)
 8005720:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b13      	ldr	r3, [pc, #76]	@ (8005774 <pvPortMalloc+0x188>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	431a      	orrs	r2, r3
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005736:	4b13      	ldr	r3, [pc, #76]	@ (8005784 <pvPortMalloc+0x198>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3301      	adds	r3, #1
 800573c:	4a11      	ldr	r2, [pc, #68]	@ (8005784 <pvPortMalloc+0x198>)
 800573e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005740:	f7fe fce2 	bl	8004108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <pvPortMalloc+0x17a>
	__asm volatile
 800574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	60fb      	str	r3, [r7, #12]
}
 8005760:	bf00      	nop
 8005762:	bf00      	nop
 8005764:	e7fd      	b.n	8005762 <pvPortMalloc+0x176>
	return pvReturn;
 8005766:	69fb      	ldr	r3, [r7, #28]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3728      	adds	r7, #40	@ 0x28
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20001bd0 	.word	0x20001bd0
 8005774:	20001be4 	.word	0x20001be4
 8005778:	20001bd4 	.word	0x20001bd4
 800577c:	20001bc8 	.word	0x20001bc8
 8005780:	20001bd8 	.word	0x20001bd8
 8005784:	20001bdc 	.word	0x20001bdc

08005788 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d04f      	beq.n	800583a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800579a:	2308      	movs	r3, #8
 800579c:	425b      	negs	r3, r3
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4413      	add	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	4b25      	ldr	r3, [pc, #148]	@ (8005844 <vPortFree+0xbc>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <vPortFree+0x46>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	60fb      	str	r3, [r7, #12]
}
 80057c8:	bf00      	nop
 80057ca:	bf00      	nop
 80057cc:	e7fd      	b.n	80057ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <vPortFree+0x66>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	60bb      	str	r3, [r7, #8]
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	e7fd      	b.n	80057ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	4b14      	ldr	r3, [pc, #80]	@ (8005844 <vPortFree+0xbc>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4013      	ands	r3, r2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d01e      	beq.n	800583a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11a      	bne.n	800583a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	4b0e      	ldr	r3, [pc, #56]	@ (8005844 <vPortFree+0xbc>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	43db      	mvns	r3, r3
 800580e:	401a      	ands	r2, r3
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005814:	f7fe fc6a 	bl	80040ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <vPortFree+0xc0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4413      	add	r3, r2
 8005822:	4a09      	ldr	r2, [pc, #36]	@ (8005848 <vPortFree+0xc0>)
 8005824:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005826:	6938      	ldr	r0, [r7, #16]
 8005828:	f000 f874 	bl	8005914 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800582c:	4b07      	ldr	r3, [pc, #28]	@ (800584c <vPortFree+0xc4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3301      	adds	r3, #1
 8005832:	4a06      	ldr	r2, [pc, #24]	@ (800584c <vPortFree+0xc4>)
 8005834:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005836:	f7fe fc67 	bl	8004108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800583a:	bf00      	nop
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20001be4 	.word	0x20001be4
 8005848:	20001bd4 	.word	0x20001bd4
 800584c:	20001be0 	.word	0x20001be0

08005850 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005856:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800585a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800585c:	4b27      	ldr	r3, [pc, #156]	@ (80058fc <prvHeapInit+0xac>)
 800585e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00c      	beq.n	8005884 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3307      	adds	r3, #7
 800586e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0307 	bic.w	r3, r3, #7
 8005876:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	4a1f      	ldr	r2, [pc, #124]	@ (80058fc <prvHeapInit+0xac>)
 8005880:	4413      	add	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005888:	4a1d      	ldr	r2, [pc, #116]	@ (8005900 <prvHeapInit+0xb0>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800588e:	4b1c      	ldr	r3, [pc, #112]	@ (8005900 <prvHeapInit+0xb0>)
 8005890:	2200      	movs	r2, #0
 8005892:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	4413      	add	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800589c:	2208      	movs	r2, #8
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f023 0307 	bic.w	r3, r3, #7
 80058aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4a15      	ldr	r2, [pc, #84]	@ (8005904 <prvHeapInit+0xb4>)
 80058b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058b2:	4b14      	ldr	r3, [pc, #80]	@ (8005904 <prvHeapInit+0xb4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2200      	movs	r2, #0
 80058b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058ba:	4b12      	ldr	r3, [pc, #72]	@ (8005904 <prvHeapInit+0xb4>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <prvHeapInit+0xb4>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005908 <prvHeapInit+0xb8>)
 80058de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	4a09      	ldr	r2, [pc, #36]	@ (800590c <prvHeapInit+0xbc>)
 80058e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058e8:	4b09      	ldr	r3, [pc, #36]	@ (8005910 <prvHeapInit+0xc0>)
 80058ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80058ee:	601a      	str	r2, [r3, #0]
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	20001010 	.word	0x20001010
 8005900:	20001bc8 	.word	0x20001bc8
 8005904:	20001bd0 	.word	0x20001bd0
 8005908:	20001bd8 	.word	0x20001bd8
 800590c:	20001bd4 	.word	0x20001bd4
 8005910:	20001be4 	.word	0x20001be4

08005914 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800591c:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <prvInsertBlockIntoFreeList+0xac>)
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e002      	b.n	8005928 <prvInsertBlockIntoFreeList+0x14>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	429a      	cmp	r2, r3
 8005930:	d8f7      	bhi.n	8005922 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4413      	add	r3, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	429a      	cmp	r2, r3
 8005942:	d108      	bne.n	8005956 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	441a      	add	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	441a      	add	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d118      	bne.n	800599c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	4b15      	ldr	r3, [pc, #84]	@ (80059c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d00d      	beq.n	8005992 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	441a      	add	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e008      	b.n	80059a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005992:	4b0c      	ldr	r3, [pc, #48]	@ (80059c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	601a      	str	r2, [r3, #0]
 800599a:	e003      	b.n	80059a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d002      	beq.n	80059b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059b2:	bf00      	nop
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20001bc8 	.word	0x20001bc8
 80059c4:	20001bd0 	.word	0x20001bd0

080059c8 <siprintf>:
 80059c8:	b40e      	push	{r1, r2, r3}
 80059ca:	b500      	push	{lr}
 80059cc:	b09c      	sub	sp, #112	@ 0x70
 80059ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80059d0:	9002      	str	r0, [sp, #8]
 80059d2:	9006      	str	r0, [sp, #24]
 80059d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059d8:	4809      	ldr	r0, [pc, #36]	@ (8005a00 <siprintf+0x38>)
 80059da:	9107      	str	r1, [sp, #28]
 80059dc:	9104      	str	r1, [sp, #16]
 80059de:	4909      	ldr	r1, [pc, #36]	@ (8005a04 <siprintf+0x3c>)
 80059e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e4:	9105      	str	r1, [sp, #20]
 80059e6:	6800      	ldr	r0, [r0, #0]
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	a902      	add	r1, sp, #8
 80059ec:	f000 f9f8 	bl	8005de0 <_svfiprintf_r>
 80059f0:	9b02      	ldr	r3, [sp, #8]
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	b01c      	add	sp, #112	@ 0x70
 80059f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059fc:	b003      	add	sp, #12
 80059fe:	4770      	bx	lr
 8005a00:	20000010 	.word	0x20000010
 8005a04:	ffff0208 	.word	0xffff0208

08005a08 <memset>:
 8005a08:	4402      	add	r2, r0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d100      	bne.n	8005a12 <memset+0xa>
 8005a10:	4770      	bx	lr
 8005a12:	f803 1b01 	strb.w	r1, [r3], #1
 8005a16:	e7f9      	b.n	8005a0c <memset+0x4>

08005a18 <_reclaim_reent>:
 8005a18:	4b29      	ldr	r3, [pc, #164]	@ (8005ac0 <_reclaim_reent+0xa8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4283      	cmp	r3, r0
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	4604      	mov	r4, r0
 8005a22:	d04b      	beq.n	8005abc <_reclaim_reent+0xa4>
 8005a24:	69c3      	ldr	r3, [r0, #28]
 8005a26:	b1ab      	cbz	r3, 8005a54 <_reclaim_reent+0x3c>
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	b16b      	cbz	r3, 8005a48 <_reclaim_reent+0x30>
 8005a2c:	2500      	movs	r5, #0
 8005a2e:	69e3      	ldr	r3, [r4, #28]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	5959      	ldr	r1, [r3, r5]
 8005a34:	2900      	cmp	r1, #0
 8005a36:	d13b      	bne.n	8005ab0 <_reclaim_reent+0x98>
 8005a38:	3504      	adds	r5, #4
 8005a3a:	2d80      	cmp	r5, #128	@ 0x80
 8005a3c:	d1f7      	bne.n	8005a2e <_reclaim_reent+0x16>
 8005a3e:	69e3      	ldr	r3, [r4, #28]
 8005a40:	4620      	mov	r0, r4
 8005a42:	68d9      	ldr	r1, [r3, #12]
 8005a44:	f000 f878 	bl	8005b38 <_free_r>
 8005a48:	69e3      	ldr	r3, [r4, #28]
 8005a4a:	6819      	ldr	r1, [r3, #0]
 8005a4c:	b111      	cbz	r1, 8005a54 <_reclaim_reent+0x3c>
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 f872 	bl	8005b38 <_free_r>
 8005a54:	6961      	ldr	r1, [r4, #20]
 8005a56:	b111      	cbz	r1, 8005a5e <_reclaim_reent+0x46>
 8005a58:	4620      	mov	r0, r4
 8005a5a:	f000 f86d 	bl	8005b38 <_free_r>
 8005a5e:	69e1      	ldr	r1, [r4, #28]
 8005a60:	b111      	cbz	r1, 8005a68 <_reclaim_reent+0x50>
 8005a62:	4620      	mov	r0, r4
 8005a64:	f000 f868 	bl	8005b38 <_free_r>
 8005a68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a6a:	b111      	cbz	r1, 8005a72 <_reclaim_reent+0x5a>
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 f863 	bl	8005b38 <_free_r>
 8005a72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a74:	b111      	cbz	r1, 8005a7c <_reclaim_reent+0x64>
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 f85e 	bl	8005b38 <_free_r>
 8005a7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005a7e:	b111      	cbz	r1, 8005a86 <_reclaim_reent+0x6e>
 8005a80:	4620      	mov	r0, r4
 8005a82:	f000 f859 	bl	8005b38 <_free_r>
 8005a86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005a88:	b111      	cbz	r1, 8005a90 <_reclaim_reent+0x78>
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 f854 	bl	8005b38 <_free_r>
 8005a90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a92:	b111      	cbz	r1, 8005a9a <_reclaim_reent+0x82>
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 f84f 	bl	8005b38 <_free_r>
 8005a9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005a9c:	b111      	cbz	r1, 8005aa4 <_reclaim_reent+0x8c>
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 f84a 	bl	8005b38 <_free_r>
 8005aa4:	6a23      	ldr	r3, [r4, #32]
 8005aa6:	b14b      	cbz	r3, 8005abc <_reclaim_reent+0xa4>
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005aae:	4718      	bx	r3
 8005ab0:	680e      	ldr	r6, [r1, #0]
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 f840 	bl	8005b38 <_free_r>
 8005ab8:	4631      	mov	r1, r6
 8005aba:	e7bb      	b.n	8005a34 <_reclaim_reent+0x1c>
 8005abc:	bd70      	pop	{r4, r5, r6, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000010 	.word	0x20000010

08005ac4 <__errno>:
 8005ac4:	4b01      	ldr	r3, [pc, #4]	@ (8005acc <__errno+0x8>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000010 	.word	0x20000010

08005ad0 <__libc_init_array>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8005b08 <__libc_init_array+0x38>)
 8005ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8005b0c <__libc_init_array+0x3c>)
 8005ad6:	1b64      	subs	r4, r4, r5
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	2600      	movs	r6, #0
 8005adc:	42a6      	cmp	r6, r4
 8005ade:	d109      	bne.n	8005af4 <__libc_init_array+0x24>
 8005ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8005b10 <__libc_init_array+0x40>)
 8005ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8005b14 <__libc_init_array+0x44>)
 8005ae4:	f000 fc66 	bl	80063b4 <_init>
 8005ae8:	1b64      	subs	r4, r4, r5
 8005aea:	10a4      	asrs	r4, r4, #2
 8005aec:	2600      	movs	r6, #0
 8005aee:	42a6      	cmp	r6, r4
 8005af0:	d105      	bne.n	8005afe <__libc_init_array+0x2e>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af8:	4798      	blx	r3
 8005afa:	3601      	adds	r6, #1
 8005afc:	e7ee      	b.n	8005adc <__libc_init_array+0xc>
 8005afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b02:	4798      	blx	r3
 8005b04:	3601      	adds	r6, #1
 8005b06:	e7f2      	b.n	8005aee <__libc_init_array+0x1e>
 8005b08:	0800652c 	.word	0x0800652c
 8005b0c:	0800652c 	.word	0x0800652c
 8005b10:	0800652c 	.word	0x0800652c
 8005b14:	08006530 	.word	0x08006530

08005b18 <__retarget_lock_acquire_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_release_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <memcpy>:
 8005b1c:	440a      	add	r2, r1
 8005b1e:	4291      	cmp	r1, r2
 8005b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b24:	d100      	bne.n	8005b28 <memcpy+0xc>
 8005b26:	4770      	bx	lr
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b32:	4291      	cmp	r1, r2
 8005b34:	d1f9      	bne.n	8005b2a <memcpy+0xe>
 8005b36:	bd10      	pop	{r4, pc}

08005b38 <_free_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	2900      	cmp	r1, #0
 8005b3e:	d041      	beq.n	8005bc4 <_free_r+0x8c>
 8005b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b44:	1f0c      	subs	r4, r1, #4
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bfb8      	it	lt
 8005b4a:	18e4      	addlt	r4, r4, r3
 8005b4c:	f000 f8e0 	bl	8005d10 <__malloc_lock>
 8005b50:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc8 <_free_r+0x90>)
 8005b52:	6813      	ldr	r3, [r2, #0]
 8005b54:	b933      	cbnz	r3, 8005b64 <_free_r+0x2c>
 8005b56:	6063      	str	r3, [r4, #4]
 8005b58:	6014      	str	r4, [r2, #0]
 8005b5a:	4628      	mov	r0, r5
 8005b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b60:	f000 b8dc 	b.w	8005d1c <__malloc_unlock>
 8005b64:	42a3      	cmp	r3, r4
 8005b66:	d908      	bls.n	8005b7a <_free_r+0x42>
 8005b68:	6820      	ldr	r0, [r4, #0]
 8005b6a:	1821      	adds	r1, r4, r0
 8005b6c:	428b      	cmp	r3, r1
 8005b6e:	bf01      	itttt	eq
 8005b70:	6819      	ldreq	r1, [r3, #0]
 8005b72:	685b      	ldreq	r3, [r3, #4]
 8005b74:	1809      	addeq	r1, r1, r0
 8005b76:	6021      	streq	r1, [r4, #0]
 8005b78:	e7ed      	b.n	8005b56 <_free_r+0x1e>
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	b10b      	cbz	r3, 8005b84 <_free_r+0x4c>
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	d9fa      	bls.n	8005b7a <_free_r+0x42>
 8005b84:	6811      	ldr	r1, [r2, #0]
 8005b86:	1850      	adds	r0, r2, r1
 8005b88:	42a0      	cmp	r0, r4
 8005b8a:	d10b      	bne.n	8005ba4 <_free_r+0x6c>
 8005b8c:	6820      	ldr	r0, [r4, #0]
 8005b8e:	4401      	add	r1, r0
 8005b90:	1850      	adds	r0, r2, r1
 8005b92:	4283      	cmp	r3, r0
 8005b94:	6011      	str	r1, [r2, #0]
 8005b96:	d1e0      	bne.n	8005b5a <_free_r+0x22>
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	6053      	str	r3, [r2, #4]
 8005b9e:	4408      	add	r0, r1
 8005ba0:	6010      	str	r0, [r2, #0]
 8005ba2:	e7da      	b.n	8005b5a <_free_r+0x22>
 8005ba4:	d902      	bls.n	8005bac <_free_r+0x74>
 8005ba6:	230c      	movs	r3, #12
 8005ba8:	602b      	str	r3, [r5, #0]
 8005baa:	e7d6      	b.n	8005b5a <_free_r+0x22>
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	1821      	adds	r1, r4, r0
 8005bb0:	428b      	cmp	r3, r1
 8005bb2:	bf04      	itt	eq
 8005bb4:	6819      	ldreq	r1, [r3, #0]
 8005bb6:	685b      	ldreq	r3, [r3, #4]
 8005bb8:	6063      	str	r3, [r4, #4]
 8005bba:	bf04      	itt	eq
 8005bbc:	1809      	addeq	r1, r1, r0
 8005bbe:	6021      	streq	r1, [r4, #0]
 8005bc0:	6054      	str	r4, [r2, #4]
 8005bc2:	e7ca      	b.n	8005b5a <_free_r+0x22>
 8005bc4:	bd38      	pop	{r3, r4, r5, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20001d2c 	.word	0x20001d2c

08005bcc <sbrk_aligned>:
 8005bcc:	b570      	push	{r4, r5, r6, lr}
 8005bce:	4e0f      	ldr	r6, [pc, #60]	@ (8005c0c <sbrk_aligned+0x40>)
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	6831      	ldr	r1, [r6, #0]
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	b911      	cbnz	r1, 8005bde <sbrk_aligned+0x12>
 8005bd8:	f000 fba6 	bl	8006328 <_sbrk_r>
 8005bdc:	6030      	str	r0, [r6, #0]
 8005bde:	4621      	mov	r1, r4
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 fba1 	bl	8006328 <_sbrk_r>
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	d103      	bne.n	8005bf2 <sbrk_aligned+0x26>
 8005bea:	f04f 34ff 	mov.w	r4, #4294967295
 8005bee:	4620      	mov	r0, r4
 8005bf0:	bd70      	pop	{r4, r5, r6, pc}
 8005bf2:	1cc4      	adds	r4, r0, #3
 8005bf4:	f024 0403 	bic.w	r4, r4, #3
 8005bf8:	42a0      	cmp	r0, r4
 8005bfa:	d0f8      	beq.n	8005bee <sbrk_aligned+0x22>
 8005bfc:	1a21      	subs	r1, r4, r0
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 fb92 	bl	8006328 <_sbrk_r>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d1f2      	bne.n	8005bee <sbrk_aligned+0x22>
 8005c08:	e7ef      	b.n	8005bea <sbrk_aligned+0x1e>
 8005c0a:	bf00      	nop
 8005c0c:	20001d28 	.word	0x20001d28

08005c10 <_malloc_r>:
 8005c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c14:	1ccd      	adds	r5, r1, #3
 8005c16:	f025 0503 	bic.w	r5, r5, #3
 8005c1a:	3508      	adds	r5, #8
 8005c1c:	2d0c      	cmp	r5, #12
 8005c1e:	bf38      	it	cc
 8005c20:	250c      	movcc	r5, #12
 8005c22:	2d00      	cmp	r5, #0
 8005c24:	4606      	mov	r6, r0
 8005c26:	db01      	blt.n	8005c2c <_malloc_r+0x1c>
 8005c28:	42a9      	cmp	r1, r5
 8005c2a:	d904      	bls.n	8005c36 <_malloc_r+0x26>
 8005c2c:	230c      	movs	r3, #12
 8005c2e:	6033      	str	r3, [r6, #0]
 8005c30:	2000      	movs	r0, #0
 8005c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d0c <_malloc_r+0xfc>
 8005c3a:	f000 f869 	bl	8005d10 <__malloc_lock>
 8005c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c42:	461c      	mov	r4, r3
 8005c44:	bb44      	cbnz	r4, 8005c98 <_malloc_r+0x88>
 8005c46:	4629      	mov	r1, r5
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f7ff ffbf 	bl	8005bcc <sbrk_aligned>
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	4604      	mov	r4, r0
 8005c52:	d158      	bne.n	8005d06 <_malloc_r+0xf6>
 8005c54:	f8d8 4000 	ldr.w	r4, [r8]
 8005c58:	4627      	mov	r7, r4
 8005c5a:	2f00      	cmp	r7, #0
 8005c5c:	d143      	bne.n	8005ce6 <_malloc_r+0xd6>
 8005c5e:	2c00      	cmp	r4, #0
 8005c60:	d04b      	beq.n	8005cfa <_malloc_r+0xea>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	4639      	mov	r1, r7
 8005c66:	4630      	mov	r0, r6
 8005c68:	eb04 0903 	add.w	r9, r4, r3
 8005c6c:	f000 fb5c 	bl	8006328 <_sbrk_r>
 8005c70:	4581      	cmp	r9, r0
 8005c72:	d142      	bne.n	8005cfa <_malloc_r+0xea>
 8005c74:	6821      	ldr	r1, [r4, #0]
 8005c76:	1a6d      	subs	r5, r5, r1
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ffa6 	bl	8005bcc <sbrk_aligned>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d03a      	beq.n	8005cfa <_malloc_r+0xea>
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	442b      	add	r3, r5
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	bb62      	cbnz	r2, 8005cec <_malloc_r+0xdc>
 8005c92:	f8c8 7000 	str.w	r7, [r8]
 8005c96:	e00f      	b.n	8005cb8 <_malloc_r+0xa8>
 8005c98:	6822      	ldr	r2, [r4, #0]
 8005c9a:	1b52      	subs	r2, r2, r5
 8005c9c:	d420      	bmi.n	8005ce0 <_malloc_r+0xd0>
 8005c9e:	2a0b      	cmp	r2, #11
 8005ca0:	d917      	bls.n	8005cd2 <_malloc_r+0xc2>
 8005ca2:	1961      	adds	r1, r4, r5
 8005ca4:	42a3      	cmp	r3, r4
 8005ca6:	6025      	str	r5, [r4, #0]
 8005ca8:	bf18      	it	ne
 8005caa:	6059      	strne	r1, [r3, #4]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	bf08      	it	eq
 8005cb0:	f8c8 1000 	streq.w	r1, [r8]
 8005cb4:	5162      	str	r2, [r4, r5]
 8005cb6:	604b      	str	r3, [r1, #4]
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f000 f82f 	bl	8005d1c <__malloc_unlock>
 8005cbe:	f104 000b 	add.w	r0, r4, #11
 8005cc2:	1d23      	adds	r3, r4, #4
 8005cc4:	f020 0007 	bic.w	r0, r0, #7
 8005cc8:	1ac2      	subs	r2, r0, r3
 8005cca:	bf1c      	itt	ne
 8005ccc:	1a1b      	subne	r3, r3, r0
 8005cce:	50a3      	strne	r3, [r4, r2]
 8005cd0:	e7af      	b.n	8005c32 <_malloc_r+0x22>
 8005cd2:	6862      	ldr	r2, [r4, #4]
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	bf0c      	ite	eq
 8005cd8:	f8c8 2000 	streq.w	r2, [r8]
 8005cdc:	605a      	strne	r2, [r3, #4]
 8005cde:	e7eb      	b.n	8005cb8 <_malloc_r+0xa8>
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	6864      	ldr	r4, [r4, #4]
 8005ce4:	e7ae      	b.n	8005c44 <_malloc_r+0x34>
 8005ce6:	463c      	mov	r4, r7
 8005ce8:	687f      	ldr	r7, [r7, #4]
 8005cea:	e7b6      	b.n	8005c5a <_malloc_r+0x4a>
 8005cec:	461a      	mov	r2, r3
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d1fb      	bne.n	8005cec <_malloc_r+0xdc>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	6053      	str	r3, [r2, #4]
 8005cf8:	e7de      	b.n	8005cb8 <_malloc_r+0xa8>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	6033      	str	r3, [r6, #0]
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f000 f80c 	bl	8005d1c <__malloc_unlock>
 8005d04:	e794      	b.n	8005c30 <_malloc_r+0x20>
 8005d06:	6005      	str	r5, [r0, #0]
 8005d08:	e7d6      	b.n	8005cb8 <_malloc_r+0xa8>
 8005d0a:	bf00      	nop
 8005d0c:	20001d2c 	.word	0x20001d2c

08005d10 <__malloc_lock>:
 8005d10:	4801      	ldr	r0, [pc, #4]	@ (8005d18 <__malloc_lock+0x8>)
 8005d12:	f7ff bf01 	b.w	8005b18 <__retarget_lock_acquire_recursive>
 8005d16:	bf00      	nop
 8005d18:	20001d24 	.word	0x20001d24

08005d1c <__malloc_unlock>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	@ (8005d24 <__malloc_unlock+0x8>)
 8005d1e:	f7ff befc 	b.w	8005b1a <__retarget_lock_release_recursive>
 8005d22:	bf00      	nop
 8005d24:	20001d24 	.word	0x20001d24

08005d28 <__ssputs_r>:
 8005d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2c:	688e      	ldr	r6, [r1, #8]
 8005d2e:	461f      	mov	r7, r3
 8005d30:	42be      	cmp	r6, r7
 8005d32:	680b      	ldr	r3, [r1, #0]
 8005d34:	4682      	mov	sl, r0
 8005d36:	460c      	mov	r4, r1
 8005d38:	4690      	mov	r8, r2
 8005d3a:	d82d      	bhi.n	8005d98 <__ssputs_r+0x70>
 8005d3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d44:	d026      	beq.n	8005d94 <__ssputs_r+0x6c>
 8005d46:	6965      	ldr	r5, [r4, #20]
 8005d48:	6909      	ldr	r1, [r1, #16]
 8005d4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d4e:	eba3 0901 	sub.w	r9, r3, r1
 8005d52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d56:	1c7b      	adds	r3, r7, #1
 8005d58:	444b      	add	r3, r9
 8005d5a:	106d      	asrs	r5, r5, #1
 8005d5c:	429d      	cmp	r5, r3
 8005d5e:	bf38      	it	cc
 8005d60:	461d      	movcc	r5, r3
 8005d62:	0553      	lsls	r3, r2, #21
 8005d64:	d527      	bpl.n	8005db6 <__ssputs_r+0x8e>
 8005d66:	4629      	mov	r1, r5
 8005d68:	f7ff ff52 	bl	8005c10 <_malloc_r>
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	b360      	cbz	r0, 8005dca <__ssputs_r+0xa2>
 8005d70:	6921      	ldr	r1, [r4, #16]
 8005d72:	464a      	mov	r2, r9
 8005d74:	f7ff fed2 	bl	8005b1c <memcpy>
 8005d78:	89a3      	ldrh	r3, [r4, #12]
 8005d7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	6126      	str	r6, [r4, #16]
 8005d86:	6165      	str	r5, [r4, #20]
 8005d88:	444e      	add	r6, r9
 8005d8a:	eba5 0509 	sub.w	r5, r5, r9
 8005d8e:	6026      	str	r6, [r4, #0]
 8005d90:	60a5      	str	r5, [r4, #8]
 8005d92:	463e      	mov	r6, r7
 8005d94:	42be      	cmp	r6, r7
 8005d96:	d900      	bls.n	8005d9a <__ssputs_r+0x72>
 8005d98:	463e      	mov	r6, r7
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	4632      	mov	r2, r6
 8005d9e:	4641      	mov	r1, r8
 8005da0:	f000 faa8 	bl	80062f4 <memmove>
 8005da4:	68a3      	ldr	r3, [r4, #8]
 8005da6:	1b9b      	subs	r3, r3, r6
 8005da8:	60a3      	str	r3, [r4, #8]
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	4433      	add	r3, r6
 8005dae:	6023      	str	r3, [r4, #0]
 8005db0:	2000      	movs	r0, #0
 8005db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005db6:	462a      	mov	r2, r5
 8005db8:	f000 fac6 	bl	8006348 <_realloc_r>
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	2800      	cmp	r0, #0
 8005dc0:	d1e0      	bne.n	8005d84 <__ssputs_r+0x5c>
 8005dc2:	6921      	ldr	r1, [r4, #16]
 8005dc4:	4650      	mov	r0, sl
 8005dc6:	f7ff feb7 	bl	8005b38 <_free_r>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	f8ca 3000 	str.w	r3, [sl]
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005ddc:	e7e9      	b.n	8005db2 <__ssputs_r+0x8a>
	...

08005de0 <_svfiprintf_r>:
 8005de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de4:	4698      	mov	r8, r3
 8005de6:	898b      	ldrh	r3, [r1, #12]
 8005de8:	061b      	lsls	r3, r3, #24
 8005dea:	b09d      	sub	sp, #116	@ 0x74
 8005dec:	4607      	mov	r7, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	d510      	bpl.n	8005e16 <_svfiprintf_r+0x36>
 8005df4:	690b      	ldr	r3, [r1, #16]
 8005df6:	b973      	cbnz	r3, 8005e16 <_svfiprintf_r+0x36>
 8005df8:	2140      	movs	r1, #64	@ 0x40
 8005dfa:	f7ff ff09 	bl	8005c10 <_malloc_r>
 8005dfe:	6028      	str	r0, [r5, #0]
 8005e00:	6128      	str	r0, [r5, #16]
 8005e02:	b930      	cbnz	r0, 8005e12 <_svfiprintf_r+0x32>
 8005e04:	230c      	movs	r3, #12
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	f04f 30ff 	mov.w	r0, #4294967295
 8005e0c:	b01d      	add	sp, #116	@ 0x74
 8005e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e12:	2340      	movs	r3, #64	@ 0x40
 8005e14:	616b      	str	r3, [r5, #20]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e1a:	2320      	movs	r3, #32
 8005e1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e24:	2330      	movs	r3, #48	@ 0x30
 8005e26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005fc4 <_svfiprintf_r+0x1e4>
 8005e2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e2e:	f04f 0901 	mov.w	r9, #1
 8005e32:	4623      	mov	r3, r4
 8005e34:	469a      	mov	sl, r3
 8005e36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e3a:	b10a      	cbz	r2, 8005e40 <_svfiprintf_r+0x60>
 8005e3c:	2a25      	cmp	r2, #37	@ 0x25
 8005e3e:	d1f9      	bne.n	8005e34 <_svfiprintf_r+0x54>
 8005e40:	ebba 0b04 	subs.w	fp, sl, r4
 8005e44:	d00b      	beq.n	8005e5e <_svfiprintf_r+0x7e>
 8005e46:	465b      	mov	r3, fp
 8005e48:	4622      	mov	r2, r4
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4638      	mov	r0, r7
 8005e4e:	f7ff ff6b 	bl	8005d28 <__ssputs_r>
 8005e52:	3001      	adds	r0, #1
 8005e54:	f000 80a7 	beq.w	8005fa6 <_svfiprintf_r+0x1c6>
 8005e58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e5a:	445a      	add	r2, fp
 8005e5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 809f 	beq.w	8005fa6 <_svfiprintf_r+0x1c6>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e72:	f10a 0a01 	add.w	sl, sl, #1
 8005e76:	9304      	str	r3, [sp, #16]
 8005e78:	9307      	str	r3, [sp, #28]
 8005e7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e80:	4654      	mov	r4, sl
 8005e82:	2205      	movs	r2, #5
 8005e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e88:	484e      	ldr	r0, [pc, #312]	@ (8005fc4 <_svfiprintf_r+0x1e4>)
 8005e8a:	f7fa f9a1 	bl	80001d0 <memchr>
 8005e8e:	9a04      	ldr	r2, [sp, #16]
 8005e90:	b9d8      	cbnz	r0, 8005eca <_svfiprintf_r+0xea>
 8005e92:	06d0      	lsls	r0, r2, #27
 8005e94:	bf44      	itt	mi
 8005e96:	2320      	movmi	r3, #32
 8005e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e9c:	0711      	lsls	r1, r2, #28
 8005e9e:	bf44      	itt	mi
 8005ea0:	232b      	movmi	r3, #43	@ 0x2b
 8005ea2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eac:	d015      	beq.n	8005eda <_svfiprintf_r+0xfa>
 8005eae:	9a07      	ldr	r2, [sp, #28]
 8005eb0:	4654      	mov	r4, sl
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	f04f 0c0a 	mov.w	ip, #10
 8005eb8:	4621      	mov	r1, r4
 8005eba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ebe:	3b30      	subs	r3, #48	@ 0x30
 8005ec0:	2b09      	cmp	r3, #9
 8005ec2:	d94b      	bls.n	8005f5c <_svfiprintf_r+0x17c>
 8005ec4:	b1b0      	cbz	r0, 8005ef4 <_svfiprintf_r+0x114>
 8005ec6:	9207      	str	r2, [sp, #28]
 8005ec8:	e014      	b.n	8005ef4 <_svfiprintf_r+0x114>
 8005eca:	eba0 0308 	sub.w	r3, r0, r8
 8005ece:	fa09 f303 	lsl.w	r3, r9, r3
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	46a2      	mov	sl, r4
 8005ed8:	e7d2      	b.n	8005e80 <_svfiprintf_r+0xa0>
 8005eda:	9b03      	ldr	r3, [sp, #12]
 8005edc:	1d19      	adds	r1, r3, #4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	9103      	str	r1, [sp, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	bfbb      	ittet	lt
 8005ee6:	425b      	neglt	r3, r3
 8005ee8:	f042 0202 	orrlt.w	r2, r2, #2
 8005eec:	9307      	strge	r3, [sp, #28]
 8005eee:	9307      	strlt	r3, [sp, #28]
 8005ef0:	bfb8      	it	lt
 8005ef2:	9204      	strlt	r2, [sp, #16]
 8005ef4:	7823      	ldrb	r3, [r4, #0]
 8005ef6:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ef8:	d10a      	bne.n	8005f10 <_svfiprintf_r+0x130>
 8005efa:	7863      	ldrb	r3, [r4, #1]
 8005efc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005efe:	d132      	bne.n	8005f66 <_svfiprintf_r+0x186>
 8005f00:	9b03      	ldr	r3, [sp, #12]
 8005f02:	1d1a      	adds	r2, r3, #4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	9203      	str	r2, [sp, #12]
 8005f08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f0c:	3402      	adds	r4, #2
 8005f0e:	9305      	str	r3, [sp, #20]
 8005f10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005fd4 <_svfiprintf_r+0x1f4>
 8005f14:	7821      	ldrb	r1, [r4, #0]
 8005f16:	2203      	movs	r2, #3
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f7fa f959 	bl	80001d0 <memchr>
 8005f1e:	b138      	cbz	r0, 8005f30 <_svfiprintf_r+0x150>
 8005f20:	9b04      	ldr	r3, [sp, #16]
 8005f22:	eba0 000a 	sub.w	r0, r0, sl
 8005f26:	2240      	movs	r2, #64	@ 0x40
 8005f28:	4082      	lsls	r2, r0
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	3401      	adds	r4, #1
 8005f2e:	9304      	str	r3, [sp, #16]
 8005f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f34:	4824      	ldr	r0, [pc, #144]	@ (8005fc8 <_svfiprintf_r+0x1e8>)
 8005f36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f3a:	2206      	movs	r2, #6
 8005f3c:	f7fa f948 	bl	80001d0 <memchr>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d036      	beq.n	8005fb2 <_svfiprintf_r+0x1d2>
 8005f44:	4b21      	ldr	r3, [pc, #132]	@ (8005fcc <_svfiprintf_r+0x1ec>)
 8005f46:	bb1b      	cbnz	r3, 8005f90 <_svfiprintf_r+0x1b0>
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	3307      	adds	r3, #7
 8005f4c:	f023 0307 	bic.w	r3, r3, #7
 8005f50:	3308      	adds	r3, #8
 8005f52:	9303      	str	r3, [sp, #12]
 8005f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f56:	4433      	add	r3, r6
 8005f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f5a:	e76a      	b.n	8005e32 <_svfiprintf_r+0x52>
 8005f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f60:	460c      	mov	r4, r1
 8005f62:	2001      	movs	r0, #1
 8005f64:	e7a8      	b.n	8005eb8 <_svfiprintf_r+0xd8>
 8005f66:	2300      	movs	r3, #0
 8005f68:	3401      	adds	r4, #1
 8005f6a:	9305      	str	r3, [sp, #20]
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	f04f 0c0a 	mov.w	ip, #10
 8005f72:	4620      	mov	r0, r4
 8005f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f78:	3a30      	subs	r2, #48	@ 0x30
 8005f7a:	2a09      	cmp	r2, #9
 8005f7c:	d903      	bls.n	8005f86 <_svfiprintf_r+0x1a6>
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0c6      	beq.n	8005f10 <_svfiprintf_r+0x130>
 8005f82:	9105      	str	r1, [sp, #20]
 8005f84:	e7c4      	b.n	8005f10 <_svfiprintf_r+0x130>
 8005f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e7f0      	b.n	8005f72 <_svfiprintf_r+0x192>
 8005f90:	ab03      	add	r3, sp, #12
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	462a      	mov	r2, r5
 8005f96:	4b0e      	ldr	r3, [pc, #56]	@ (8005fd0 <_svfiprintf_r+0x1f0>)
 8005f98:	a904      	add	r1, sp, #16
 8005f9a:	4638      	mov	r0, r7
 8005f9c:	f3af 8000 	nop.w
 8005fa0:	1c42      	adds	r2, r0, #1
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	d1d6      	bne.n	8005f54 <_svfiprintf_r+0x174>
 8005fa6:	89ab      	ldrh	r3, [r5, #12]
 8005fa8:	065b      	lsls	r3, r3, #25
 8005faa:	f53f af2d 	bmi.w	8005e08 <_svfiprintf_r+0x28>
 8005fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fb0:	e72c      	b.n	8005e0c <_svfiprintf_r+0x2c>
 8005fb2:	ab03      	add	r3, sp, #12
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	462a      	mov	r2, r5
 8005fb8:	4b05      	ldr	r3, [pc, #20]	@ (8005fd0 <_svfiprintf_r+0x1f0>)
 8005fba:	a904      	add	r1, sp, #16
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	f000 f879 	bl	80060b4 <_printf_i>
 8005fc2:	e7ed      	b.n	8005fa0 <_svfiprintf_r+0x1c0>
 8005fc4:	080064f0 	.word	0x080064f0
 8005fc8:	080064fa 	.word	0x080064fa
 8005fcc:	00000000 	.word	0x00000000
 8005fd0:	08005d29 	.word	0x08005d29
 8005fd4:	080064f6 	.word	0x080064f6

08005fd8 <_printf_common>:
 8005fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fdc:	4616      	mov	r6, r2
 8005fde:	4698      	mov	r8, r3
 8005fe0:	688a      	ldr	r2, [r1, #8]
 8005fe2:	690b      	ldr	r3, [r1, #16]
 8005fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	bfb8      	it	lt
 8005fec:	4613      	movlt	r3, r2
 8005fee:	6033      	str	r3, [r6, #0]
 8005ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	b10a      	cbz	r2, 8005ffe <_printf_common+0x26>
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	6033      	str	r3, [r6, #0]
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	0699      	lsls	r1, r3, #26
 8006002:	bf42      	ittt	mi
 8006004:	6833      	ldrmi	r3, [r6, #0]
 8006006:	3302      	addmi	r3, #2
 8006008:	6033      	strmi	r3, [r6, #0]
 800600a:	6825      	ldr	r5, [r4, #0]
 800600c:	f015 0506 	ands.w	r5, r5, #6
 8006010:	d106      	bne.n	8006020 <_printf_common+0x48>
 8006012:	f104 0a19 	add.w	sl, r4, #25
 8006016:	68e3      	ldr	r3, [r4, #12]
 8006018:	6832      	ldr	r2, [r6, #0]
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	42ab      	cmp	r3, r5
 800601e:	dc26      	bgt.n	800606e <_printf_common+0x96>
 8006020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006024:	6822      	ldr	r2, [r4, #0]
 8006026:	3b00      	subs	r3, #0
 8006028:	bf18      	it	ne
 800602a:	2301      	movne	r3, #1
 800602c:	0692      	lsls	r2, r2, #26
 800602e:	d42b      	bmi.n	8006088 <_printf_common+0xb0>
 8006030:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006034:	4641      	mov	r1, r8
 8006036:	4638      	mov	r0, r7
 8006038:	47c8      	blx	r9
 800603a:	3001      	adds	r0, #1
 800603c:	d01e      	beq.n	800607c <_printf_common+0xa4>
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	6922      	ldr	r2, [r4, #16]
 8006042:	f003 0306 	and.w	r3, r3, #6
 8006046:	2b04      	cmp	r3, #4
 8006048:	bf02      	ittt	eq
 800604a:	68e5      	ldreq	r5, [r4, #12]
 800604c:	6833      	ldreq	r3, [r6, #0]
 800604e:	1aed      	subeq	r5, r5, r3
 8006050:	68a3      	ldr	r3, [r4, #8]
 8006052:	bf0c      	ite	eq
 8006054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006058:	2500      	movne	r5, #0
 800605a:	4293      	cmp	r3, r2
 800605c:	bfc4      	itt	gt
 800605e:	1a9b      	subgt	r3, r3, r2
 8006060:	18ed      	addgt	r5, r5, r3
 8006062:	2600      	movs	r6, #0
 8006064:	341a      	adds	r4, #26
 8006066:	42b5      	cmp	r5, r6
 8006068:	d11a      	bne.n	80060a0 <_printf_common+0xc8>
 800606a:	2000      	movs	r0, #0
 800606c:	e008      	b.n	8006080 <_printf_common+0xa8>
 800606e:	2301      	movs	r3, #1
 8006070:	4652      	mov	r2, sl
 8006072:	4641      	mov	r1, r8
 8006074:	4638      	mov	r0, r7
 8006076:	47c8      	blx	r9
 8006078:	3001      	adds	r0, #1
 800607a:	d103      	bne.n	8006084 <_printf_common+0xac>
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006084:	3501      	adds	r5, #1
 8006086:	e7c6      	b.n	8006016 <_printf_common+0x3e>
 8006088:	18e1      	adds	r1, r4, r3
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	2030      	movs	r0, #48	@ 0x30
 800608e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006092:	4422      	add	r2, r4
 8006094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800609c:	3302      	adds	r3, #2
 800609e:	e7c7      	b.n	8006030 <_printf_common+0x58>
 80060a0:	2301      	movs	r3, #1
 80060a2:	4622      	mov	r2, r4
 80060a4:	4641      	mov	r1, r8
 80060a6:	4638      	mov	r0, r7
 80060a8:	47c8      	blx	r9
 80060aa:	3001      	adds	r0, #1
 80060ac:	d0e6      	beq.n	800607c <_printf_common+0xa4>
 80060ae:	3601      	adds	r6, #1
 80060b0:	e7d9      	b.n	8006066 <_printf_common+0x8e>
	...

080060b4 <_printf_i>:
 80060b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	7e0f      	ldrb	r7, [r1, #24]
 80060ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060bc:	2f78      	cmp	r7, #120	@ 0x78
 80060be:	4691      	mov	r9, r2
 80060c0:	4680      	mov	r8, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	469a      	mov	sl, r3
 80060c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ca:	d807      	bhi.n	80060dc <_printf_i+0x28>
 80060cc:	2f62      	cmp	r7, #98	@ 0x62
 80060ce:	d80a      	bhi.n	80060e6 <_printf_i+0x32>
 80060d0:	2f00      	cmp	r7, #0
 80060d2:	f000 80d2 	beq.w	800627a <_printf_i+0x1c6>
 80060d6:	2f58      	cmp	r7, #88	@ 0x58
 80060d8:	f000 80b9 	beq.w	800624e <_printf_i+0x19a>
 80060dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060e4:	e03a      	b.n	800615c <_printf_i+0xa8>
 80060e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ea:	2b15      	cmp	r3, #21
 80060ec:	d8f6      	bhi.n	80060dc <_printf_i+0x28>
 80060ee:	a101      	add	r1, pc, #4	@ (adr r1, 80060f4 <_printf_i+0x40>)
 80060f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	08006161 	.word	0x08006161
 80060fc:	080060dd 	.word	0x080060dd
 8006100:	080060dd 	.word	0x080060dd
 8006104:	080060dd 	.word	0x080060dd
 8006108:	080060dd 	.word	0x080060dd
 800610c:	08006161 	.word	0x08006161
 8006110:	080060dd 	.word	0x080060dd
 8006114:	080060dd 	.word	0x080060dd
 8006118:	080060dd 	.word	0x080060dd
 800611c:	080060dd 	.word	0x080060dd
 8006120:	08006261 	.word	0x08006261
 8006124:	0800618b 	.word	0x0800618b
 8006128:	0800621b 	.word	0x0800621b
 800612c:	080060dd 	.word	0x080060dd
 8006130:	080060dd 	.word	0x080060dd
 8006134:	08006283 	.word	0x08006283
 8006138:	080060dd 	.word	0x080060dd
 800613c:	0800618b 	.word	0x0800618b
 8006140:	080060dd 	.word	0x080060dd
 8006144:	080060dd 	.word	0x080060dd
 8006148:	08006223 	.word	0x08006223
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	1d1a      	adds	r2, r3, #4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6032      	str	r2, [r6, #0]
 8006154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800615c:	2301      	movs	r3, #1
 800615e:	e09d      	b.n	800629c <_printf_i+0x1e8>
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	6820      	ldr	r0, [r4, #0]
 8006164:	1d19      	adds	r1, r3, #4
 8006166:	6031      	str	r1, [r6, #0]
 8006168:	0606      	lsls	r6, r0, #24
 800616a:	d501      	bpl.n	8006170 <_printf_i+0xbc>
 800616c:	681d      	ldr	r5, [r3, #0]
 800616e:	e003      	b.n	8006178 <_printf_i+0xc4>
 8006170:	0645      	lsls	r5, r0, #25
 8006172:	d5fb      	bpl.n	800616c <_printf_i+0xb8>
 8006174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006178:	2d00      	cmp	r5, #0
 800617a:	da03      	bge.n	8006184 <_printf_i+0xd0>
 800617c:	232d      	movs	r3, #45	@ 0x2d
 800617e:	426d      	negs	r5, r5
 8006180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006184:	4859      	ldr	r0, [pc, #356]	@ (80062ec <_printf_i+0x238>)
 8006186:	230a      	movs	r3, #10
 8006188:	e011      	b.n	80061ae <_printf_i+0xfa>
 800618a:	6821      	ldr	r1, [r4, #0]
 800618c:	6833      	ldr	r3, [r6, #0]
 800618e:	0608      	lsls	r0, r1, #24
 8006190:	f853 5b04 	ldr.w	r5, [r3], #4
 8006194:	d402      	bmi.n	800619c <_printf_i+0xe8>
 8006196:	0649      	lsls	r1, r1, #25
 8006198:	bf48      	it	mi
 800619a:	b2ad      	uxthmi	r5, r5
 800619c:	2f6f      	cmp	r7, #111	@ 0x6f
 800619e:	4853      	ldr	r0, [pc, #332]	@ (80062ec <_printf_i+0x238>)
 80061a0:	6033      	str	r3, [r6, #0]
 80061a2:	bf14      	ite	ne
 80061a4:	230a      	movne	r3, #10
 80061a6:	2308      	moveq	r3, #8
 80061a8:	2100      	movs	r1, #0
 80061aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ae:	6866      	ldr	r6, [r4, #4]
 80061b0:	60a6      	str	r6, [r4, #8]
 80061b2:	2e00      	cmp	r6, #0
 80061b4:	bfa2      	ittt	ge
 80061b6:	6821      	ldrge	r1, [r4, #0]
 80061b8:	f021 0104 	bicge.w	r1, r1, #4
 80061bc:	6021      	strge	r1, [r4, #0]
 80061be:	b90d      	cbnz	r5, 80061c4 <_printf_i+0x110>
 80061c0:	2e00      	cmp	r6, #0
 80061c2:	d04b      	beq.n	800625c <_printf_i+0x1a8>
 80061c4:	4616      	mov	r6, r2
 80061c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ca:	fb03 5711 	mls	r7, r3, r1, r5
 80061ce:	5dc7      	ldrb	r7, [r0, r7]
 80061d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061d4:	462f      	mov	r7, r5
 80061d6:	42bb      	cmp	r3, r7
 80061d8:	460d      	mov	r5, r1
 80061da:	d9f4      	bls.n	80061c6 <_printf_i+0x112>
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d10b      	bne.n	80061f8 <_printf_i+0x144>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	07df      	lsls	r7, r3, #31
 80061e4:	d508      	bpl.n	80061f8 <_printf_i+0x144>
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	6861      	ldr	r1, [r4, #4]
 80061ea:	4299      	cmp	r1, r3
 80061ec:	bfde      	ittt	le
 80061ee:	2330      	movle	r3, #48	@ 0x30
 80061f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061f8:	1b92      	subs	r2, r2, r6
 80061fa:	6122      	str	r2, [r4, #16]
 80061fc:	f8cd a000 	str.w	sl, [sp]
 8006200:	464b      	mov	r3, r9
 8006202:	aa03      	add	r2, sp, #12
 8006204:	4621      	mov	r1, r4
 8006206:	4640      	mov	r0, r8
 8006208:	f7ff fee6 	bl	8005fd8 <_printf_common>
 800620c:	3001      	adds	r0, #1
 800620e:	d14a      	bne.n	80062a6 <_printf_i+0x1f2>
 8006210:	f04f 30ff 	mov.w	r0, #4294967295
 8006214:	b004      	add	sp, #16
 8006216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	f043 0320 	orr.w	r3, r3, #32
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	4833      	ldr	r0, [pc, #204]	@ (80062f0 <_printf_i+0x23c>)
 8006224:	2778      	movs	r7, #120	@ 0x78
 8006226:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	6831      	ldr	r1, [r6, #0]
 800622e:	061f      	lsls	r7, r3, #24
 8006230:	f851 5b04 	ldr.w	r5, [r1], #4
 8006234:	d402      	bmi.n	800623c <_printf_i+0x188>
 8006236:	065f      	lsls	r7, r3, #25
 8006238:	bf48      	it	mi
 800623a:	b2ad      	uxthmi	r5, r5
 800623c:	6031      	str	r1, [r6, #0]
 800623e:	07d9      	lsls	r1, r3, #31
 8006240:	bf44      	itt	mi
 8006242:	f043 0320 	orrmi.w	r3, r3, #32
 8006246:	6023      	strmi	r3, [r4, #0]
 8006248:	b11d      	cbz	r5, 8006252 <_printf_i+0x19e>
 800624a:	2310      	movs	r3, #16
 800624c:	e7ac      	b.n	80061a8 <_printf_i+0xf4>
 800624e:	4827      	ldr	r0, [pc, #156]	@ (80062ec <_printf_i+0x238>)
 8006250:	e7e9      	b.n	8006226 <_printf_i+0x172>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	f023 0320 	bic.w	r3, r3, #32
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	e7f6      	b.n	800624a <_printf_i+0x196>
 800625c:	4616      	mov	r6, r2
 800625e:	e7bd      	b.n	80061dc <_printf_i+0x128>
 8006260:	6833      	ldr	r3, [r6, #0]
 8006262:	6825      	ldr	r5, [r4, #0]
 8006264:	6961      	ldr	r1, [r4, #20]
 8006266:	1d18      	adds	r0, r3, #4
 8006268:	6030      	str	r0, [r6, #0]
 800626a:	062e      	lsls	r6, r5, #24
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	d501      	bpl.n	8006274 <_printf_i+0x1c0>
 8006270:	6019      	str	r1, [r3, #0]
 8006272:	e002      	b.n	800627a <_printf_i+0x1c6>
 8006274:	0668      	lsls	r0, r5, #25
 8006276:	d5fb      	bpl.n	8006270 <_printf_i+0x1bc>
 8006278:	8019      	strh	r1, [r3, #0]
 800627a:	2300      	movs	r3, #0
 800627c:	6123      	str	r3, [r4, #16]
 800627e:	4616      	mov	r6, r2
 8006280:	e7bc      	b.n	80061fc <_printf_i+0x148>
 8006282:	6833      	ldr	r3, [r6, #0]
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	6032      	str	r2, [r6, #0]
 8006288:	681e      	ldr	r6, [r3, #0]
 800628a:	6862      	ldr	r2, [r4, #4]
 800628c:	2100      	movs	r1, #0
 800628e:	4630      	mov	r0, r6
 8006290:	f7f9 ff9e 	bl	80001d0 <memchr>
 8006294:	b108      	cbz	r0, 800629a <_printf_i+0x1e6>
 8006296:	1b80      	subs	r0, r0, r6
 8006298:	6060      	str	r0, [r4, #4]
 800629a:	6863      	ldr	r3, [r4, #4]
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	2300      	movs	r3, #0
 80062a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062a4:	e7aa      	b.n	80061fc <_printf_i+0x148>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	4632      	mov	r2, r6
 80062aa:	4649      	mov	r1, r9
 80062ac:	4640      	mov	r0, r8
 80062ae:	47d0      	blx	sl
 80062b0:	3001      	adds	r0, #1
 80062b2:	d0ad      	beq.n	8006210 <_printf_i+0x15c>
 80062b4:	6823      	ldr	r3, [r4, #0]
 80062b6:	079b      	lsls	r3, r3, #30
 80062b8:	d413      	bmi.n	80062e2 <_printf_i+0x22e>
 80062ba:	68e0      	ldr	r0, [r4, #12]
 80062bc:	9b03      	ldr	r3, [sp, #12]
 80062be:	4298      	cmp	r0, r3
 80062c0:	bfb8      	it	lt
 80062c2:	4618      	movlt	r0, r3
 80062c4:	e7a6      	b.n	8006214 <_printf_i+0x160>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4632      	mov	r2, r6
 80062ca:	4649      	mov	r1, r9
 80062cc:	4640      	mov	r0, r8
 80062ce:	47d0      	blx	sl
 80062d0:	3001      	adds	r0, #1
 80062d2:	d09d      	beq.n	8006210 <_printf_i+0x15c>
 80062d4:	3501      	adds	r5, #1
 80062d6:	68e3      	ldr	r3, [r4, #12]
 80062d8:	9903      	ldr	r1, [sp, #12]
 80062da:	1a5b      	subs	r3, r3, r1
 80062dc:	42ab      	cmp	r3, r5
 80062de:	dcf2      	bgt.n	80062c6 <_printf_i+0x212>
 80062e0:	e7eb      	b.n	80062ba <_printf_i+0x206>
 80062e2:	2500      	movs	r5, #0
 80062e4:	f104 0619 	add.w	r6, r4, #25
 80062e8:	e7f5      	b.n	80062d6 <_printf_i+0x222>
 80062ea:	bf00      	nop
 80062ec:	08006501 	.word	0x08006501
 80062f0:	08006512 	.word	0x08006512

080062f4 <memmove>:
 80062f4:	4288      	cmp	r0, r1
 80062f6:	b510      	push	{r4, lr}
 80062f8:	eb01 0402 	add.w	r4, r1, r2
 80062fc:	d902      	bls.n	8006304 <memmove+0x10>
 80062fe:	4284      	cmp	r4, r0
 8006300:	4623      	mov	r3, r4
 8006302:	d807      	bhi.n	8006314 <memmove+0x20>
 8006304:	1e43      	subs	r3, r0, #1
 8006306:	42a1      	cmp	r1, r4
 8006308:	d008      	beq.n	800631c <memmove+0x28>
 800630a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800630e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006312:	e7f8      	b.n	8006306 <memmove+0x12>
 8006314:	4402      	add	r2, r0
 8006316:	4601      	mov	r1, r0
 8006318:	428a      	cmp	r2, r1
 800631a:	d100      	bne.n	800631e <memmove+0x2a>
 800631c:	bd10      	pop	{r4, pc}
 800631e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006326:	e7f7      	b.n	8006318 <memmove+0x24>

08006328 <_sbrk_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4d06      	ldr	r5, [pc, #24]	@ (8006344 <_sbrk_r+0x1c>)
 800632c:	2300      	movs	r3, #0
 800632e:	4604      	mov	r4, r0
 8006330:	4608      	mov	r0, r1
 8006332:	602b      	str	r3, [r5, #0]
 8006334:	f7fa ffc8 	bl	80012c8 <_sbrk>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_sbrk_r+0x1a>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	b103      	cbz	r3, 8006342 <_sbrk_r+0x1a>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	20001d20 	.word	0x20001d20

08006348 <_realloc_r>:
 8006348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800634c:	4680      	mov	r8, r0
 800634e:	4615      	mov	r5, r2
 8006350:	460c      	mov	r4, r1
 8006352:	b921      	cbnz	r1, 800635e <_realloc_r+0x16>
 8006354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006358:	4611      	mov	r1, r2
 800635a:	f7ff bc59 	b.w	8005c10 <_malloc_r>
 800635e:	b92a      	cbnz	r2, 800636c <_realloc_r+0x24>
 8006360:	f7ff fbea 	bl	8005b38 <_free_r>
 8006364:	2400      	movs	r4, #0
 8006366:	4620      	mov	r0, r4
 8006368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800636c:	f000 f81a 	bl	80063a4 <_malloc_usable_size_r>
 8006370:	4285      	cmp	r5, r0
 8006372:	4606      	mov	r6, r0
 8006374:	d802      	bhi.n	800637c <_realloc_r+0x34>
 8006376:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800637a:	d8f4      	bhi.n	8006366 <_realloc_r+0x1e>
 800637c:	4629      	mov	r1, r5
 800637e:	4640      	mov	r0, r8
 8006380:	f7ff fc46 	bl	8005c10 <_malloc_r>
 8006384:	4607      	mov	r7, r0
 8006386:	2800      	cmp	r0, #0
 8006388:	d0ec      	beq.n	8006364 <_realloc_r+0x1c>
 800638a:	42b5      	cmp	r5, r6
 800638c:	462a      	mov	r2, r5
 800638e:	4621      	mov	r1, r4
 8006390:	bf28      	it	cs
 8006392:	4632      	movcs	r2, r6
 8006394:	f7ff fbc2 	bl	8005b1c <memcpy>
 8006398:	4621      	mov	r1, r4
 800639a:	4640      	mov	r0, r8
 800639c:	f7ff fbcc 	bl	8005b38 <_free_r>
 80063a0:	463c      	mov	r4, r7
 80063a2:	e7e0      	b.n	8006366 <_realloc_r+0x1e>

080063a4 <_malloc_usable_size_r>:
 80063a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a8:	1f18      	subs	r0, r3, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bfbc      	itt	lt
 80063ae:	580b      	ldrlt	r3, [r1, r0]
 80063b0:	18c0      	addlt	r0, r0, r3
 80063b2:	4770      	bx	lr

080063b4 <_init>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	bf00      	nop
 80063b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ba:	bc08      	pop	{r3}
 80063bc:	469e      	mov	lr, r3
 80063be:	4770      	bx	lr

080063c0 <_fini>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	bf00      	nop
 80063c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063c6:	bc08      	pop	{r3}
 80063c8:	469e      	mov	lr, r3
 80063ca:	4770      	bx	lr
