
Wireless_N2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800611c  0800611c  0000711c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006274  08006274  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006274  08006274  00007274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800627c  0800627c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800627c  0800627c  0000727c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006280  08006280  00007280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006284  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c68  20000060  080062e4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cc8  080062e4  00008cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f71  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327c  00000000  00000000  0001e001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  00021280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f27  00000000  00000000  00022638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003961  00000000  00000000  0002355f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157e3  00000000  00000000  00026ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7753  00000000  00000000  0003c6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133df6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000569c  00000000  00000000  00133e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001394d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006104 	.word	0x08006104

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006104 	.word	0x08006104

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	@ (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	@ (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	@ (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <I2C_GPIO_Init1>:
#include "task.h"                       // ARM.FreeRTOS::RTOS:Core
#include "event_groups.h"               // ARM.FreeRTOS::RTOS:Event Groups
#include "semphr.h"                     // ARM.FreeRTOS::RTOS:Core
#include "I2C.h"

void I2C_GPIO_Init1(void) {
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8000304:	4b20      	ldr	r3, [pc, #128]	@ (8000388 <I2C_GPIO_Init1+0x88>)
 8000306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000308:	4a1f      	ldr	r2, [pc, #124]	@ (8000388 <I2C_GPIO_Init1+0x88>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C1EN);
 8000310:	4b1d      	ldr	r3, [pc, #116]	@ (8000388 <I2C_GPIO_Init1+0x88>)
 8000312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000314:	4a1c      	ldr	r2, [pc, #112]	@ (8000388 <I2C_GPIO_Init1+0x88>)
 8000316:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800031a:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 6 and 7 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 800031c:	4b1b      	ldr	r3, [pc, #108]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a1a      	ldr	r2, [pc, #104]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 8000322:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000326:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 8000328:	4b18      	ldr	r3, [pc, #96]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a17      	ldr	r2, [pc, #92]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 800032e:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000332:	6013      	str	r3, [r2, #0]

	// Set Pins 6 and 7 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 8000334:	4b15      	ldr	r3, [pc, #84]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a14      	ldr	r2, [pc, #80]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 800033a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800033e:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a11      	ldr	r2, [pc, #68]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 8000346:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800034a:	6053      	str	r3, [r2, #4]

	// Set pints 6 and 7 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 8000352:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000356:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED6_1 | GPIO_OSPEEDR_OSPEED7_1);
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	4a0b      	ldr	r2, [pc, #44]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 800035e:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8000362:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 8000366:	6a1b      	ldr	r3, [r3, #32]
 8000368:	4a08      	ldr	r2, [pc, #32]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 800036a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800036e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= ((4 << GPIO_AFRL_AFSEL6_Pos) | 4 << GPIO_AFRL_AFSEL7_Pos);
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 8000372:	6a1b      	ldr	r3, [r3, #32]
 8000374:	4a05      	ldr	r2, [pc, #20]	@ (800038c <I2C_GPIO_Init1+0x8c>)
 8000376:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 800037a:	6213      	str	r3, [r2, #32]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	48000400 	.word	0x48000400

08000390 <I2C_GPIO_Init2>:

void I2C_GPIO_Init2(void) {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8000394:	4b20      	ldr	r3, [pc, #128]	@ (8000418 <I2C_GPIO_Init2+0x88>)
 8000396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000398:	4a1f      	ldr	r2, [pc, #124]	@ (8000418 <I2C_GPIO_Init2+0x88>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C2EN);
 80003a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <I2C_GPIO_Init2+0x88>)
 80003a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003a4:	4a1c      	ldr	r2, [pc, #112]	@ (8000418 <I2C_GPIO_Init2+0x88>)
 80003a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80003aa:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 10 and 11 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11);
 80003ac:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a1a      	ldr	r2, [pc, #104]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80003b6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);
 80003b8:	4b18      	ldr	r3, [pc, #96]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a17      	ldr	r2, [pc, #92]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003be:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80003c2:	6013      	str	r3, [r2, #0]

	// Set Pins 10 and 11 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 80003c4:	4b15      	ldr	r3, [pc, #84]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	4a14      	ldr	r2, [pc, #80]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003ce:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4a11      	ldr	r2, [pc, #68]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003d6:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80003da:	6053      	str	r3, [r2, #4]

	// Set pints 10 and 11 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED10 | GPIO_OSPEEDR_OSPEED11);
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80003e6:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED10_1 | GPIO_OSPEEDR_OSPEED11_1);
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	4a0b      	ldr	r2, [pc, #44]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003ee:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 80003f2:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 80003f4:	4b09      	ldr	r3, [pc, #36]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003f8:	4a08      	ldr	r2, [pc, #32]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 80003fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80003fe:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |=
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 8000402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000404:	4a05      	ldr	r2, [pc, #20]	@ (800041c <I2C_GPIO_Init2+0x8c>)
 8000406:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 800040a:	6253      	str	r3, [r2, #36]	@ 0x24
			((4 << GPIO_AFRH_AFSEL10_Pos) | 4 << GPIO_AFRH_AFSEL11_Pos);
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000
 800041c:	48000400 	.word	0x48000400

08000420 <I2C_init1>:

void I2C_init1() {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000424:	4b11      	ldr	r3, [pc, #68]	@ (800046c <I2C_init1+0x4c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a10      	ldr	r2, [pc, #64]	@ (800046c <I2C_init1+0x4c>)
 800042a:	f023 0301 	bic.w	r3, r3, #1
 800042e:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 8000430:	4b0e      	ldr	r3, [pc, #56]	@ (800046c <I2C_init1+0x4c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a0d      	ldr	r2, [pc, #52]	@ (800046c <I2C_init1+0x4c>)
 8000436:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800043a:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;
 800043c:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <I2C_init1+0x4c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a0a      	ldr	r2, [pc, #40]	@ (800046c <I2C_init1+0x4c>)
 8000442:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000446:	6013      	str	r3, [r2, #0]

	I2C1->TIMINGR = 0X0000004;
 8000448:	4b08      	ldr	r3, [pc, #32]	@ (800046c <I2C_init1+0x4c>)
 800044a:	2204      	movs	r2, #4
 800044c:	611a      	str	r2, [r3, #16]

	NVIC_SetPriority(I2C1_EV_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
 800044e:	2105      	movs	r1, #5
 8000450:	201f      	movs	r0, #31
 8000452:	f7ff ff2b 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000456:	201f      	movs	r0, #31
 8000458:	f7ff ff0a 	bl	8000270 <__NVIC_EnableIRQ>

	I2C1->CR1 |= I2C_CR1_PE;
 800045c:	4b03      	ldr	r3, [pc, #12]	@ (800046c <I2C_init1+0x4c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a02      	ldr	r2, [pc, #8]	@ (800046c <I2C_init1+0x4c>)
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6013      	str	r3, [r2, #0]
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40005400 	.word	0x40005400

08000470 <I2C_init2>:

void I2C_init2() {
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	I2C2->CR1 &= ~I2C_CR1_PE;
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <I2C_init2+0x4c>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a10      	ldr	r2, [pc, #64]	@ (80004bc <I2C_init2+0x4c>)
 800047a:	f023 0301 	bic.w	r3, r3, #1
 800047e:	6013      	str	r3, [r2, #0]

	I2C2->CR1 &= ~I2C_CR1_ANFOFF;
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <I2C_init2+0x4c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a0d      	ldr	r2, [pc, #52]	@ (80004bc <I2C_init2+0x4c>)
 8000486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800048a:	6013      	str	r3, [r2, #0]
	I2C2->CR1 &= ~I2C_CR1_NOSTRETCH;
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <I2C_init2+0x4c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0a      	ldr	r2, [pc, #40]	@ (80004bc <I2C_init2+0x4c>)
 8000492:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000496:	6013      	str	r3, [r2, #0]

	I2C2->TIMINGR = 0X0000004;
 8000498:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <I2C_init2+0x4c>)
 800049a:	2204      	movs	r2, #4
 800049c:	611a      	str	r2, [r3, #16]

	NVIC_SetPriority(I2C2_EV_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
 800049e:	2105      	movs	r1, #5
 80004a0:	2021      	movs	r0, #33	@ 0x21
 80004a2:	f7ff ff03 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(I2C2_EV_IRQn);
 80004a6:	2021      	movs	r0, #33	@ 0x21
 80004a8:	f7ff fee2 	bl	8000270 <__NVIC_EnableIRQ>

	I2C2->CR1 |= I2C_CR1_PE;
 80004ac:	4b03      	ldr	r3, [pc, #12]	@ (80004bc <I2C_init2+0x4c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a02      	ldr	r2, [pc, #8]	@ (80004bc <I2C_init2+0x4c>)
 80004b2:	f043 0301 	orr.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40005800 	.word	0x40005800

080004c0 <N2C_Config1>:

/******************************* NUNCHUCK #1 ********************************/

void N2C_Config1() {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 80004ca:	2301      	movs	r3, #1
 80004cc:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 80004d2:	2300      	movs	r3, #0
 80004d4:	71bb      	strb	r3, [r7, #6]
 80004d6:	e05e      	b.n	8000596 <N2C_Config1+0xd6>
		/* Clear and then set AUTOEND bit to 1 */
		I2C1->CR2 &= ~(I2C_CR2_AUTOEND);
 80004d8:	4b33      	ldr	r3, [pc, #204]	@ (80005a8 <N2C_Config1+0xe8>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	4a32      	ldr	r2, [pc, #200]	@ (80005a8 <N2C_Config1+0xe8>)
 80004de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80004e2:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (I2C_CR2_AUTOEND);
 80004e4:	4b30      	ldr	r3, [pc, #192]	@ (80005a8 <N2C_Config1+0xe8>)
 80004e6:	685b      	ldr	r3, [r3, #4]
 80004e8:	4a2f      	ldr	r2, [pc, #188]	@ (80005a8 <N2C_Config1+0xe8>)
 80004ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ee:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 80004f0:	4b2d      	ldr	r3, [pc, #180]	@ (80005a8 <N2C_Config1+0xe8>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4a2c      	ldr	r2, [pc, #176]	@ (80005a8 <N2C_Config1+0xe8>)
 80004f6:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80004fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80004fe:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000500:	4b29      	ldr	r3, [pc, #164]	@ (80005a8 <N2C_Config1+0xe8>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a28      	ldr	r2, [pc, #160]	@ (80005a8 <N2C_Config1+0xe8>)
 8000506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800050a:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 800050c:	4b26      	ldr	r3, [pc, #152]	@ (80005a8 <N2C_Config1+0xe8>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4a25      	ldr	r2, [pc, #148]	@ (80005a8 <N2C_Config1+0xe8>)
 8000512:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000516:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C1->CR2 |= (N2C_ADDR << 1);
 8000518:	4b23      	ldr	r3, [pc, #140]	@ (80005a8 <N2C_Config1+0xe8>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4a22      	ldr	r2, [pc, #136]	@ (80005a8 <N2C_Config1+0xe8>)
 800051e:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000522:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C1->CR2 |= I2C_CR2_START;
 8000524:	4b20      	ldr	r3, [pc, #128]	@ (80005a8 <N2C_Config1+0xe8>)
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	4a1f      	ldr	r2, [pc, #124]	@ (80005a8 <N2C_Config1+0xe8>)
 800052a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800052e:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000530:	bf00      	nop
 8000532:	4b1d      	ldr	r3, [pc, #116]	@ (80005a8 <N2C_Config1+0xe8>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0302 	and.w	r3, r3, #2
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0f9      	beq.n	8000532 <N2C_Config1+0x72>
			;

		/* Get Data */
		data = N2C_data(step);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f9cd 	bl	80008e0 <N2C_data>
 8000546:	4603      	mov	r3, r0
 8000548:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 800054a:	4a17      	ldr	r2, [pc, #92]	@ (80005a8 <N2C_Config1+0xe8>)
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000550:	bf00      	nop
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <N2C_Config1+0xe8>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f9      	beq.n	8000552 <N2C_Config1+0x92>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	3301      	adds	r3, #1
 8000562:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f9ba 	bl	80008e0 <N2C_data>
 800056c:	4603      	mov	r3, r0
 800056e:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <N2C_Config1+0xe8>)
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Delay for 1ms */
		vTaskDelay(pdMS_TO_TICKS(1));  // FreeRTOS delay function
 8000576:	2001      	movs	r0, #1
 8000578:	f003 fab4 	bl	8003ae4 <vTaskDelay>

		/* Wait for STOPF */
		while (!(I2C1->ISR & I2C_ISR_STOPF))
 800057c:	bf00      	nop
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <N2C_Config1+0xe8>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0320 	and.w	r3, r3, #32
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f9      	beq.n	800057e <N2C_Config1+0xbe>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	3301      	adds	r3, #1
 800058e:	71fb      	strb	r3, [r7, #7]
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	3301      	adds	r3, #1
 8000594:	71bb      	strb	r3, [r7, #6]
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d99d      	bls.n	80004d8 <N2C_Config1+0x18>
	}
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40005400 	.word	0x40005400

080005ac <N2C_Read1>:

void N2C_Read1(uint8_t *measurments) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 80005b4:	2305      	movs	r3, #5
 80005b6:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////
	I2C1->CR2 = 0;
 80005bc:	4b44      	ldr	r3, [pc, #272]	@ (80006d0 <N2C_Read1+0x124>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C1->CR2 |= I2C_CR2_AUTOEND;
 80005c2:	4b43      	ldr	r3, [pc, #268]	@ (80006d0 <N2C_Read1+0x124>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	4a42      	ldr	r2, [pc, #264]	@ (80006d0 <N2C_Read1+0x124>)
 80005c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005cc:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 80005ce:	4b40      	ldr	r3, [pc, #256]	@ (80006d0 <N2C_Read1+0x124>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	4a3f      	ldr	r2, [pc, #252]	@ (80006d0 <N2C_Read1+0x124>)
 80005d4:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80005d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80005dc:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 80005de:	4b3c      	ldr	r3, [pc, #240]	@ (80006d0 <N2C_Read1+0x124>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	4a3b      	ldr	r2, [pc, #236]	@ (80006d0 <N2C_Read1+0x124>)
 80005e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80005e8:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 80005ea:	4b39      	ldr	r3, [pc, #228]	@ (80006d0 <N2C_Read1+0x124>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a38      	ldr	r2, [pc, #224]	@ (80006d0 <N2C_Read1+0x124>)
 80005f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80005f4:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 80005f6:	4b36      	ldr	r3, [pc, #216]	@ (80006d0 <N2C_Read1+0x124>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	4a35      	ldr	r2, [pc, #212]	@ (80006d0 <N2C_Read1+0x124>)
 80005fc:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000600:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8000602:	4b33      	ldr	r3, [pc, #204]	@ (80006d0 <N2C_Read1+0x124>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4a32      	ldr	r2, [pc, #200]	@ (80006d0 <N2C_Read1+0x124>)
 8000608:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800060c:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C1->ISR & I2C_ISR_TXIS))
 800060e:	bf00      	nop
 8000610:	4b2f      	ldr	r3, [pc, #188]	@ (80006d0 <N2C_Read1+0x124>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f003 0302 	and.w	r3, r3, #2
 8000618:	2b00      	cmp	r3, #0
 800061a:	d0f9      	beq.n	8000610 <N2C_Read1+0x64>
		;

	/* Get Data */
	data = N2C_data(step);
 800061c:	7bbb      	ldrb	r3, [r7, #14]
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f95e 	bl	80008e0 <N2C_data>
 8000624:	4603      	mov	r3, r0
 8000626:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C1->TXDR |= data;
 8000628:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <N2C_Read1+0x124>)
 800062a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800062c:	7b7b      	ldrb	r3, [r7, #13]
 800062e:	4928      	ldr	r1, [pc, #160]	@ (80006d0 <N2C_Read1+0x124>)
 8000630:	4313      	orrs	r3, r2
 8000632:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C1->ISR & I2C_ISR_STOPF))
 8000634:	bf00      	nop
 8000636:	4b26      	ldr	r3, [pc, #152]	@ (80006d0 <N2C_Read1+0x124>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0320 	and.w	r3, r3, #32
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f9      	beq.n	8000636 <N2C_Read1+0x8a>
	/* Delay for 1ms */
	// HAL_Delay(1);

	///// Read Measurements /////

	I2C1->CR2 &= ~I2C_CR2_AUTOEND;
 8000642:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <N2C_Read1+0x124>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <N2C_Read1+0x124>)
 8000648:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800064c:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C1 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800064e:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <N2C_Read1+0x124>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	4a1f      	ldr	r2, [pc, #124]	@ (80006d0 <N2C_Read1+0x124>)
 8000654:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000658:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800065c:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C1->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 800065e:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <N2C_Read1+0x124>)
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	4a1b      	ldr	r2, [pc, #108]	@ (80006d0 <N2C_Read1+0x124>)
 8000664:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8000668:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C1->CR2 |= I2C_CR2_RD_WRN;
 800066a:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <N2C_Read1+0x124>)
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	4a18      	ldr	r2, [pc, #96]	@ (80006d0 <N2C_Read1+0x124>)
 8000670:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000674:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 8000676:	4b16      	ldr	r3, [pc, #88]	@ (80006d0 <N2C_Read1+0x124>)
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4a15      	ldr	r2, [pc, #84]	@ (80006d0 <N2C_Read1+0x124>)
 800067c:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000680:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8000682:	4b13      	ldr	r3, [pc, #76]	@ (80006d0 <N2C_Read1+0x124>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <N2C_Read1+0x124>)
 8000688:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800068c:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e010      	b.n	80006b6 <N2C_Read1+0x10a>
		/* Wait until byte is received */
		while (!(I2C1->ISR & I2C_ISR_RXNE))
 8000694:	bf00      	nop
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <N2C_Read1+0x124>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f9      	beq.n	8000696 <N2C_Read1+0xea>
			;

		/* Receive byte */
		measurments[i] = I2C1->RXDR;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <N2C_Read1+0x124>)
 80006a4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	b2ca      	uxtb	r2, r1
 80006ae:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	3301      	adds	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	2b05      	cmp	r3, #5
 80006ba:	d9eb      	bls.n	8000694 <N2C_Read1+0xe8>
	}

	I2C1->CR2 |= (I2C_CR2_STOP);
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <N2C_Read1+0x124>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	4a03      	ldr	r2, [pc, #12]	@ (80006d0 <N2C_Read1+0x124>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006c6:	6053      	str	r3, [r2, #4]

	// HAL_Delay(1);
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40005400 	.word	0x40005400

080006d4 <N2C_Config2>:

/******************************* NUNCHUCK #2 ********************************/

void N2C_Config2() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 80006e6:	2300      	movs	r3, #0
 80006e8:	71bb      	strb	r3, [r7, #6]
 80006ea:	e05b      	b.n	80007a4 <N2C_Config2+0xd0>
		/* Clear and then set AUTOEND bit to 1 */
		I2C2->CR2 &= ~(I2C_CR2_AUTOEND);
 80006ec:	4b31      	ldr	r3, [pc, #196]	@ (80007b4 <N2C_Config2+0xe0>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	4a30      	ldr	r2, [pc, #192]	@ (80007b4 <N2C_Config2+0xe0>)
 80006f2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80006f6:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (I2C_CR2_AUTOEND);
 80006f8:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <N2C_Config2+0xe0>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4a2d      	ldr	r2, [pc, #180]	@ (80007b4 <N2C_Config2+0xe0>)
 80006fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000702:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C2->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000704:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <N2C_Config2+0xe0>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	4a2a      	ldr	r2, [pc, #168]	@ (80007b4 <N2C_Config2+0xe0>)
 800070a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800070e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000712:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000714:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <N2C_Config2+0xe0>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	4a26      	ldr	r2, [pc, #152]	@ (80007b4 <N2C_Config2+0xe0>)
 800071a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800071e:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000720:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <N2C_Config2+0xe0>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <N2C_Config2+0xe0>)
 8000726:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800072a:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C2->CR2 |= (N2C_ADDR << 1);
 800072c:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <N2C_Config2+0xe0>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4a20      	ldr	r2, [pc, #128]	@ (80007b4 <N2C_Config2+0xe0>)
 8000732:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000736:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C2->CR2 |= I2C_CR2_START;
 8000738:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <N2C_Config2+0xe0>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4a1d      	ldr	r2, [pc, #116]	@ (80007b4 <N2C_Config2+0xe0>)
 800073e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000742:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C2->ISR & I2C_ISR_TXIS))
 8000744:	bf00      	nop
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <N2C_Config2+0xe0>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f9      	beq.n	8000746 <N2C_Config2+0x72>
			;

		/* Get Data */
		data = N2C_data(step);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f8c3 	bl	80008e0 <N2C_data>
 800075a:	4603      	mov	r3, r0
 800075c:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C2->TXDR = data;
 800075e:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <N2C_Config2+0xe0>)
 8000760:	797b      	ldrb	r3, [r7, #5]
 8000762:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C2->ISR & I2C_ISR_TXIS))
 8000764:	bf00      	nop
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <N2C_Config2+0xe0>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f9      	beq.n	8000766 <N2C_Config2+0x92>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	3301      	adds	r3, #1
 8000776:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f8b0 	bl	80008e0 <N2C_data>
 8000780:	4603      	mov	r3, r0
 8000782:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C2->TXDR = data;
 8000784:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <N2C_Config2+0xe0>)
 8000786:	797b      	ldrb	r3, [r7, #5]
 8000788:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C2->ISR & I2C_ISR_STOPF))
 800078a:	bf00      	nop
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <N2C_Config2+0xe0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	2b00      	cmp	r3, #0
 8000796:	d0f9      	beq.n	800078c <N2C_Config2+0xb8>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	3301      	adds	r3, #1
 800079c:	71fb      	strb	r3, [r7, #7]
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	3301      	adds	r3, #1
 80007a2:	71bb      	strb	r3, [r7, #6]
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d9a0      	bls.n	80006ec <N2C_Config2+0x18>

		/* Delay for 1ms */
		// HAL_Delay(1);
	}
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40005800 	.word	0x40005800

080007b8 <N2C_Read2>:

void N2C_Read2(uint8_t *measurments) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 80007c0:	2305      	movs	r3, #5
 80007c2:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C2->CR2 = 0;
 80007c8:	4b44      	ldr	r3, [pc, #272]	@ (80008dc <N2C_Read2+0x124>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]

	/* Set AUTOEND bit to 1 */
	I2C2->CR2 |= I2C_CR2_AUTOEND;
 80007ce:	4b43      	ldr	r3, [pc, #268]	@ (80008dc <N2C_Read2+0x124>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	4a42      	ldr	r2, [pc, #264]	@ (80008dc <N2C_Read2+0x124>)
 80007d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d8:	6053      	str	r3, [r2, #4]

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C2->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 80007da:	4b40      	ldr	r3, [pc, #256]	@ (80008dc <N2C_Read2+0x124>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	4a3f      	ldr	r2, [pc, #252]	@ (80008dc <N2C_Read2+0x124>)
 80007e0:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80007e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80007e8:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C2->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 80007ea:	4b3c      	ldr	r3, [pc, #240]	@ (80008dc <N2C_Read2+0x124>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	4a3b      	ldr	r2, [pc, #236]	@ (80008dc <N2C_Read2+0x124>)
 80007f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007f4:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 80007f6:	4b39      	ldr	r3, [pc, #228]	@ (80008dc <N2C_Read2+0x124>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	4a38      	ldr	r2, [pc, #224]	@ (80008dc <N2C_Read2+0x124>)
 80007fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000800:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C2->CR2 |= (N2C_ADDR << 1);
 8000802:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <N2C_Read2+0x124>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	4a35      	ldr	r2, [pc, #212]	@ (80008dc <N2C_Read2+0x124>)
 8000808:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 800080c:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C2->CR2 |= I2C_CR2_START;
 800080e:	4b33      	ldr	r3, [pc, #204]	@ (80008dc <N2C_Read2+0x124>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	4a32      	ldr	r2, [pc, #200]	@ (80008dc <N2C_Read2+0x124>)
 8000814:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000818:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C2->ISR & I2C_ISR_TXIS))
 800081a:	bf00      	nop
 800081c:	4b2f      	ldr	r3, [pc, #188]	@ (80008dc <N2C_Read2+0x124>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0302 	and.w	r3, r3, #2
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <N2C_Read2+0x64>
		;

	/* Get Data */
	data = N2C_data(step);
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f858 	bl	80008e0 <N2C_data>
 8000830:	4603      	mov	r3, r0
 8000832:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C2->TXDR |= data;
 8000834:	4b29      	ldr	r3, [pc, #164]	@ (80008dc <N2C_Read2+0x124>)
 8000836:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000838:	7b7b      	ldrb	r3, [r7, #13]
 800083a:	4928      	ldr	r1, [pc, #160]	@ (80008dc <N2C_Read2+0x124>)
 800083c:	4313      	orrs	r3, r2
 800083e:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C2->ISR & I2C_ISR_STOPF))
 8000840:	bf00      	nop
 8000842:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <N2C_Read2+0x124>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	2b00      	cmp	r3, #0
 800084c:	d0f9      	beq.n	8000842 <N2C_Read2+0x8a>
		;

	///// Read Measurements /////

	I2C2->CR2 &= ~I2C_CR2_AUTOEND;
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <N2C_Read2+0x124>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4a22      	ldr	r2, [pc, #136]	@ (80008dc <N2C_Read2+0x124>)
 8000854:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000858:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C2 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C2->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800085a:	4b20      	ldr	r3, [pc, #128]	@ (80008dc <N2C_Read2+0x124>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	4a1f      	ldr	r2, [pc, #124]	@ (80008dc <N2C_Read2+0x124>)
 8000860:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000868:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C2->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 800086a:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <N2C_Read2+0x124>)
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <N2C_Read2+0x124>)
 8000870:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 8000874:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C2->CR2 |= I2C_CR2_RD_WRN;
 8000876:	4b19      	ldr	r3, [pc, #100]	@ (80008dc <N2C_Read2+0x124>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	4a18      	ldr	r2, [pc, #96]	@ (80008dc <N2C_Read2+0x124>)
 800087c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000880:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C2->CR2 |= (N2C_ADDR << 1);
 8000882:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <N2C_Read2+0x124>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	4a15      	ldr	r2, [pc, #84]	@ (80008dc <N2C_Read2+0x124>)
 8000888:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 800088c:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C2->CR2 |= I2C_CR2_START;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <N2C_Read2+0x124>)
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4a12      	ldr	r2, [pc, #72]	@ (80008dc <N2C_Read2+0x124>)
 8000894:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000898:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 800089a:	2300      	movs	r3, #0
 800089c:	73fb      	strb	r3, [r7, #15]
 800089e:	e010      	b.n	80008c2 <N2C_Read2+0x10a>
		/* Wait until byte is received */
		while (!(I2C2->ISR & I2C_ISR_RXNE))
 80008a0:	bf00      	nop
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <N2C_Read2+0x124>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f9      	beq.n	80008a2 <N2C_Read2+0xea>
			;

		/* Receive byte */
		measurments[i] = I2C2->RXDR;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <N2C_Read2+0x124>)
 80008b0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	b2ca      	uxtb	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	3301      	adds	r3, #1
 80008c0:	73fb      	strb	r3, [r7, #15]
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	d9eb      	bls.n	80008a0 <N2C_Read2+0xe8>
	}

	I2C2->CR2 |= (I2C_CR2_STOP);
 80008c8:	4b04      	ldr	r3, [pc, #16]	@ (80008dc <N2C_Read2+0x124>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a03      	ldr	r2, [pc, #12]	@ (80008dc <N2C_Read2+0x124>)
 80008ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008d2:	6053      	str	r3, [r2, #4]
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40005800 	.word	0x40005800

080008e0 <N2C_data>:

/* Returns the appropriate byte to be sent over I2C */
uint8_t N2C_data(uint8_t step) {
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (step) {
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d818      	bhi.n	8000924 <N2C_data+0x44>
 80008f2:	a201      	add	r2, pc, #4	@ (adr r2, 80008f8 <N2C_data+0x18>)
 80008f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f8:	0800090d 	.word	0x0800090d
 80008fc:	08000913 	.word	0x08000913
 8000900:	08000919 	.word	0x08000919
 8000904:	0800091f 	.word	0x0800091f
 8000908:	0800091f 	.word	0x0800091f
	case 1:
		data = 0xF0;
 800090c:	23f0      	movs	r3, #240	@ 0xf0
 800090e:	73fb      	strb	r3, [r7, #15]
		break;
 8000910:	e008      	b.n	8000924 <N2C_data+0x44>
	case 2:
		data = 0x55;
 8000912:	2355      	movs	r3, #85	@ 0x55
 8000914:	73fb      	strb	r3, [r7, #15]
		break;
 8000916:	e005      	b.n	8000924 <N2C_data+0x44>
	case 3:
		data = 0xFB;
 8000918:	23fb      	movs	r3, #251	@ 0xfb
 800091a:	73fb      	strb	r3, [r7, #15]
		break;
 800091c:	e002      	b.n	8000924 <N2C_data+0x44>
	case 4:
	case 5:
		data = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]
		break;
 8000922:	bf00      	nop
	}

	return data;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800093a:	f000 fcca 	bl	80012d2 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800093e:	f000 faad 	bl	8000e9c <SystemClock_Config>

	/* Set up RTOS */
	BaseType_t retVal; // used for checking task creation

	/* Create the tasks */
	retVal = xTaskCreate(Task1, "Set Up Program", configMINIMAL_STACK_SIZE * 2,
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <main+0x90>)
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	2328      	movs	r3, #40	@ 0x28
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2300      	movs	r3, #0
 800094c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000950:	491d      	ldr	r1, [pc, #116]	@ (80009c8 <main+0x94>)
 8000952:	481e      	ldr	r0, [pc, #120]	@ (80009cc <main+0x98>)
 8000954:	f002 fef4 	bl	8003740 <xTaskCreate>
 8000958:	6078      	str	r0, [r7, #4]
	NULL, osPriorityHigh, &task1Handler);
	if (retVal != pdPASS) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d001      	beq.n	8000964 <main+0x30>
		while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <main+0x2c>
			;
	} // check if task creation failed

	retVal = xTaskCreate(Task2, "Send Data", configMINIMAL_STACK_SIZE * 2,
 8000964:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <main+0x9c>)
 8000966:	9301      	str	r3, [sp, #4]
 8000968:	2318      	movs	r3, #24
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2300      	movs	r3, #0
 800096e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000972:	4918      	ldr	r1, [pc, #96]	@ (80009d4 <main+0xa0>)
 8000974:	4818      	ldr	r0, [pc, #96]	@ (80009d8 <main+0xa4>)
 8000976:	f002 fee3 	bl	8003740 <xTaskCreate>
 800097a:	6078      	str	r0, [r7, #4]
	NULL, osPriorityNormal, &task2Handler);
	if (retVal != pdPASS) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d001      	beq.n	8000986 <main+0x52>
		while (1)
 8000982:	bf00      	nop
 8000984:	e7fd      	b.n	8000982 <main+0x4e>
			;
	} // check if task creation failed

	sendDataSema = xSemaphoreCreateBinary();
 8000986:	2203      	movs	r2, #3
 8000988:	2100      	movs	r1, #0
 800098a:	2001      	movs	r0, #1
 800098c:	f002 f8cf 	bl	8002b2e <xQueueGenericCreate>
 8000990:	4603      	mov	r3, r0
 8000992:	4a12      	ldr	r2, [pc, #72]	@ (80009dc <main+0xa8>)
 8000994:	6013      	str	r3, [r2, #0]
	if (sendDataSema == NULL) {
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <main+0xa8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <main+0x6e>
		while (1)
 800099e:	bf00      	nop
 80009a0:	e7fd      	b.n	800099e <main+0x6a>
			;
	} // check if binary semaphore creation failed

	configMutex = xSemaphoreCreateMutex();
 80009a2:	2001      	movs	r0, #1
 80009a4:	f002 f93b 	bl	8002c1e <xQueueCreateMutex>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4a0d      	ldr	r2, [pc, #52]	@ (80009e0 <main+0xac>)
 80009ac:	6013      	str	r3, [r2, #0]
	if (configMutex == NULL) {
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <main+0xac>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d101      	bne.n	80009ba <main+0x86>
		while (1)
 80009b6:	bf00      	nop
 80009b8:	e7fd      	b.n	80009b6 <main+0x82>
			;
	}

	/* Start scheduler */
	vTaskStartScheduler();
 80009ba:	f003 f8c9 	bl	8003b50 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 80009be:	bf00      	nop
 80009c0:	e7fd      	b.n	80009be <main+0x8a>
 80009c2:	bf00      	nop
 80009c4:	2000007c 	.word	0x2000007c
 80009c8:	0800611c 	.word	0x0800611c
 80009cc:	080009e5 	.word	0x080009e5
 80009d0:	20000080 	.word	0x20000080
 80009d4:	0800612c 	.word	0x0800612c
 80009d8:	08000a39 	.word	0x08000a39
 80009dc:	20000084 	.word	0x20000084
 80009e0:	20000088 	.word	0x20000088

080009e4 <Task1>:
}

/* Define Tasks --------------------------------------------------------------*/

/* Configure Device */
void Task1(void *argument) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {

		// Take the mutex before configuring I2C
		if (xSemaphoreTake(configMutex, portMAX_DELAY) == pdTRUE) {
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <Task1+0x50>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fbad 	bl	8003154 <xQueueSemaphoreTake>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d114      	bne.n	8000a2a <Task1+0x46>
			// Configure Peripherals
			UART_Init();
 8000a00:	f000 fbae 	bl	8001160 <UART_Init>
			I2C_GPIO_Init1();
 8000a04:	f7ff fc7c 	bl	8000300 <I2C_GPIO_Init1>
			I2C_GPIO_Init2();
 8000a08:	f7ff fcc2 	bl	8000390 <I2C_GPIO_Init2>
			I2C_init1();
 8000a0c:	f7ff fd08 	bl	8000420 <I2C_init1>
			I2C_init2();
 8000a10:	f7ff fd2e 	bl	8000470 <I2C_init2>
			N2C_Config1();
 8000a14:	f7ff fd54 	bl	80004c0 <N2C_Config1>
			N2C_Config2();
 8000a18:	f7ff fe5c 	bl	80006d4 <N2C_Config2>

			// Release the mutex after transmission
			xSemaphoreGive(configMutex);
 8000a1c:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <Task1+0x50>)
 8000a1e:	6818      	ldr	r0, [r3, #0]
 8000a20:	2300      	movs	r3, #0
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	f002 f913 	bl	8002c50 <xQueueGenericSend>
		}

		// Task not needed for rest of program duration, so delete it
		vTaskDelete(NULL);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f002 ffe6 	bl	80039fc <vTaskDelete>
		if (xSemaphoreTake(configMutex, portMAX_DELAY) == pdTRUE) {
 8000a30:	e7dc      	b.n	80009ec <Task1+0x8>
 8000a32:	bf00      	nop
 8000a34:	20000088 	.word	0x20000088

08000a38 <Task2>:
	}
}

/* Send Data */
void Task2(void *argument) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Get measurements for Nunchuck #1
		N2C_Read1(measurments1);
 8000a40:	4807      	ldr	r0, [pc, #28]	@ (8000a60 <Task2+0x28>)
 8000a42:	f7ff fdb3 	bl	80005ac <N2C_Read1>

		// Get measurements for Nunchuck #2
		N2C_Read2(measurments2);
 8000a46:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <Task2+0x2c>)
 8000a48:	f7ff feb6 	bl	80007b8 <N2C_Read2>

		// Decode Raw Bytes Measurement into Global Variables
		split_data();
 8000a4c:	f000 f80c 	bl	8000a68 <split_data>

		// Uploads data to serial port
		print_data();
 8000a50:	f000 f932 	bl	8000cb8 <print_data>

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 8000a54:	2005      	movs	r0, #5
 8000a56:	f003 f845 	bl	8003ae4 <vTaskDelay>
		N2C_Read1(measurments1);
 8000a5a:	bf00      	nop
 8000a5c:	e7f0      	b.n	8000a40 <Task2+0x8>
 8000a5e:	bf00      	nop
 8000a60:	2000008c 	.word	0x2000008c
 8000a64:	20000094 	.word	0x20000094

08000a68 <split_data>:
	}
}

// Decode Raw Bytes Measurement into Global Variables
void split_data() {
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
// x and y axis from first 2 bytes
	stick_x1 = measurments1[0];
 8000a6c:	4b82      	ldr	r3, [pc, #520]	@ (8000c78 <split_data+0x210>)
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	4b82      	ldr	r3, [pc, #520]	@ (8000c7c <split_data+0x214>)
 8000a72:	701a      	strb	r2, [r3, #0]
	stick_y1 = measurments1[1];
 8000a74:	4b80      	ldr	r3, [pc, #512]	@ (8000c78 <split_data+0x210>)
 8000a76:	785a      	ldrb	r2, [r3, #1]
 8000a78:	4b81      	ldr	r3, [pc, #516]	@ (8000c80 <split_data+0x218>)
 8000a7a:	701a      	strb	r2, [r3, #0]

// x and y axis from first 2 bytes
	stick_x2 = measurments2[0];
 8000a7c:	4b81      	ldr	r3, [pc, #516]	@ (8000c84 <split_data+0x21c>)
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	4b81      	ldr	r3, [pc, #516]	@ (8000c88 <split_data+0x220>)
 8000a82:	701a      	strb	r2, [r3, #0]
	stick_y2 = measurments2[1];
 8000a84:	4b7f      	ldr	r3, [pc, #508]	@ (8000c84 <split_data+0x21c>)
 8000a86:	785a      	ldrb	r2, [r3, #1]
 8000a88:	4b80      	ldr	r3, [pc, #512]	@ (8000c8c <split_data+0x224>)
 8000a8a:	701a      	strb	r2, [r3, #0]

// Might want to Reset accelerometer values
	acc_x1 = 0;
 8000a8c:	4b80      	ldr	r3, [pc, #512]	@ (8000c90 <split_data+0x228>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	801a      	strh	r2, [r3, #0]
	acc_y1 = 0;
 8000a92:	4b80      	ldr	r3, [pc, #512]	@ (8000c94 <split_data+0x22c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	801a      	strh	r2, [r3, #0]
	acc_z1 = 0;
 8000a98:	4b7f      	ldr	r3, [pc, #508]	@ (8000c98 <split_data+0x230>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	801a      	strh	r2, [r3, #0]

// Might want to Reset accelerometer values
	acc_x2 = 0;
 8000a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8000c9c <split_data+0x234>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	801a      	strh	r2, [r3, #0]
	acc_y2 = 0;
 8000aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8000ca0 <split_data+0x238>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	801a      	strh	r2, [r3, #0]
	acc_z2 = 0;
 8000aaa:	4b7e      	ldr	r3, [pc, #504]	@ (8000ca4 <split_data+0x23c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	801a      	strh	r2, [r3, #0]

// higher 8 bits of accelerometer from next 3 bytes
	acc_x1 |= (measurments1[2] << 2);
 8000ab0:	4b71      	ldr	r3, [pc, #452]	@ (8000c78 <split_data+0x210>)
 8000ab2:	789b      	ldrb	r3, [r3, #2]
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	b21a      	sxth	r2, r3
 8000ab8:	4b75      	ldr	r3, [pc, #468]	@ (8000c90 <split_data+0x228>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	b21b      	sxth	r3, r3
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	4b72      	ldr	r3, [pc, #456]	@ (8000c90 <split_data+0x228>)
 8000ac8:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (measurments1[3] << 2);
 8000aca:	4b6b      	ldr	r3, [pc, #428]	@ (8000c78 <split_data+0x210>)
 8000acc:	78db      	ldrb	r3, [r3, #3]
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	b21a      	sxth	r2, r3
 8000ad2:	4b70      	ldr	r3, [pc, #448]	@ (8000c94 <split_data+0x22c>)
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8000c94 <split_data+0x22c>)
 8000ae2:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (measurments1[4] << 2);
 8000ae4:	4b64      	ldr	r3, [pc, #400]	@ (8000c78 <split_data+0x210>)
 8000ae6:	791b      	ldrb	r3, [r3, #4]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	b21a      	sxth	r2, r3
 8000aec:	4b6a      	ldr	r3, [pc, #424]	@ (8000c98 <split_data+0x230>)
 8000aee:	881b      	ldrh	r3, [r3, #0]
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	4b67      	ldr	r3, [pc, #412]	@ (8000c98 <split_data+0x230>)
 8000afc:	801a      	strh	r2, [r3, #0]

// higher 8 bits of accelerometer from next 3 bytes
	acc_x2 |= (measurments2[2] << 2);
 8000afe:	4b61      	ldr	r3, [pc, #388]	@ (8000c84 <split_data+0x21c>)
 8000b00:	789b      	ldrb	r3, [r3, #2]
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	4b65      	ldr	r3, [pc, #404]	@ (8000c9c <split_data+0x234>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b61      	ldr	r3, [pc, #388]	@ (8000c9c <split_data+0x234>)
 8000b16:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (measurments2[3] << 2);
 8000b18:	4b5a      	ldr	r3, [pc, #360]	@ (8000c84 <split_data+0x21c>)
 8000b1a:	78db      	ldrb	r3, [r3, #3]
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	b21a      	sxth	r2, r3
 8000b20:	4b5f      	ldr	r3, [pc, #380]	@ (8000ca0 <split_data+0x238>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ca0 <split_data+0x238>)
 8000b30:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (measurments2[4] << 2);
 8000b32:	4b54      	ldr	r3, [pc, #336]	@ (8000c84 <split_data+0x21c>)
 8000b34:	791b      	ldrb	r3, [r3, #4]
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ca4 <split_data+0x23c>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	b21b      	sxth	r3, r3
 8000b42:	4313      	orrs	r3, r2
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	4b56      	ldr	r3, [pc, #344]	@ (8000ca4 <split_data+0x23c>)
 8000b4a:	801a      	strh	r2, [r3, #0]

// lower 2 bits from last byte
	acc_x1 |= (((1 << 2) - 1) & (measurments1[5] >> 3));
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c78 <split_data+0x210>)
 8000b4e:	795b      	ldrb	r3, [r3, #5]
 8000b50:	08db      	lsrs	r3, r3, #3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	b21a      	sxth	r2, r3
 8000b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8000c90 <split_data+0x228>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b49      	ldr	r3, [pc, #292]	@ (8000c90 <split_data+0x228>)
 8000b6c:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (((1 << 2) - 1) & (measurments1[5] >> 5));
 8000b6e:	4b42      	ldr	r3, [pc, #264]	@ (8000c78 <split_data+0x210>)
 8000b70:	795b      	ldrb	r3, [r3, #5]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	4b45      	ldr	r3, [pc, #276]	@ (8000c94 <split_data+0x22c>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b41      	ldr	r3, [pc, #260]	@ (8000c94 <split_data+0x22c>)
 8000b8e:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (((1 << 2) - 1) & (measurments1[5] >> 7));
 8000b90:	4b39      	ldr	r3, [pc, #228]	@ (8000c78 <split_data+0x210>)
 8000b92:	795b      	ldrb	r3, [r3, #5]
 8000b94:	09db      	lsrs	r3, r3, #7
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c98 <split_data+0x230>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8000c98 <split_data+0x230>)
 8000ba6:	801a      	strh	r2, [r3, #0]

// lower 2 bits from last byte
	acc_x2 |= (((1 << 2) - 1) & (measurments2[5] >> 3));
 8000ba8:	4b36      	ldr	r3, [pc, #216]	@ (8000c84 <split_data+0x21c>)
 8000baa:	795b      	ldrb	r3, [r3, #5]
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <split_data+0x234>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <split_data+0x234>)
 8000bc8:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (((1 << 2) - 1) & (measurments2[5] >> 5));
 8000bca:	4b2e      	ldr	r3, [pc, #184]	@ (8000c84 <split_data+0x21c>)
 8000bcc:	795b      	ldrb	r3, [r3, #5]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	b21b      	sxth	r3, r3
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	b21a      	sxth	r2, r3
 8000bda:	4b31      	ldr	r3, [pc, #196]	@ (8000ca0 <split_data+0x238>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b21b      	sxth	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <split_data+0x238>)
 8000bea:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (((1 << 2) - 1) & (measurments2[5] >> 7));
 8000bec:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <split_data+0x21c>)
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	09db      	lsrs	r3, r3, #7
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca4 <split_data+0x23c>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b28      	ldr	r3, [pc, #160]	@ (8000ca4 <split_data+0x23c>)
 8000c02:	801a      	strh	r2, [r3, #0]

// Buttons are last 2 bits of last byte
	button_c1 = (1 & ~(measurments1[5] >> 1));
 8000c04:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <split_data+0x210>)
 8000c06:	795b      	ldrb	r3, [r3, #5]
 8000c08:	085b      	lsrs	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	bf0c      	ite	eq
 8000c14:	2301      	moveq	r3, #1
 8000c16:	2300      	movne	r3, #0
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <split_data+0x240>)
 8000c1e:	701a      	strb	r2, [r3, #0]
	button_z1 = (1 & ~(measurments1[5] >> 0));
 8000c20:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <split_data+0x210>)
 8000c22:	795b      	ldrb	r3, [r3, #5]
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bf0c      	ite	eq
 8000c2c:	2301      	moveq	r3, #1
 8000c2e:	2300      	movne	r3, #0
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <split_data+0x244>)
 8000c36:	701a      	strb	r2, [r3, #0]

// Buttons are last 2 bits of last byte
	button_c2 = (1 & ~(measurments2[5] >> 1));
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <split_data+0x21c>)
 8000c3a:	795b      	ldrb	r3, [r3, #5]
 8000c3c:	085b      	lsrs	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	bf0c      	ite	eq
 8000c48:	2301      	moveq	r3, #1
 8000c4a:	2300      	movne	r3, #0
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b17      	ldr	r3, [pc, #92]	@ (8000cb0 <split_data+0x248>)
 8000c52:	701a      	strb	r2, [r3, #0]
	button_z2 = (1 & ~(measurments2[5] >> 0));
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <split_data+0x21c>)
 8000c56:	795b      	ldrb	r3, [r3, #5]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	bf0c      	ite	eq
 8000c60:	2301      	moveq	r3, #1
 8000c62:	2300      	movne	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <split_data+0x24c>)
 8000c6a:	701a      	strb	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	2000008c 	.word	0x2000008c
 8000c7c:	2000009a 	.word	0x2000009a
 8000c80:	2000009b 	.word	0x2000009b
 8000c84:	20000094 	.word	0x20000094
 8000c88:	200000a4 	.word	0x200000a4
 8000c8c:	200000a5 	.word	0x200000a5
 8000c90:	2000009c 	.word	0x2000009c
 8000c94:	2000009e 	.word	0x2000009e
 8000c98:	200000a0 	.word	0x200000a0
 8000c9c:	200000a6 	.word	0x200000a6
 8000ca0:	200000a8 	.word	0x200000a8
 8000ca4:	200000aa 	.word	0x200000aa
 8000ca8:	200000a2 	.word	0x200000a2
 8000cac:	200000a3 	.word	0x200000a3
 8000cb0:	200000ac 	.word	0x200000ac
 8000cb4:	200000ad 	.word	0x200000ad

08000cb8 <print_data>:

// Uploads data to serial port
void print_data() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
// Convert Data to Strings
	sprintf(sx_str1, "StickX1:%i", stick_x1);
 8000cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8000df4 <print_data+0x13c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	494c      	ldr	r1, [pc, #304]	@ (8000df8 <print_data+0x140>)
 8000cc6:	484d      	ldr	r0, [pc, #308]	@ (8000dfc <print_data+0x144>)
 8000cc8:	f004 fd26 	bl	8005718 <siprintf>
	sprintf(sy_str1, "StickY1:%i", stick_y1);
 8000ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8000e00 <print_data+0x148>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	494b      	ldr	r1, [pc, #300]	@ (8000e04 <print_data+0x14c>)
 8000cd6:	484c      	ldr	r0, [pc, #304]	@ (8000e08 <print_data+0x150>)
 8000cd8:	f004 fd1e 	bl	8005718 <siprintf>

	sprintf(ax_str1, "AccX1:%i", acc_x1);
 8000cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8000e0c <print_data+0x154>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	494a      	ldr	r1, [pc, #296]	@ (8000e10 <print_data+0x158>)
 8000ce6:	484b      	ldr	r0, [pc, #300]	@ (8000e14 <print_data+0x15c>)
 8000ce8:	f004 fd16 	bl	8005718 <siprintf>
	sprintf(ay_str1, "AccY1:%i", acc_y1);
 8000cec:	4b4a      	ldr	r3, [pc, #296]	@ (8000e18 <print_data+0x160>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4949      	ldr	r1, [pc, #292]	@ (8000e1c <print_data+0x164>)
 8000cf6:	484a      	ldr	r0, [pc, #296]	@ (8000e20 <print_data+0x168>)
 8000cf8:	f004 fd0e 	bl	8005718 <siprintf>
	sprintf(az_str1, "AccZ1:%i", acc_z1);
 8000cfc:	4b49      	ldr	r3, [pc, #292]	@ (8000e24 <print_data+0x16c>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	461a      	mov	r2, r3
 8000d04:	4948      	ldr	r1, [pc, #288]	@ (8000e28 <print_data+0x170>)
 8000d06:	4849      	ldr	r0, [pc, #292]	@ (8000e2c <print_data+0x174>)
 8000d08:	f004 fd06 	bl	8005718 <siprintf>

	sprintf(bc_str1, "ButtonC1:%i", button_c1);
 8000d0c:	4b48      	ldr	r3, [pc, #288]	@ (8000e30 <print_data+0x178>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	461a      	mov	r2, r3
 8000d14:	4947      	ldr	r1, [pc, #284]	@ (8000e34 <print_data+0x17c>)
 8000d16:	4848      	ldr	r0, [pc, #288]	@ (8000e38 <print_data+0x180>)
 8000d18:	f004 fcfe 	bl	8005718 <siprintf>
	sprintf(bz_str1, "ButtonZ1:%i", button_z1);
 8000d1c:	4b47      	ldr	r3, [pc, #284]	@ (8000e3c <print_data+0x184>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	461a      	mov	r2, r3
 8000d24:	4946      	ldr	r1, [pc, #280]	@ (8000e40 <print_data+0x188>)
 8000d26:	4847      	ldr	r0, [pc, #284]	@ (8000e44 <print_data+0x18c>)
 8000d28:	f004 fcf6 	bl	8005718 <siprintf>

// Convert Data to Strings
	sprintf(sx_str2, "StickX2:%i", stick_x2);
 8000d2c:	4b46      	ldr	r3, [pc, #280]	@ (8000e48 <print_data+0x190>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	4945      	ldr	r1, [pc, #276]	@ (8000e4c <print_data+0x194>)
 8000d36:	4846      	ldr	r0, [pc, #280]	@ (8000e50 <print_data+0x198>)
 8000d38:	f004 fcee 	bl	8005718 <siprintf>
	sprintf(sy_str2, "StickY2:%i", stick_y2);
 8000d3c:	4b45      	ldr	r3, [pc, #276]	@ (8000e54 <print_data+0x19c>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	4944      	ldr	r1, [pc, #272]	@ (8000e58 <print_data+0x1a0>)
 8000d46:	4845      	ldr	r0, [pc, #276]	@ (8000e5c <print_data+0x1a4>)
 8000d48:	f004 fce6 	bl	8005718 <siprintf>

	sprintf(ax_str2, "AccX2:%i", acc_x2);
 8000d4c:	4b44      	ldr	r3, [pc, #272]	@ (8000e60 <print_data+0x1a8>)
 8000d4e:	881b      	ldrh	r3, [r3, #0]
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	4943      	ldr	r1, [pc, #268]	@ (8000e64 <print_data+0x1ac>)
 8000d56:	4844      	ldr	r0, [pc, #272]	@ (8000e68 <print_data+0x1b0>)
 8000d58:	f004 fcde 	bl	8005718 <siprintf>
	sprintf(ay_str2, "AccY2:%i", acc_y2);
 8000d5c:	4b43      	ldr	r3, [pc, #268]	@ (8000e6c <print_data+0x1b4>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	461a      	mov	r2, r3
 8000d64:	4942      	ldr	r1, [pc, #264]	@ (8000e70 <print_data+0x1b8>)
 8000d66:	4843      	ldr	r0, [pc, #268]	@ (8000e74 <print_data+0x1bc>)
 8000d68:	f004 fcd6 	bl	8005718 <siprintf>
	sprintf(az_str2, "AccZ2:%i", acc_z2);
 8000d6c:	4b42      	ldr	r3, [pc, #264]	@ (8000e78 <print_data+0x1c0>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	4941      	ldr	r1, [pc, #260]	@ (8000e7c <print_data+0x1c4>)
 8000d76:	4842      	ldr	r0, [pc, #264]	@ (8000e80 <print_data+0x1c8>)
 8000d78:	f004 fcce 	bl	8005718 <siprintf>

	sprintf(bc_str2, "ButtonC2:%i", button_c2);
 8000d7c:	4b41      	ldr	r3, [pc, #260]	@ (8000e84 <print_data+0x1cc>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	461a      	mov	r2, r3
 8000d84:	4940      	ldr	r1, [pc, #256]	@ (8000e88 <print_data+0x1d0>)
 8000d86:	4841      	ldr	r0, [pc, #260]	@ (8000e8c <print_data+0x1d4>)
 8000d88:	f004 fcc6 	bl	8005718 <siprintf>
	sprintf(bz_str2, "ButtonZ2:%i", button_z2);
 8000d8c:	4b40      	ldr	r3, [pc, #256]	@ (8000e90 <print_data+0x1d8>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	461a      	mov	r2, r3
 8000d94:	493f      	ldr	r1, [pc, #252]	@ (8000e94 <print_data+0x1dc>)
 8000d96:	4840      	ldr	r0, [pc, #256]	@ (8000e98 <print_data+0x1e0>)
 8000d98:	f004 fcbe 	bl	8005718 <siprintf>

// Print strings to terminal
	UART_PrintLn(sx_str1);
 8000d9c:	4817      	ldr	r0, [pc, #92]	@ (8000dfc <print_data+0x144>)
 8000d9e:	f000 fa47 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(sy_str1);
 8000da2:	4819      	ldr	r0, [pc, #100]	@ (8000e08 <print_data+0x150>)
 8000da4:	f000 fa44 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(ax_str1);
 8000da8:	481a      	ldr	r0, [pc, #104]	@ (8000e14 <print_data+0x15c>)
 8000daa:	f000 fa41 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(ay_str1);
 8000dae:	481c      	ldr	r0, [pc, #112]	@ (8000e20 <print_data+0x168>)
 8000db0:	f000 fa3e 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(az_str1);
 8000db4:	481d      	ldr	r0, [pc, #116]	@ (8000e2c <print_data+0x174>)
 8000db6:	f000 fa3b 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(bc_str1);
 8000dba:	481f      	ldr	r0, [pc, #124]	@ (8000e38 <print_data+0x180>)
 8000dbc:	f000 fa38 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(bz_str1);
 8000dc0:	4820      	ldr	r0, [pc, #128]	@ (8000e44 <print_data+0x18c>)
 8000dc2:	f000 fa35 	bl	8001230 <UART_PrintLn>

// Print strings to terminal
	UART_PrintLn(sx_str2);
 8000dc6:	4822      	ldr	r0, [pc, #136]	@ (8000e50 <print_data+0x198>)
 8000dc8:	f000 fa32 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(sy_str2);
 8000dcc:	4823      	ldr	r0, [pc, #140]	@ (8000e5c <print_data+0x1a4>)
 8000dce:	f000 fa2f 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(ax_str2);
 8000dd2:	4825      	ldr	r0, [pc, #148]	@ (8000e68 <print_data+0x1b0>)
 8000dd4:	f000 fa2c 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(ay_str2);
 8000dd8:	4826      	ldr	r0, [pc, #152]	@ (8000e74 <print_data+0x1bc>)
 8000dda:	f000 fa29 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(az_str2);
 8000dde:	4828      	ldr	r0, [pc, #160]	@ (8000e80 <print_data+0x1c8>)
 8000de0:	f000 fa26 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(bc_str2);
 8000de4:	4829      	ldr	r0, [pc, #164]	@ (8000e8c <print_data+0x1d4>)
 8000de6:	f000 fa23 	bl	8001230 <UART_PrintLn>
	UART_PrintLn(bz_str2);
 8000dea:	482b      	ldr	r0, [pc, #172]	@ (8000e98 <print_data+0x1e0>)
 8000dec:	f000 fa20 	bl	8001230 <UART_PrintLn>
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	2000009a 	.word	0x2000009a
 8000df8:	08006138 	.word	0x08006138
 8000dfc:	200000b0 	.word	0x200000b0
 8000e00:	2000009b 	.word	0x2000009b
 8000e04:	08006144 	.word	0x08006144
 8000e08:	200000c0 	.word	0x200000c0
 8000e0c:	2000009c 	.word	0x2000009c
 8000e10:	08006150 	.word	0x08006150
 8000e14:	200000d0 	.word	0x200000d0
 8000e18:	2000009e 	.word	0x2000009e
 8000e1c:	0800615c 	.word	0x0800615c
 8000e20:	200000e0 	.word	0x200000e0
 8000e24:	200000a0 	.word	0x200000a0
 8000e28:	08006168 	.word	0x08006168
 8000e2c:	200000f0 	.word	0x200000f0
 8000e30:	200000a2 	.word	0x200000a2
 8000e34:	08006174 	.word	0x08006174
 8000e38:	20000100 	.word	0x20000100
 8000e3c:	200000a3 	.word	0x200000a3
 8000e40:	08006180 	.word	0x08006180
 8000e44:	20000110 	.word	0x20000110
 8000e48:	200000a4 	.word	0x200000a4
 8000e4c:	0800618c 	.word	0x0800618c
 8000e50:	20000120 	.word	0x20000120
 8000e54:	200000a5 	.word	0x200000a5
 8000e58:	08006198 	.word	0x08006198
 8000e5c:	20000130 	.word	0x20000130
 8000e60:	200000a6 	.word	0x200000a6
 8000e64:	080061a4 	.word	0x080061a4
 8000e68:	20000140 	.word	0x20000140
 8000e6c:	200000a8 	.word	0x200000a8
 8000e70:	080061b0 	.word	0x080061b0
 8000e74:	20000150 	.word	0x20000150
 8000e78:	200000aa 	.word	0x200000aa
 8000e7c:	080061bc 	.word	0x080061bc
 8000e80:	20000160 	.word	0x20000160
 8000e84:	200000ac 	.word	0x200000ac
 8000e88:	080061c8 	.word	0x080061c8
 8000e8c:	20000170 	.word	0x20000170
 8000e90:	200000ad 	.word	0x200000ad
 8000e94:	080061d4 	.word	0x080061d4
 8000e98:	20000180 	.word	0x20000180

08000e9c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b096      	sub	sp, #88	@ 0x58
 8000ea0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	2244      	movs	r2, #68	@ 0x44
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f004 fc54 	bl	8005758 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ebe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ec2:	f000 fb2f 	bl	8001524 <HAL_PWREx_ControlVoltageScaling>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8000ecc:	f000 f83e 	bl	8000f4c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000edc:	2360      	movs	r3, #96	@ 0x60
 8000ede:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fb71 	bl	80015d0 <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x5c>
		Error_Handler();
 8000ef4:	f000 f82a 	bl	8000f4c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 ff39 	bl	8001d88 <HAL_RCC_ClockConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x84>
		Error_Handler();
 8000f1c:	f000 f816 	bl	8000f4c <Error_Handler>
	}
}
 8000f20:	bf00      	nop
 8000f22:	3758      	adds	r7, #88	@ 0x58
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM17) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f3a:	f000 f9e3 	bl	8001304 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40014800 	.word	0x40014800

08000f4c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f62:	4a10      	ldr	r2, [pc, #64]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	210f      	movs	r1, #15
 8000f92:	f06f 0001 	mvn.w	r0, #1
 8000f96:	f000 fa8d 	bl	80014b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <HAL_InitTick+0xc8>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fba:	4a2d      	ldr	r2, [pc, #180]	@ (8001070 <HAL_InitTick+0xc8>)
 8000fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <HAL_InitTick+0xc8>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fce:	f107 020c 	add.w	r2, r7, #12
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 f883 	bl	80020e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000fde:	f001 f86b 	bl	80020b8 <HAL_RCC_GetPCLK2Freq>
 8000fe2:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe6:	4a23      	ldr	r2, [pc, #140]	@ (8001074 <HAL_InitTick+0xcc>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	0c9b      	lsrs	r3, r3, #18
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <HAL_InitTick+0xd0>)
 8000ff4:	4a21      	ldr	r2, [pc, #132]	@ (800107c <HAL_InitTick+0xd4>)
 8000ff6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HAL_InitTick+0xd0>)
 8000ffa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ffe:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001000:	4a1d      	ldr	r2, [pc, #116]	@ (8001078 <HAL_InitTick+0xd0>)
 8001002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001004:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_InitTick+0xd0>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <HAL_InitTick+0xd0>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_InitTick+0xd0>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001018:	4817      	ldr	r0, [pc, #92]	@ (8001078 <HAL_InitTick+0xd0>)
 800101a:	f001 f8f5 	bl	8002208 <HAL_TIM_Base_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001024:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001028:	2b00      	cmp	r3, #0
 800102a:	d11b      	bne.n	8001064 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800102c:	4812      	ldr	r0, [pc, #72]	@ (8001078 <HAL_InitTick+0xd0>)
 800102e:	f001 f94d 	bl	80022cc <HAL_TIM_Base_Start_IT>
 8001032:	4603      	mov	r3, r0
 8001034:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001038:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800103c:	2b00      	cmp	r3, #0
 800103e:	d111      	bne.n	8001064 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001040:	201a      	movs	r0, #26
 8001042:	f000 fa53 	bl	80014ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b0f      	cmp	r3, #15
 800104a:	d808      	bhi.n	800105e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 800104c:	2200      	movs	r2, #0
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	201a      	movs	r0, #26
 8001052:	f000 fa2f 	bl	80014b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <HAL_InitTick+0xd8>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e002      	b.n	8001064 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001064:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001068:	4618      	mov	r0, r3
 800106a:	3730      	adds	r7, #48	@ 0x30
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000
 8001074:	431bde83 	.word	0x431bde83
 8001078:	20000190 	.word	0x20000190
 800107c:	40014800 	.word	0x40014800
 8001080:	20000004 	.word	0x20000004

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <NMI_Handler+0x4>

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <MemManage_Handler+0x4>

0800109c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <UsageFault_Handler+0x4>

080010ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80010c2:	f001 f973 	bl	80023ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000190 	.word	0x20000190

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f004 fb88 	bl	8005814 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20018000 	.word	0x20018000
 8001130:	00000400 	.word	0x00000400
 8001134:	200001dc 	.word	0x200001dc
 8001138:	20001cc8 	.word	0x20001cc8

0800113c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <UART_Init>:
 */

#include "main.h"
#include "uart.h"

void UART_Init(void) {
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	// Configure GPIOA for USART2
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8001164:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <UART_Init+0x94>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001168:	4a22      	ldr	r2, [pc, #136]	@ (80011f4 <UART_Init+0x94>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN);
 8001170:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <UART_Init+0x94>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001174:	4a1f      	ldr	r2, [pc, #124]	@ (80011f4 <UART_Init+0x94>)
 8001176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800117a:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 2 and 3 to AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 800117c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001186:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800118a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 800118c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001196:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800119a:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 800119c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011a6:	f423 43ee 	bic.w	r3, r3, #30464	@ 0x7700
 80011aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 80011ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80011b6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80011ba:	6213      	str	r3, [r2, #32]
	 * TE		1
	 * RE		1
	 * USEM		0
	 * UE		1
	 */
	USART2->CR1 |= (0b000100000);
 80011bc:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <UART_Init+0x98>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <UART_Init+0x98>)
 80011c2:	f043 0320 	orr.w	r3, r3, #32
 80011c6:	6013      	str	r3, [r2, #0]

	// Configure BR

	USART2->BRR = (35);
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <UART_Init+0x98>)
 80011ca:	2223      	movs	r2, #35	@ 0x23
 80011cc:	60da      	str	r2, [r3, #12]

	// Enable  bits
	USART2->CR1 |= (0b1101);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <UART_Init+0x98>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <UART_Init+0x98>)
 80011d4:	f043 030d 	orr.w	r3, r3, #13
 80011d8:	6013      	str	r3, [r2, #0]

	// Enable interupts
	NVIC->ISER[1] |= (1 << (USART2_IRQn & 0X1F));
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <UART_Init+0x9c>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a07      	ldr	r2, [pc, #28]	@ (80011fc <UART_Init+0x9c>)
 80011e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011e4:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80011e6:	b662      	cpsie	i
}
 80011e8:	bf00      	nop
	__enable_irq();

}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40004400 	.word	0x40004400
 80011fc:	e000e100 	.word	0xe000e100

08001200 <UART_Print_Char>:

// Prints a character to the UART serial connection
void UART_Print_Char(char character) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	while (!(USART2->ISR & 1 << 7)) {
 800120a:	bf00      	nop
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <UART_Print_Char+0x2c>)
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f9      	beq.n	800120c <UART_Print_Char+0xc>
	};
	USART2->TDR = character;
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <UART_Print_Char+0x2c>)
 800121a:	79fa      	ldrb	r2, [r7, #7]
 800121c:	b292      	uxth	r2, r2
 800121e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	40004400 	.word	0x40004400

08001230 <UART_PrintLn>:

// Prints a character to the UART serial connection and appends a NEWLINE char
void UART_PrintLn(char *output) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 800123c:	e009      	b.n	8001252 <UART_PrintLn+0x22>
		UART_Print_Char(output[i]);
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffda 	bl	8001200 <UART_Print_Char>
		i++;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3301      	adds	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1ef      	bne.n	800123e <UART_PrintLn+0xe>
	}
	// Finish with new line and return cairage chars
	while (!(USART2->ISR & 1 << 7)) {
 800125e:	bf00      	nop
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <UART_PrintLn+0x4c>)
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f9      	beq.n	8001260 <UART_PrintLn+0x30>
	};
	USART2->TDR = '\n';
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <UART_PrintLn+0x4c>)
 800126e:	220a      	movs	r2, #10
 8001270:	851a      	strh	r2, [r3, #40]	@ 0x28
	//while(!(USART2 -> ISR & 1 << 7)){};
	//USART2 -> TDR = '\r';
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40004400 	.word	0x40004400

08001280 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001284:	f7ff ff5a 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <LoopForever+0x6>)
  ldr r1, =_edata
 800128a:	490d      	ldr	r1, [pc, #52]	@ (80012c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800128c:	4a0d      	ldr	r2, [pc, #52]	@ (80012c4 <LoopForever+0xe>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a0:	4c0a      	ldr	r4, [pc, #40]	@ (80012cc <LoopForever+0x16>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ae:	f004 fab7 	bl	8005820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012b2:	f7ff fb3f 	bl	8000934 <main>

080012b6 <LoopForever>:

LoopForever:
    b LoopForever
 80012b6:	e7fe      	b.n	80012b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012c4:	08006284 	.word	0x08006284
  ldr r2, =_sbss
 80012c8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012cc:	20001cc8 	.word	0x20001cc8

080012d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC1_2_IRQHandler>

080012d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012d8:	2300      	movs	r3, #0
 80012da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f8de 	bl	800149e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e2:	200f      	movs	r0, #15
 80012e4:	f7ff fe60 	bl	8000fa8 <HAL_InitTick>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	e001      	b.n	80012f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f4:	f7ff fe30 	bl	8000f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008
 8001328:	200001e0 	.word	0x200001e0

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200001e0 	.word	0x200001e0

08001344 <__NVIC_SetPriorityGrouping>:
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	@ (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	@ (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ff4c 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c6:	f7ff ff61 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	6978      	ldr	r0, [r7, #20]
 80014d2:	f7ff ffb1 	bl	8001438 <NVIC_EncodePriority>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff80 	bl	80013e4 <__NVIC_SetPriority>
}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff54 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <HAL_PWREx_GetVoltageRange+0x18>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40007000 	.word	0x40007000

08001524 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001532:	d130      	bne.n	8001596 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001534:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800153c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001540:	d038      	beq.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001542:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800154a:	4a1e      	ldr	r2, [pc, #120]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001550:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2232      	movs	r2, #50	@ 0x32
 8001558:	fb02 f303 	mul.w	r3, r2, r3
 800155c:	4a1b      	ldr	r2, [pc, #108]	@ (80015cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0c9b      	lsrs	r3, r3, #18
 8001564:	3301      	adds	r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001568:	e002      	b.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	3b01      	subs	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800157c:	d102      	bne.n	8001584 <HAL_PWREx_ControlVoltageScaling+0x60>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f2      	bne.n	800156a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800158c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001590:	d110      	bne.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e00f      	b.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001596:	4b0b      	ldr	r3, [pc, #44]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800159e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015a2:	d007      	beq.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015ac:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40007000 	.word	0x40007000
 80015c8:	20000000 	.word	0x20000000
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e3ca      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e2:	4b97      	ldr	r3, [pc, #604]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ec:	4b94      	ldr	r3, [pc, #592]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80e4 	beq.w	80017cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <HAL_RCC_OscConfig+0x4a>
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	2b0c      	cmp	r3, #12
 800160e:	f040 808b 	bne.w	8001728 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b01      	cmp	r3, #1
 8001616:	f040 8087 	bne.w	8001728 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800161a:	4b89      	ldr	r3, [pc, #548]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d005      	beq.n	8001632 <HAL_RCC_OscConfig+0x62>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e3a2      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1a      	ldr	r2, [r3, #32]
 8001636:	4b82      	ldr	r3, [pc, #520]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d004      	beq.n	800164c <HAL_RCC_OscConfig+0x7c>
 8001642:	4b7f      	ldr	r3, [pc, #508]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800164a:	e005      	b.n	8001658 <HAL_RCC_OscConfig+0x88>
 800164c:	4b7c      	ldr	r3, [pc, #496]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 800164e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001658:	4293      	cmp	r3, r2
 800165a:	d223      	bcs.n	80016a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fd71 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e383      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001670:	4b73      	ldr	r3, [pc, #460]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a72      	ldr	r2, [pc, #456]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b70      	ldr	r3, [pc, #448]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	496d      	ldr	r1, [pc, #436]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800168e:	4b6c      	ldr	r3, [pc, #432]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	4968      	ldr	r1, [pc, #416]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
 80016a2:	e025      	b.n	80016f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a4:	4b66      	ldr	r3, [pc, #408]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a65      	ldr	r2, [pc, #404]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80016aa:	f043 0308 	orr.w	r3, r3, #8
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b63      	ldr	r3, [pc, #396]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4960      	ldr	r1, [pc, #384]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	021b      	lsls	r3, r3, #8
 80016d0:	495b      	ldr	r1, [pc, #364]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fd31 	bl	8002148 <RCC_SetFlashLatencyFromMSIRange>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e343      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016f0:	f000 fc4a 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 80016f4:	4602      	mov	r2, r0
 80016f6:	4b52      	ldr	r3, [pc, #328]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	f003 030f 	and.w	r3, r3, #15
 8001700:	4950      	ldr	r1, [pc, #320]	@ (8001844 <HAL_RCC_OscConfig+0x274>)
 8001702:	5ccb      	ldrb	r3, [r1, r3]
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	fa22 f303 	lsr.w	r3, r2, r3
 800170c:	4a4e      	ldr	r2, [pc, #312]	@ (8001848 <HAL_RCC_OscConfig+0x278>)
 800170e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001710:	4b4e      	ldr	r3, [pc, #312]	@ (800184c <HAL_RCC_OscConfig+0x27c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fc47 	bl	8000fa8 <HAL_InitTick>
 800171a:	4603      	mov	r3, r0
 800171c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d052      	beq.n	80017ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	e327      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d032      	beq.n	8001796 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001730:	4b43      	ldr	r3, [pc, #268]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a42      	ldr	r2, [pc, #264]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800173c:	f7ff fdf6 	bl	800132c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001744:	f7ff fdf2 	bl	800132c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e310      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001756:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001762:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a36      	ldr	r2, [pc, #216]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001768:	f043 0308 	orr.w	r3, r3, #8
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	4931      	ldr	r1, [pc, #196]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 800177c:	4313      	orrs	r3, r2
 800177e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001780:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	492c      	ldr	r1, [pc, #176]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
 8001794:	e01a      	b.n	80017cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001796:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a29      	ldr	r2, [pc, #164]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fdc3 	bl	800132c <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017aa:	f7ff fdbf 	bl	800132c <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e2dd      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017bc:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f0      	bne.n	80017aa <HAL_RCC_OscConfig+0x1da>
 80017c8:	e000      	b.n	80017cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d074      	beq.n	80018c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d005      	beq.n	80017ea <HAL_RCC_OscConfig+0x21a>
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	2b0c      	cmp	r3, #12
 80017e2:	d10e      	bne.n	8001802 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d10b      	bne.n	8001802 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ea:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d064      	beq.n	80018c0 <HAL_RCC_OscConfig+0x2f0>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d160      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e2ba      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x24a>
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e026      	b.n	8001868 <HAL_RCC_OscConfig+0x298>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001822:	d115      	bne.n	8001850 <HAL_RCC_OscConfig+0x280>
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a05      	ldr	r2, [pc, #20]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 800182a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a02      	ldr	r2, [pc, #8]	@ (8001840 <HAL_RCC_OscConfig+0x270>)
 8001836:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0x298>
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	080061f8 	.word	0x080061f8
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004
 8001850:	4ba0      	ldr	r3, [pc, #640]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a9f      	ldr	r2, [pc, #636]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a9c      	ldr	r2, [pc, #624]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d013      	beq.n	8001898 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fd5c 	bl	800132c <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fd58 	bl	800132c <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	@ 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e276      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	4b92      	ldr	r3, [pc, #584]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x2a8>
 8001896:	e014      	b.n	80018c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fd48 	bl	800132c <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff fd44 	bl	800132c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	@ 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e262      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b2:	4b88      	ldr	r3, [pc, #544]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2d0>
 80018be:	e000      	b.n	80018c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d060      	beq.n	8001990 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_OscConfig+0x310>
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d119      	bne.n	800190e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d116      	bne.n	800190e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x328>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e23f      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f8:	4b76      	ldr	r3, [pc, #472]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	061b      	lsls	r3, r3, #24
 8001906:	4973      	ldr	r1, [pc, #460]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190c:	e040      	b.n	8001990 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d023      	beq.n	800195e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001916:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff fd03 	bl	800132c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fcff 	bl	800132c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e21d      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800193c:	4b65      	ldr	r3, [pc, #404]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b62      	ldr	r3, [pc, #392]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	061b      	lsls	r3, r3, #24
 8001956:	495f      	ldr	r1, [pc, #380]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e018      	b.n	8001990 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a5c      	ldr	r2, [pc, #368]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff fcdf 	bl	800132c <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001972:	f7ff fcdb 	bl	800132c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e1f9      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001984:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b00      	cmp	r3, #0
 800199a:	d03c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01c      	beq.n	80019de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019a4:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 80019a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019aa:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b4:	f7ff fcba 	bl	800132c <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019bc:	f7ff fcb6 	bl	800132c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1d4      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ce:	4b41      	ldr	r3, [pc, #260]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 80019d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ef      	beq.n	80019bc <HAL_RCC_OscConfig+0x3ec>
 80019dc:	e01b      	b.n	8001a16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019de:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 80019e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 80019e6:	f023 0301 	bic.w	r3, r3, #1
 80019ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff fc9d 	bl	800132c <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f6:	f7ff fc99 	bl	800132c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1b7      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a08:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1ef      	bne.n	80019f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80a6 	beq.w	8001b70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d10d      	bne.n	8001a50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	4a26      	ldr	r2, [pc, #152]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a40:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a50:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_RCC_OscConfig+0x508>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d118      	bne.n	8001a8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad8 <HAL_RCC_OscConfig+0x508>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad8 <HAL_RCC_OscConfig+0x508>)
 8001a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a68:	f7ff fc60 	bl	800132c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a70:	f7ff fc5c 	bl	800132c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e17a      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <HAL_RCC_OscConfig+0x508>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d108      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x4d8>
 8001a96:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aa6:	e029      	b.n	8001afc <HAL_RCC_OscConfig+0x52c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d115      	bne.n	8001adc <HAL_RCC_OscConfig+0x50c>
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab6:	4a07      	ldr	r2, [pc, #28]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ac0:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ac6:	4a03      	ldr	r2, [pc, #12]	@ (8001ad4 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ad0:	e014      	b.n	8001afc <HAL_RCC_OscConfig+0x52c>
 8001ad2:	bf00      	nop
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	4b9c      	ldr	r3, [pc, #624]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae2:	4a9b      	ldr	r2, [pc, #620]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aec:	4b98      	ldr	r3, [pc, #608]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af2:	4a97      	ldr	r2, [pc, #604]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001af4:	f023 0304 	bic.w	r3, r3, #4
 8001af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d016      	beq.n	8001b32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff fc12 	bl	800132c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fc0e 	bl	800132c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e12a      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b22:	4b8b      	ldr	r3, [pc, #556]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0ed      	beq.n	8001b0c <HAL_RCC_OscConfig+0x53c>
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b32:	f7ff fbfb 	bl	800132c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b38:	e00a      	b.n	8001b50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3a:	f7ff fbf7 	bl	800132c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e113      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b50:	4b7f      	ldr	r3, [pc, #508]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1ed      	bne.n	8001b3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b5e:	7ffb      	ldrb	r3, [r7, #31]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b64:	4b7a      	ldr	r3, [pc, #488]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b68:	4a79      	ldr	r2, [pc, #484]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b6e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80fe 	beq.w	8001d76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	f040 80d0 	bne.w	8001d24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b84:	4b72      	ldr	r3, [pc, #456]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0203 	and.w	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d130      	bne.n	8001bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d127      	bne.n	8001bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d11f      	bne.n	8001bfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bc4:	2a07      	cmp	r2, #7
 8001bc6:	bf14      	ite	ne
 8001bc8:	2201      	movne	r2, #1
 8001bca:	2200      	moveq	r2, #0
 8001bcc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d113      	bne.n	8001bfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	3b01      	subs	r3, #1
 8001be0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d109      	bne.n	8001bfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	085b      	lsrs	r3, r3, #1
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d06e      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d069      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c00:	4b53      	ldr	r3, [pc, #332]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c0c:	4b50      	ldr	r3, [pc, #320]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0ad      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a4b      	ldr	r2, [pc, #300]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c28:	f7ff fb80 	bl	800132c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff fb7c 	bl	800132c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e09a      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c42:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4e:	4b40      	ldr	r3, [pc, #256]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	4b40      	ldr	r3, [pc, #256]	@ (8001d54 <HAL_RCC_OscConfig+0x784>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	0112      	lsls	r2, r2, #4
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001c68:	0212      	lsls	r2, r2, #8
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001c70:	0852      	lsrs	r2, r2, #1
 8001c72:	3a01      	subs	r2, #1
 8001c74:	0552      	lsls	r2, r2, #21
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c7c:	0852      	lsrs	r2, r2, #1
 8001c7e:	3a01      	subs	r2, #1
 8001c80:	0652      	lsls	r2, r2, #25
 8001c82:	4311      	orrs	r1, r2
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c88:	0912      	lsrs	r2, r2, #4
 8001c8a:	0452      	lsls	r2, r2, #17
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	4930      	ldr	r1, [pc, #192]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c94:	4b2e      	ldr	r3, [pc, #184]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2d      	ldr	r2, [pc, #180]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001c9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001caa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cac:	f7ff fb3e 	bl	800132c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7ff fb3a 	bl	800132c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e058      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd2:	e050      	b.n	8001d76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e04f      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d148      	bne.n	8001d76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001cea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf0:	4b17      	ldr	r3, [pc, #92]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cfc:	f7ff fb16 	bl	800132c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff fb12 	bl	800132c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e030      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x734>
 8001d22:	e028      	b.n	8001d76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d023      	beq.n	8001d72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a08      	ldr	r2, [pc, #32]	@ (8001d50 <HAL_RCC_OscConfig+0x780>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff faf9 	bl	800132c <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3c:	e00c      	b.n	8001d58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff faf5 	bl	800132c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d905      	bls.n	8001d58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e013      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
 8001d50:	40021000 	.word	0x40021000
 8001d54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d58:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <HAL_RCC_OscConfig+0x7b0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ec      	bne.n	8001d3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_RCC_OscConfig+0x7b0>)
 8001d66:	68da      	ldr	r2, [r3, #12]
 8001d68:	4905      	ldr	r1, [pc, #20]	@ (8001d80 <HAL_RCC_OscConfig+0x7b0>)
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_RCC_OscConfig+0x7b4>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60cb      	str	r3, [r1, #12]
 8001d70:	e001      	b.n	8001d76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40021000 	.word	0x40021000
 8001d84:	feeefffc 	.word	0xfeeefffc

08001d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0e7      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b75      	ldr	r3, [pc, #468]	@ (8001f74 <HAL_RCC_ClockConfig+0x1ec>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b72      	ldr	r3, [pc, #456]	@ (8001f74 <HAL_RCC_ClockConfig+0x1ec>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4970      	ldr	r1, [pc, #448]	@ (8001f74 <HAL_RCC_ClockConfig+0x1ec>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b6e      	ldr	r3, [pc, #440]	@ (8001f74 <HAL_RCC_ClockConfig+0x1ec>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0cf      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d010      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4b66      	ldr	r3, [pc, #408]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d908      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b63      	ldr	r3, [pc, #396]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4960      	ldr	r1, [pc, #384]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d04c      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d121      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0a6      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e26:	4b54      	ldr	r3, [pc, #336]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d115      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e09a      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d107      	bne.n	8001e4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e08e      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e086      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e5e:	4b46      	ldr	r3, [pc, #280]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f023 0203 	bic.w	r2, r3, #3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4943      	ldr	r1, [pc, #268]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e70:	f7ff fa5c 	bl	800132c <HAL_GetTick>
 8001e74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e78:	f7ff fa58 	bl	800132c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e06e      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 020c 	and.w	r2, r3, #12
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d1eb      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d010      	beq.n	8001ece <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	4b31      	ldr	r3, [pc, #196]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d208      	bcs.n	8001ece <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	492b      	ldr	r1, [pc, #172]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ece:	4b29      	ldr	r3, [pc, #164]	@ (8001f74 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d210      	bcs.n	8001efe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001edc:	4b25      	ldr	r3, [pc, #148]	@ (8001f74 <HAL_RCC_ClockConfig+0x1ec>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 0207 	bic.w	r2, r3, #7
 8001ee4:	4923      	ldr	r1, [pc, #140]	@ (8001f74 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_RCC_ClockConfig+0x1ec>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e036      	b.n	8001f6c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4918      	ldr	r1, [pc, #96]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4910      	ldr	r1, [pc, #64]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f3c:	f000 f824 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	091b      	lsrs	r3, r3, #4
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	490b      	ldr	r1, [pc, #44]	@ (8001f7c <HAL_RCC_ClockConfig+0x1f4>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
 8001f58:	4a09      	ldr	r2, [pc, #36]	@ (8001f80 <HAL_RCC_ClockConfig+0x1f8>)
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f5c:	4b09      	ldr	r3, [pc, #36]	@ (8001f84 <HAL_RCC_ClockConfig+0x1fc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f821 	bl	8000fa8 <HAL_InitTick>
 8001f66:	4603      	mov	r3, r0
 8001f68:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f6a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	080061f8 	.word	0x080061f8
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f96:	4b3e      	ldr	r3, [pc, #248]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x34>
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	2b0c      	cmp	r3, #12
 8001fb4:	d121      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d11e      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fbc:	4b34      	ldr	r3, [pc, #208]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fc8:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e005      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10d      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff8:	e00a      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b04      	cmp	r3, #4
 8001ffe:	d102      	bne.n	8002006 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002000:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x110>)
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	e004      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d101      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800200c:	4b23      	ldr	r3, [pc, #140]	@ (800209c <HAL_RCC_GetSysClockFreq+0x114>)
 800200e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d134      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002016:	4b1e      	ldr	r3, [pc, #120]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x108>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d003      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0xa6>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d003      	beq.n	8002034 <HAL_RCC_GetSysClockFreq+0xac>
 800202c:	e005      	b.n	800203a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x110>)
 8002030:	617b      	str	r3, [r7, #20]
      break;
 8002032:	e005      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002034:	4b19      	ldr	r3, [pc, #100]	@ (800209c <HAL_RCC_GetSysClockFreq+0x114>)
 8002036:	617b      	str	r3, [r7, #20]
      break;
 8002038:	e002      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	617b      	str	r3, [r7, #20]
      break;
 800203e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x108>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	091b      	lsrs	r3, r3, #4
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	3301      	adds	r3, #1
 800204c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	fb03 f202 	mul.w	r2, r3, r2
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x108>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	0e5b      	lsrs	r3, r3, #25
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	3301      	adds	r3, #1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	fbb2 f3f3 	udiv	r3, r2, r3
 800207e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002080:	69bb      	ldr	r3, [r7, #24]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	@ 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	08006210 	.word	0x08006210
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200

080020a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a4:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000000 	.word	0x20000000

080020b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020bc:	f7ff fff0 	bl	80020a0 <HAL_RCC_GetHCLKFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	0adb      	lsrs	r3, r3, #11
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	4904      	ldr	r1, [pc, #16]	@ (80020e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08006208 	.word	0x08006208

080020e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	220f      	movs	r2, #15
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_RCC_GetClockConfig+0x5c>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002100:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <HAL_RCC_GetClockConfig+0x5c>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <HAL_RCC_GetClockConfig+0x5c>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002118:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <HAL_RCC_GetClockConfig+0x5c>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002126:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <HAL_RCC_GetClockConfig+0x60>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0207 	and.w	r2, r3, #7
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	601a      	str	r2, [r3, #0]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40022000 	.word	0x40022000

08002148 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002150:	2300      	movs	r3, #0
 8002152:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002154:	4b2a      	ldr	r3, [pc, #168]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002160:	f7ff f9d2 	bl	8001508 <HAL_PWREx_GetVoltageRange>
 8002164:	6178      	str	r0, [r7, #20]
 8002166:	e014      	b.n	8002192 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216c:	4a24      	ldr	r2, [pc, #144]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800216e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002172:	6593      	str	r3, [r2, #88]	@ 0x58
 8002174:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002180:	f7ff f9c2 	bl	8001508 <HAL_PWREx_GetVoltageRange>
 8002184:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002186:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	4a1d      	ldr	r2, [pc, #116]	@ (8002200 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002190:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d10b      	bne.n	80021b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b80      	cmp	r3, #128	@ 0x80
 800219e:	d919      	bls.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80021a4:	d902      	bls.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021a6:	2302      	movs	r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e013      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021ac:	2301      	movs	r3, #1
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	e010      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b80      	cmp	r3, #128	@ 0x80
 80021b6:	d902      	bls.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021b8:	2303      	movs	r3, #3
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	e00a      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b80      	cmp	r3, #128	@ 0x80
 80021c2:	d102      	bne.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c4:	2302      	movs	r3, #2
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e004      	b.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b70      	cmp	r3, #112	@ 0x70
 80021ce:	d101      	bne.n	80021d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d0:	2301      	movs	r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 0207 	bic.w	r2, r3, #7
 80021dc:	4909      	ldr	r1, [pc, #36]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021e4:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000
 8002204:	40022000 	.word	0x40022000

08002208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e049      	b.n	80022ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f841 	bl	80022b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f000 f9da 	bl	8002600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d001      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e04f      	b.n	8002384 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 0201 	orr.w	r2, r2, #1
 80022fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a23      	ldr	r2, [pc, #140]	@ (8002390 <HAL_TIM_Base_Start_IT+0xc4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01d      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x76>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800230e:	d018      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x76>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1f      	ldr	r2, [pc, #124]	@ (8002394 <HAL_TIM_Base_Start_IT+0xc8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x76>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a1e      	ldr	r2, [pc, #120]	@ (8002398 <HAL_TIM_Base_Start_IT+0xcc>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00e      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x76>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <HAL_TIM_Base_Start_IT+0xd0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x76>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1b      	ldr	r2, [pc, #108]	@ (80023a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_TIM_Base_Start_IT+0x76>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a19      	ldr	r2, [pc, #100]	@ (80023a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d115      	bne.n	800236e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	4b17      	ldr	r3, [pc, #92]	@ (80023a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800234a:	4013      	ands	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2b06      	cmp	r3, #6
 8002352:	d015      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0xb4>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800235a:	d011      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800236c:	e008      	b.n	8002380 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0201 	orr.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e000      	b.n	8002382 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002380:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40012c00 	.word	0x40012c00
 8002394:	40000400 	.word	0x40000400
 8002398:	40000800 	.word	0x40000800
 800239c:	40000c00 	.word	0x40000c00
 80023a0:	40013400 	.word	0x40013400
 80023a4:	40014000 	.word	0x40014000
 80023a8:	00010007 	.word	0x00010007

080023ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d020      	beq.n	8002410 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01b      	beq.n	8002410 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0202 	mvn.w	r2, #2
 80023e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f8e4 	bl	80025c4 <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f8d6 	bl	80025b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f8e7 	bl	80025d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	d020      	beq.n	800245c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01b      	beq.n	800245c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0204 	mvn.w	r2, #4
 800242c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f8be 	bl	80025c4 <HAL_TIM_IC_CaptureCallback>
 8002448:	e005      	b.n	8002456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8b0 	bl	80025b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f8c1 	bl	80025d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d020      	beq.n	80024a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01b      	beq.n	80024a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0208 	mvn.w	r2, #8
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2204      	movs	r2, #4
 800247e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f898 	bl	80025c4 <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f88a 	bl	80025b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f89b 	bl	80025d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d020      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01b      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0210 	mvn.w	r2, #16
 80024c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2208      	movs	r2, #8
 80024ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f872 	bl	80025c4 <HAL_TIM_IC_CaptureCallback>
 80024e0:	e005      	b.n	80024ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f864 	bl	80025b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f875 	bl	80025d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00c      	beq.n	8002518 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0201 	mvn.w	r2, #1
 8002510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7fe fd08 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00c      	beq.n	800253c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002528:	2b00      	cmp	r3, #0
 800252a:	d007      	beq.n	800253c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f906 	bl	8002748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00c      	beq.n	8002560 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254c:	2b00      	cmp	r3, #0
 800254e:	d007      	beq.n	8002560 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8fe 	bl	800275c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00c      	beq.n	8002584 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d007      	beq.n	8002584 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800257c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f834 	bl	80025ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00c      	beq.n	80025a8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0220 	mvn.w	r2, #32
 80025a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f8c6 	bl	8002734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a40      	ldr	r2, [pc, #256]	@ (8002714 <TIM_Base_SetConfig+0x114>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d013      	beq.n	8002640 <TIM_Base_SetConfig+0x40>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800261e:	d00f      	beq.n	8002640 <TIM_Base_SetConfig+0x40>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a3d      	ldr	r2, [pc, #244]	@ (8002718 <TIM_Base_SetConfig+0x118>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d00b      	beq.n	8002640 <TIM_Base_SetConfig+0x40>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a3c      	ldr	r2, [pc, #240]	@ (800271c <TIM_Base_SetConfig+0x11c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d007      	beq.n	8002640 <TIM_Base_SetConfig+0x40>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a3b      	ldr	r2, [pc, #236]	@ (8002720 <TIM_Base_SetConfig+0x120>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d003      	beq.n	8002640 <TIM_Base_SetConfig+0x40>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a3a      	ldr	r2, [pc, #232]	@ (8002724 <TIM_Base_SetConfig+0x124>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d108      	bne.n	8002652 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a2f      	ldr	r2, [pc, #188]	@ (8002714 <TIM_Base_SetConfig+0x114>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d01f      	beq.n	800269a <TIM_Base_SetConfig+0x9a>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002660:	d01b      	beq.n	800269a <TIM_Base_SetConfig+0x9a>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a2c      	ldr	r2, [pc, #176]	@ (8002718 <TIM_Base_SetConfig+0x118>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d017      	beq.n	800269a <TIM_Base_SetConfig+0x9a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2b      	ldr	r2, [pc, #172]	@ (800271c <TIM_Base_SetConfig+0x11c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <TIM_Base_SetConfig+0x9a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a2a      	ldr	r2, [pc, #168]	@ (8002720 <TIM_Base_SetConfig+0x120>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00f      	beq.n	800269a <TIM_Base_SetConfig+0x9a>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a29      	ldr	r2, [pc, #164]	@ (8002724 <TIM_Base_SetConfig+0x124>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00b      	beq.n	800269a <TIM_Base_SetConfig+0x9a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a28      	ldr	r2, [pc, #160]	@ (8002728 <TIM_Base_SetConfig+0x128>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <TIM_Base_SetConfig+0x9a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a27      	ldr	r2, [pc, #156]	@ (800272c <TIM_Base_SetConfig+0x12c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d003      	beq.n	800269a <TIM_Base_SetConfig+0x9a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a26      	ldr	r2, [pc, #152]	@ (8002730 <TIM_Base_SetConfig+0x130>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d108      	bne.n	80026ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a10      	ldr	r2, [pc, #64]	@ (8002714 <TIM_Base_SetConfig+0x114>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d00f      	beq.n	80026f8 <TIM_Base_SetConfig+0xf8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a12      	ldr	r2, [pc, #72]	@ (8002724 <TIM_Base_SetConfig+0x124>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00b      	beq.n	80026f8 <TIM_Base_SetConfig+0xf8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a11      	ldr	r2, [pc, #68]	@ (8002728 <TIM_Base_SetConfig+0x128>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <TIM_Base_SetConfig+0xf8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a10      	ldr	r2, [pc, #64]	@ (800272c <TIM_Base_SetConfig+0x12c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d003      	beq.n	80026f8 <TIM_Base_SetConfig+0xf8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002730 <TIM_Base_SetConfig+0x130>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d103      	bne.n	8002700 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	615a      	str	r2, [r3, #20]
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40000400 	.word	0x40000400
 800271c:	40000800 	.word	0x40000800
 8002720:	40000c00 	.word	0x40000c00
 8002724:	40013400 	.word	0x40013400
 8002728:	40014000 	.word	0x40014000
 800272c:	40014400 	.word	0x40014400
 8002730:	40014800 	.word	0x40014800

08002734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <SysTick_Handler+0x1c>)
 8002776:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002778:	f001 fe4e 	bl	8004418 <xTaskGetSchedulerState>
 800277c:	4603      	mov	r3, r0
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002782:	f002 fd49 	bl	8005218 <xPortSysTickHandler>
  }
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	e000e010 	.word	0xe000e010

08002790 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a07      	ldr	r2, [pc, #28]	@ (80027bc <vApplicationGetIdleTaskMemory+0x2c>)
 80027a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4a06      	ldr	r2, [pc, #24]	@ (80027c0 <vApplicationGetIdleTaskMemory+0x30>)
 80027a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2280      	movs	r2, #128	@ 0x80
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	200001e4 	.word	0x200001e4
 80027c0:	2000028c 	.word	0x2000028c

080027c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a07      	ldr	r2, [pc, #28]	@ (80027f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80027d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4a06      	ldr	r2, [pc, #24]	@ (80027f4 <vApplicationGetTimerTaskMemory+0x30>)
 80027da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027e2:	601a      	str	r2, [r3, #0]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	2000048c 	.word	0x2000048c
 80027f4:	20000534 	.word	0x20000534

080027f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f103 0208 	add.w	r2, r3, #8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f103 0208 	add.w	r2, r3, #8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f103 0208 	add.w	r2, r3, #8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	601a      	str	r2, [r3, #0]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800289a:	b480      	push	{r7}
 800289c:	b085      	sub	sp, #20
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
 80028a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b0:	d103      	bne.n	80028ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e00c      	b.n	80028d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	3308      	adds	r3, #8
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e002      	b.n	80028c8 <vListInsert+0x2e>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d2f6      	bcs.n	80028c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6892      	ldr	r2, [r2, #8]
 8002922:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6852      	ldr	r2, [r2, #4]
 800292c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d103      	bne.n	8002940 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002986:	bf00      	nop
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800298c:	f002 fbb4 	bl	80050f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	441a      	add	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029bc:	3b01      	subs	r3, #1
 80029be:	68f9      	ldr	r1, [r7, #12]
 80029c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	441a      	add	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	22ff      	movs	r2, #255	@ 0xff
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	22ff      	movs	r2, #255	@ 0xff
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d114      	bne.n	8002a0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d01a      	beq.n	8002a20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3310      	adds	r3, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 fb4c 	bl	800408c <xTaskRemoveFromEventList>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d012      	beq.n	8002a20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <xQueueGenericReset+0xd0>)
 80029fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	f3bf 8f6f 	isb	sy
 8002a0a:	e009      	b.n	8002a20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3310      	adds	r3, #16
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fef1 	bl	80027f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3324      	adds	r3, #36	@ 0x24
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff feec 	bl	80027f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a20:	f002 fb9c 	bl	800515c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e000ed04 	.word	0xe000ed04

08002a34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08e      	sub	sp, #56	@ 0x38
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10b      	bne.n	8002a60 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a5a:	bf00      	nop
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d10b      	bne.n	8002a7e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	e7fd      	b.n	8002a7a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <xQueueGenericCreateStatic+0x56>
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <xQueueGenericCreateStatic+0x5a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <xQueueGenericCreateStatic+0x5c>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	623b      	str	r3, [r7, #32]
}
 8002aa6:	bf00      	nop
 8002aa8:	bf00      	nop
 8002aaa:	e7fd      	b.n	8002aa8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <xQueueGenericCreateStatic+0x84>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <xQueueGenericCreateStatic+0x88>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <xQueueGenericCreateStatic+0x8a>
 8002abc:	2300      	movs	r3, #0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10b      	bne.n	8002ada <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	61fb      	str	r3, [r7, #28]
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	e7fd      	b.n	8002ad6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ada:	2350      	movs	r3, #80	@ 0x50
 8002adc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b50      	cmp	r3, #80	@ 0x50
 8002ae2:	d00b      	beq.n	8002afc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	61bb      	str	r3, [r7, #24]
}
 8002af6:	bf00      	nop
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002afc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b10:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f840 	bl	8002ba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3730      	adds	r7, #48	@ 0x30
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b08a      	sub	sp, #40	@ 0x28
 8002b32:	af02      	add	r7, sp, #8
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10b      	bne.n	8002b5a <xQueueGenericCreate+0x2c>
	__asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	613b      	str	r3, [r7, #16]
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	e7fd      	b.n	8002b56 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3350      	adds	r3, #80	@ 0x50
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fbe7 	bl	800533c <pvPortMalloc>
 8002b6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d011      	beq.n	8002b9a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3350      	adds	r3, #80	@ 0x50
 8002b7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b88:	79fa      	ldrb	r2, [r7, #7]
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f805 	bl	8002ba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
	}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e002      	b.n	8002bc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	69b8      	ldr	r0, [r7, #24]
 8002bd6:	f7ff fec3 	bl	8002960 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00e      	beq.n	8002c16 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f81d 	bl	8002c50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	461a      	mov	r2, r3
 8002c34:	6939      	ldr	r1, [r7, #16]
 8002c36:	6978      	ldr	r0, [r7, #20]
 8002c38:	f7ff ff79 	bl	8002b2e <xQueueGenericCreate>
 8002c3c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7ff ffd3 	bl	8002bea <prvInitialiseMutex>

		return xNewQueue;
 8002c44:	68fb      	ldr	r3, [r7, #12]
	}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	@ 0x38
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10b      	bne.n	8002c84 <xQueueGenericSend+0x34>
	__asm volatile
 8002c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c7e:	bf00      	nop
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <xQueueGenericSend+0x42>
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <xQueueGenericSend+0x46>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <xQueueGenericSend+0x48>
 8002c96:	2300      	movs	r3, #0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <xQueueGenericSend+0x64>
	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d103      	bne.n	8002cc2 <xQueueGenericSend+0x72>
 8002cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <xQueueGenericSend+0x76>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <xQueueGenericSend+0x78>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <xQueueGenericSend+0x94>
	__asm volatile
 8002ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd0:	f383 8811 	msr	BASEPRI, r3
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	f3bf 8f4f 	dsb	sy
 8002cdc:	623b      	str	r3, [r7, #32]
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ce4:	f001 fb98 	bl	8004418 <xTaskGetSchedulerState>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <xQueueGenericSend+0xa4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <xQueueGenericSend+0xa8>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <xQueueGenericSend+0xaa>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10b      	bne.n	8002d16 <xQueueGenericSend+0xc6>
	__asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	61fb      	str	r3, [r7, #28]
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	e7fd      	b.n	8002d12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d16:	f002 f9ef 	bl	80050f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d302      	bcc.n	8002d2c <xQueueGenericSend+0xdc>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d129      	bne.n	8002d80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d32:	f000 fb37 	bl	80033a4 <prvCopyDataToQueue>
 8002d36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d010      	beq.n	8002d62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	3324      	adds	r3, #36	@ 0x24
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 f9a1 	bl	800408c <xTaskRemoveFromEventList>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d50:	4b3f      	ldr	r3, [pc, #252]	@ (8002e50 <xQueueGenericSend+0x200>)
 8002d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	e00a      	b.n	8002d78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d68:	4b39      	ldr	r3, [pc, #228]	@ (8002e50 <xQueueGenericSend+0x200>)
 8002d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d78:	f002 f9f0 	bl	800515c <vPortExitCritical>
				return pdPASS;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e063      	b.n	8002e48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d103      	bne.n	8002d8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d86:	f002 f9e9 	bl	800515c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e05c      	b.n	8002e48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 f9db 	bl	8004154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002da2:	f002 f9db 	bl	800515c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002da6:	f000 ff43 	bl	8003c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002daa:	f002 f9a5 	bl	80050f8 <vPortEnterCritical>
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002db4:	b25b      	sxtb	r3, r3
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d103      	bne.n	8002dc4 <xQueueGenericSend+0x174>
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dca:	b25b      	sxtb	r3, r3
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d103      	bne.n	8002dda <xQueueGenericSend+0x18a>
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dda:	f002 f9bf 	bl	800515c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dde:	1d3a      	adds	r2, r7, #4
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f001 f9ca 	bl	8004180 <xTaskCheckForTimeOut>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d124      	bne.n	8002e3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002df2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002df4:	f000 fbce 	bl	8003594 <prvIsQueueFull>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d018      	beq.n	8002e30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e00:	3310      	adds	r3, #16
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 f8ee 	bl	8003fe8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e0e:	f000 fb59 	bl	80034c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e12:	f000 ff1b 	bl	8003c4c <xTaskResumeAll>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f47f af7c 	bne.w	8002d16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <xQueueGenericSend+0x200>)
 8002e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	f3bf 8f6f 	isb	sy
 8002e2e:	e772      	b.n	8002d16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e32:	f000 fb47 	bl	80034c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e36:	f000 ff09 	bl	8003c4c <xTaskResumeAll>
 8002e3a:	e76c      	b.n	8002d16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e3e:	f000 fb41 	bl	80034c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e42:	f000 ff03 	bl	8003c4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3738      	adds	r7, #56	@ 0x38
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b090      	sub	sp, #64	@ 0x40
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e70:	f383 8811 	msr	BASEPRI, r3
 8002e74:	f3bf 8f6f 	isb	sy
 8002e78:	f3bf 8f4f 	dsb	sy
 8002e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
 8002e82:	e7fd      	b.n	8002e80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <xQueueGenericSendFromISR+0x3e>
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <xQueueGenericSendFromISR+0x42>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <xQueueGenericSendFromISR+0x44>
 8002e96:	2300      	movs	r3, #0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	f3bf 8f6f 	isb	sy
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002eae:	bf00      	nop
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d103      	bne.n	8002ec2 <xQueueGenericSendFromISR+0x6e>
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d101      	bne.n	8002ec6 <xQueueGenericSendFromISR+0x72>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <xQueueGenericSendFromISR+0x74>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	623b      	str	r3, [r7, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ee4:	f002 f9e8 	bl	80052b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ee8:	f3ef 8211 	mrs	r2, BASEPRI
 8002eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	61fa      	str	r2, [r7, #28]
 8002efe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d302      	bcc.n	8002f16 <xQueueGenericSendFromISR+0xc2>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d12f      	bne.n	8002f76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002f2c:	f000 fa3a 	bl	80033a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d112      	bne.n	8002f60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d016      	beq.n	8002f70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f44:	3324      	adds	r3, #36	@ 0x24
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f8a0 	bl	800408c <xTaskRemoveFromEventList>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00e      	beq.n	8002f70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	e007      	b.n	8002f70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f64:	3301      	adds	r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	b25a      	sxtb	r2, r3
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002f70:	2301      	movs	r3, #1
 8002f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002f74:	e001      	b.n	8002f7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3740      	adds	r7, #64	@ 0x40
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08c      	sub	sp, #48	@ 0x30
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10b      	bne.n	8002fc2 <xQueueReceive+0x32>
	__asm volatile
 8002faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	623b      	str	r3, [r7, #32]
}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	e7fd      	b.n	8002fbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <xQueueReceive+0x40>
 8002fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <xQueueReceive+0x44>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <xQueueReceive+0x46>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <xQueueReceive+0x62>
	__asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	61fb      	str	r3, [r7, #28]
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	e7fd      	b.n	8002fee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ff2:	f001 fa11 	bl	8004418 <xTaskGetSchedulerState>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <xQueueReceive+0x72>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <xQueueReceive+0x76>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <xQueueReceive+0x78>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <xQueueReceive+0x94>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	61bb      	str	r3, [r7, #24]
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003024:	f002 f868 	bl	80050f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01f      	beq.n	8003074 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003038:	f000 fa1e 	bl	8003478 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	1e5a      	subs	r2, r3, #1
 8003040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003042:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00f      	beq.n	800306c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800304c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304e:	3310      	adds	r3, #16
 8003050:	4618      	mov	r0, r3
 8003052:	f001 f81b 	bl	800408c <xTaskRemoveFromEventList>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d007      	beq.n	800306c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800305c:	4b3c      	ldr	r3, [pc, #240]	@ (8003150 <xQueueReceive+0x1c0>)
 800305e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003062:	601a      	str	r2, [r3, #0]
 8003064:	f3bf 8f4f 	dsb	sy
 8003068:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800306c:	f002 f876 	bl	800515c <vPortExitCritical>
				return pdPASS;
 8003070:	2301      	movs	r3, #1
 8003072:	e069      	b.n	8003148 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800307a:	f002 f86f 	bl	800515c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800307e:	2300      	movs	r3, #0
 8003080:	e062      	b.n	8003148 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003088:	f107 0310 	add.w	r3, r7, #16
 800308c:	4618      	mov	r0, r3
 800308e:	f001 f861 	bl	8004154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003092:	2301      	movs	r3, #1
 8003094:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003096:	f002 f861 	bl	800515c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800309a:	f000 fdc9 	bl	8003c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800309e:	f002 f82b 	bl	80050f8 <vPortEnterCritical>
 80030a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d103      	bne.n	80030b8 <xQueueReceive+0x128>
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030be:	b25b      	sxtb	r3, r3
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d103      	bne.n	80030ce <xQueueReceive+0x13e>
 80030c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030ce:	f002 f845 	bl	800515c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030d2:	1d3a      	adds	r2, r7, #4
 80030d4:	f107 0310 	add.w	r3, r7, #16
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f001 f850 	bl	8004180 <xTaskCheckForTimeOut>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d123      	bne.n	800312e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030e8:	f000 fa3e 	bl	8003568 <prvIsQueueEmpty>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d017      	beq.n	8003122 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f4:	3324      	adds	r3, #36	@ 0x24
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 ff74 	bl	8003fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003100:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003102:	f000 f9df 	bl	80034c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003106:	f000 fda1 	bl	8003c4c <xTaskResumeAll>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d189      	bne.n	8003024 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003110:	4b0f      	ldr	r3, [pc, #60]	@ (8003150 <xQueueReceive+0x1c0>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	e780      	b.n	8003024 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003124:	f000 f9ce 	bl	80034c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003128:	f000 fd90 	bl	8003c4c <xTaskResumeAll>
 800312c:	e77a      	b.n	8003024 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800312e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003130:	f000 f9c8 	bl	80034c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003134:	f000 fd8a 	bl	8003c4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800313a:	f000 fa15 	bl	8003568 <prvIsQueueEmpty>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	f43f af6f 	beq.w	8003024 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003146:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003148:	4618      	mov	r0, r3
 800314a:	3730      	adds	r7, #48	@ 0x30
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	e000ed04 	.word	0xe000ed04

08003154 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	@ 0x38
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800315e:	2300      	movs	r3, #0
 8003160:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800316a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	623b      	str	r3, [r7, #32]
}
 8003182:	bf00      	nop
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003194:	f383 8811 	msr	BASEPRI, r3
 8003198:	f3bf 8f6f 	isb	sy
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	61fb      	str	r3, [r7, #28]
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031a8:	f001 f936 	bl	8004418 <xTaskGetSchedulerState>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <xQueueSemaphoreTake+0x64>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <xQueueSemaphoreTake+0x68>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <xQueueSemaphoreTake+0x6a>
 80031bc:	2300      	movs	r3, #0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10b      	bne.n	80031da <xQueueSemaphoreTake+0x86>
	__asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	61bb      	str	r3, [r7, #24]
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	e7fd      	b.n	80031d6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031da:	f001 ff8d 	bl	80050f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80031de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d024      	beq.n	8003234 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80031fa:	f001 fa87 	bl	800470c <pvTaskIncrementMutexHeldCount>
 80031fe:	4602      	mov	r2, r0
 8003200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003202:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00f      	beq.n	800322c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320e:	3310      	adds	r3, #16
 8003210:	4618      	mov	r0, r3
 8003212:	f000 ff3b 	bl	800408c <xTaskRemoveFromEventList>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800321c:	4b54      	ldr	r3, [pc, #336]	@ (8003370 <xQueueSemaphoreTake+0x21c>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800322c:	f001 ff96 	bl	800515c <vPortExitCritical>
				return pdPASS;
 8003230:	2301      	movs	r3, #1
 8003232:	e098      	b.n	8003366 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d112      	bne.n	8003260 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00b      	beq.n	8003258 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	617b      	str	r3, [r7, #20]
}
 8003252:	bf00      	nop
 8003254:	bf00      	nop
 8003256:	e7fd      	b.n	8003254 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003258:	f001 ff80 	bl	800515c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800325c:	2300      	movs	r3, #0
 800325e:	e082      	b.n	8003366 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	4618      	mov	r0, r3
 800326c:	f000 ff72 	bl	8004154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003270:	2301      	movs	r3, #1
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003274:	f001 ff72 	bl	800515c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003278:	f000 fcda 	bl	8003c30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800327c:	f001 ff3c 	bl	80050f8 <vPortEnterCritical>
 8003280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003282:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003286:	b25b      	sxtb	r3, r3
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d103      	bne.n	8003296 <xQueueSemaphoreTake+0x142>
 800328e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800329c:	b25b      	sxtb	r3, r3
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d103      	bne.n	80032ac <xQueueSemaphoreTake+0x158>
 80032a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ac:	f001 ff56 	bl	800515c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032b0:	463a      	mov	r2, r7
 80032b2:	f107 030c 	add.w	r3, r7, #12
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 ff61 	bl	8004180 <xTaskCheckForTimeOut>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d132      	bne.n	800332a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032c6:	f000 f94f 	bl	8003568 <prvIsQueueEmpty>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d026      	beq.n	800331e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80032d8:	f001 ff0e 	bl	80050f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f001 f8b7 	bl	8004454 <xTaskPriorityInherit>
 80032e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80032e8:	f001 ff38 	bl	800515c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ee:	3324      	adds	r3, #36	@ 0x24
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fe77 	bl	8003fe8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032fc:	f000 f8e2 	bl	80034c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003300:	f000 fca4 	bl	8003c4c <xTaskResumeAll>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	f47f af67 	bne.w	80031da <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800330c:	4b18      	ldr	r3, [pc, #96]	@ (8003370 <xQueueSemaphoreTake+0x21c>)
 800330e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	e75d      	b.n	80031da <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800331e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003320:	f000 f8d0 	bl	80034c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003324:	f000 fc92 	bl	8003c4c <xTaskResumeAll>
 8003328:	e757      	b.n	80031da <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800332a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800332c:	f000 f8ca 	bl	80034c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003330:	f000 fc8c 	bl	8003c4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003334:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003336:	f000 f917 	bl	8003568 <prvIsQueueEmpty>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f43f af4c 	beq.w	80031da <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00d      	beq.n	8003364 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003348:	f001 fed6 	bl	80050f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800334c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800334e:	f000 f811 	bl	8003374 <prvGetDisinheritPriorityAfterTimeout>
 8003352:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800335a:	4618      	mov	r0, r3
 800335c:	f001 f952 	bl	8004604 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003360:	f001 fefc 	bl	800515c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003366:	4618      	mov	r0, r3
 8003368:	3738      	adds	r7, #56	@ 0x38
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003380:	2b00      	cmp	r3, #0
 8003382:	d006      	beq.n	8003392 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e001      	b.n	8003396 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003396:	68fb      	ldr	r3, [r7, #12]
	}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d14d      	bne.n	8003466 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f001 f8a8 	bl	8004524 <xTaskPriorityDisinherit>
 80033d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	e043      	b.n	8003466 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d119      	bne.n	8003418 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6858      	ldr	r0, [r3, #4]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	461a      	mov	r2, r3
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	f002 fa3c 	bl	800586c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	441a      	add	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	429a      	cmp	r2, r3
 800340c:	d32b      	bcc.n	8003466 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	e026      	b.n	8003466 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	68d8      	ldr	r0, [r3, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	461a      	mov	r2, r3
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	f002 fa22 	bl	800586c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	425b      	negs	r3, r3
 8003432:	441a      	add	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d207      	bcs.n	8003454 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	425b      	negs	r3, r3
 800344e:	441a      	add	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d105      	bne.n	8003466 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	3b01      	subs	r3, #1
 8003464:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800346e:	697b      	ldr	r3, [r7, #20]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d018      	beq.n	80034bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003492:	441a      	add	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d303      	bcc.n	80034ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68d9      	ldr	r1, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b4:	461a      	mov	r2, r3
 80034b6:	6838      	ldr	r0, [r7, #0]
 80034b8:	f002 f9d8 	bl	800586c <memcpy>
	}
}
 80034bc:	bf00      	nop
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034cc:	f001 fe14 	bl	80050f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034d8:	e011      	b.n	80034fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d012      	beq.n	8003508 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3324      	adds	r3, #36	@ 0x24
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fdd0 	bl	800408c <xTaskRemoveFromEventList>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034f2:	f000 fea9 	bl	8004248 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	dce9      	bgt.n	80034da <prvUnlockQueue+0x16>
 8003506:	e000      	b.n	800350a <prvUnlockQueue+0x46>
					break;
 8003508:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	22ff      	movs	r2, #255	@ 0xff
 800350e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003512:	f001 fe23 	bl	800515c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003516:	f001 fdef 	bl	80050f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003520:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003522:	e011      	b.n	8003548 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d012      	beq.n	8003552 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3310      	adds	r3, #16
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fdab 	bl	800408c <xTaskRemoveFromEventList>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800353c:	f000 fe84 	bl	8004248 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003540:	7bbb      	ldrb	r3, [r7, #14]
 8003542:	3b01      	subs	r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003548:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800354c:	2b00      	cmp	r3, #0
 800354e:	dce9      	bgt.n	8003524 <prvUnlockQueue+0x60>
 8003550:	e000      	b.n	8003554 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003552:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	22ff      	movs	r2, #255	@ 0xff
 8003558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800355c:	f001 fdfe 	bl	800515c <vPortExitCritical>
}
 8003560:	bf00      	nop
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003570:	f001 fdc2 	bl	80050f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003578:	2b00      	cmp	r3, #0
 800357a:	d102      	bne.n	8003582 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800357c:	2301      	movs	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e001      	b.n	8003586 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003586:	f001 fde9 	bl	800515c <vPortExitCritical>

	return xReturn;
 800358a:	68fb      	ldr	r3, [r7, #12]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800359c:	f001 fdac 	bl	80050f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d102      	bne.n	80035b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e001      	b.n	80035b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035b6:	f001 fdd1 	bl	800515c <vPortExitCritical>

	return xReturn;
 80035ba:	68fb      	ldr	r3, [r7, #12]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e014      	b.n	80035fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003614 <vQueueAddToRegistry+0x50>)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035e0:	490c      	ldr	r1, [pc, #48]	@ (8003614 <vQueueAddToRegistry+0x50>)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003614 <vQueueAddToRegistry+0x50>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035f6:	e006      	b.n	8003606 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3301      	adds	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b07      	cmp	r3, #7
 8003602:	d9e7      	bls.n	80035d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	20000934 	.word	0x20000934

08003618 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003628:	f001 fd66 	bl	80050f8 <vPortEnterCritical>
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003632:	b25b      	sxtb	r3, r3
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d103      	bne.n	8003642 <vQueueWaitForMessageRestricted+0x2a>
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003648:	b25b      	sxtb	r3, r3
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d103      	bne.n	8003658 <vQueueWaitForMessageRestricted+0x40>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003658:	f001 fd80 	bl	800515c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003660:	2b00      	cmp	r3, #0
 8003662:	d106      	bne.n	8003672 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	3324      	adds	r3, #36	@ 0x24
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	68b9      	ldr	r1, [r7, #8]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fce1 	bl	8004034 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003672:	6978      	ldr	r0, [r7, #20]
 8003674:	f7ff ff26 	bl	80034c4 <prvUnlockQueue>
	}
 8003678:	bf00      	nop
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	@ 0x38
 8003684:	af04      	add	r7, sp, #16
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
 800368c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800368e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10b      	bne.n	80036ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8003694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
 80036a4:	623b      	str	r3, [r7, #32]
}
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10b      	bne.n	80036ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	61fb      	str	r3, [r7, #28]
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	e7fd      	b.n	80036c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036ca:	23a8      	movs	r3, #168	@ 0xa8
 80036cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2ba8      	cmp	r3, #168	@ 0xa8
 80036d2:	d00b      	beq.n	80036ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	61bb      	str	r3, [r7, #24]
}
 80036e6:	bf00      	nop
 80036e8:	bf00      	nop
 80036ea:	e7fd      	b.n	80036e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01e      	beq.n	8003732 <xTaskCreateStatic+0xb2>
 80036f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01b      	beq.n	8003732 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	2202      	movs	r2, #2
 8003708:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800370c:	2300      	movs	r3, #0
 800370e:	9303      	str	r3, [sp, #12]
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	9302      	str	r3, [sp, #8]
 8003714:	f107 0314 	add.w	r3, r7, #20
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 f851 	bl	80037cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800372a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800372c:	f000 f8f6 	bl	800391c <prvAddNewTaskToReadyList>
 8003730:	e001      	b.n	8003736 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003736:	697b      	ldr	r3, [r7, #20]
	}
 8003738:	4618      	mov	r0, r3
 800373a:	3728      	adds	r7, #40	@ 0x28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	@ 0x30
 8003744:	af04      	add	r7, sp, #16
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fdf1 	bl	800533c <pvPortMalloc>
 800375a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00e      	beq.n	8003780 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003762:	20a8      	movs	r0, #168	@ 0xa8
 8003764:	f001 fdea 	bl	800533c <pvPortMalloc>
 8003768:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	631a      	str	r2, [r3, #48]	@ 0x30
 8003776:	e005      	b.n	8003784 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003778:	6978      	ldr	r0, [r7, #20]
 800377a:	f001 fead 	bl	80054d8 <vPortFree>
 800377e:	e001      	b.n	8003784 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d017      	beq.n	80037ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003792:	88fa      	ldrh	r2, [r7, #6]
 8003794:	2300      	movs	r3, #0
 8003796:	9303      	str	r3, [sp, #12]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	9302      	str	r3, [sp, #8]
 800379c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68b9      	ldr	r1, [r7, #8]
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f80f 	bl	80037cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037ae:	69f8      	ldr	r0, [r7, #28]
 80037b0:	f000 f8b4 	bl	800391c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037b4:	2301      	movs	r3, #1
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	e002      	b.n	80037c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295
 80037be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037c0:	69bb      	ldr	r3, [r7, #24]
	}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	461a      	mov	r2, r3
 80037e4:	21a5      	movs	r1, #165	@ 0xa5
 80037e6:	f001 ffb7 	bl	8005758 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037f4:	3b01      	subs	r3, #1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	f023 0307 	bic.w	r3, r3, #7
 8003802:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00b      	beq.n	8003826 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	617b      	str	r3, [r7, #20]
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01f      	beq.n	800386c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	e012      	b.n	8003858 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	7819      	ldrb	r1, [r3, #0]
 800383a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	3334      	adds	r3, #52	@ 0x34
 8003842:	460a      	mov	r2, r1
 8003844:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d006      	beq.n	8003860 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3301      	adds	r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b0f      	cmp	r3, #15
 800385c:	d9e9      	bls.n	8003832 <prvInitialiseNewTask+0x66>
 800385e:	e000      	b.n	8003862 <prvInitialiseNewTask+0x96>
			{
				break;
 8003860:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800386a:	e003      	b.n	8003874 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	2b37      	cmp	r3, #55	@ 0x37
 8003878:	d901      	bls.n	800387e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800387a:	2337      	movs	r3, #55	@ 0x37
 800387c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003882:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003888:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800388a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388c:	2200      	movs	r2, #0
 800388e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003892:	3304      	adds	r3, #4
 8003894:	4618      	mov	r0, r3
 8003896:	f7fe ffcf 	bl	8002838 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389c:	3318      	adds	r3, #24
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe ffca 	bl	8002838 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80038b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80038ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038cc:	3354      	adds	r3, #84	@ 0x54
 80038ce:	224c      	movs	r2, #76	@ 0x4c
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 ff40 	bl	8005758 <memset>
 80038d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038da:	4a0d      	ldr	r2, [pc, #52]	@ (8003910 <prvInitialiseNewTask+0x144>)
 80038dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80038de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003914 <prvInitialiseNewTask+0x148>)
 80038e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80038e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003918 <prvInitialiseNewTask+0x14c>)
 80038e8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	68f9      	ldr	r1, [r7, #12]
 80038ee:	69b8      	ldr	r0, [r7, #24]
 80038f0:	f001 face 	bl	8004e90 <pxPortInitialiseStack>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003906:	bf00      	nop
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20001b80 	.word	0x20001b80
 8003914:	20001be8 	.word	0x20001be8
 8003918:	20001c50 	.word	0x20001c50

0800391c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003924:	f001 fbe8 	bl	80050f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003928:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <prvAddNewTaskToReadyList+0xc4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3301      	adds	r3, #1
 800392e:	4a2c      	ldr	r2, [pc, #176]	@ (80039e0 <prvAddNewTaskToReadyList+0xc4>)
 8003930:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003932:	4b2c      	ldr	r3, [pc, #176]	@ (80039e4 <prvAddNewTaskToReadyList+0xc8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800393a:	4a2a      	ldr	r2, [pc, #168]	@ (80039e4 <prvAddNewTaskToReadyList+0xc8>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003940:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <prvAddNewTaskToReadyList+0xc4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d110      	bne.n	800396a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003948:	f000 fca2 	bl	8004290 <prvInitialiseTaskLists>
 800394c:	e00d      	b.n	800396a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800394e:	4b26      	ldr	r3, [pc, #152]	@ (80039e8 <prvAddNewTaskToReadyList+0xcc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003956:	4b23      	ldr	r3, [pc, #140]	@ (80039e4 <prvAddNewTaskToReadyList+0xc8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	429a      	cmp	r2, r3
 8003962:	d802      	bhi.n	800396a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003964:	4a1f      	ldr	r2, [pc, #124]	@ (80039e4 <prvAddNewTaskToReadyList+0xc8>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800396a:	4b20      	ldr	r3, [pc, #128]	@ (80039ec <prvAddNewTaskToReadyList+0xd0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	4a1e      	ldr	r2, [pc, #120]	@ (80039ec <prvAddNewTaskToReadyList+0xd0>)
 8003972:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003974:	4b1d      	ldr	r3, [pc, #116]	@ (80039ec <prvAddNewTaskToReadyList+0xd0>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003980:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <prvAddNewTaskToReadyList+0xd4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d903      	bls.n	8003990 <prvAddNewTaskToReadyList+0x74>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398c:	4a18      	ldr	r2, [pc, #96]	@ (80039f0 <prvAddNewTaskToReadyList+0xd4>)
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003994:	4613      	mov	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4a15      	ldr	r2, [pc, #84]	@ (80039f4 <prvAddNewTaskToReadyList+0xd8>)
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f7fe ff53 	bl	8002852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80039ac:	f001 fbd6 	bl	800515c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80039b0:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <prvAddNewTaskToReadyList+0xcc>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00e      	beq.n	80039d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039b8:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <prvAddNewTaskToReadyList+0xc8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d207      	bcs.n	80039d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039c6:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <prvAddNewTaskToReadyList+0xdc>)
 80039c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000e48 	.word	0x20000e48
 80039e4:	20000974 	.word	0x20000974
 80039e8:	20000e54 	.word	0x20000e54
 80039ec:	20000e64 	.word	0x20000e64
 80039f0:	20000e50 	.word	0x20000e50
 80039f4:	20000978 	.word	0x20000978
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003a04:	f001 fb78 	bl	80050f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d102      	bne.n	8003a14 <vTaskDelete+0x18>
 8003a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ac4 <vTaskDelete+0xc8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	e000      	b.n	8003a16 <vTaskDelete+0x1a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe ff75 	bl	800290c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3318      	adds	r3, #24
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe ff6c 	bl	800290c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003a34:	4b24      	ldr	r3, [pc, #144]	@ (8003ac8 <vTaskDelete+0xcc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	4a23      	ldr	r2, [pc, #140]	@ (8003ac8 <vTaskDelete+0xcc>)
 8003a3c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003a3e:	4b21      	ldr	r3, [pc, #132]	@ (8003ac4 <vTaskDelete+0xc8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d10b      	bne.n	8003a60 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	481f      	ldr	r0, [pc, #124]	@ (8003acc <vTaskDelete+0xd0>)
 8003a50:	f7fe feff 	bl	8002852 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003a54:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <vTaskDelete+0xd4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <vTaskDelete+0xd4>)
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e009      	b.n	8003a74 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003a60:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad4 <vTaskDelete+0xd8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad4 <vTaskDelete+0xd8>)
 8003a68:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fc7e 	bl	800436c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003a70:	f000 fcb2 	bl	80043d8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003a74:	f001 fb72 	bl	800515c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003a78:	4b17      	ldr	r3, [pc, #92]	@ (8003ad8 <vTaskDelete+0xdc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01c      	beq.n	8003aba <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8003a80:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <vTaskDelete+0xc8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d117      	bne.n	8003aba <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003a8a:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <vTaskDelete+0xe0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <vTaskDelete+0xae>
	__asm volatile
 8003a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a96:	f383 8811 	msr	BASEPRI, r3
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	f3bf 8f4f 	dsb	sy
 8003aa2:	60bb      	str	r3, [r7, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	e7fd      	b.n	8003aa6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <vTaskDelete+0xe4>)
 8003aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000974 	.word	0x20000974
 8003ac8:	20000e64 	.word	0x20000e64
 8003acc:	20000e1c 	.word	0x20000e1c
 8003ad0:	20000e30 	.word	0x20000e30
 8003ad4:	20000e48 	.word	0x20000e48
 8003ad8:	20000e54 	.word	0x20000e54
 8003adc:	20000e70 	.word	0x20000e70
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d018      	beq.n	8003b28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003af6:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <vTaskDelay+0x64>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <vTaskDelay+0x32>
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	60bb      	str	r3, [r7, #8]
}
 8003b10:	bf00      	nop
 8003b12:	bf00      	nop
 8003b14:	e7fd      	b.n	8003b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b16:	f000 f88b 	bl	8003c30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fe09 	bl	8004734 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b22:	f000 f893 	bl	8003c4c <xTaskResumeAll>
 8003b26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d107      	bne.n	8003b3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b2e:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <vTaskDelay+0x68>)
 8003b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000e70 	.word	0x20000e70
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	@ 0x28
 8003b54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b5e:	463a      	mov	r2, r7
 8003b60:	1d39      	adds	r1, r7, #4
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe fe12 	bl	8002790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b6c:	6839      	ldr	r1, [r7, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	9202      	str	r2, [sp, #8]
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	460a      	mov	r2, r1
 8003b7e:	4924      	ldr	r1, [pc, #144]	@ (8003c10 <vTaskStartScheduler+0xc0>)
 8003b80:	4824      	ldr	r0, [pc, #144]	@ (8003c14 <vTaskStartScheduler+0xc4>)
 8003b82:	f7ff fd7d 	bl	8003680 <xTaskCreateStatic>
 8003b86:	4603      	mov	r3, r0
 8003b88:	4a23      	ldr	r2, [pc, #140]	@ (8003c18 <vTaskStartScheduler+0xc8>)
 8003b8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b8c:	4b22      	ldr	r3, [pc, #136]	@ (8003c18 <vTaskStartScheduler+0xc8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e001      	b.n	8003b9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ba4:	f000 fe1a 	bl	80047dc <xTimerCreateTimerTask>
 8003ba8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d11b      	bne.n	8003be8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	613b      	str	r3, [r7, #16]
}
 8003bc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bc4:	4b15      	ldr	r3, [pc, #84]	@ (8003c1c <vTaskStartScheduler+0xcc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3354      	adds	r3, #84	@ 0x54
 8003bca:	4a15      	ldr	r2, [pc, #84]	@ (8003c20 <vTaskStartScheduler+0xd0>)
 8003bcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bce:	4b15      	ldr	r3, [pc, #84]	@ (8003c24 <vTaskStartScheduler+0xd4>)
 8003bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bd6:	4b14      	ldr	r3, [pc, #80]	@ (8003c28 <vTaskStartScheduler+0xd8>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003bdc:	4b13      	ldr	r3, [pc, #76]	@ (8003c2c <vTaskStartScheduler+0xdc>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003be2:	f001 f9e5 	bl	8004fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003be6:	e00f      	b.n	8003c08 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bee:	d10b      	bne.n	8003c08 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	60fb      	str	r3, [r7, #12]
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <vTaskStartScheduler+0xb4>
}
 8003c08:	bf00      	nop
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	080061e0 	.word	0x080061e0
 8003c14:	08004261 	.word	0x08004261
 8003c18:	20000e6c 	.word	0x20000e6c
 8003c1c:	20000974 	.word	0x20000974
 8003c20:	20000010 	.word	0x20000010
 8003c24:	20000e68 	.word	0x20000e68
 8003c28:	20000e54 	.word	0x20000e54
 8003c2c:	20000e4c 	.word	0x20000e4c

08003c30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <vTaskSuspendAll+0x18>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	4a03      	ldr	r2, [pc, #12]	@ (8003c48 <vTaskSuspendAll+0x18>)
 8003c3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	20000e70 	.word	0x20000e70

08003c4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c5a:	4b42      	ldr	r3, [pc, #264]	@ (8003d64 <xTaskResumeAll+0x118>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10b      	bne.n	8003c7a <xTaskResumeAll+0x2e>
	__asm volatile
 8003c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c66:	f383 8811 	msr	BASEPRI, r3
 8003c6a:	f3bf 8f6f 	isb	sy
 8003c6e:	f3bf 8f4f 	dsb	sy
 8003c72:	603b      	str	r3, [r7, #0]
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	e7fd      	b.n	8003c76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c7a:	f001 fa3d 	bl	80050f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c7e:	4b39      	ldr	r3, [pc, #228]	@ (8003d64 <xTaskResumeAll+0x118>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	4a37      	ldr	r2, [pc, #220]	@ (8003d64 <xTaskResumeAll+0x118>)
 8003c86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c88:	4b36      	ldr	r3, [pc, #216]	@ (8003d64 <xTaskResumeAll+0x118>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d162      	bne.n	8003d56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c90:	4b35      	ldr	r3, [pc, #212]	@ (8003d68 <xTaskResumeAll+0x11c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d05e      	beq.n	8003d56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c98:	e02f      	b.n	8003cfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c9a:	4b34      	ldr	r3, [pc, #208]	@ (8003d6c <xTaskResumeAll+0x120>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3318      	adds	r3, #24
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fe30 	bl	800290c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fe2b 	bl	800290c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cba:	4b2d      	ldr	r3, [pc, #180]	@ (8003d70 <xTaskResumeAll+0x124>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d903      	bls.n	8003cca <xTaskResumeAll+0x7e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d70 <xTaskResumeAll+0x124>)
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4a27      	ldr	r2, [pc, #156]	@ (8003d74 <xTaskResumeAll+0x128>)
 8003cd8:	441a      	add	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	f7fe fdb6 	bl	8002852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cea:	4b23      	ldr	r3, [pc, #140]	@ (8003d78 <xTaskResumeAll+0x12c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003cf4:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <xTaskResumeAll+0x130>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8003d6c <xTaskResumeAll+0x120>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1cb      	bne.n	8003c9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d08:	f000 fb66 	bl	80043d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d80 <xTaskResumeAll+0x134>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d010      	beq.n	8003d3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d18:	f000 f846 	bl	8003da8 <xTaskIncrementTick>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003d22:	4b16      	ldr	r3, [pc, #88]	@ (8003d7c <xTaskResumeAll+0x130>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f1      	bne.n	8003d18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003d34:	4b12      	ldr	r3, [pc, #72]	@ (8003d80 <xTaskResumeAll+0x134>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d3a:	4b10      	ldr	r3, [pc, #64]	@ (8003d7c <xTaskResumeAll+0x130>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d42:	2301      	movs	r3, #1
 8003d44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d46:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <xTaskResumeAll+0x138>)
 8003d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d56:	f001 fa01 	bl	800515c <vPortExitCritical>

	return xAlreadyYielded;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000e70 	.word	0x20000e70
 8003d68:	20000e48 	.word	0x20000e48
 8003d6c:	20000e08 	.word	0x20000e08
 8003d70:	20000e50 	.word	0x20000e50
 8003d74:	20000978 	.word	0x20000978
 8003d78:	20000974 	.word	0x20000974
 8003d7c:	20000e5c 	.word	0x20000e5c
 8003d80:	20000e58 	.word	0x20000e58
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d8e:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <xTaskGetTickCount+0x1c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d94:	687b      	ldr	r3, [r7, #4]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000e4c 	.word	0x20000e4c

08003da8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003dae:	2300      	movs	r3, #0
 8003db0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003db2:	4b4f      	ldr	r3, [pc, #316]	@ (8003ef0 <xTaskIncrementTick+0x148>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f040 8090 	bne.w	8003edc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef4 <xTaskIncrementTick+0x14c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef4 <xTaskIncrementTick+0x14c>)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d121      	bne.n	8003e14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dd0:	4b49      	ldr	r3, [pc, #292]	@ (8003ef8 <xTaskIncrementTick+0x150>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	603b      	str	r3, [r7, #0]
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	e7fd      	b.n	8003dee <xTaskIncrementTick+0x46>
 8003df2:	4b41      	ldr	r3, [pc, #260]	@ (8003ef8 <xTaskIncrementTick+0x150>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	4b40      	ldr	r3, [pc, #256]	@ (8003efc <xTaskIncrementTick+0x154>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8003ef8 <xTaskIncrementTick+0x150>)
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4a3e      	ldr	r2, [pc, #248]	@ (8003efc <xTaskIncrementTick+0x154>)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b3e      	ldr	r3, [pc, #248]	@ (8003f00 <xTaskIncrementTick+0x158>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f00 <xTaskIncrementTick+0x158>)
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	f000 fae2 	bl	80043d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e14:	4b3b      	ldr	r3, [pc, #236]	@ (8003f04 <xTaskIncrementTick+0x15c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d349      	bcc.n	8003eb2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e1e:	4b36      	ldr	r3, [pc, #216]	@ (8003ef8 <xTaskIncrementTick+0x150>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e28:	4b36      	ldr	r3, [pc, #216]	@ (8003f04 <xTaskIncrementTick+0x15c>)
 8003e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2e:	601a      	str	r2, [r3, #0]
					break;
 8003e30:	e03f      	b.n	8003eb2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e32:	4b31      	ldr	r3, [pc, #196]	@ (8003ef8 <xTaskIncrementTick+0x150>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d203      	bcs.n	8003e52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8003f04 <xTaskIncrementTick+0x15c>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e50:	e02f      	b.n	8003eb2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fd58 	bl	800290c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	3318      	adds	r3, #24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fd4f 	bl	800290c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e72:	4b25      	ldr	r3, [pc, #148]	@ (8003f08 <xTaskIncrementTick+0x160>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d903      	bls.n	8003e82 <xTaskIncrementTick+0xda>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7e:	4a22      	ldr	r2, [pc, #136]	@ (8003f08 <xTaskIncrementTick+0x160>)
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f0c <xTaskIncrementTick+0x164>)
 8003e90:	441a      	add	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7fe fcda 	bl	8002852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <xTaskIncrementTick+0x168>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d3b8      	bcc.n	8003e1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb0:	e7b5      	b.n	8003e1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eb2:	4b17      	ldr	r3, [pc, #92]	@ (8003f10 <xTaskIncrementTick+0x168>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eb8:	4914      	ldr	r1, [pc, #80]	@ (8003f0c <xTaskIncrementTick+0x164>)
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d901      	bls.n	8003ece <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003ece:	4b11      	ldr	r3, [pc, #68]	@ (8003f14 <xTaskIncrementTick+0x16c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e004      	b.n	8003ee6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003edc:	4b0e      	ldr	r3, [pc, #56]	@ (8003f18 <xTaskIncrementTick+0x170>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8003f18 <xTaskIncrementTick+0x170>)
 8003ee4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ee6:	697b      	ldr	r3, [r7, #20]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000e70 	.word	0x20000e70
 8003ef4:	20000e4c 	.word	0x20000e4c
 8003ef8:	20000e00 	.word	0x20000e00
 8003efc:	20000e04 	.word	0x20000e04
 8003f00:	20000e60 	.word	0x20000e60
 8003f04:	20000e68 	.word	0x20000e68
 8003f08:	20000e50 	.word	0x20000e50
 8003f0c:	20000978 	.word	0x20000978
 8003f10:	20000974 	.word	0x20000974
 8003f14:	20000e5c 	.word	0x20000e5c
 8003f18:	20000e58 	.word	0x20000e58

08003f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f22:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd0 <vTaskSwitchContext+0xb4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd4 <vTaskSwitchContext+0xb8>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f30:	e047      	b.n	8003fc2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003f32:	4b28      	ldr	r3, [pc, #160]	@ (8003fd4 <vTaskSwitchContext+0xb8>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f38:	4b27      	ldr	r3, [pc, #156]	@ (8003fd8 <vTaskSwitchContext+0xbc>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e011      	b.n	8003f64 <vTaskSwitchContext+0x48>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10b      	bne.n	8003f5e <vTaskSwitchContext+0x42>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	607b      	str	r3, [r7, #4]
}
 8003f58:	bf00      	nop
 8003f5a:	bf00      	nop
 8003f5c:	e7fd      	b.n	8003f5a <vTaskSwitchContext+0x3e>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	491d      	ldr	r1, [pc, #116]	@ (8003fdc <vTaskSwitchContext+0xc0>)
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0e3      	beq.n	8003f40 <vTaskSwitchContext+0x24>
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4a16      	ldr	r2, [pc, #88]	@ (8003fdc <vTaskSwitchContext+0xc0>)
 8003f84:	4413      	add	r3, r2
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	605a      	str	r2, [r3, #4]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d104      	bne.n	8003fa8 <vTaskSwitchContext+0x8c>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe0 <vTaskSwitchContext+0xc4>)
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4a09      	ldr	r2, [pc, #36]	@ (8003fd8 <vTaskSwitchContext+0xbc>)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fb8:	4b09      	ldr	r3, [pc, #36]	@ (8003fe0 <vTaskSwitchContext+0xc4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3354      	adds	r3, #84	@ 0x54
 8003fbe:	4a09      	ldr	r2, [pc, #36]	@ (8003fe4 <vTaskSwitchContext+0xc8>)
 8003fc0:	6013      	str	r3, [r2, #0]
}
 8003fc2:	bf00      	nop
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	20000e70 	.word	0x20000e70
 8003fd4:	20000e5c 	.word	0x20000e5c
 8003fd8:	20000e50 	.word	0x20000e50
 8003fdc:	20000978 	.word	0x20000978
 8003fe0:	20000974 	.word	0x20000974
 8003fe4:	20000010 	.word	0x20000010

08003fe8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	60fb      	str	r3, [r7, #12]
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004010:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <vTaskPlaceOnEventList+0x48>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3318      	adds	r3, #24
 8004016:	4619      	mov	r1, r3
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fe fc3e 	bl	800289a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800401e:	2101      	movs	r1, #1
 8004020:	6838      	ldr	r0, [r7, #0]
 8004022:	f000 fb87 	bl	8004734 <prvAddCurrentTaskToDelayedList>
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000974 	.word	0x20000974

08004034 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10b      	bne.n	800405e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	617b      	str	r3, [r7, #20]
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	e7fd      	b.n	800405a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800405e:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <vTaskPlaceOnEventListRestricted+0x54>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3318      	adds	r3, #24
 8004064:	4619      	mov	r1, r3
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f7fe fbf3 	bl	8002852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004072:	f04f 33ff 	mov.w	r3, #4294967295
 8004076:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	68b8      	ldr	r0, [r7, #8]
 800407c:	f000 fb5a 	bl	8004734 <prvAddCurrentTaskToDelayedList>
	}
 8004080:	bf00      	nop
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000974 	.word	0x20000974

0800408c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60fb      	str	r3, [r7, #12]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3318      	adds	r3, #24
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe fc24 	bl	800290c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c4:	4b1d      	ldr	r3, [pc, #116]	@ (800413c <xTaskRemoveFromEventList+0xb0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d11d      	bne.n	8004108 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fc1b 	bl	800290c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040da:	4b19      	ldr	r3, [pc, #100]	@ (8004140 <xTaskRemoveFromEventList+0xb4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d903      	bls.n	80040ea <xTaskRemoveFromEventList+0x5e>
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	4a16      	ldr	r2, [pc, #88]	@ (8004140 <xTaskRemoveFromEventList+0xb4>)
 80040e8:	6013      	str	r3, [r2, #0]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4a13      	ldr	r2, [pc, #76]	@ (8004144 <xTaskRemoveFromEventList+0xb8>)
 80040f8:	441a      	add	r2, r3
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3304      	adds	r3, #4
 80040fe:	4619      	mov	r1, r3
 8004100:	4610      	mov	r0, r2
 8004102:	f7fe fba6 	bl	8002852 <vListInsertEnd>
 8004106:	e005      	b.n	8004114 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3318      	adds	r3, #24
 800410c:	4619      	mov	r1, r3
 800410e:	480e      	ldr	r0, [pc, #56]	@ (8004148 <xTaskRemoveFromEventList+0xbc>)
 8004110:	f7fe fb9f 	bl	8002852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004118:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <xTaskRemoveFromEventList+0xc0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411e:	429a      	cmp	r2, r3
 8004120:	d905      	bls.n	800412e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004122:	2301      	movs	r3, #1
 8004124:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004126:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <xTaskRemoveFromEventList+0xc4>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	e001      	b.n	8004132 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004132:	697b      	ldr	r3, [r7, #20]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	20000e70 	.word	0x20000e70
 8004140:	20000e50 	.word	0x20000e50
 8004144:	20000978 	.word	0x20000978
 8004148:	20000e08 	.word	0x20000e08
 800414c:	20000974 	.word	0x20000974
 8004150:	20000e5c 	.word	0x20000e5c

08004154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800415c:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <vTaskInternalSetTimeOutState+0x24>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004164:	4b05      	ldr	r3, [pc, #20]	@ (800417c <vTaskInternalSetTimeOutState+0x28>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	605a      	str	r2, [r3, #4]
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	20000e60 	.word	0x20000e60
 800417c:	20000e4c 	.word	0x20000e4c

08004180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	613b      	str	r3, [r7, #16]
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	e7fd      	b.n	80041a4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	60fb      	str	r3, [r7, #12]
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	e7fd      	b.n	80041c2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80041c6:	f000 ff97 	bl	80050f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004240 <xTaskCheckForTimeOut+0xc0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d102      	bne.n	80041ea <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	e023      	b.n	8004232 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <xTaskCheckForTimeOut+0xc4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d007      	beq.n	8004206 <xTaskCheckForTimeOut+0x86>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004200:	2301      	movs	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	e015      	b.n	8004232 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	d20b      	bcs.n	8004228 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	1ad2      	subs	r2, r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f7ff ff99 	bl	8004154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	e004      	b.n	8004232 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800422e:	2301      	movs	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004232:	f000 ff93 	bl	800515c <vPortExitCritical>

	return xReturn;
 8004236:	69fb      	ldr	r3, [r7, #28]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3720      	adds	r7, #32
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20000e4c 	.word	0x20000e4c
 8004244:	20000e60 	.word	0x20000e60

08004248 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800424c:	4b03      	ldr	r3, [pc, #12]	@ (800425c <vTaskMissedYield+0x14>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]
}
 8004252:	bf00      	nop
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	20000e5c 	.word	0x20000e5c

08004260 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004268:	f000 f852 	bl	8004310 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800426c:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <prvIdleTask+0x28>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d9f9      	bls.n	8004268 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004274:	4b05      	ldr	r3, [pc, #20]	@ (800428c <prvIdleTask+0x2c>)
 8004276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004284:	e7f0      	b.n	8004268 <prvIdleTask+0x8>
 8004286:	bf00      	nop
 8004288:	20000978 	.word	0x20000978
 800428c:	e000ed04 	.word	0xe000ed04

08004290 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	e00c      	b.n	80042b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4a12      	ldr	r2, [pc, #72]	@ (80042f0 <prvInitialiseTaskLists+0x60>)
 80042a8:	4413      	add	r3, r2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fe faa4 	bl	80027f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3301      	adds	r3, #1
 80042b4:	607b      	str	r3, [r7, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b37      	cmp	r3, #55	@ 0x37
 80042ba:	d9ef      	bls.n	800429c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042bc:	480d      	ldr	r0, [pc, #52]	@ (80042f4 <prvInitialiseTaskLists+0x64>)
 80042be:	f7fe fa9b 	bl	80027f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042c2:	480d      	ldr	r0, [pc, #52]	@ (80042f8 <prvInitialiseTaskLists+0x68>)
 80042c4:	f7fe fa98 	bl	80027f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042c8:	480c      	ldr	r0, [pc, #48]	@ (80042fc <prvInitialiseTaskLists+0x6c>)
 80042ca:	f7fe fa95 	bl	80027f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042ce:	480c      	ldr	r0, [pc, #48]	@ (8004300 <prvInitialiseTaskLists+0x70>)
 80042d0:	f7fe fa92 	bl	80027f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042d4:	480b      	ldr	r0, [pc, #44]	@ (8004304 <prvInitialiseTaskLists+0x74>)
 80042d6:	f7fe fa8f 	bl	80027f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042da:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <prvInitialiseTaskLists+0x78>)
 80042dc:	4a05      	ldr	r2, [pc, #20]	@ (80042f4 <prvInitialiseTaskLists+0x64>)
 80042de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042e0:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <prvInitialiseTaskLists+0x7c>)
 80042e2:	4a05      	ldr	r2, [pc, #20]	@ (80042f8 <prvInitialiseTaskLists+0x68>)
 80042e4:	601a      	str	r2, [r3, #0]
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000978 	.word	0x20000978
 80042f4:	20000dd8 	.word	0x20000dd8
 80042f8:	20000dec 	.word	0x20000dec
 80042fc:	20000e08 	.word	0x20000e08
 8004300:	20000e1c 	.word	0x20000e1c
 8004304:	20000e34 	.word	0x20000e34
 8004308:	20000e00 	.word	0x20000e00
 800430c:	20000e04 	.word	0x20000e04

08004310 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004316:	e019      	b.n	800434c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004318:	f000 feee 	bl	80050f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800431c:	4b10      	ldr	r3, [pc, #64]	@ (8004360 <prvCheckTasksWaitingTermination+0x50>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4618      	mov	r0, r3
 800432a:	f7fe faef 	bl	800290c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800432e:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <prvCheckTasksWaitingTermination+0x54>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3b01      	subs	r3, #1
 8004334:	4a0b      	ldr	r2, [pc, #44]	@ (8004364 <prvCheckTasksWaitingTermination+0x54>)
 8004336:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004338:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <prvCheckTasksWaitingTermination+0x58>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3b01      	subs	r3, #1
 800433e:	4a0a      	ldr	r2, [pc, #40]	@ (8004368 <prvCheckTasksWaitingTermination+0x58>)
 8004340:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004342:	f000 ff0b 	bl	800515c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f810 	bl	800436c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800434c:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <prvCheckTasksWaitingTermination+0x58>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e1      	bne.n	8004318 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000e1c 	.word	0x20000e1c
 8004364:	20000e48 	.word	0x20000e48
 8004368:	20000e30 	.word	0x20000e30

0800436c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3354      	adds	r3, #84	@ 0x54
 8004378:	4618      	mov	r0, r3
 800437a:	f001 f9f5 	bl	8005768 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004384:	2b00      	cmp	r3, #0
 8004386:	d108      	bne.n	800439a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	4618      	mov	r0, r3
 800438e:	f001 f8a3 	bl	80054d8 <vPortFree>
				vPortFree( pxTCB );
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f001 f8a0 	bl	80054d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004398:	e019      	b.n	80043ce <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d103      	bne.n	80043ac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f001 f897 	bl	80054d8 <vPortFree>
	}
 80043aa:	e010      	b.n	80043ce <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d00b      	beq.n	80043ce <prvDeleteTCB+0x62>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	60fb      	str	r3, [r7, #12]
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	e7fd      	b.n	80043ca <prvDeleteTCB+0x5e>
	}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043de:	4b0c      	ldr	r3, [pc, #48]	@ (8004410 <prvResetNextTaskUnblockTime+0x38>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d104      	bne.n	80043f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004414 <prvResetNextTaskUnblockTime+0x3c>)
 80043ea:	f04f 32ff 	mov.w	r2, #4294967295
 80043ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043f0:	e008      	b.n	8004404 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f2:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <prvResetNextTaskUnblockTime+0x38>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4a04      	ldr	r2, [pc, #16]	@ (8004414 <prvResetNextTaskUnblockTime+0x3c>)
 8004402:	6013      	str	r3, [r2, #0]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	20000e00 	.word	0x20000e00
 8004414:	20000e68 	.word	0x20000e68

08004418 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800441e:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <xTaskGetSchedulerState+0x34>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d102      	bne.n	800442c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004426:	2301      	movs	r3, #1
 8004428:	607b      	str	r3, [r7, #4]
 800442a:	e008      	b.n	800443e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800442c:	4b08      	ldr	r3, [pc, #32]	@ (8004450 <xTaskGetSchedulerState+0x38>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004434:	2302      	movs	r3, #2
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	e001      	b.n	800443e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800443e:	687b      	ldr	r3, [r7, #4]
	}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20000e54 	.word	0x20000e54
 8004450:	20000e70 	.word	0x20000e70

08004454 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d051      	beq.n	800450e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800446e:	4b2a      	ldr	r3, [pc, #168]	@ (8004518 <xTaskPriorityInherit+0xc4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	429a      	cmp	r2, r3
 8004476:	d241      	bcs.n	80044fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	db06      	blt.n	800448e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004480:	4b25      	ldr	r3, [pc, #148]	@ (8004518 <xTaskPriorityInherit+0xc4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6959      	ldr	r1, [r3, #20]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4a1f      	ldr	r2, [pc, #124]	@ (800451c <xTaskPriorityInherit+0xc8>)
 80044a0:	4413      	add	r3, r2
 80044a2:	4299      	cmp	r1, r3
 80044a4:	d122      	bne.n	80044ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe fa2e 	bl	800290c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044b0:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <xTaskPriorityInherit+0xc4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044be:	4b18      	ldr	r3, [pc, #96]	@ (8004520 <xTaskPriorityInherit+0xcc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d903      	bls.n	80044ce <xTaskPriorityInherit+0x7a>
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	4a15      	ldr	r2, [pc, #84]	@ (8004520 <xTaskPriorityInherit+0xcc>)
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4a10      	ldr	r2, [pc, #64]	@ (800451c <xTaskPriorityInherit+0xc8>)
 80044dc:	441a      	add	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f7fe f9b4 	bl	8002852 <vListInsertEnd>
 80044ea:	e004      	b.n	80044f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80044ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <xTaskPriorityInherit+0xc4>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80044f6:	2301      	movs	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e008      	b.n	800450e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004500:	4b05      	ldr	r3, [pc, #20]	@ (8004518 <xTaskPriorityInherit+0xc4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	429a      	cmp	r2, r3
 8004508:	d201      	bcs.n	800450e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800450a:	2301      	movs	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800450e:	68fb      	ldr	r3, [r7, #12]
	}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000974 	.word	0x20000974
 800451c:	20000978 	.word	0x20000978
 8004520:	20000e50 	.word	0x20000e50

08004524 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004530:	2300      	movs	r3, #0
 8004532:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d058      	beq.n	80045ec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800453a:	4b2f      	ldr	r3, [pc, #188]	@ (80045f8 <xTaskPriorityDisinherit+0xd4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	429a      	cmp	r2, r3
 8004542:	d00b      	beq.n	800455c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10b      	bne.n	800457c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	60bb      	str	r3, [r7, #8]
}
 8004576:	bf00      	nop
 8004578:	bf00      	nop
 800457a:	e7fd      	b.n	8004578 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004580:	1e5a      	subs	r2, r3, #1
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458e:	429a      	cmp	r2, r3
 8004590:	d02c      	beq.n	80045ec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004596:	2b00      	cmp	r3, #0
 8004598:	d128      	bne.n	80045ec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3304      	adds	r3, #4
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe f9b4 	bl	800290c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045bc:	4b0f      	ldr	r3, [pc, #60]	@ (80045fc <xTaskPriorityDisinherit+0xd8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d903      	bls.n	80045cc <xTaskPriorityDisinherit+0xa8>
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	4a0c      	ldr	r2, [pc, #48]	@ (80045fc <xTaskPriorityDisinherit+0xd8>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4a09      	ldr	r2, [pc, #36]	@ (8004600 <xTaskPriorityDisinherit+0xdc>)
 80045da:	441a      	add	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f7fe f935 	bl	8002852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80045ec:	697b      	ldr	r3, [r7, #20]
	}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000974 	.word	0x20000974
 80045fc:	20000e50 	.word	0x20000e50
 8004600:	20000978 	.word	0x20000978

08004604 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004612:	2301      	movs	r3, #1
 8004614:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d06c      	beq.n	80046f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10b      	bne.n	800463c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60fb      	str	r3, [r7, #12]
}
 8004636:	bf00      	nop
 8004638:	bf00      	nop
 800463a:	e7fd      	b.n	8004638 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d902      	bls.n	800464c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	e002      	b.n	8004652 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004650:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	429a      	cmp	r2, r3
 800465a:	d04c      	beq.n	80046f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	429a      	cmp	r2, r3
 8004664:	d147      	bne.n	80046f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004666:	4b26      	ldr	r3, [pc, #152]	@ (8004700 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	429a      	cmp	r2, r3
 800466e:	d10b      	bne.n	8004688 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60bb      	str	r3, [r7, #8]
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	db04      	blt.n	80046a6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	6959      	ldr	r1, [r3, #20]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4a13      	ldr	r2, [pc, #76]	@ (8004704 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80046b6:	4413      	add	r3, r2
 80046b8:	4299      	cmp	r1, r3
 80046ba:	d11c      	bne.n	80046f6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	3304      	adds	r3, #4
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fe f923 	bl	800290c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004708 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d903      	bls.n	80046da <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004708 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4a07      	ldr	r2, [pc, #28]	@ (8004704 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80046e8:	441a      	add	r2, r3
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	3304      	adds	r3, #4
 80046ee:	4619      	mov	r1, r3
 80046f0:	4610      	mov	r0, r2
 80046f2:	f7fe f8ae 	bl	8002852 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046f6:	bf00      	nop
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000974 	.word	0x20000974
 8004704:	20000978 	.word	0x20000978
 8004708:	20000e50 	.word	0x20000e50

0800470c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004710:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <pvTaskIncrementMutexHeldCount+0x24>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004718:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <pvTaskIncrementMutexHeldCount+0x24>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800471e:	3201      	adds	r2, #1
 8004720:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8004722:	4b03      	ldr	r3, [pc, #12]	@ (8004730 <pvTaskIncrementMutexHeldCount+0x24>)
 8004724:	681b      	ldr	r3, [r3, #0]
	}
 8004726:	4618      	mov	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20000974 	.word	0x20000974

08004734 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800473e:	4b21      	ldr	r3, [pc, #132]	@ (80047c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004744:	4b20      	ldr	r3, [pc, #128]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3304      	adds	r3, #4
 800474a:	4618      	mov	r0, r3
 800474c:	f7fe f8de 	bl	800290c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004756:	d10a      	bne.n	800476e <prvAddCurrentTaskToDelayedList+0x3a>
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800475e:	4b1a      	ldr	r3, [pc, #104]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3304      	adds	r3, #4
 8004764:	4619      	mov	r1, r3
 8004766:	4819      	ldr	r0, [pc, #100]	@ (80047cc <prvAddCurrentTaskToDelayedList+0x98>)
 8004768:	f7fe f873 	bl	8002852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800476c:	e026      	b.n	80047bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004776:	4b14      	ldr	r3, [pc, #80]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	429a      	cmp	r2, r3
 8004784:	d209      	bcs.n	800479a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004786:	4b12      	ldr	r3, [pc, #72]	@ (80047d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	4b0f      	ldr	r3, [pc, #60]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3304      	adds	r3, #4
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f7fe f881 	bl	800289a <vListInsert>
}
 8004798:	e010      	b.n	80047bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800479a:	4b0e      	ldr	r3, [pc, #56]	@ (80047d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f7fe f877 	bl	800289a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047ac:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d202      	bcs.n	80047bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80047b6:	4a08      	ldr	r2, [pc, #32]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6013      	str	r3, [r2, #0]
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000e4c 	.word	0x20000e4c
 80047c8:	20000974 	.word	0x20000974
 80047cc:	20000e34 	.word	0x20000e34
 80047d0:	20000e04 	.word	0x20000e04
 80047d4:	20000e00 	.word	0x20000e00
 80047d8:	20000e68 	.word	0x20000e68

080047dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	@ 0x28
 80047e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047e6:	f000 fb13 	bl	8004e10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004860 <xTimerCreateTimerTask+0x84>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d021      	beq.n	8004836 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047fa:	1d3a      	adds	r2, r7, #4
 80047fc:	f107 0108 	add.w	r1, r7, #8
 8004800:	f107 030c 	add.w	r3, r7, #12
 8004804:	4618      	mov	r0, r3
 8004806:	f7fd ffdd 	bl	80027c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	9202      	str	r2, [sp, #8]
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	2302      	movs	r3, #2
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	460a      	mov	r2, r1
 800481c:	4911      	ldr	r1, [pc, #68]	@ (8004864 <xTimerCreateTimerTask+0x88>)
 800481e:	4812      	ldr	r0, [pc, #72]	@ (8004868 <xTimerCreateTimerTask+0x8c>)
 8004820:	f7fe ff2e 	bl	8003680 <xTaskCreateStatic>
 8004824:	4603      	mov	r3, r0
 8004826:	4a11      	ldr	r2, [pc, #68]	@ (800486c <xTimerCreateTimerTask+0x90>)
 8004828:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800482a:	4b10      	ldr	r3, [pc, #64]	@ (800486c <xTimerCreateTimerTask+0x90>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004832:	2301      	movs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	613b      	str	r3, [r7, #16]
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	e7fd      	b.n	8004850 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004854:	697b      	ldr	r3, [r7, #20]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20000ea4 	.word	0x20000ea4
 8004864:	080061e8 	.word	0x080061e8
 8004868:	080049a9 	.word	0x080049a9
 800486c:	20000ea8 	.word	0x20000ea8

08004870 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <xTimerGenericCommand+0x30>
	__asm volatile
 8004888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	623b      	str	r3, [r7, #32]
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	e7fd      	b.n	800489c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048a0:	4b19      	ldr	r3, [pc, #100]	@ (8004908 <xTimerGenericCommand+0x98>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02a      	beq.n	80048fe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	dc18      	bgt.n	80048ec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048ba:	f7ff fdad 	bl	8004418 <xTaskGetSchedulerState>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d109      	bne.n	80048d8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048c4:	4b10      	ldr	r3, [pc, #64]	@ (8004908 <xTimerGenericCommand+0x98>)
 80048c6:	6818      	ldr	r0, [r3, #0]
 80048c8:	f107 0110 	add.w	r1, r7, #16
 80048cc:	2300      	movs	r3, #0
 80048ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d0:	f7fe f9be 	bl	8002c50 <xQueueGenericSend>
 80048d4:	6278      	str	r0, [r7, #36]	@ 0x24
 80048d6:	e012      	b.n	80048fe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <xTimerGenericCommand+0x98>)
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	f107 0110 	add.w	r1, r7, #16
 80048e0:	2300      	movs	r3, #0
 80048e2:	2200      	movs	r2, #0
 80048e4:	f7fe f9b4 	bl	8002c50 <xQueueGenericSend>
 80048e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80048ea:	e008      	b.n	80048fe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <xTimerGenericCommand+0x98>)
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	f107 0110 	add.w	r1, r7, #16
 80048f4:	2300      	movs	r3, #0
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	f7fe faac 	bl	8002e54 <xQueueGenericSendFromISR>
 80048fc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004900:	4618      	mov	r0, r3
 8004902:	3728      	adds	r7, #40	@ 0x28
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	20000ea4 	.word	0x20000ea4

0800490c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af02      	add	r7, sp, #8
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <prvProcessExpiredTimer+0x98>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3304      	adds	r3, #4
 8004924:	4618      	mov	r0, r3
 8004926:	f7fd fff1 	bl	800290c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d023      	beq.n	8004980 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	699a      	ldr	r2, [r3, #24]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	18d1      	adds	r1, r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	6978      	ldr	r0, [r7, #20]
 8004946:	f000 f8d5 	bl	8004af4 <prvInsertTimerInActiveList>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d020      	beq.n	8004992 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004950:	2300      	movs	r3, #0
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	2100      	movs	r1, #0
 800495a:	6978      	ldr	r0, [r7, #20]
 800495c:	f7ff ff88 	bl	8004870 <xTimerGenericCommand>
 8004960:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d114      	bne.n	8004992 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	60fb      	str	r3, [r7, #12]
}
 800497a:	bf00      	nop
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	b2da      	uxtb	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	6978      	ldr	r0, [r7, #20]
 8004998:	4798      	blx	r3
}
 800499a:	bf00      	nop
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000e9c 	.word	0x20000e9c

080049a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049b0:	f107 0308 	add.w	r3, r7, #8
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f859 	bl	8004a6c <prvGetNextExpireTime>
 80049ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4619      	mov	r1, r3
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f805 	bl	80049d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80049c6:	f000 f8d7 	bl	8004b78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049ca:	bf00      	nop
 80049cc:	e7f0      	b.n	80049b0 <prvTimerTask+0x8>
	...

080049d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049da:	f7ff f929 	bl	8003c30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049de:	f107 0308 	add.w	r3, r7, #8
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 f866 	bl	8004ab4 <prvSampleTimeNow>
 80049e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d130      	bne.n	8004a52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <prvProcessTimerOrBlockTask+0x3c>
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d806      	bhi.n	8004a0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049fe:	f7ff f925 	bl	8003c4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a02:	68f9      	ldr	r1, [r7, #12]
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff ff81 	bl	800490c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a0a:	e024      	b.n	8004a56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a12:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <prvProcessTimerOrBlockTask+0x90>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <prvProcessTimerOrBlockTask+0x50>
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e000      	b.n	8004a22 <prvProcessTimerOrBlockTask+0x52>
 8004a20:	2300      	movs	r3, #0
 8004a22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a24:	4b0f      	ldr	r3, [pc, #60]	@ (8004a64 <prvProcessTimerOrBlockTask+0x94>)
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	4619      	mov	r1, r3
 8004a32:	f7fe fdf1 	bl	8003618 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a36:	f7ff f909 	bl	8003c4c <xTaskResumeAll>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a40:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <prvProcessTimerOrBlockTask+0x98>)
 8004a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
}
 8004a50:	e001      	b.n	8004a56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a52:	f7ff f8fb 	bl	8003c4c <xTaskResumeAll>
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000ea0 	.word	0x20000ea0
 8004a64:	20000ea4 	.word	0x20000ea4
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a74:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab0 <prvGetNextExpireTime+0x44>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <prvGetNextExpireTime+0x16>
 8004a7e:	2201      	movs	r2, #1
 8004a80:	e000      	b.n	8004a84 <prvGetNextExpireTime+0x18>
 8004a82:	2200      	movs	r2, #0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d105      	bne.n	8004a9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a90:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <prvGetNextExpireTime+0x44>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e001      	b.n	8004aa0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	20000e9c 	.word	0x20000e9c

08004ab4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004abc:	f7ff f964 	bl	8003d88 <xTaskGetTickCount>
 8004ac0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <prvSampleTimeNow+0x3c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d205      	bcs.n	8004ad8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004acc:	f000 f93a 	bl	8004d44 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e002      	b.n	8004ade <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ade:	4a04      	ldr	r2, [pc, #16]	@ (8004af0 <prvSampleTimeNow+0x3c>)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000eac 	.word	0x20000eac

08004af4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d812      	bhi.n	8004b40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e01b      	b.n	8004b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b2e:	4b10      	ldr	r3, [pc, #64]	@ (8004b70 <prvInsertTimerInActiveList+0x7c>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f7fd feae 	bl	800289a <vListInsert>
 8004b3e:	e012      	b.n	8004b66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d206      	bcs.n	8004b56 <prvInsertTimerInActiveList+0x62>
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d302      	bcc.n	8004b56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b50:	2301      	movs	r3, #1
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	e007      	b.n	8004b66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b56:	4b07      	ldr	r3, [pc, #28]	@ (8004b74 <prvInsertTimerInActiveList+0x80>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f7fd fe9a 	bl	800289a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b66:	697b      	ldr	r3, [r7, #20]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000ea0 	.word	0x20000ea0
 8004b74:	20000e9c 	.word	0x20000e9c

08004b78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b08e      	sub	sp, #56	@ 0x38
 8004b7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b7e:	e0ce      	b.n	8004d1e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	da19      	bge.n	8004bba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	3304      	adds	r3, #4
 8004b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10b      	bne.n	8004baa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	61fb      	str	r3, [r7, #28]
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	e7fd      	b.n	8004ba6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bb0:	6850      	ldr	r0, [r2, #4]
 8004bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bb4:	6892      	ldr	r2, [r2, #8]
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f2c0 80ae 	blt.w	8004d1e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d004      	beq.n	8004bd8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fd fe9a 	bl	800290c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bd8:	463b      	mov	r3, r7
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff ff6a 	bl	8004ab4 <prvSampleTimeNow>
 8004be0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b09      	cmp	r3, #9
 8004be6:	f200 8097 	bhi.w	8004d18 <prvProcessReceivedCommands+0x1a0>
 8004bea:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf0 <prvProcessReceivedCommands+0x78>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c19 	.word	0x08004c19
 8004bf8:	08004c19 	.word	0x08004c19
 8004bfc:	08004c8f 	.word	0x08004c8f
 8004c00:	08004ca3 	.word	0x08004ca3
 8004c04:	08004cef 	.word	0x08004cef
 8004c08:	08004c19 	.word	0x08004c19
 8004c0c:	08004c19 	.word	0x08004c19
 8004c10:	08004c8f 	.word	0x08004c8f
 8004c14:	08004ca3 	.word	0x08004ca3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	18d1      	adds	r1, r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c38:	f7ff ff5c 	bl	8004af4 <prvInsertTimerInActiveList>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d06c      	beq.n	8004d1c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d061      	beq.n	8004d1c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	441a      	add	r2, r3
 8004c60:	2300      	movs	r3, #0
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	2100      	movs	r1, #0
 8004c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c6a:	f7ff fe01 	bl	8004870 <xTimerGenericCommand>
 8004c6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d152      	bne.n	8004d1c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	61bb      	str	r3, [r7, #24]
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ca0:	e03d      	b.n	8004d1e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	617b      	str	r3, [r7, #20]
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop
 8004cd8:	e7fd      	b.n	8004cd6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	18d1      	adds	r1, r2, r3
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ce8:	f7ff ff04 	bl	8004af4 <prvInsertTimerInActiveList>
					break;
 8004cec:	e017      	b.n	8004d1e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d103      	bne.n	8004d04 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cfe:	f000 fbeb 	bl	80054d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d02:	e00c      	b.n	8004d1e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d16:	e002      	b.n	8004d1e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004d18:	bf00      	nop
 8004d1a:	e000      	b.n	8004d1e <prvProcessReceivedCommands+0x1a6>
					break;
 8004d1c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d1e:	4b08      	ldr	r3, [pc, #32]	@ (8004d40 <prvProcessReceivedCommands+0x1c8>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	1d39      	adds	r1, r7, #4
 8004d24:	2200      	movs	r2, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe f932 	bl	8002f90 <xQueueReceive>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f47f af26 	bne.w	8004b80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	3730      	adds	r7, #48	@ 0x30
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000ea4 	.word	0x20000ea4

08004d44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d4a:	e049      	b.n	8004de0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e08 <prvSwitchTimerLists+0xc4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d56:	4b2c      	ldr	r3, [pc, #176]	@ (8004e08 <prvSwitchTimerLists+0xc4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fd fdd1 	bl	800290c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d02f      	beq.n	8004de0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d90e      	bls.n	8004db0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004e08 <prvSwitchTimerLists+0xc4>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3304      	adds	r3, #4
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f7fd fd76 	bl	800289a <vListInsert>
 8004dae:	e017      	b.n	8004de0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004db0:	2300      	movs	r3, #0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	2300      	movs	r3, #0
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	2100      	movs	r1, #0
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7ff fd58 	bl	8004870 <xTimerGenericCommand>
 8004dc0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	603b      	str	r3, [r7, #0]
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004de0:	4b09      	ldr	r3, [pc, #36]	@ (8004e08 <prvSwitchTimerLists+0xc4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1b0      	bne.n	8004d4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004dea:	4b07      	ldr	r3, [pc, #28]	@ (8004e08 <prvSwitchTimerLists+0xc4>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <prvSwitchTimerLists+0xc8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a04      	ldr	r2, [pc, #16]	@ (8004e08 <prvSwitchTimerLists+0xc4>)
 8004df6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004df8:	4a04      	ldr	r2, [pc, #16]	@ (8004e0c <prvSwitchTimerLists+0xc8>)
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	6013      	str	r3, [r2, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000e9c 	.word	0x20000e9c
 8004e0c:	20000ea0 	.word	0x20000ea0

08004e10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e16:	f000 f96f 	bl	80050f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e1a:	4b15      	ldr	r3, [pc, #84]	@ (8004e70 <prvCheckForValidListAndQueue+0x60>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d120      	bne.n	8004e64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e22:	4814      	ldr	r0, [pc, #80]	@ (8004e74 <prvCheckForValidListAndQueue+0x64>)
 8004e24:	f7fd fce8 	bl	80027f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e28:	4813      	ldr	r0, [pc, #76]	@ (8004e78 <prvCheckForValidListAndQueue+0x68>)
 8004e2a:	f7fd fce5 	bl	80027f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <prvCheckForValidListAndQueue+0x6c>)
 8004e30:	4a10      	ldr	r2, [pc, #64]	@ (8004e74 <prvCheckForValidListAndQueue+0x64>)
 8004e32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e34:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <prvCheckForValidListAndQueue+0x70>)
 8004e36:	4a10      	ldr	r2, [pc, #64]	@ (8004e78 <prvCheckForValidListAndQueue+0x68>)
 8004e38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	4b11      	ldr	r3, [pc, #68]	@ (8004e84 <prvCheckForValidListAndQueue+0x74>)
 8004e40:	4a11      	ldr	r2, [pc, #68]	@ (8004e88 <prvCheckForValidListAndQueue+0x78>)
 8004e42:	2110      	movs	r1, #16
 8004e44:	200a      	movs	r0, #10
 8004e46:	f7fd fdf5 	bl	8002a34 <xQueueGenericCreateStatic>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	4a08      	ldr	r2, [pc, #32]	@ (8004e70 <prvCheckForValidListAndQueue+0x60>)
 8004e4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e50:	4b07      	ldr	r3, [pc, #28]	@ (8004e70 <prvCheckForValidListAndQueue+0x60>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <prvCheckForValidListAndQueue+0x60>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	490b      	ldr	r1, [pc, #44]	@ (8004e8c <prvCheckForValidListAndQueue+0x7c>)
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fbb0 	bl	80035c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e64:	f000 f97a 	bl	800515c <vPortExitCritical>
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000ea4 	.word	0x20000ea4
 8004e74:	20000e74 	.word	0x20000e74
 8004e78:	20000e88 	.word	0x20000e88
 8004e7c:	20000e9c 	.word	0x20000e9c
 8004e80:	20000ea0 	.word	0x20000ea0
 8004e84:	20000f50 	.word	0x20000f50
 8004e88:	20000eb0 	.word	0x20000eb0
 8004e8c:	080061f0 	.word	0x080061f0

08004e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3b04      	subs	r3, #4
 8004ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3b04      	subs	r3, #4
 8004eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f023 0201 	bic.w	r2, r3, #1
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b04      	subs	r3, #4
 8004ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef4 <pxPortInitialiseStack+0x64>)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b14      	subs	r3, #20
 8004eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b04      	subs	r3, #4
 8004ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f06f 0202 	mvn.w	r2, #2
 8004ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3b20      	subs	r3, #32
 8004ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	08004ef9 	.word	0x08004ef9

08004ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f02:	4b13      	ldr	r3, [pc, #76]	@ (8004f50 <prvTaskExitError+0x58>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d00b      	beq.n	8004f24 <prvTaskExitError+0x2c>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	60fb      	str	r3, [r7, #12]
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <prvTaskExitError+0x28>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60bb      	str	r3, [r7, #8]
}
 8004f36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f38:	bf00      	nop
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0fc      	beq.n	8004f3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c
	...

08004f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f60:	4b07      	ldr	r3, [pc, #28]	@ (8004f80 <pxCurrentTCBConst2>)
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	6808      	ldr	r0, [r1, #0]
 8004f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6a:	f380 8809 	msr	PSP, r0
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8811 	msr	BASEPRI, r0
 8004f7a:	4770      	bx	lr
 8004f7c:	f3af 8000 	nop.w

08004f80 <pxCurrentTCBConst2>:
 8004f80:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop

08004f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f88:	4808      	ldr	r0, [pc, #32]	@ (8004fac <prvPortStartFirstTask+0x24>)
 8004f8a:	6800      	ldr	r0, [r0, #0]
 8004f8c:	6800      	ldr	r0, [r0, #0]
 8004f8e:	f380 8808 	msr	MSP, r0
 8004f92:	f04f 0000 	mov.w	r0, #0
 8004f96:	f380 8814 	msr	CONTROL, r0
 8004f9a:	b662      	cpsie	i
 8004f9c:	b661      	cpsie	f
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	df00      	svc	0
 8004fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004faa:	bf00      	nop
 8004fac:	e000ed08 	.word	0xe000ed08

08004fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fb6:	4b47      	ldr	r3, [pc, #284]	@ (80050d4 <xPortStartScheduler+0x124>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a47      	ldr	r2, [pc, #284]	@ (80050d8 <xPortStartScheduler+0x128>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d10b      	bne.n	8004fd8 <xPortStartScheduler+0x28>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	613b      	str	r3, [r7, #16]
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	e7fd      	b.n	8004fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80050d4 <xPortStartScheduler+0x124>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80050dc <xPortStartScheduler+0x12c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d10b      	bne.n	8004ffa <xPortStartScheduler+0x4a>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60fb      	str	r3, [r7, #12]
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	e7fd      	b.n	8004ff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ffa:	4b39      	ldr	r3, [pc, #228]	@ (80050e0 <xPortStartScheduler+0x130>)
 8004ffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	22ff      	movs	r2, #255	@ 0xff
 800500a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	b2db      	uxtb	r3, r3
 8005012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800501c:	b2da      	uxtb	r2, r3
 800501e:	4b31      	ldr	r3, [pc, #196]	@ (80050e4 <xPortStartScheduler+0x134>)
 8005020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005022:	4b31      	ldr	r3, [pc, #196]	@ (80050e8 <xPortStartScheduler+0x138>)
 8005024:	2207      	movs	r2, #7
 8005026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005028:	e009      	b.n	800503e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800502a:	4b2f      	ldr	r3, [pc, #188]	@ (80050e8 <xPortStartScheduler+0x138>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3b01      	subs	r3, #1
 8005030:	4a2d      	ldr	r2, [pc, #180]	@ (80050e8 <xPortStartScheduler+0x138>)
 8005032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005046:	2b80      	cmp	r3, #128	@ 0x80
 8005048:	d0ef      	beq.n	800502a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800504a:	4b27      	ldr	r3, [pc, #156]	@ (80050e8 <xPortStartScheduler+0x138>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f1c3 0307 	rsb	r3, r3, #7
 8005052:	2b04      	cmp	r3, #4
 8005054:	d00b      	beq.n	800506e <xPortStartScheduler+0xbe>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	60bb      	str	r3, [r7, #8]
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop
 800506c:	e7fd      	b.n	800506a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800506e:	4b1e      	ldr	r3, [pc, #120]	@ (80050e8 <xPortStartScheduler+0x138>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	4a1c      	ldr	r2, [pc, #112]	@ (80050e8 <xPortStartScheduler+0x138>)
 8005076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005078:	4b1b      	ldr	r3, [pc, #108]	@ (80050e8 <xPortStartScheduler+0x138>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005080:	4a19      	ldr	r2, [pc, #100]	@ (80050e8 <xPortStartScheduler+0x138>)
 8005082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	b2da      	uxtb	r2, r3
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800508c:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <xPortStartScheduler+0x13c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a16      	ldr	r2, [pc, #88]	@ (80050ec <xPortStartScheduler+0x13c>)
 8005092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005098:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <xPortStartScheduler+0x13c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <xPortStartScheduler+0x13c>)
 800509e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050a4:	f000 f8da 	bl	800525c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050a8:	4b11      	ldr	r3, [pc, #68]	@ (80050f0 <xPortStartScheduler+0x140>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050ae:	f000 f8f9 	bl	80052a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050b2:	4b10      	ldr	r3, [pc, #64]	@ (80050f4 <xPortStartScheduler+0x144>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a0f      	ldr	r2, [pc, #60]	@ (80050f4 <xPortStartScheduler+0x144>)
 80050b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80050bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050be:	f7ff ff63 	bl	8004f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050c2:	f7fe ff2b 	bl	8003f1c <vTaskSwitchContext>
	prvTaskExitError();
 80050c6:	f7ff ff17 	bl	8004ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	e000ed00 	.word	0xe000ed00
 80050d8:	410fc271 	.word	0x410fc271
 80050dc:	410fc270 	.word	0x410fc270
 80050e0:	e000e400 	.word	0xe000e400
 80050e4:	20000fa0 	.word	0x20000fa0
 80050e8:	20000fa4 	.word	0x20000fa4
 80050ec:	e000ed20 	.word	0xe000ed20
 80050f0:	2000000c 	.word	0x2000000c
 80050f4:	e000ef34 	.word	0xe000ef34

080050f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	607b      	str	r3, [r7, #4]
}
 8005110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005112:	4b10      	ldr	r3, [pc, #64]	@ (8005154 <vPortEnterCritical+0x5c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	4a0e      	ldr	r2, [pc, #56]	@ (8005154 <vPortEnterCritical+0x5c>)
 800511a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800511c:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <vPortEnterCritical+0x5c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d110      	bne.n	8005146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005124:	4b0c      	ldr	r3, [pc, #48]	@ (8005158 <vPortEnterCritical+0x60>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <vPortEnterCritical+0x4e>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	603b      	str	r3, [r7, #0]
}
 8005140:	bf00      	nop
 8005142:	bf00      	nop
 8005144:	e7fd      	b.n	8005142 <vPortEnterCritical+0x4a>
	}
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	2000000c 	.word	0x2000000c
 8005158:	e000ed04 	.word	0xe000ed04

0800515c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005162:	4b12      	ldr	r3, [pc, #72]	@ (80051ac <vPortExitCritical+0x50>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10b      	bne.n	8005182 <vPortExitCritical+0x26>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	607b      	str	r3, [r7, #4]
}
 800517c:	bf00      	nop
 800517e:	bf00      	nop
 8005180:	e7fd      	b.n	800517e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005182:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <vPortExitCritical+0x50>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3b01      	subs	r3, #1
 8005188:	4a08      	ldr	r2, [pc, #32]	@ (80051ac <vPortExitCritical+0x50>)
 800518a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800518c:	4b07      	ldr	r3, [pc, #28]	@ (80051ac <vPortExitCritical+0x50>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <vPortExitCritical+0x44>
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	2000000c 	.word	0x2000000c

080051b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051b0:	f3ef 8009 	mrs	r0, PSP
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	4b15      	ldr	r3, [pc, #84]	@ (8005210 <pxCurrentTCBConst>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	f01e 0f10 	tst.w	lr, #16
 80051c0:	bf08      	it	eq
 80051c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ca:	6010      	str	r0, [r2, #0]
 80051cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051d4:	f380 8811 	msr	BASEPRI, r0
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f7fe fe9c 	bl	8003f1c <vTaskSwitchContext>
 80051e4:	f04f 0000 	mov.w	r0, #0
 80051e8:	f380 8811 	msr	BASEPRI, r0
 80051ec:	bc09      	pop	{r0, r3}
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	6808      	ldr	r0, [r1, #0]
 80051f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f6:	f01e 0f10 	tst.w	lr, #16
 80051fa:	bf08      	it	eq
 80051fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005200:	f380 8809 	msr	PSP, r0
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	f3af 8000 	nop.w

08005210 <pxCurrentTCBConst>:
 8005210:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop

08005218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005232:	f7fe fdb9 	bl	8003da8 <xTaskIncrementTick>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <xPortSysTickHandler+0x40>)
 800523e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	2300      	movs	r3, #0
 8005246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f383 8811 	msr	BASEPRI, r3
}
 800524e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005260:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <vPortSetupTimerInterrupt+0x34>)
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005266:	4b0b      	ldr	r3, [pc, #44]	@ (8005294 <vPortSetupTimerInterrupt+0x38>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800526c:	4b0a      	ldr	r3, [pc, #40]	@ (8005298 <vPortSetupTimerInterrupt+0x3c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0a      	ldr	r2, [pc, #40]	@ (800529c <vPortSetupTimerInterrupt+0x40>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	099b      	lsrs	r3, r3, #6
 8005278:	4a09      	ldr	r2, [pc, #36]	@ (80052a0 <vPortSetupTimerInterrupt+0x44>)
 800527a:	3b01      	subs	r3, #1
 800527c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800527e:	4b04      	ldr	r3, [pc, #16]	@ (8005290 <vPortSetupTimerInterrupt+0x34>)
 8005280:	2207      	movs	r2, #7
 8005282:	601a      	str	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	e000e010 	.word	0xe000e010
 8005294:	e000e018 	.word	0xe000e018
 8005298:	20000000 	.word	0x20000000
 800529c:	10624dd3 	.word	0x10624dd3
 80052a0:	e000e014 	.word	0xe000e014

080052a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80052b4 <vPortEnableVFP+0x10>
 80052a8:	6801      	ldr	r1, [r0, #0]
 80052aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80052ae:	6001      	str	r1, [r0, #0]
 80052b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052b2:	bf00      	nop
 80052b4:	e000ed88 	.word	0xe000ed88

080052b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052be:	f3ef 8305 	mrs	r3, IPSR
 80052c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b0f      	cmp	r3, #15
 80052c8:	d915      	bls.n	80052f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052ca:	4a18      	ldr	r2, [pc, #96]	@ (800532c <vPortValidateInterruptPriority+0x74>)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052d4:	4b16      	ldr	r3, [pc, #88]	@ (8005330 <vPortValidateInterruptPriority+0x78>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	7afa      	ldrb	r2, [r7, #11]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d20b      	bcs.n	80052f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	607b      	str	r3, [r7, #4]
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	e7fd      	b.n	80052f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005334 <vPortValidateInterruptPriority+0x7c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005338 <vPortValidateInterruptPriority+0x80>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d90b      	bls.n	800531e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	603b      	str	r3, [r7, #0]
}
 8005318:	bf00      	nop
 800531a:	bf00      	nop
 800531c:	e7fd      	b.n	800531a <vPortValidateInterruptPriority+0x62>
	}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	e000e3f0 	.word	0xe000e3f0
 8005330:	20000fa0 	.word	0x20000fa0
 8005334:	e000ed0c 	.word	0xe000ed0c
 8005338:	20000fa4 	.word	0x20000fa4

0800533c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08a      	sub	sp, #40	@ 0x28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005348:	f7fe fc72 	bl	8003c30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800534c:	4b5c      	ldr	r3, [pc, #368]	@ (80054c0 <pvPortMalloc+0x184>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005354:	f000 f924 	bl	80055a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005358:	4b5a      	ldr	r3, [pc, #360]	@ (80054c4 <pvPortMalloc+0x188>)
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4013      	ands	r3, r2
 8005360:	2b00      	cmp	r3, #0
 8005362:	f040 8095 	bne.w	8005490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01e      	beq.n	80053aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800536c:	2208      	movs	r2, #8
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b00      	cmp	r3, #0
 800537c:	d015      	beq.n	80053aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f023 0307 	bic.w	r3, r3, #7
 8005384:	3308      	adds	r3, #8
 8005386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <pvPortMalloc+0x6e>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	617b      	str	r3, [r7, #20]
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	e7fd      	b.n	80053a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d06f      	beq.n	8005490 <pvPortMalloc+0x154>
 80053b0:	4b45      	ldr	r3, [pc, #276]	@ (80054c8 <pvPortMalloc+0x18c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d86a      	bhi.n	8005490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053ba:	4b44      	ldr	r3, [pc, #272]	@ (80054cc <pvPortMalloc+0x190>)
 80053bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053be:	4b43      	ldr	r3, [pc, #268]	@ (80054cc <pvPortMalloc+0x190>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053c4:	e004      	b.n	80053d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d903      	bls.n	80053e2 <pvPortMalloc+0xa6>
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f1      	bne.n	80053c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053e2:	4b37      	ldr	r3, [pc, #220]	@ (80054c0 <pvPortMalloc+0x184>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d051      	beq.n	8005490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2208      	movs	r2, #8
 80053f2:	4413      	add	r3, r2
 80053f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	1ad2      	subs	r2, r2, r3
 8005406:	2308      	movs	r3, #8
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	429a      	cmp	r2, r3
 800540c:	d920      	bls.n	8005450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800540e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4413      	add	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <pvPortMalloc+0xfc>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	613b      	str	r3, [r7, #16]
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	e7fd      	b.n	8005434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800544a:	69b8      	ldr	r0, [r7, #24]
 800544c:	f000 f90a 	bl	8005664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005450:	4b1d      	ldr	r3, [pc, #116]	@ (80054c8 <pvPortMalloc+0x18c>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	4a1b      	ldr	r2, [pc, #108]	@ (80054c8 <pvPortMalloc+0x18c>)
 800545c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800545e:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <pvPortMalloc+0x18c>)
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b1b      	ldr	r3, [pc, #108]	@ (80054d0 <pvPortMalloc+0x194>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d203      	bcs.n	8005472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800546a:	4b17      	ldr	r3, [pc, #92]	@ (80054c8 <pvPortMalloc+0x18c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a18      	ldr	r2, [pc, #96]	@ (80054d0 <pvPortMalloc+0x194>)
 8005470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	4b13      	ldr	r3, [pc, #76]	@ (80054c4 <pvPortMalloc+0x188>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	431a      	orrs	r2, r3
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005486:	4b13      	ldr	r3, [pc, #76]	@ (80054d4 <pvPortMalloc+0x198>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3301      	adds	r3, #1
 800548c:	4a11      	ldr	r2, [pc, #68]	@ (80054d4 <pvPortMalloc+0x198>)
 800548e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005490:	f7fe fbdc 	bl	8003c4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00b      	beq.n	80054b6 <pvPortMalloc+0x17a>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60fb      	str	r3, [r7, #12]
}
 80054b0:	bf00      	nop
 80054b2:	bf00      	nop
 80054b4:	e7fd      	b.n	80054b2 <pvPortMalloc+0x176>
	return pvReturn;
 80054b6:	69fb      	ldr	r3, [r7, #28]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3728      	adds	r7, #40	@ 0x28
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20001b68 	.word	0x20001b68
 80054c4:	20001b7c 	.word	0x20001b7c
 80054c8:	20001b6c 	.word	0x20001b6c
 80054cc:	20001b60 	.word	0x20001b60
 80054d0:	20001b70 	.word	0x20001b70
 80054d4:	20001b74 	.word	0x20001b74

080054d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d04f      	beq.n	800558a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054ea:	2308      	movs	r3, #8
 80054ec:	425b      	negs	r3, r3
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4413      	add	r3, r2
 80054f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	4b25      	ldr	r3, [pc, #148]	@ (8005594 <vPortFree+0xbc>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10b      	bne.n	800551e <vPortFree+0x46>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	60fb      	str	r3, [r7, #12]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <vPortFree+0x66>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60bb      	str	r3, [r7, #8]
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	e7fd      	b.n	800553a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	4b14      	ldr	r3, [pc, #80]	@ (8005594 <vPortFree+0xbc>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4013      	ands	r3, r2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01e      	beq.n	800558a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d11a      	bne.n	800558a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	4b0e      	ldr	r3, [pc, #56]	@ (8005594 <vPortFree+0xbc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	43db      	mvns	r3, r3
 800555e:	401a      	ands	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005564:	f7fe fb64 	bl	8003c30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	4b0a      	ldr	r3, [pc, #40]	@ (8005598 <vPortFree+0xc0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4413      	add	r3, r2
 8005572:	4a09      	ldr	r2, [pc, #36]	@ (8005598 <vPortFree+0xc0>)
 8005574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005576:	6938      	ldr	r0, [r7, #16]
 8005578:	f000 f874 	bl	8005664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800557c:	4b07      	ldr	r3, [pc, #28]	@ (800559c <vPortFree+0xc4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	4a06      	ldr	r2, [pc, #24]	@ (800559c <vPortFree+0xc4>)
 8005584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005586:	f7fe fb61 	bl	8003c4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800558a:	bf00      	nop
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20001b7c 	.word	0x20001b7c
 8005598:	20001b6c 	.word	0x20001b6c
 800559c:	20001b78 	.word	0x20001b78

080055a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80055aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055ac:	4b27      	ldr	r3, [pc, #156]	@ (800564c <prvHeapInit+0xac>)
 80055ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3307      	adds	r3, #7
 80055be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0307 	bic.w	r3, r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <prvHeapInit+0xac>)
 80055d0:	4413      	add	r3, r2
 80055d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005650 <prvHeapInit+0xb0>)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055de:	4b1c      	ldr	r3, [pc, #112]	@ (8005650 <prvHeapInit+0xb0>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	4413      	add	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055ec:	2208      	movs	r2, #8
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f023 0307 	bic.w	r3, r3, #7
 80055fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4a15      	ldr	r2, [pc, #84]	@ (8005654 <prvHeapInit+0xb4>)
 8005600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005602:	4b14      	ldr	r3, [pc, #80]	@ (8005654 <prvHeapInit+0xb4>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2200      	movs	r2, #0
 8005608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800560a:	4b12      	ldr	r3, [pc, #72]	@ (8005654 <prvHeapInit+0xb4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	1ad2      	subs	r2, r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005620:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <prvHeapInit+0xb4>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	4a0a      	ldr	r2, [pc, #40]	@ (8005658 <prvHeapInit+0xb8>)
 800562e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a09      	ldr	r2, [pc, #36]	@ (800565c <prvHeapInit+0xbc>)
 8005636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005638:	4b09      	ldr	r3, [pc, #36]	@ (8005660 <prvHeapInit+0xc0>)
 800563a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	20000fa8 	.word	0x20000fa8
 8005650:	20001b60 	.word	0x20001b60
 8005654:	20001b68 	.word	0x20001b68
 8005658:	20001b70 	.word	0x20001b70
 800565c:	20001b6c 	.word	0x20001b6c
 8005660:	20001b7c 	.word	0x20001b7c

08005664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800566c:	4b28      	ldr	r3, [pc, #160]	@ (8005710 <prvInsertBlockIntoFreeList+0xac>)
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	e002      	b.n	8005678 <prvInsertBlockIntoFreeList+0x14>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	429a      	cmp	r2, r3
 8005680:	d8f7      	bhi.n	8005672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	d108      	bne.n	80056a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	441a      	add	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	441a      	add	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d118      	bne.n	80056ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b15      	ldr	r3, [pc, #84]	@ (8005714 <prvInsertBlockIntoFreeList+0xb0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d00d      	beq.n	80056e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	441a      	add	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e008      	b.n	80056f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005714 <prvInsertBlockIntoFreeList+0xb0>)
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e003      	b.n	80056f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d002      	beq.n	8005702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005702:	bf00      	nop
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	20001b60 	.word	0x20001b60
 8005714:	20001b68 	.word	0x20001b68

08005718 <siprintf>:
 8005718:	b40e      	push	{r1, r2, r3}
 800571a:	b500      	push	{lr}
 800571c:	b09c      	sub	sp, #112	@ 0x70
 800571e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005720:	9002      	str	r0, [sp, #8]
 8005722:	9006      	str	r0, [sp, #24]
 8005724:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005728:	4809      	ldr	r0, [pc, #36]	@ (8005750 <siprintf+0x38>)
 800572a:	9107      	str	r1, [sp, #28]
 800572c:	9104      	str	r1, [sp, #16]
 800572e:	4909      	ldr	r1, [pc, #36]	@ (8005754 <siprintf+0x3c>)
 8005730:	f853 2b04 	ldr.w	r2, [r3], #4
 8005734:	9105      	str	r1, [sp, #20]
 8005736:	6800      	ldr	r0, [r0, #0]
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	a902      	add	r1, sp, #8
 800573c:	f000 f9f8 	bl	8005b30 <_svfiprintf_r>
 8005740:	9b02      	ldr	r3, [sp, #8]
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	b01c      	add	sp, #112	@ 0x70
 8005748:	f85d eb04 	ldr.w	lr, [sp], #4
 800574c:	b003      	add	sp, #12
 800574e:	4770      	bx	lr
 8005750:	20000010 	.word	0x20000010
 8005754:	ffff0208 	.word	0xffff0208

08005758 <memset>:
 8005758:	4402      	add	r2, r0
 800575a:	4603      	mov	r3, r0
 800575c:	4293      	cmp	r3, r2
 800575e:	d100      	bne.n	8005762 <memset+0xa>
 8005760:	4770      	bx	lr
 8005762:	f803 1b01 	strb.w	r1, [r3], #1
 8005766:	e7f9      	b.n	800575c <memset+0x4>

08005768 <_reclaim_reent>:
 8005768:	4b29      	ldr	r3, [pc, #164]	@ (8005810 <_reclaim_reent+0xa8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4283      	cmp	r3, r0
 800576e:	b570      	push	{r4, r5, r6, lr}
 8005770:	4604      	mov	r4, r0
 8005772:	d04b      	beq.n	800580c <_reclaim_reent+0xa4>
 8005774:	69c3      	ldr	r3, [r0, #28]
 8005776:	b1ab      	cbz	r3, 80057a4 <_reclaim_reent+0x3c>
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	b16b      	cbz	r3, 8005798 <_reclaim_reent+0x30>
 800577c:	2500      	movs	r5, #0
 800577e:	69e3      	ldr	r3, [r4, #28]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	5959      	ldr	r1, [r3, r5]
 8005784:	2900      	cmp	r1, #0
 8005786:	d13b      	bne.n	8005800 <_reclaim_reent+0x98>
 8005788:	3504      	adds	r5, #4
 800578a:	2d80      	cmp	r5, #128	@ 0x80
 800578c:	d1f7      	bne.n	800577e <_reclaim_reent+0x16>
 800578e:	69e3      	ldr	r3, [r4, #28]
 8005790:	4620      	mov	r0, r4
 8005792:	68d9      	ldr	r1, [r3, #12]
 8005794:	f000 f878 	bl	8005888 <_free_r>
 8005798:	69e3      	ldr	r3, [r4, #28]
 800579a:	6819      	ldr	r1, [r3, #0]
 800579c:	b111      	cbz	r1, 80057a4 <_reclaim_reent+0x3c>
 800579e:	4620      	mov	r0, r4
 80057a0:	f000 f872 	bl	8005888 <_free_r>
 80057a4:	6961      	ldr	r1, [r4, #20]
 80057a6:	b111      	cbz	r1, 80057ae <_reclaim_reent+0x46>
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 f86d 	bl	8005888 <_free_r>
 80057ae:	69e1      	ldr	r1, [r4, #28]
 80057b0:	b111      	cbz	r1, 80057b8 <_reclaim_reent+0x50>
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 f868 	bl	8005888 <_free_r>
 80057b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80057ba:	b111      	cbz	r1, 80057c2 <_reclaim_reent+0x5a>
 80057bc:	4620      	mov	r0, r4
 80057be:	f000 f863 	bl	8005888 <_free_r>
 80057c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057c4:	b111      	cbz	r1, 80057cc <_reclaim_reent+0x64>
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 f85e 	bl	8005888 <_free_r>
 80057cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80057ce:	b111      	cbz	r1, 80057d6 <_reclaim_reent+0x6e>
 80057d0:	4620      	mov	r0, r4
 80057d2:	f000 f859 	bl	8005888 <_free_r>
 80057d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80057d8:	b111      	cbz	r1, 80057e0 <_reclaim_reent+0x78>
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 f854 	bl	8005888 <_free_r>
 80057e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80057e2:	b111      	cbz	r1, 80057ea <_reclaim_reent+0x82>
 80057e4:	4620      	mov	r0, r4
 80057e6:	f000 f84f 	bl	8005888 <_free_r>
 80057ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80057ec:	b111      	cbz	r1, 80057f4 <_reclaim_reent+0x8c>
 80057ee:	4620      	mov	r0, r4
 80057f0:	f000 f84a 	bl	8005888 <_free_r>
 80057f4:	6a23      	ldr	r3, [r4, #32]
 80057f6:	b14b      	cbz	r3, 800580c <_reclaim_reent+0xa4>
 80057f8:	4620      	mov	r0, r4
 80057fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057fe:	4718      	bx	r3
 8005800:	680e      	ldr	r6, [r1, #0]
 8005802:	4620      	mov	r0, r4
 8005804:	f000 f840 	bl	8005888 <_free_r>
 8005808:	4631      	mov	r1, r6
 800580a:	e7bb      	b.n	8005784 <_reclaim_reent+0x1c>
 800580c:	bd70      	pop	{r4, r5, r6, pc}
 800580e:	bf00      	nop
 8005810:	20000010 	.word	0x20000010

08005814 <__errno>:
 8005814:	4b01      	ldr	r3, [pc, #4]	@ (800581c <__errno+0x8>)
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000010 	.word	0x20000010

08005820 <__libc_init_array>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	4d0d      	ldr	r5, [pc, #52]	@ (8005858 <__libc_init_array+0x38>)
 8005824:	4c0d      	ldr	r4, [pc, #52]	@ (800585c <__libc_init_array+0x3c>)
 8005826:	1b64      	subs	r4, r4, r5
 8005828:	10a4      	asrs	r4, r4, #2
 800582a:	2600      	movs	r6, #0
 800582c:	42a6      	cmp	r6, r4
 800582e:	d109      	bne.n	8005844 <__libc_init_array+0x24>
 8005830:	4d0b      	ldr	r5, [pc, #44]	@ (8005860 <__libc_init_array+0x40>)
 8005832:	4c0c      	ldr	r4, [pc, #48]	@ (8005864 <__libc_init_array+0x44>)
 8005834:	f000 fc66 	bl	8006104 <_init>
 8005838:	1b64      	subs	r4, r4, r5
 800583a:	10a4      	asrs	r4, r4, #2
 800583c:	2600      	movs	r6, #0
 800583e:	42a6      	cmp	r6, r4
 8005840:	d105      	bne.n	800584e <__libc_init_array+0x2e>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	f855 3b04 	ldr.w	r3, [r5], #4
 8005848:	4798      	blx	r3
 800584a:	3601      	adds	r6, #1
 800584c:	e7ee      	b.n	800582c <__libc_init_array+0xc>
 800584e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005852:	4798      	blx	r3
 8005854:	3601      	adds	r6, #1
 8005856:	e7f2      	b.n	800583e <__libc_init_array+0x1e>
 8005858:	0800627c 	.word	0x0800627c
 800585c:	0800627c 	.word	0x0800627c
 8005860:	0800627c 	.word	0x0800627c
 8005864:	08006280 	.word	0x08006280

08005868 <__retarget_lock_acquire_recursive>:
 8005868:	4770      	bx	lr

0800586a <__retarget_lock_release_recursive>:
 800586a:	4770      	bx	lr

0800586c <memcpy>:
 800586c:	440a      	add	r2, r1
 800586e:	4291      	cmp	r1, r2
 8005870:	f100 33ff 	add.w	r3, r0, #4294967295
 8005874:	d100      	bne.n	8005878 <memcpy+0xc>
 8005876:	4770      	bx	lr
 8005878:	b510      	push	{r4, lr}
 800587a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005882:	4291      	cmp	r1, r2
 8005884:	d1f9      	bne.n	800587a <memcpy+0xe>
 8005886:	bd10      	pop	{r4, pc}

08005888 <_free_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4605      	mov	r5, r0
 800588c:	2900      	cmp	r1, #0
 800588e:	d041      	beq.n	8005914 <_free_r+0x8c>
 8005890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005894:	1f0c      	subs	r4, r1, #4
 8005896:	2b00      	cmp	r3, #0
 8005898:	bfb8      	it	lt
 800589a:	18e4      	addlt	r4, r4, r3
 800589c:	f000 f8e0 	bl	8005a60 <__malloc_lock>
 80058a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <_free_r+0x90>)
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	b933      	cbnz	r3, 80058b4 <_free_r+0x2c>
 80058a6:	6063      	str	r3, [r4, #4]
 80058a8:	6014      	str	r4, [r2, #0]
 80058aa:	4628      	mov	r0, r5
 80058ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058b0:	f000 b8dc 	b.w	8005a6c <__malloc_unlock>
 80058b4:	42a3      	cmp	r3, r4
 80058b6:	d908      	bls.n	80058ca <_free_r+0x42>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	1821      	adds	r1, r4, r0
 80058bc:	428b      	cmp	r3, r1
 80058be:	bf01      	itttt	eq
 80058c0:	6819      	ldreq	r1, [r3, #0]
 80058c2:	685b      	ldreq	r3, [r3, #4]
 80058c4:	1809      	addeq	r1, r1, r0
 80058c6:	6021      	streq	r1, [r4, #0]
 80058c8:	e7ed      	b.n	80058a6 <_free_r+0x1e>
 80058ca:	461a      	mov	r2, r3
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	b10b      	cbz	r3, 80058d4 <_free_r+0x4c>
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d9fa      	bls.n	80058ca <_free_r+0x42>
 80058d4:	6811      	ldr	r1, [r2, #0]
 80058d6:	1850      	adds	r0, r2, r1
 80058d8:	42a0      	cmp	r0, r4
 80058da:	d10b      	bne.n	80058f4 <_free_r+0x6c>
 80058dc:	6820      	ldr	r0, [r4, #0]
 80058de:	4401      	add	r1, r0
 80058e0:	1850      	adds	r0, r2, r1
 80058e2:	4283      	cmp	r3, r0
 80058e4:	6011      	str	r1, [r2, #0]
 80058e6:	d1e0      	bne.n	80058aa <_free_r+0x22>
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	6053      	str	r3, [r2, #4]
 80058ee:	4408      	add	r0, r1
 80058f0:	6010      	str	r0, [r2, #0]
 80058f2:	e7da      	b.n	80058aa <_free_r+0x22>
 80058f4:	d902      	bls.n	80058fc <_free_r+0x74>
 80058f6:	230c      	movs	r3, #12
 80058f8:	602b      	str	r3, [r5, #0]
 80058fa:	e7d6      	b.n	80058aa <_free_r+0x22>
 80058fc:	6820      	ldr	r0, [r4, #0]
 80058fe:	1821      	adds	r1, r4, r0
 8005900:	428b      	cmp	r3, r1
 8005902:	bf04      	itt	eq
 8005904:	6819      	ldreq	r1, [r3, #0]
 8005906:	685b      	ldreq	r3, [r3, #4]
 8005908:	6063      	str	r3, [r4, #4]
 800590a:	bf04      	itt	eq
 800590c:	1809      	addeq	r1, r1, r0
 800590e:	6021      	streq	r1, [r4, #0]
 8005910:	6054      	str	r4, [r2, #4]
 8005912:	e7ca      	b.n	80058aa <_free_r+0x22>
 8005914:	bd38      	pop	{r3, r4, r5, pc}
 8005916:	bf00      	nop
 8005918:	20001cc4 	.word	0x20001cc4

0800591c <sbrk_aligned>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4e0f      	ldr	r6, [pc, #60]	@ (800595c <sbrk_aligned+0x40>)
 8005920:	460c      	mov	r4, r1
 8005922:	6831      	ldr	r1, [r6, #0]
 8005924:	4605      	mov	r5, r0
 8005926:	b911      	cbnz	r1, 800592e <sbrk_aligned+0x12>
 8005928:	f000 fba6 	bl	8006078 <_sbrk_r>
 800592c:	6030      	str	r0, [r6, #0]
 800592e:	4621      	mov	r1, r4
 8005930:	4628      	mov	r0, r5
 8005932:	f000 fba1 	bl	8006078 <_sbrk_r>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	d103      	bne.n	8005942 <sbrk_aligned+0x26>
 800593a:	f04f 34ff 	mov.w	r4, #4294967295
 800593e:	4620      	mov	r0, r4
 8005940:	bd70      	pop	{r4, r5, r6, pc}
 8005942:	1cc4      	adds	r4, r0, #3
 8005944:	f024 0403 	bic.w	r4, r4, #3
 8005948:	42a0      	cmp	r0, r4
 800594a:	d0f8      	beq.n	800593e <sbrk_aligned+0x22>
 800594c:	1a21      	subs	r1, r4, r0
 800594e:	4628      	mov	r0, r5
 8005950:	f000 fb92 	bl	8006078 <_sbrk_r>
 8005954:	3001      	adds	r0, #1
 8005956:	d1f2      	bne.n	800593e <sbrk_aligned+0x22>
 8005958:	e7ef      	b.n	800593a <sbrk_aligned+0x1e>
 800595a:	bf00      	nop
 800595c:	20001cc0 	.word	0x20001cc0

08005960 <_malloc_r>:
 8005960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005964:	1ccd      	adds	r5, r1, #3
 8005966:	f025 0503 	bic.w	r5, r5, #3
 800596a:	3508      	adds	r5, #8
 800596c:	2d0c      	cmp	r5, #12
 800596e:	bf38      	it	cc
 8005970:	250c      	movcc	r5, #12
 8005972:	2d00      	cmp	r5, #0
 8005974:	4606      	mov	r6, r0
 8005976:	db01      	blt.n	800597c <_malloc_r+0x1c>
 8005978:	42a9      	cmp	r1, r5
 800597a:	d904      	bls.n	8005986 <_malloc_r+0x26>
 800597c:	230c      	movs	r3, #12
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	2000      	movs	r0, #0
 8005982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a5c <_malloc_r+0xfc>
 800598a:	f000 f869 	bl	8005a60 <__malloc_lock>
 800598e:	f8d8 3000 	ldr.w	r3, [r8]
 8005992:	461c      	mov	r4, r3
 8005994:	bb44      	cbnz	r4, 80059e8 <_malloc_r+0x88>
 8005996:	4629      	mov	r1, r5
 8005998:	4630      	mov	r0, r6
 800599a:	f7ff ffbf 	bl	800591c <sbrk_aligned>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	4604      	mov	r4, r0
 80059a2:	d158      	bne.n	8005a56 <_malloc_r+0xf6>
 80059a4:	f8d8 4000 	ldr.w	r4, [r8]
 80059a8:	4627      	mov	r7, r4
 80059aa:	2f00      	cmp	r7, #0
 80059ac:	d143      	bne.n	8005a36 <_malloc_r+0xd6>
 80059ae:	2c00      	cmp	r4, #0
 80059b0:	d04b      	beq.n	8005a4a <_malloc_r+0xea>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	4639      	mov	r1, r7
 80059b6:	4630      	mov	r0, r6
 80059b8:	eb04 0903 	add.w	r9, r4, r3
 80059bc:	f000 fb5c 	bl	8006078 <_sbrk_r>
 80059c0:	4581      	cmp	r9, r0
 80059c2:	d142      	bne.n	8005a4a <_malloc_r+0xea>
 80059c4:	6821      	ldr	r1, [r4, #0]
 80059c6:	1a6d      	subs	r5, r5, r1
 80059c8:	4629      	mov	r1, r5
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff ffa6 	bl	800591c <sbrk_aligned>
 80059d0:	3001      	adds	r0, #1
 80059d2:	d03a      	beq.n	8005a4a <_malloc_r+0xea>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	442b      	add	r3, r5
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	f8d8 3000 	ldr.w	r3, [r8]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	bb62      	cbnz	r2, 8005a3c <_malloc_r+0xdc>
 80059e2:	f8c8 7000 	str.w	r7, [r8]
 80059e6:	e00f      	b.n	8005a08 <_malloc_r+0xa8>
 80059e8:	6822      	ldr	r2, [r4, #0]
 80059ea:	1b52      	subs	r2, r2, r5
 80059ec:	d420      	bmi.n	8005a30 <_malloc_r+0xd0>
 80059ee:	2a0b      	cmp	r2, #11
 80059f0:	d917      	bls.n	8005a22 <_malloc_r+0xc2>
 80059f2:	1961      	adds	r1, r4, r5
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	6025      	str	r5, [r4, #0]
 80059f8:	bf18      	it	ne
 80059fa:	6059      	strne	r1, [r3, #4]
 80059fc:	6863      	ldr	r3, [r4, #4]
 80059fe:	bf08      	it	eq
 8005a00:	f8c8 1000 	streq.w	r1, [r8]
 8005a04:	5162      	str	r2, [r4, r5]
 8005a06:	604b      	str	r3, [r1, #4]
 8005a08:	4630      	mov	r0, r6
 8005a0a:	f000 f82f 	bl	8005a6c <__malloc_unlock>
 8005a0e:	f104 000b 	add.w	r0, r4, #11
 8005a12:	1d23      	adds	r3, r4, #4
 8005a14:	f020 0007 	bic.w	r0, r0, #7
 8005a18:	1ac2      	subs	r2, r0, r3
 8005a1a:	bf1c      	itt	ne
 8005a1c:	1a1b      	subne	r3, r3, r0
 8005a1e:	50a3      	strne	r3, [r4, r2]
 8005a20:	e7af      	b.n	8005982 <_malloc_r+0x22>
 8005a22:	6862      	ldr	r2, [r4, #4]
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	bf0c      	ite	eq
 8005a28:	f8c8 2000 	streq.w	r2, [r8]
 8005a2c:	605a      	strne	r2, [r3, #4]
 8005a2e:	e7eb      	b.n	8005a08 <_malloc_r+0xa8>
 8005a30:	4623      	mov	r3, r4
 8005a32:	6864      	ldr	r4, [r4, #4]
 8005a34:	e7ae      	b.n	8005994 <_malloc_r+0x34>
 8005a36:	463c      	mov	r4, r7
 8005a38:	687f      	ldr	r7, [r7, #4]
 8005a3a:	e7b6      	b.n	80059aa <_malloc_r+0x4a>
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	d1fb      	bne.n	8005a3c <_malloc_r+0xdc>
 8005a44:	2300      	movs	r3, #0
 8005a46:	6053      	str	r3, [r2, #4]
 8005a48:	e7de      	b.n	8005a08 <_malloc_r+0xa8>
 8005a4a:	230c      	movs	r3, #12
 8005a4c:	6033      	str	r3, [r6, #0]
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 f80c 	bl	8005a6c <__malloc_unlock>
 8005a54:	e794      	b.n	8005980 <_malloc_r+0x20>
 8005a56:	6005      	str	r5, [r0, #0]
 8005a58:	e7d6      	b.n	8005a08 <_malloc_r+0xa8>
 8005a5a:	bf00      	nop
 8005a5c:	20001cc4 	.word	0x20001cc4

08005a60 <__malloc_lock>:
 8005a60:	4801      	ldr	r0, [pc, #4]	@ (8005a68 <__malloc_lock+0x8>)
 8005a62:	f7ff bf01 	b.w	8005868 <__retarget_lock_acquire_recursive>
 8005a66:	bf00      	nop
 8005a68:	20001cbc 	.word	0x20001cbc

08005a6c <__malloc_unlock>:
 8005a6c:	4801      	ldr	r0, [pc, #4]	@ (8005a74 <__malloc_unlock+0x8>)
 8005a6e:	f7ff befc 	b.w	800586a <__retarget_lock_release_recursive>
 8005a72:	bf00      	nop
 8005a74:	20001cbc 	.word	0x20001cbc

08005a78 <__ssputs_r>:
 8005a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	688e      	ldr	r6, [r1, #8]
 8005a7e:	461f      	mov	r7, r3
 8005a80:	42be      	cmp	r6, r7
 8005a82:	680b      	ldr	r3, [r1, #0]
 8005a84:	4682      	mov	sl, r0
 8005a86:	460c      	mov	r4, r1
 8005a88:	4690      	mov	r8, r2
 8005a8a:	d82d      	bhi.n	8005ae8 <__ssputs_r+0x70>
 8005a8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a90:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a94:	d026      	beq.n	8005ae4 <__ssputs_r+0x6c>
 8005a96:	6965      	ldr	r5, [r4, #20]
 8005a98:	6909      	ldr	r1, [r1, #16]
 8005a9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a9e:	eba3 0901 	sub.w	r9, r3, r1
 8005aa2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005aa6:	1c7b      	adds	r3, r7, #1
 8005aa8:	444b      	add	r3, r9
 8005aaa:	106d      	asrs	r5, r5, #1
 8005aac:	429d      	cmp	r5, r3
 8005aae:	bf38      	it	cc
 8005ab0:	461d      	movcc	r5, r3
 8005ab2:	0553      	lsls	r3, r2, #21
 8005ab4:	d527      	bpl.n	8005b06 <__ssputs_r+0x8e>
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	f7ff ff52 	bl	8005960 <_malloc_r>
 8005abc:	4606      	mov	r6, r0
 8005abe:	b360      	cbz	r0, 8005b1a <__ssputs_r+0xa2>
 8005ac0:	6921      	ldr	r1, [r4, #16]
 8005ac2:	464a      	mov	r2, r9
 8005ac4:	f7ff fed2 	bl	800586c <memcpy>
 8005ac8:	89a3      	ldrh	r3, [r4, #12]
 8005aca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad2:	81a3      	strh	r3, [r4, #12]
 8005ad4:	6126      	str	r6, [r4, #16]
 8005ad6:	6165      	str	r5, [r4, #20]
 8005ad8:	444e      	add	r6, r9
 8005ada:	eba5 0509 	sub.w	r5, r5, r9
 8005ade:	6026      	str	r6, [r4, #0]
 8005ae0:	60a5      	str	r5, [r4, #8]
 8005ae2:	463e      	mov	r6, r7
 8005ae4:	42be      	cmp	r6, r7
 8005ae6:	d900      	bls.n	8005aea <__ssputs_r+0x72>
 8005ae8:	463e      	mov	r6, r7
 8005aea:	6820      	ldr	r0, [r4, #0]
 8005aec:	4632      	mov	r2, r6
 8005aee:	4641      	mov	r1, r8
 8005af0:	f000 faa8 	bl	8006044 <memmove>
 8005af4:	68a3      	ldr	r3, [r4, #8]
 8005af6:	1b9b      	subs	r3, r3, r6
 8005af8:	60a3      	str	r3, [r4, #8]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	4433      	add	r3, r6
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	2000      	movs	r0, #0
 8005b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b06:	462a      	mov	r2, r5
 8005b08:	f000 fac6 	bl	8006098 <_realloc_r>
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d1e0      	bne.n	8005ad4 <__ssputs_r+0x5c>
 8005b12:	6921      	ldr	r1, [r4, #16]
 8005b14:	4650      	mov	r0, sl
 8005b16:	f7ff feb7 	bl	8005888 <_free_r>
 8005b1a:	230c      	movs	r3, #12
 8005b1c:	f8ca 3000 	str.w	r3, [sl]
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b26:	81a3      	strh	r3, [r4, #12]
 8005b28:	f04f 30ff 	mov.w	r0, #4294967295
 8005b2c:	e7e9      	b.n	8005b02 <__ssputs_r+0x8a>
	...

08005b30 <_svfiprintf_r>:
 8005b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b34:	4698      	mov	r8, r3
 8005b36:	898b      	ldrh	r3, [r1, #12]
 8005b38:	061b      	lsls	r3, r3, #24
 8005b3a:	b09d      	sub	sp, #116	@ 0x74
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	460d      	mov	r5, r1
 8005b40:	4614      	mov	r4, r2
 8005b42:	d510      	bpl.n	8005b66 <_svfiprintf_r+0x36>
 8005b44:	690b      	ldr	r3, [r1, #16]
 8005b46:	b973      	cbnz	r3, 8005b66 <_svfiprintf_r+0x36>
 8005b48:	2140      	movs	r1, #64	@ 0x40
 8005b4a:	f7ff ff09 	bl	8005960 <_malloc_r>
 8005b4e:	6028      	str	r0, [r5, #0]
 8005b50:	6128      	str	r0, [r5, #16]
 8005b52:	b930      	cbnz	r0, 8005b62 <_svfiprintf_r+0x32>
 8005b54:	230c      	movs	r3, #12
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	b01d      	add	sp, #116	@ 0x74
 8005b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b62:	2340      	movs	r3, #64	@ 0x40
 8005b64:	616b      	str	r3, [r5, #20]
 8005b66:	2300      	movs	r3, #0
 8005b68:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b6a:	2320      	movs	r3, #32
 8005b6c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b70:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b74:	2330      	movs	r3, #48	@ 0x30
 8005b76:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005d14 <_svfiprintf_r+0x1e4>
 8005b7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005b7e:	f04f 0901 	mov.w	r9, #1
 8005b82:	4623      	mov	r3, r4
 8005b84:	469a      	mov	sl, r3
 8005b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b8a:	b10a      	cbz	r2, 8005b90 <_svfiprintf_r+0x60>
 8005b8c:	2a25      	cmp	r2, #37	@ 0x25
 8005b8e:	d1f9      	bne.n	8005b84 <_svfiprintf_r+0x54>
 8005b90:	ebba 0b04 	subs.w	fp, sl, r4
 8005b94:	d00b      	beq.n	8005bae <_svfiprintf_r+0x7e>
 8005b96:	465b      	mov	r3, fp
 8005b98:	4622      	mov	r2, r4
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4638      	mov	r0, r7
 8005b9e:	f7ff ff6b 	bl	8005a78 <__ssputs_r>
 8005ba2:	3001      	adds	r0, #1
 8005ba4:	f000 80a7 	beq.w	8005cf6 <_svfiprintf_r+0x1c6>
 8005ba8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005baa:	445a      	add	r2, fp
 8005bac:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bae:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 809f 	beq.w	8005cf6 <_svfiprintf_r+0x1c6>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bc2:	f10a 0a01 	add.w	sl, sl, #1
 8005bc6:	9304      	str	r3, [sp, #16]
 8005bc8:	9307      	str	r3, [sp, #28]
 8005bca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bce:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bd0:	4654      	mov	r4, sl
 8005bd2:	2205      	movs	r2, #5
 8005bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd8:	484e      	ldr	r0, [pc, #312]	@ (8005d14 <_svfiprintf_r+0x1e4>)
 8005bda:	f7fa faf9 	bl	80001d0 <memchr>
 8005bde:	9a04      	ldr	r2, [sp, #16]
 8005be0:	b9d8      	cbnz	r0, 8005c1a <_svfiprintf_r+0xea>
 8005be2:	06d0      	lsls	r0, r2, #27
 8005be4:	bf44      	itt	mi
 8005be6:	2320      	movmi	r3, #32
 8005be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bec:	0711      	lsls	r1, r2, #28
 8005bee:	bf44      	itt	mi
 8005bf0:	232b      	movmi	r3, #43	@ 0x2b
 8005bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfa:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bfc:	d015      	beq.n	8005c2a <_svfiprintf_r+0xfa>
 8005bfe:	9a07      	ldr	r2, [sp, #28]
 8005c00:	4654      	mov	r4, sl
 8005c02:	2000      	movs	r0, #0
 8005c04:	f04f 0c0a 	mov.w	ip, #10
 8005c08:	4621      	mov	r1, r4
 8005c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c0e:	3b30      	subs	r3, #48	@ 0x30
 8005c10:	2b09      	cmp	r3, #9
 8005c12:	d94b      	bls.n	8005cac <_svfiprintf_r+0x17c>
 8005c14:	b1b0      	cbz	r0, 8005c44 <_svfiprintf_r+0x114>
 8005c16:	9207      	str	r2, [sp, #28]
 8005c18:	e014      	b.n	8005c44 <_svfiprintf_r+0x114>
 8005c1a:	eba0 0308 	sub.w	r3, r0, r8
 8005c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c22:	4313      	orrs	r3, r2
 8005c24:	9304      	str	r3, [sp, #16]
 8005c26:	46a2      	mov	sl, r4
 8005c28:	e7d2      	b.n	8005bd0 <_svfiprintf_r+0xa0>
 8005c2a:	9b03      	ldr	r3, [sp, #12]
 8005c2c:	1d19      	adds	r1, r3, #4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	9103      	str	r1, [sp, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bfbb      	ittet	lt
 8005c36:	425b      	neglt	r3, r3
 8005c38:	f042 0202 	orrlt.w	r2, r2, #2
 8005c3c:	9307      	strge	r3, [sp, #28]
 8005c3e:	9307      	strlt	r3, [sp, #28]
 8005c40:	bfb8      	it	lt
 8005c42:	9204      	strlt	r2, [sp, #16]
 8005c44:	7823      	ldrb	r3, [r4, #0]
 8005c46:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c48:	d10a      	bne.n	8005c60 <_svfiprintf_r+0x130>
 8005c4a:	7863      	ldrb	r3, [r4, #1]
 8005c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c4e:	d132      	bne.n	8005cb6 <_svfiprintf_r+0x186>
 8005c50:	9b03      	ldr	r3, [sp, #12]
 8005c52:	1d1a      	adds	r2, r3, #4
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	9203      	str	r2, [sp, #12]
 8005c58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c5c:	3402      	adds	r4, #2
 8005c5e:	9305      	str	r3, [sp, #20]
 8005c60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005d24 <_svfiprintf_r+0x1f4>
 8005c64:	7821      	ldrb	r1, [r4, #0]
 8005c66:	2203      	movs	r2, #3
 8005c68:	4650      	mov	r0, sl
 8005c6a:	f7fa fab1 	bl	80001d0 <memchr>
 8005c6e:	b138      	cbz	r0, 8005c80 <_svfiprintf_r+0x150>
 8005c70:	9b04      	ldr	r3, [sp, #16]
 8005c72:	eba0 000a 	sub.w	r0, r0, sl
 8005c76:	2240      	movs	r2, #64	@ 0x40
 8005c78:	4082      	lsls	r2, r0
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	3401      	adds	r4, #1
 8005c7e:	9304      	str	r3, [sp, #16]
 8005c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c84:	4824      	ldr	r0, [pc, #144]	@ (8005d18 <_svfiprintf_r+0x1e8>)
 8005c86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005c8a:	2206      	movs	r2, #6
 8005c8c:	f7fa faa0 	bl	80001d0 <memchr>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d036      	beq.n	8005d02 <_svfiprintf_r+0x1d2>
 8005c94:	4b21      	ldr	r3, [pc, #132]	@ (8005d1c <_svfiprintf_r+0x1ec>)
 8005c96:	bb1b      	cbnz	r3, 8005ce0 <_svfiprintf_r+0x1b0>
 8005c98:	9b03      	ldr	r3, [sp, #12]
 8005c9a:	3307      	adds	r3, #7
 8005c9c:	f023 0307 	bic.w	r3, r3, #7
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	9303      	str	r3, [sp, #12]
 8005ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ca6:	4433      	add	r3, r6
 8005ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005caa:	e76a      	b.n	8005b82 <_svfiprintf_r+0x52>
 8005cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	2001      	movs	r0, #1
 8005cb4:	e7a8      	b.n	8005c08 <_svfiprintf_r+0xd8>
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	3401      	adds	r4, #1
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f04f 0c0a 	mov.w	ip, #10
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cc8:	3a30      	subs	r2, #48	@ 0x30
 8005cca:	2a09      	cmp	r2, #9
 8005ccc:	d903      	bls.n	8005cd6 <_svfiprintf_r+0x1a6>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0c6      	beq.n	8005c60 <_svfiprintf_r+0x130>
 8005cd2:	9105      	str	r1, [sp, #20]
 8005cd4:	e7c4      	b.n	8005c60 <_svfiprintf_r+0x130>
 8005cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cda:	4604      	mov	r4, r0
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e7f0      	b.n	8005cc2 <_svfiprintf_r+0x192>
 8005ce0:	ab03      	add	r3, sp, #12
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	462a      	mov	r2, r5
 8005ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d20 <_svfiprintf_r+0x1f0>)
 8005ce8:	a904      	add	r1, sp, #16
 8005cea:	4638      	mov	r0, r7
 8005cec:	f3af 8000 	nop.w
 8005cf0:	1c42      	adds	r2, r0, #1
 8005cf2:	4606      	mov	r6, r0
 8005cf4:	d1d6      	bne.n	8005ca4 <_svfiprintf_r+0x174>
 8005cf6:	89ab      	ldrh	r3, [r5, #12]
 8005cf8:	065b      	lsls	r3, r3, #25
 8005cfa:	f53f af2d 	bmi.w	8005b58 <_svfiprintf_r+0x28>
 8005cfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d00:	e72c      	b.n	8005b5c <_svfiprintf_r+0x2c>
 8005d02:	ab03      	add	r3, sp, #12
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	462a      	mov	r2, r5
 8005d08:	4b05      	ldr	r3, [pc, #20]	@ (8005d20 <_svfiprintf_r+0x1f0>)
 8005d0a:	a904      	add	r1, sp, #16
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	f000 f879 	bl	8005e04 <_printf_i>
 8005d12:	e7ed      	b.n	8005cf0 <_svfiprintf_r+0x1c0>
 8005d14:	08006240 	.word	0x08006240
 8005d18:	0800624a 	.word	0x0800624a
 8005d1c:	00000000 	.word	0x00000000
 8005d20:	08005a79 	.word	0x08005a79
 8005d24:	08006246 	.word	0x08006246

08005d28 <_printf_common>:
 8005d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	4698      	mov	r8, r3
 8005d30:	688a      	ldr	r2, [r1, #8]
 8005d32:	690b      	ldr	r3, [r1, #16]
 8005d34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	bfb8      	it	lt
 8005d3c:	4613      	movlt	r3, r2
 8005d3e:	6033      	str	r3, [r6, #0]
 8005d40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d44:	4607      	mov	r7, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	b10a      	cbz	r2, 8005d4e <_printf_common+0x26>
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	6033      	str	r3, [r6, #0]
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	0699      	lsls	r1, r3, #26
 8005d52:	bf42      	ittt	mi
 8005d54:	6833      	ldrmi	r3, [r6, #0]
 8005d56:	3302      	addmi	r3, #2
 8005d58:	6033      	strmi	r3, [r6, #0]
 8005d5a:	6825      	ldr	r5, [r4, #0]
 8005d5c:	f015 0506 	ands.w	r5, r5, #6
 8005d60:	d106      	bne.n	8005d70 <_printf_common+0x48>
 8005d62:	f104 0a19 	add.w	sl, r4, #25
 8005d66:	68e3      	ldr	r3, [r4, #12]
 8005d68:	6832      	ldr	r2, [r6, #0]
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	42ab      	cmp	r3, r5
 8005d6e:	dc26      	bgt.n	8005dbe <_printf_common+0x96>
 8005d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	3b00      	subs	r3, #0
 8005d78:	bf18      	it	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	0692      	lsls	r2, r2, #26
 8005d7e:	d42b      	bmi.n	8005dd8 <_printf_common+0xb0>
 8005d80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d84:	4641      	mov	r1, r8
 8005d86:	4638      	mov	r0, r7
 8005d88:	47c8      	blx	r9
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d01e      	beq.n	8005dcc <_printf_common+0xa4>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	6922      	ldr	r2, [r4, #16]
 8005d92:	f003 0306 	and.w	r3, r3, #6
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	bf02      	ittt	eq
 8005d9a:	68e5      	ldreq	r5, [r4, #12]
 8005d9c:	6833      	ldreq	r3, [r6, #0]
 8005d9e:	1aed      	subeq	r5, r5, r3
 8005da0:	68a3      	ldr	r3, [r4, #8]
 8005da2:	bf0c      	ite	eq
 8005da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005da8:	2500      	movne	r5, #0
 8005daa:	4293      	cmp	r3, r2
 8005dac:	bfc4      	itt	gt
 8005dae:	1a9b      	subgt	r3, r3, r2
 8005db0:	18ed      	addgt	r5, r5, r3
 8005db2:	2600      	movs	r6, #0
 8005db4:	341a      	adds	r4, #26
 8005db6:	42b5      	cmp	r5, r6
 8005db8:	d11a      	bne.n	8005df0 <_printf_common+0xc8>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e008      	b.n	8005dd0 <_printf_common+0xa8>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4652      	mov	r2, sl
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	47c8      	blx	r9
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d103      	bne.n	8005dd4 <_printf_common+0xac>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e7c6      	b.n	8005d66 <_printf_common+0x3e>
 8005dd8:	18e1      	adds	r1, r4, r3
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	2030      	movs	r0, #48	@ 0x30
 8005dde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005de2:	4422      	add	r2, r4
 8005de4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005de8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005dec:	3302      	adds	r3, #2
 8005dee:	e7c7      	b.n	8005d80 <_printf_common+0x58>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4622      	mov	r2, r4
 8005df4:	4641      	mov	r1, r8
 8005df6:	4638      	mov	r0, r7
 8005df8:	47c8      	blx	r9
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d0e6      	beq.n	8005dcc <_printf_common+0xa4>
 8005dfe:	3601      	adds	r6, #1
 8005e00:	e7d9      	b.n	8005db6 <_printf_common+0x8e>
	...

08005e04 <_printf_i>:
 8005e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	7e0f      	ldrb	r7, [r1, #24]
 8005e0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e0c:	2f78      	cmp	r7, #120	@ 0x78
 8005e0e:	4691      	mov	r9, r2
 8005e10:	4680      	mov	r8, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	469a      	mov	sl, r3
 8005e16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e1a:	d807      	bhi.n	8005e2c <_printf_i+0x28>
 8005e1c:	2f62      	cmp	r7, #98	@ 0x62
 8005e1e:	d80a      	bhi.n	8005e36 <_printf_i+0x32>
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	f000 80d2 	beq.w	8005fca <_printf_i+0x1c6>
 8005e26:	2f58      	cmp	r7, #88	@ 0x58
 8005e28:	f000 80b9 	beq.w	8005f9e <_printf_i+0x19a>
 8005e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e34:	e03a      	b.n	8005eac <_printf_i+0xa8>
 8005e36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e3a:	2b15      	cmp	r3, #21
 8005e3c:	d8f6      	bhi.n	8005e2c <_printf_i+0x28>
 8005e3e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e44 <_printf_i+0x40>)
 8005e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e44:	08005e9d 	.word	0x08005e9d
 8005e48:	08005eb1 	.word	0x08005eb1
 8005e4c:	08005e2d 	.word	0x08005e2d
 8005e50:	08005e2d 	.word	0x08005e2d
 8005e54:	08005e2d 	.word	0x08005e2d
 8005e58:	08005e2d 	.word	0x08005e2d
 8005e5c:	08005eb1 	.word	0x08005eb1
 8005e60:	08005e2d 	.word	0x08005e2d
 8005e64:	08005e2d 	.word	0x08005e2d
 8005e68:	08005e2d 	.word	0x08005e2d
 8005e6c:	08005e2d 	.word	0x08005e2d
 8005e70:	08005fb1 	.word	0x08005fb1
 8005e74:	08005edb 	.word	0x08005edb
 8005e78:	08005f6b 	.word	0x08005f6b
 8005e7c:	08005e2d 	.word	0x08005e2d
 8005e80:	08005e2d 	.word	0x08005e2d
 8005e84:	08005fd3 	.word	0x08005fd3
 8005e88:	08005e2d 	.word	0x08005e2d
 8005e8c:	08005edb 	.word	0x08005edb
 8005e90:	08005e2d 	.word	0x08005e2d
 8005e94:	08005e2d 	.word	0x08005e2d
 8005e98:	08005f73 	.word	0x08005f73
 8005e9c:	6833      	ldr	r3, [r6, #0]
 8005e9e:	1d1a      	adds	r2, r3, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6032      	str	r2, [r6, #0]
 8005ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005eac:	2301      	movs	r3, #1
 8005eae:	e09d      	b.n	8005fec <_printf_i+0x1e8>
 8005eb0:	6833      	ldr	r3, [r6, #0]
 8005eb2:	6820      	ldr	r0, [r4, #0]
 8005eb4:	1d19      	adds	r1, r3, #4
 8005eb6:	6031      	str	r1, [r6, #0]
 8005eb8:	0606      	lsls	r6, r0, #24
 8005eba:	d501      	bpl.n	8005ec0 <_printf_i+0xbc>
 8005ebc:	681d      	ldr	r5, [r3, #0]
 8005ebe:	e003      	b.n	8005ec8 <_printf_i+0xc4>
 8005ec0:	0645      	lsls	r5, r0, #25
 8005ec2:	d5fb      	bpl.n	8005ebc <_printf_i+0xb8>
 8005ec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ec8:	2d00      	cmp	r5, #0
 8005eca:	da03      	bge.n	8005ed4 <_printf_i+0xd0>
 8005ecc:	232d      	movs	r3, #45	@ 0x2d
 8005ece:	426d      	negs	r5, r5
 8005ed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ed4:	4859      	ldr	r0, [pc, #356]	@ (800603c <_printf_i+0x238>)
 8005ed6:	230a      	movs	r3, #10
 8005ed8:	e011      	b.n	8005efe <_printf_i+0xfa>
 8005eda:	6821      	ldr	r1, [r4, #0]
 8005edc:	6833      	ldr	r3, [r6, #0]
 8005ede:	0608      	lsls	r0, r1, #24
 8005ee0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ee4:	d402      	bmi.n	8005eec <_printf_i+0xe8>
 8005ee6:	0649      	lsls	r1, r1, #25
 8005ee8:	bf48      	it	mi
 8005eea:	b2ad      	uxthmi	r5, r5
 8005eec:	2f6f      	cmp	r7, #111	@ 0x6f
 8005eee:	4853      	ldr	r0, [pc, #332]	@ (800603c <_printf_i+0x238>)
 8005ef0:	6033      	str	r3, [r6, #0]
 8005ef2:	bf14      	ite	ne
 8005ef4:	230a      	movne	r3, #10
 8005ef6:	2308      	moveq	r3, #8
 8005ef8:	2100      	movs	r1, #0
 8005efa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005efe:	6866      	ldr	r6, [r4, #4]
 8005f00:	60a6      	str	r6, [r4, #8]
 8005f02:	2e00      	cmp	r6, #0
 8005f04:	bfa2      	ittt	ge
 8005f06:	6821      	ldrge	r1, [r4, #0]
 8005f08:	f021 0104 	bicge.w	r1, r1, #4
 8005f0c:	6021      	strge	r1, [r4, #0]
 8005f0e:	b90d      	cbnz	r5, 8005f14 <_printf_i+0x110>
 8005f10:	2e00      	cmp	r6, #0
 8005f12:	d04b      	beq.n	8005fac <_printf_i+0x1a8>
 8005f14:	4616      	mov	r6, r2
 8005f16:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f1a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f1e:	5dc7      	ldrb	r7, [r0, r7]
 8005f20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f24:	462f      	mov	r7, r5
 8005f26:	42bb      	cmp	r3, r7
 8005f28:	460d      	mov	r5, r1
 8005f2a:	d9f4      	bls.n	8005f16 <_printf_i+0x112>
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d10b      	bne.n	8005f48 <_printf_i+0x144>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	07df      	lsls	r7, r3, #31
 8005f34:	d508      	bpl.n	8005f48 <_printf_i+0x144>
 8005f36:	6923      	ldr	r3, [r4, #16]
 8005f38:	6861      	ldr	r1, [r4, #4]
 8005f3a:	4299      	cmp	r1, r3
 8005f3c:	bfde      	ittt	le
 8005f3e:	2330      	movle	r3, #48	@ 0x30
 8005f40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f48:	1b92      	subs	r2, r2, r6
 8005f4a:	6122      	str	r2, [r4, #16]
 8005f4c:	f8cd a000 	str.w	sl, [sp]
 8005f50:	464b      	mov	r3, r9
 8005f52:	aa03      	add	r2, sp, #12
 8005f54:	4621      	mov	r1, r4
 8005f56:	4640      	mov	r0, r8
 8005f58:	f7ff fee6 	bl	8005d28 <_printf_common>
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d14a      	bne.n	8005ff6 <_printf_i+0x1f2>
 8005f60:	f04f 30ff 	mov.w	r0, #4294967295
 8005f64:	b004      	add	sp, #16
 8005f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	f043 0320 	orr.w	r3, r3, #32
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	4833      	ldr	r0, [pc, #204]	@ (8006040 <_printf_i+0x23c>)
 8005f74:	2778      	movs	r7, #120	@ 0x78
 8005f76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	6831      	ldr	r1, [r6, #0]
 8005f7e:	061f      	lsls	r7, r3, #24
 8005f80:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f84:	d402      	bmi.n	8005f8c <_printf_i+0x188>
 8005f86:	065f      	lsls	r7, r3, #25
 8005f88:	bf48      	it	mi
 8005f8a:	b2ad      	uxthmi	r5, r5
 8005f8c:	6031      	str	r1, [r6, #0]
 8005f8e:	07d9      	lsls	r1, r3, #31
 8005f90:	bf44      	itt	mi
 8005f92:	f043 0320 	orrmi.w	r3, r3, #32
 8005f96:	6023      	strmi	r3, [r4, #0]
 8005f98:	b11d      	cbz	r5, 8005fa2 <_printf_i+0x19e>
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	e7ac      	b.n	8005ef8 <_printf_i+0xf4>
 8005f9e:	4827      	ldr	r0, [pc, #156]	@ (800603c <_printf_i+0x238>)
 8005fa0:	e7e9      	b.n	8005f76 <_printf_i+0x172>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	f023 0320 	bic.w	r3, r3, #32
 8005fa8:	6023      	str	r3, [r4, #0]
 8005faa:	e7f6      	b.n	8005f9a <_printf_i+0x196>
 8005fac:	4616      	mov	r6, r2
 8005fae:	e7bd      	b.n	8005f2c <_printf_i+0x128>
 8005fb0:	6833      	ldr	r3, [r6, #0]
 8005fb2:	6825      	ldr	r5, [r4, #0]
 8005fb4:	6961      	ldr	r1, [r4, #20]
 8005fb6:	1d18      	adds	r0, r3, #4
 8005fb8:	6030      	str	r0, [r6, #0]
 8005fba:	062e      	lsls	r6, r5, #24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	d501      	bpl.n	8005fc4 <_printf_i+0x1c0>
 8005fc0:	6019      	str	r1, [r3, #0]
 8005fc2:	e002      	b.n	8005fca <_printf_i+0x1c6>
 8005fc4:	0668      	lsls	r0, r5, #25
 8005fc6:	d5fb      	bpl.n	8005fc0 <_printf_i+0x1bc>
 8005fc8:	8019      	strh	r1, [r3, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	4616      	mov	r6, r2
 8005fd0:	e7bc      	b.n	8005f4c <_printf_i+0x148>
 8005fd2:	6833      	ldr	r3, [r6, #0]
 8005fd4:	1d1a      	adds	r2, r3, #4
 8005fd6:	6032      	str	r2, [r6, #0]
 8005fd8:	681e      	ldr	r6, [r3, #0]
 8005fda:	6862      	ldr	r2, [r4, #4]
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f7fa f8f6 	bl	80001d0 <memchr>
 8005fe4:	b108      	cbz	r0, 8005fea <_printf_i+0x1e6>
 8005fe6:	1b80      	subs	r0, r0, r6
 8005fe8:	6060      	str	r0, [r4, #4]
 8005fea:	6863      	ldr	r3, [r4, #4]
 8005fec:	6123      	str	r3, [r4, #16]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ff4:	e7aa      	b.n	8005f4c <_printf_i+0x148>
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	47d0      	blx	sl
 8006000:	3001      	adds	r0, #1
 8006002:	d0ad      	beq.n	8005f60 <_printf_i+0x15c>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	079b      	lsls	r3, r3, #30
 8006008:	d413      	bmi.n	8006032 <_printf_i+0x22e>
 800600a:	68e0      	ldr	r0, [r4, #12]
 800600c:	9b03      	ldr	r3, [sp, #12]
 800600e:	4298      	cmp	r0, r3
 8006010:	bfb8      	it	lt
 8006012:	4618      	movlt	r0, r3
 8006014:	e7a6      	b.n	8005f64 <_printf_i+0x160>
 8006016:	2301      	movs	r3, #1
 8006018:	4632      	mov	r2, r6
 800601a:	4649      	mov	r1, r9
 800601c:	4640      	mov	r0, r8
 800601e:	47d0      	blx	sl
 8006020:	3001      	adds	r0, #1
 8006022:	d09d      	beq.n	8005f60 <_printf_i+0x15c>
 8006024:	3501      	adds	r5, #1
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	9903      	ldr	r1, [sp, #12]
 800602a:	1a5b      	subs	r3, r3, r1
 800602c:	42ab      	cmp	r3, r5
 800602e:	dcf2      	bgt.n	8006016 <_printf_i+0x212>
 8006030:	e7eb      	b.n	800600a <_printf_i+0x206>
 8006032:	2500      	movs	r5, #0
 8006034:	f104 0619 	add.w	r6, r4, #25
 8006038:	e7f5      	b.n	8006026 <_printf_i+0x222>
 800603a:	bf00      	nop
 800603c:	08006251 	.word	0x08006251
 8006040:	08006262 	.word	0x08006262

08006044 <memmove>:
 8006044:	4288      	cmp	r0, r1
 8006046:	b510      	push	{r4, lr}
 8006048:	eb01 0402 	add.w	r4, r1, r2
 800604c:	d902      	bls.n	8006054 <memmove+0x10>
 800604e:	4284      	cmp	r4, r0
 8006050:	4623      	mov	r3, r4
 8006052:	d807      	bhi.n	8006064 <memmove+0x20>
 8006054:	1e43      	subs	r3, r0, #1
 8006056:	42a1      	cmp	r1, r4
 8006058:	d008      	beq.n	800606c <memmove+0x28>
 800605a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800605e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006062:	e7f8      	b.n	8006056 <memmove+0x12>
 8006064:	4402      	add	r2, r0
 8006066:	4601      	mov	r1, r0
 8006068:	428a      	cmp	r2, r1
 800606a:	d100      	bne.n	800606e <memmove+0x2a>
 800606c:	bd10      	pop	{r4, pc}
 800606e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006076:	e7f7      	b.n	8006068 <memmove+0x24>

08006078 <_sbrk_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4d06      	ldr	r5, [pc, #24]	@ (8006094 <_sbrk_r+0x1c>)
 800607c:	2300      	movs	r3, #0
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	f7fb f824 	bl	80010d0 <_sbrk>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d102      	bne.n	8006092 <_sbrk_r+0x1a>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	b103      	cbz	r3, 8006092 <_sbrk_r+0x1a>
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	20001cb8 	.word	0x20001cb8

08006098 <_realloc_r>:
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	4680      	mov	r8, r0
 800609e:	4615      	mov	r5, r2
 80060a0:	460c      	mov	r4, r1
 80060a2:	b921      	cbnz	r1, 80060ae <_realloc_r+0x16>
 80060a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060a8:	4611      	mov	r1, r2
 80060aa:	f7ff bc59 	b.w	8005960 <_malloc_r>
 80060ae:	b92a      	cbnz	r2, 80060bc <_realloc_r+0x24>
 80060b0:	f7ff fbea 	bl	8005888 <_free_r>
 80060b4:	2400      	movs	r4, #0
 80060b6:	4620      	mov	r0, r4
 80060b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060bc:	f000 f81a 	bl	80060f4 <_malloc_usable_size_r>
 80060c0:	4285      	cmp	r5, r0
 80060c2:	4606      	mov	r6, r0
 80060c4:	d802      	bhi.n	80060cc <_realloc_r+0x34>
 80060c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060ca:	d8f4      	bhi.n	80060b6 <_realloc_r+0x1e>
 80060cc:	4629      	mov	r1, r5
 80060ce:	4640      	mov	r0, r8
 80060d0:	f7ff fc46 	bl	8005960 <_malloc_r>
 80060d4:	4607      	mov	r7, r0
 80060d6:	2800      	cmp	r0, #0
 80060d8:	d0ec      	beq.n	80060b4 <_realloc_r+0x1c>
 80060da:	42b5      	cmp	r5, r6
 80060dc:	462a      	mov	r2, r5
 80060de:	4621      	mov	r1, r4
 80060e0:	bf28      	it	cs
 80060e2:	4632      	movcs	r2, r6
 80060e4:	f7ff fbc2 	bl	800586c <memcpy>
 80060e8:	4621      	mov	r1, r4
 80060ea:	4640      	mov	r0, r8
 80060ec:	f7ff fbcc 	bl	8005888 <_free_r>
 80060f0:	463c      	mov	r4, r7
 80060f2:	e7e0      	b.n	80060b6 <_realloc_r+0x1e>

080060f4 <_malloc_usable_size_r>:
 80060f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f8:	1f18      	subs	r0, r3, #4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bfbc      	itt	lt
 80060fe:	580b      	ldrlt	r3, [r1, r0]
 8006100:	18c0      	addlt	r0, r0, r3
 8006102:	4770      	bx	lr

08006104 <_init>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	bf00      	nop
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr

08006110 <_fini>:
 8006110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006112:	bf00      	nop
 8006114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006116:	bc08      	pop	{r3}
 8006118:	469e      	mov	lr, r3
 800611a:	4770      	bx	lr
