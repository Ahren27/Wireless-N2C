
Wireless_N2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005edc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800606c  0800606c  0000706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080061c4  080061c4  000071c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061cc  080061cc  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000071cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061d0  080061d0  000071d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080061d4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c6c  20000060  08006234  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00001e04  20001ccc  08006234  00008ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015964  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e0  00000000  00000000  0001d9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  00020bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1c  00000000  00000000  00021f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003961  00000000  00000000  00022e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015767  00000000  00000000  000267fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7753  00000000  00000000  0003bf64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001336b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005654  00000000  00000000  001336fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00138d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006054 	.word	0x08006054

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006054 	.word	0x08006054

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <I2C_GPIO_Init1>:
#include "task.h"                       // ARM.FreeRTOS::RTOS:Core
#include "event_groups.h"               // ARM.FreeRTOS::RTOS:Event Groups
#include "semphr.h"                     // ARM.FreeRTOS::RTOS:Core
#include "I2C.h"

void I2C_GPIO_Init1(void) {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8000274:	4b20      	ldr	r3, [pc, #128]	@ (80002f8 <I2C_GPIO_Init1+0x88>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000278:	4a1f      	ldr	r2, [pc, #124]	@ (80002f8 <I2C_GPIO_Init1+0x88>)
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C1EN);
 8000280:	4b1d      	ldr	r3, [pc, #116]	@ (80002f8 <I2C_GPIO_Init1+0x88>)
 8000282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000284:	4a1c      	ldr	r2, [pc, #112]	@ (80002f8 <I2C_GPIO_Init1+0x88>)
 8000286:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800028a:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 6 and 7 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 800028c:	4b1b      	ldr	r3, [pc, #108]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a1a      	ldr	r2, [pc, #104]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 8000292:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000296:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 8000298:	4b18      	ldr	r3, [pc, #96]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a17      	ldr	r2, [pc, #92]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 800029e:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80002a2:	6013      	str	r3, [r2, #0]

	// Set Pins 6 and 7 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 80002a4:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	4a14      	ldr	r2, [pc, #80]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002ae:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7);
 80002b0:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a11      	ldr	r2, [pc, #68]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80002ba:	6053      	str	r3, [r2, #4]

	// Set pints 6 and 7 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 80002bc:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4a0e      	ldr	r2, [pc, #56]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80002c6:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED6_1 | GPIO_OSPEEDR_OSPEED7_1);
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	4a0b      	ldr	r2, [pc, #44]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002ce:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80002d2:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[0] &= ~(GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 80002d4:	4b09      	ldr	r3, [pc, #36]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002d6:	6a1b      	ldr	r3, [r3, #32]
 80002d8:	4a08      	ldr	r2, [pc, #32]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80002de:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= ((4 << GPIO_AFRL_AFSEL6_Pos) | 4 << GPIO_AFRL_AFSEL7_Pos);
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002e2:	6a1b      	ldr	r3, [r3, #32]
 80002e4:	4a05      	ldr	r2, [pc, #20]	@ (80002fc <I2C_GPIO_Init1+0x8c>)
 80002e6:	f043 4388 	orr.w	r3, r3, #1140850688	@ 0x44000000
 80002ea:	6213      	str	r3, [r2, #32]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000
 80002fc:	48000400 	.word	0x48000400

08000300 <I2C_GPIO_Init2>:

void I2C_GPIO_Init2(void) {
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	// Configure GPIOB for I2C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);
 8000304:	4b20      	ldr	r3, [pc, #128]	@ (8000388 <I2C_GPIO_Init2+0x88>)
 8000306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000308:	4a1f      	ldr	r2, [pc, #124]	@ (8000388 <I2C_GPIO_Init2+0x88>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_I2C2EN);
 8000310:	4b1d      	ldr	r3, [pc, #116]	@ (8000388 <I2C_GPIO_Init2+0x88>)
 8000312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000314:	4a1c      	ldr	r2, [pc, #112]	@ (8000388 <I2C_GPIO_Init2+0x88>)
 8000316:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800031a:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 10 and 11 to AF mode
	GPIOB->MODER &= ~(GPIO_MODER_MODE10 | GPIO_MODER_MODE11);
 800031c:	4b1b      	ldr	r3, [pc, #108]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a1a      	ldr	r2, [pc, #104]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 8000322:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000326:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (GPIO_MODER_MODE10_1 | GPIO_MODER_MODE11_1);
 8000328:	4b18      	ldr	r3, [pc, #96]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a17      	ldr	r2, [pc, #92]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 800032e:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000332:	6013      	str	r3, [r2, #0]

	// Set Pins 10 and 11 to open drain
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 8000334:	4b15      	ldr	r3, [pc, #84]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a14      	ldr	r2, [pc, #80]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 800033a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800033e:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (GPIO_OTYPER_OT10 | GPIO_OTYPER_OT11);
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a11      	ldr	r2, [pc, #68]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 8000346:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800034a:	6053      	str	r3, [r2, #4]

	// Set pints 10 and 11 to high speed
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED10 | GPIO_OSPEEDR_OSPEED11);
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 800034e:	689b      	ldr	r3, [r3, #8]
 8000350:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 8000352:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000356:	6093      	str	r3, [r2, #8]
	GPIOB->OTYPER |= (GPIO_OSPEEDR_OSPEED10_1 | GPIO_OSPEEDR_OSPEED11_1);
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	4a0b      	ldr	r2, [pc, #44]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 800035e:	f443 0320 	orr.w	r3, r3, #10485760	@ 0xa00000
 8000362:	6053      	str	r3, [r2, #4]

	// Set AFRL Table
	GPIOB->AFR[1] &= ~(GPIO_AFRH_AFSEL10 | GPIO_AFRH_AFSEL11);
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 8000366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000368:	4a08      	ldr	r2, [pc, #32]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 800036a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800036e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |=
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 8000372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000374:	4a05      	ldr	r2, [pc, #20]	@ (800038c <I2C_GPIO_Init2+0x8c>)
 8000376:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 800037a:	6253      	str	r3, [r2, #36]	@ 0x24
			((4 << GPIO_AFRH_AFSEL10_Pos) | 4 << GPIO_AFRH_AFSEL11_Pos);
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	48000400 	.word	0x48000400

08000390 <I2C_init1>:

void I2C_init1() {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
	I2C1->CR1 &= ~I2C_CR1_PE;
 8000394:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <I2C_init1+0x44>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a0e      	ldr	r2, [pc, #56]	@ (80003d4 <I2C_init1+0x44>)
 800039a:	f023 0301 	bic.w	r3, r3, #1
 800039e:	6013      	str	r3, [r2, #0]

	I2C1->CR1 &= ~I2C_CR1_ANFOFF;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <I2C_init1+0x44>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0b      	ldr	r2, [pc, #44]	@ (80003d4 <I2C_init1+0x44>)
 80003a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003aa:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_NOSTRETCH;
 80003ac:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <I2C_init1+0x44>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a08      	ldr	r2, [pc, #32]	@ (80003d4 <I2C_init1+0x44>)
 80003b2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80003b6:	6013      	str	r3, [r2, #0]

	I2C1->TIMINGR = 0X0000004;
 80003b8:	4b06      	ldr	r3, [pc, #24]	@ (80003d4 <I2C_init1+0x44>)
 80003ba:	2204      	movs	r2, #4
 80003bc:	611a      	str	r2, [r3, #16]

//	NVIC_SetPriority(I2C1_EV_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
//	NVIC_EnableIRQ(I2C1_EV_IRQn);

	I2C1->CR1 |= I2C_CR1_PE;
 80003be:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <I2C_init1+0x44>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <I2C_init1+0x44>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6013      	str	r3, [r2, #0]
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40005400 	.word	0x40005400

080003d8 <I2C_init2>:

void I2C_init2() {
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
	I2C2->CR1 &= ~I2C_CR1_PE;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <I2C_init2+0x44>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <I2C_init2+0x44>)
 80003e2:	f023 0301 	bic.w	r3, r3, #1
 80003e6:	6013      	str	r3, [r2, #0]

	I2C2->CR1 &= ~I2C_CR1_ANFOFF;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <I2C_init2+0x44>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0b      	ldr	r2, [pc, #44]	@ (800041c <I2C_init2+0x44>)
 80003ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003f2:	6013      	str	r3, [r2, #0]
	I2C2->CR1 &= ~I2C_CR1_NOSTRETCH;
 80003f4:	4b09      	ldr	r3, [pc, #36]	@ (800041c <I2C_init2+0x44>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a08      	ldr	r2, [pc, #32]	@ (800041c <I2C_init2+0x44>)
 80003fa:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80003fe:	6013      	str	r3, [r2, #0]

	I2C2->TIMINGR = 0X0000004;
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <I2C_init2+0x44>)
 8000402:	2204      	movs	r2, #4
 8000404:	611a      	str	r2, [r3, #16]

//	NVIC_SetPriority(I2C2_EV_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY);
//	NVIC_EnableIRQ(I2C2_EV_IRQn);

	I2C2->CR1 |= I2C_CR1_PE;
 8000406:	4b05      	ldr	r3, [pc, #20]	@ (800041c <I2C_init2+0x44>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a04      	ldr	r2, [pc, #16]	@ (800041c <I2C_init2+0x44>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6013      	str	r3, [r2, #0]
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	40005800 	.word	0x40005800

08000420 <N2C_Config1>:

/******************************* NUNCHUCK #1 ********************************/

void N2C_Config1() {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 800042a:	2301      	movs	r3, #1
 800042c:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000432:	2300      	movs	r3, #0
 8000434:	71bb      	strb	r3, [r7, #6]
 8000436:	e05e      	b.n	80004f6 <N2C_Config1+0xd6>
		/* Clear and then set AUTOEND bit to 1 */
		I2C1->CR2 &= ~(I2C_CR2_AUTOEND);
 8000438:	4b33      	ldr	r3, [pc, #204]	@ (8000508 <N2C_Config1+0xe8>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a32      	ldr	r2, [pc, #200]	@ (8000508 <N2C_Config1+0xe8>)
 800043e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000442:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (I2C_CR2_AUTOEND);
 8000444:	4b30      	ldr	r3, [pc, #192]	@ (8000508 <N2C_Config1+0xe8>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	4a2f      	ldr	r2, [pc, #188]	@ (8000508 <N2C_Config1+0xe8>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800044e:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000450:	4b2d      	ldr	r3, [pc, #180]	@ (8000508 <N2C_Config1+0xe8>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4a2c      	ldr	r2, [pc, #176]	@ (8000508 <N2C_Config1+0xe8>)
 8000456:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800045a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800045e:	6053      	str	r3, [r2, #4]
		I2C1->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000460:	4b29      	ldr	r3, [pc, #164]	@ (8000508 <N2C_Config1+0xe8>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	4a28      	ldr	r2, [pc, #160]	@ (8000508 <N2C_Config1+0xe8>)
 8000466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800046a:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 800046c:	4b26      	ldr	r3, [pc, #152]	@ (8000508 <N2C_Config1+0xe8>)
 800046e:	685b      	ldr	r3, [r3, #4]
 8000470:	4a25      	ldr	r2, [pc, #148]	@ (8000508 <N2C_Config1+0xe8>)
 8000472:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000476:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C1->CR2 |= (N2C_ADDR << 1);
 8000478:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <N2C_Config1+0xe8>)
 800047a:	685b      	ldr	r3, [r3, #4]
 800047c:	4a22      	ldr	r2, [pc, #136]	@ (8000508 <N2C_Config1+0xe8>)
 800047e:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000482:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C1->CR2 |= I2C_CR2_START;
 8000484:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <N2C_Config1+0xe8>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	4a1f      	ldr	r2, [pc, #124]	@ (8000508 <N2C_Config1+0xe8>)
 800048a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800048e:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000490:	bf00      	nop
 8000492:	4b1d      	ldr	r3, [pc, #116]	@ (8000508 <N2C_Config1+0xe8>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f003 0302 	and.w	r3, r3, #2
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0f9      	beq.n	8000492 <N2C_Config1+0x72>
			;

		/* Get Data */
		data = N2C_data(step);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 f9bf 	bl	8000824 <N2C_data>
 80004a6:	4603      	mov	r3, r0
 80004a8:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 80004aa:	4a17      	ldr	r2, [pc, #92]	@ (8000508 <N2C_Config1+0xe8>)
 80004ac:	797b      	ldrb	r3, [r7, #5]
 80004ae:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C1->ISR & I2C_ISR_TXIS))
 80004b0:	bf00      	nop
 80004b2:	4b15      	ldr	r3, [pc, #84]	@ (8000508 <N2C_Config1+0xe8>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0302 	and.w	r3, r3, #2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f9      	beq.n	80004b2 <N2C_Config1+0x92>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	3301      	adds	r3, #1
 80004c2:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 f9ac 	bl	8000824 <N2C_data>
 80004cc:	4603      	mov	r3, r0
 80004ce:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C1->TXDR = data;
 80004d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <N2C_Config1+0xe8>)
 80004d2:	797b      	ldrb	r3, [r7, #5]
 80004d4:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Delay for 1ms */
		vTaskDelay(pdMS_TO_TICKS(1));  // FreeRTOS delay function
 80004d6:	2001      	movs	r0, #1
 80004d8:	f003 fab0 	bl	8003a3c <vTaskDelay>

		/* Wait for STOPF */
		while (!(I2C1->ISR & I2C_ISR_STOPF))
 80004dc:	bf00      	nop
 80004de:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <N2C_Config1+0xe8>)
 80004e0:	699b      	ldr	r3, [r3, #24]
 80004e2:	f003 0320 	and.w	r3, r3, #32
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f9      	beq.n	80004de <N2C_Config1+0xbe>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	3301      	adds	r3, #1
 80004ee:	71fb      	strb	r3, [r7, #7]
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	3301      	adds	r3, #1
 80004f4:	71bb      	strb	r3, [r7, #6]
 80004f6:	79bb      	ldrb	r3, [r7, #6]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d99d      	bls.n	8000438 <N2C_Config1+0x18>
	}
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40005400 	.word	0x40005400

0800050c <N2C_Read1>:

void N2C_Read1(uint8_t *measurments) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8000514:	2305      	movs	r3, #5
 8000516:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////
	I2C1->CR2 = 0;
 800051c:	4b40      	ldr	r3, [pc, #256]	@ (8000620 <N2C_Read1+0x114>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
	/* Set AUTOEND bit to 1 */
//	I2C1->CR2 |= I2C_CR2_AUTOEND;

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000522:	4b3f      	ldr	r3, [pc, #252]	@ (8000620 <N2C_Read1+0x114>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	4a3e      	ldr	r2, [pc, #248]	@ (8000620 <N2C_Read1+0x114>)
 8000528:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800052c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000530:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C1->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 8000532:	4b3b      	ldr	r3, [pc, #236]	@ (8000620 <N2C_Read1+0x114>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	4a3a      	ldr	r2, [pc, #232]	@ (8000620 <N2C_Read1+0x114>)
 8000538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800053c:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C1->CR2 &= ~I2C_CR2_RD_WRN;
 800053e:	4b38      	ldr	r3, [pc, #224]	@ (8000620 <N2C_Read1+0x114>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	4a37      	ldr	r2, [pc, #220]	@ (8000620 <N2C_Read1+0x114>)
 8000544:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000548:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 800054a:	4b35      	ldr	r3, [pc, #212]	@ (8000620 <N2C_Read1+0x114>)
 800054c:	685b      	ldr	r3, [r3, #4]
 800054e:	4a34      	ldr	r2, [pc, #208]	@ (8000620 <N2C_Read1+0x114>)
 8000550:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000554:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 8000556:	4b32      	ldr	r3, [pc, #200]	@ (8000620 <N2C_Read1+0x114>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	4a31      	ldr	r2, [pc, #196]	@ (8000620 <N2C_Read1+0x114>)
 800055c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000560:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C1->ISR & I2C_ISR_TXIS))
 8000562:	bf00      	nop
 8000564:	4b2e      	ldr	r3, [pc, #184]	@ (8000620 <N2C_Read1+0x114>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0302 	and.w	r3, r3, #2
 800056c:	2b00      	cmp	r3, #0
 800056e:	d0f9      	beq.n	8000564 <N2C_Read1+0x58>
		;

	/* Get Data */
	data = N2C_data(step);
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f956 	bl	8000824 <N2C_data>
 8000578:	4603      	mov	r3, r0
 800057a:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C1->TXDR = data;
 800057c:	4a28      	ldr	r2, [pc, #160]	@ (8000620 <N2C_Read1+0x114>)
 800057e:	7b7b      	ldrb	r3, [r7, #13]
 8000580:	6293      	str	r3, [r2, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C1->ISR & I2C_ISR_STOPF))
 8000582:	bf00      	nop
 8000584:	4b26      	ldr	r3, [pc, #152]	@ (8000620 <N2C_Read1+0x114>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0320 	and.w	r3, r3, #32
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f9      	beq.n	8000584 <N2C_Read1+0x78>
	/* Delay for 1ms */
	// HAL_Delay(1);

	///// Read Measurements /////

	I2C1->CR2 &= ~I2C_CR2_AUTOEND;
 8000590:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <N2C_Read1+0x114>)
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	4a22      	ldr	r2, [pc, #136]	@ (8000620 <N2C_Read1+0x114>)
 8000596:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800059a:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C1 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C1->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800059c:	4b20      	ldr	r3, [pc, #128]	@ (8000620 <N2C_Read1+0x114>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	4a1f      	ldr	r2, [pc, #124]	@ (8000620 <N2C_Read1+0x114>)
 80005a2:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80005a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80005aa:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C1->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 80005ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000620 <N2C_Read1+0x114>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000620 <N2C_Read1+0x114>)
 80005b2:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 80005b6:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C1->CR2 |= I2C_CR2_RD_WRN;
 80005b8:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <N2C_Read1+0x114>)
 80005ba:	685b      	ldr	r3, [r3, #4]
 80005bc:	4a18      	ldr	r2, [pc, #96]	@ (8000620 <N2C_Read1+0x114>)
 80005be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005c2:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C1->CR2 |= (N2C_ADDR << 1);
 80005c4:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <N2C_Read1+0x114>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a15      	ldr	r2, [pc, #84]	@ (8000620 <N2C_Read1+0x114>)
 80005ca:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 80005ce:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C1->CR2 |= I2C_CR2_START;
 80005d0:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <N2C_Read1+0x114>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4a12      	ldr	r2, [pc, #72]	@ (8000620 <N2C_Read1+0x114>)
 80005d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005da:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 80005dc:	2300      	movs	r3, #0
 80005de:	73fb      	strb	r3, [r7, #15]
 80005e0:	e010      	b.n	8000604 <N2C_Read1+0xf8>
		/* Wait until byte is received */
		while (!(I2C1->ISR & I2C_ISR_RXNE))
 80005e2:	bf00      	nop
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <N2C_Read1+0x114>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f003 0304 	and.w	r3, r3, #4
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0f9      	beq.n	80005e4 <N2C_Read1+0xd8>
			;

		/* Receive byte */
		measurments[i] = I2C1->RXDR;
 80005f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <N2C_Read1+0x114>)
 80005f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	b2ca      	uxtb	r2, r1
 80005fc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	3301      	adds	r3, #1
 8000602:	73fb      	strb	r3, [r7, #15]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b05      	cmp	r3, #5
 8000608:	d9eb      	bls.n	80005e2 <N2C_Read1+0xd6>
	}

	I2C1->CR2 |= (I2C_CR2_STOP);
 800060a:	4b05      	ldr	r3, [pc, #20]	@ (8000620 <N2C_Read1+0x114>)
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	4a04      	ldr	r2, [pc, #16]	@ (8000620 <N2C_Read1+0x114>)
 8000610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000614:	6053      	str	r3, [r2, #4]

	// HAL_Delay(1);
}
 8000616:	bf00      	nop
 8000618:	3710      	adds	r7, #16
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40005400 	.word	0x40005400

08000624 <N2C_Config2>:

/******************************* NUNCHUCK #2 ********************************/

void N2C_Config2() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	717b      	strb	r3, [r7, #5]
	uint8_t step = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	71fb      	strb	r3, [r7, #7]
	uint8_t byteSender = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	71bb      	strb	r3, [r7, #6]

	for (byteSender = 0; byteSender <= 1; byteSender++) {
 8000636:	2300      	movs	r3, #0
 8000638:	71bb      	strb	r3, [r7, #6]
 800063a:	e05b      	b.n	80006f4 <N2C_Config2+0xd0>
		/* Clear and then set AUTOEND bit to 1 */
		I2C2->CR2 &= ~(I2C_CR2_AUTOEND);
 800063c:	4b31      	ldr	r3, [pc, #196]	@ (8000704 <N2C_Config2+0xe0>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a30      	ldr	r2, [pc, #192]	@ (8000704 <N2C_Config2+0xe0>)
 8000642:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000646:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (I2C_CR2_AUTOEND);
 8000648:	4b2e      	ldr	r3, [pc, #184]	@ (8000704 <N2C_Config2+0xe0>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a2d      	ldr	r2, [pc, #180]	@ (8000704 <N2C_Config2+0xe0>)
 800064e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000652:	6053      	str	r3, [r2, #4]

		/* NBYTES = 2 (Amount of Data Needed to Be Sent) */
		/* SADD = Slave Address for Nunchuck */
		I2C2->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 8000654:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <N2C_Config2+0xe0>)
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	4a2a      	ldr	r2, [pc, #168]	@ (8000704 <N2C_Config2+0xe0>)
 800065a:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 800065e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000662:	6053      	str	r3, [r2, #4]
		I2C2->CR2 |= (2 << I2C_CR2_NBYTES_Pos);
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <N2C_Config2+0xe0>)
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	4a26      	ldr	r2, [pc, #152]	@ (8000704 <N2C_Config2+0xe0>)
 800066a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066e:	6053      	str	r3, [r2, #4]

		/* Write Mode */
		I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 8000670:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <N2C_Config2+0xe0>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4a23      	ldr	r2, [pc, #140]	@ (8000704 <N2C_Config2+0xe0>)
 8000676:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800067a:	6053      	str	r3, [r2, #4]

		/* Send Slave Address (0x52) */
		I2C2->CR2 |= (N2C_ADDR << 1);
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <N2C_Config2+0xe0>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <N2C_Config2+0xe0>)
 8000682:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000686:	6053      	str	r3, [r2, #4]

		/* Set START bit to 1 */
		I2C2->CR2 |= I2C_CR2_START;
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <N2C_Config2+0xe0>)
 800068a:	685b      	ldr	r3, [r3, #4]
 800068c:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <N2C_Config2+0xe0>)
 800068e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000692:	6053      	str	r3, [r2, #4]

		/* Wait for ACK */
		while (!(I2C2->ISR & I2C_ISR_TXIS))
 8000694:	bf00      	nop
 8000696:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <N2C_Config2+0xe0>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0302 	and.w	r3, r3, #2
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f9      	beq.n	8000696 <N2C_Config2+0x72>
			;

		/* Get Data */
		data = N2C_data(step);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f8bd 	bl	8000824 <N2C_data>
 80006aa:	4603      	mov	r3, r0
 80006ac:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C2->TXDR = data;
 80006ae:	4a15      	ldr	r2, [pc, #84]	@ (8000704 <N2C_Config2+0xe0>)
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for ACK */
		while (!(I2C2->ISR & I2C_ISR_TXIS))
 80006b4:	bf00      	nop
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <N2C_Config2+0xe0>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0f9      	beq.n	80006b6 <N2C_Config2+0x92>
			;

		/* Increment step (To send 2nd Byte) */
		step++;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	3301      	adds	r3, #1
 80006c6:	71fb      	strb	r3, [r7, #7]

		/* Get Data */
		data = N2C_data(step);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f8aa 	bl	8000824 <N2C_data>
 80006d0:	4603      	mov	r3, r0
 80006d2:	717b      	strb	r3, [r7, #5]

		/* Send Data */
		I2C2->TXDR = data;
 80006d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000704 <N2C_Config2+0xe0>)
 80006d6:	797b      	ldrb	r3, [r7, #5]
 80006d8:	6293      	str	r3, [r2, #40]	@ 0x28

		/* Wait for STOPF */
		while (!(I2C2->ISR & I2C_ISR_STOPF))
 80006da:	bf00      	nop
 80006dc:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <N2C_Config2+0xe0>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0320 	and.w	r3, r3, #32
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0f9      	beq.n	80006dc <N2C_Config2+0xb8>
			;

		/* Increment step (To send 2nd data when byteSender is 0) */
		step++;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	3301      	adds	r3, #1
 80006ec:	71fb      	strb	r3, [r7, #7]
	for (byteSender = 0; byteSender <= 1; byteSender++) {
 80006ee:	79bb      	ldrb	r3, [r7, #6]
 80006f0:	3301      	adds	r3, #1
 80006f2:	71bb      	strb	r3, [r7, #6]
 80006f4:	79bb      	ldrb	r3, [r7, #6]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d9a0      	bls.n	800063c <N2C_Config2+0x18>

		/* Delay for 1ms */
		// HAL_Delay(1);
	}
}
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40005800 	.word	0x40005800

08000708 <N2C_Read2>:

void N2C_Read2(uint8_t *measurments) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	uint8_t step = 5;
 8000710:	2305      	movs	r3, #5
 8000712:	73bb      	strb	r3, [r7, #14]
	uint8_t data = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	737b      	strb	r3, [r7, #13]

	///// Write Reading Byte /////

	I2C2->CR2 = 0;
 8000718:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <N2C_Read2+0x118>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
	/* Set AUTOEND bit to 1 */
//	I2C2->CR2 |= I2C_CR2_AUTOEND;

	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C2->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800071e:	4b40      	ldr	r3, [pc, #256]	@ (8000820 <N2C_Read2+0x118>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	4a3f      	ldr	r2, [pc, #252]	@ (8000820 <N2C_Read2+0x118>)
 8000724:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8000728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800072c:	6053      	str	r3, [r2, #4]

	/* NBYTES = 1 */
	I2C2->CR2 |= (1 << I2C_CR2_NBYTES_Pos);
 800072e:	4b3c      	ldr	r3, [pc, #240]	@ (8000820 <N2C_Read2+0x118>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	4a3b      	ldr	r2, [pc, #236]	@ (8000820 <N2C_Read2+0x118>)
 8000734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000738:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to write */
	I2C2->CR2 &= ~I2C_CR2_RD_WRN;
 800073a:	4b39      	ldr	r3, [pc, #228]	@ (8000820 <N2C_Read2+0x118>)
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	4a38      	ldr	r2, [pc, #224]	@ (8000820 <N2C_Read2+0x118>)
 8000740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000744:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C2->CR2 |= (N2C_ADDR << 1);
 8000746:	4b36      	ldr	r3, [pc, #216]	@ (8000820 <N2C_Read2+0x118>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	4a35      	ldr	r2, [pc, #212]	@ (8000820 <N2C_Read2+0x118>)
 800074c:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 8000750:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C2->CR2 |= I2C_CR2_START;
 8000752:	4b33      	ldr	r3, [pc, #204]	@ (8000820 <N2C_Read2+0x118>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	4a32      	ldr	r2, [pc, #200]	@ (8000820 <N2C_Read2+0x118>)
 8000758:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800075c:	6053      	str	r3, [r2, #4]

	/* Wait for ACK */
	while (!(I2C2->ISR & I2C_ISR_TXIS))
 800075e:	bf00      	nop
 8000760:	4b2f      	ldr	r3, [pc, #188]	@ (8000820 <N2C_Read2+0x118>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	2b00      	cmp	r3, #0
 800076a:	d0f9      	beq.n	8000760 <N2C_Read2+0x58>
		;

	/* Get Data */
	data = N2C_data(step);
 800076c:	7bbb      	ldrb	r3, [r7, #14]
 800076e:	4618      	mov	r0, r3
 8000770:	f000 f858 	bl	8000824 <N2C_data>
 8000774:	4603      	mov	r3, r0
 8000776:	737b      	strb	r3, [r7, #13]

	/* Send Data */
	I2C2->TXDR |= data;
 8000778:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <N2C_Read2+0x118>)
 800077a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800077c:	7b7b      	ldrb	r3, [r7, #13]
 800077e:	4928      	ldr	r1, [pc, #160]	@ (8000820 <N2C_Read2+0x118>)
 8000780:	4313      	orrs	r3, r2
 8000782:	628b      	str	r3, [r1, #40]	@ 0x28

	/* Wait for STOPF */
	while (!(I2C2->ISR & I2C_ISR_STOPF))
 8000784:	bf00      	nop
 8000786:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <N2C_Read2+0x118>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 0320 	and.w	r3, r3, #32
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f9      	beq.n	8000786 <N2C_Read2+0x7e>
		;

	///// Read Measurements /////

	I2C2->CR2 &= ~I2C_CR2_AUTOEND;
 8000792:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <N2C_Read2+0x118>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	4a22      	ldr	r2, [pc, #136]	@ (8000820 <N2C_Read2+0x118>)
 8000798:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800079c:	6053      	str	r3, [r2, #4]
	/* Set AUTOEND bit to 1 */
	//I2C2 -> CR2 |= I2C_CR2_AUTOEND;
	/* NBYTES = (Amount of Data Needed to Be Sent) */
	/* SADD = Slave Address for Nunchuck */
	I2C2->CR2 &= ~((I2C_CR2_NBYTES_Msk) | I2C_CR2_SADD_Msk);
 800079e:	4b20      	ldr	r3, [pc, #128]	@ (8000820 <N2C_Read2+0x118>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000820 <N2C_Read2+0x118>)
 80007a4:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 80007a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80007ac:	6053      	str	r3, [r2, #4]

	/* NBYTES = 6 */
	I2C2->CR2 |= (6 << I2C_CR2_NBYTES_Pos);
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <N2C_Read2+0x118>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000820 <N2C_Read2+0x118>)
 80007b4:	f443 23c0 	orr.w	r3, r3, #393216	@ 0x60000
 80007b8:	6053      	str	r3, [r2, #4]

	/* Set RD_WRN bit to read */
	I2C2->CR2 |= I2C_CR2_RD_WRN;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <N2C_Read2+0x118>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4a18      	ldr	r2, [pc, #96]	@ (8000820 <N2C_Read2+0x118>)
 80007c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007c4:	6053      	str	r3, [r2, #4]

	/* Send Address */
	I2C2->CR2 |= (N2C_ADDR << 1);
 80007c6:	4b16      	ldr	r3, [pc, #88]	@ (8000820 <N2C_Read2+0x118>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <N2C_Read2+0x118>)
 80007cc:	f043 03a4 	orr.w	r3, r3, #164	@ 0xa4
 80007d0:	6053      	str	r3, [r2, #4]

	/* Set START bit to 1 */
	I2C2->CR2 |= I2C_CR2_START;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <N2C_Read2+0x118>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <N2C_Read2+0x118>)
 80007d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007dc:	6053      	str	r3, [r2, #4]

	for (uint8_t i = 0; i < 6; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	73fb      	strb	r3, [r7, #15]
 80007e2:	e010      	b.n	8000806 <N2C_Read2+0xfe>
		/* Wait until byte is received */
		while (!(I2C2->ISR & I2C_ISR_RXNE))
 80007e4:	bf00      	nop
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <N2C_Read2+0x118>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f9      	beq.n	80007e6 <N2C_Read2+0xde>
			;

		/* Receive byte */
		measurments[i] = I2C2->RXDR;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <N2C_Read2+0x118>)
 80007f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4413      	add	r3, r2
 80007fc:	b2ca      	uxtb	r2, r1
 80007fe:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 6; i++) {
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	3301      	adds	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	2b05      	cmp	r3, #5
 800080a:	d9eb      	bls.n	80007e4 <N2C_Read2+0xdc>
	}

	I2C2->CR2 |= (I2C_CR2_STOP);
 800080c:	4b04      	ldr	r3, [pc, #16]	@ (8000820 <N2C_Read2+0x118>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	4a03      	ldr	r2, [pc, #12]	@ (8000820 <N2C_Read2+0x118>)
 8000812:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000816:	6053      	str	r3, [r2, #4]
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40005800 	.word	0x40005800

08000824 <N2C_data>:

/* Returns the appropriate byte to be sent over I2C */
uint8_t N2C_data(uint8_t step) {
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;

	switch (step) {
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	3b01      	subs	r3, #1
 8000832:	2b04      	cmp	r3, #4
 8000834:	d818      	bhi.n	8000868 <N2C_data+0x44>
 8000836:	a201      	add	r2, pc, #4	@ (adr r2, 800083c <N2C_data+0x18>)
 8000838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083c:	08000851 	.word	0x08000851
 8000840:	08000857 	.word	0x08000857
 8000844:	0800085d 	.word	0x0800085d
 8000848:	08000863 	.word	0x08000863
 800084c:	08000863 	.word	0x08000863
	case 1:
		data = 0xF0;
 8000850:	23f0      	movs	r3, #240	@ 0xf0
 8000852:	73fb      	strb	r3, [r7, #15]
		break;
 8000854:	e008      	b.n	8000868 <N2C_data+0x44>
	case 2:
		data = 0x55;
 8000856:	2355      	movs	r3, #85	@ 0x55
 8000858:	73fb      	strb	r3, [r7, #15]
		break;
 800085a:	e005      	b.n	8000868 <N2C_data+0x44>
	case 3:
		data = 0xFB;
 800085c:	23fb      	movs	r3, #251	@ 0xfb
 800085e:	73fb      	strb	r3, [r7, #15]
		break;
 8000860:	e002      	b.n	8000868 <N2C_data+0x44>
	case 4:
	case 5:
		data = 0x00;
 8000862:	2300      	movs	r3, #0
 8000864:	73fb      	strb	r3, [r7, #15]
		break;
 8000866:	bf00      	nop
	}

	return data;
 8000868:	7bfb      	ldrb	r3, [r7, #15]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop

08000878 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af02      	add	r7, sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800087e:	f000 fcd4 	bl	800122a <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000882:	f000 fab7 	bl	8000df4 <SystemClock_Config>

	/* Set up RTOS */

	/* Create the tasks */
	retVal = xTaskCreate(Task1, "Set Up Program", configMINIMAL_STACK_SIZE * 2,
 8000886:	4b19      	ldr	r3, [pc, #100]	@ (80008ec <main+0x74>)
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	2328      	movs	r3, #40	@ 0x28
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2300      	movs	r3, #0
 8000890:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000894:	4916      	ldr	r1, [pc, #88]	@ (80008f0 <main+0x78>)
 8000896:	4817      	ldr	r0, [pc, #92]	@ (80008f4 <main+0x7c>)
 8000898:	f002 fefe 	bl	8003698 <xTaskCreate>
 800089c:	4603      	mov	r3, r0
 800089e:	4a16      	ldr	r2, [pc, #88]	@ (80008f8 <main+0x80>)
 80008a0:	6013      	str	r3, [r2, #0]
	NULL, osPriorityHigh, &task1Handler);
	if (retVal != pdPASS) {
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <main+0x80>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d001      	beq.n	80008ae <main+0x36>
		while (1)
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <main+0x32>
//	if (retVal != pdPASS) {
//		while (1)
//			;
//	} // check if task creation failed

	sendDataSema = xSemaphoreCreateBinary();
 80008ae:	2203      	movs	r2, #3
 80008b0:	2100      	movs	r1, #0
 80008b2:	2001      	movs	r0, #1
 80008b4:	f002 f8e7 	bl	8002a86 <xQueueGenericCreate>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a10      	ldr	r2, [pc, #64]	@ (80008fc <main+0x84>)
 80008bc:	6013      	str	r3, [r2, #0]
	if (sendDataSema == NULL) {
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <main+0x84>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d101      	bne.n	80008ca <main+0x52>
		while (1)
 80008c6:	bf00      	nop
 80008c8:	e7fd      	b.n	80008c6 <main+0x4e>
			;
	} // check if binary semaphore creation failed

	configMutex = xSemaphoreCreateMutex();
 80008ca:	2001      	movs	r0, #1
 80008cc:	f002 f953 	bl	8002b76 <xQueueCreateMutex>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <main+0x88>)
 80008d4:	6013      	str	r3, [r2, #0]
	if (configMutex == NULL) {
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <main+0x88>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <main+0x6a>
		while (1)
 80008de:	bf00      	nop
 80008e0:	e7fd      	b.n	80008de <main+0x66>
	}

	//createI2CSemaphores();

	/* Start scheduler */
	vTaskStartScheduler();
 80008e2:	f003 f8e1 	bl	8003aa8 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	while (1)
 80008e6:	bf00      	nop
 80008e8:	e7fd      	b.n	80008e6 <main+0x6e>
 80008ea:	bf00      	nop
 80008ec:	2000007c 	.word	0x2000007c
 80008f0:	0800606c 	.word	0x0800606c
 80008f4:	08000905 	.word	0x08000905
 80008f8:	20000190 	.word	0x20000190
 80008fc:	20000084 	.word	0x20000084
 8000900:	20000088 	.word	0x20000088

08000904 <Task1>:
}

/* Define Tasks --------------------------------------------------------------*/

/* Configure Device */
void Task1(void *argument) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af02      	add	r7, sp, #8
 800090a:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {

		// Take the mutex before configuring I2C
		if (xSemaphoreTake(configMutex, portMAX_DELAY) == pdTRUE) {
 800090c:	4b1b      	ldr	r3, [pc, #108]	@ (800097c <Task1+0x78>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	4618      	mov	r0, r3
 8000916:	f002 fbc9 	bl	80030ac <xQueueSemaphoreTake>
 800091a:	4603      	mov	r3, r0
 800091c:	2b01      	cmp	r3, #1
 800091e:	d114      	bne.n	800094a <Task1+0x46>
			// Configure Peripherals
			UART_Init();
 8000920:	f000 fbca 	bl	80010b8 <UART_Init>
			I2C_GPIO_Init1();
 8000924:	f7ff fca4 	bl	8000270 <I2C_GPIO_Init1>
			I2C_GPIO_Init2();
 8000928:	f7ff fcea 	bl	8000300 <I2C_GPIO_Init2>
			I2C_init1();
 800092c:	f7ff fd30 	bl	8000390 <I2C_init1>
			I2C_init2();
 8000930:	f7ff fd52 	bl	80003d8 <I2C_init2>
			N2C_Config1();
 8000934:	f7ff fd74 	bl	8000420 <N2C_Config1>
			N2C_Config2();
 8000938:	f7ff fe74 	bl	8000624 <N2C_Config2>

			// Release the mutex after transmission
			xSemaphoreGive(configMutex);
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <Task1+0x78>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	2300      	movs	r3, #0
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	f002 f92f 	bl	8002ba8 <xQueueGenericSend>
		}

		retVal = xTaskCreate(Task2, "Send Data", configMINIMAL_STACK_SIZE * 2,
 800094a:	4b0d      	ldr	r3, [pc, #52]	@ (8000980 <Task1+0x7c>)
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	2318      	movs	r3, #24
 8000950:	9300      	str	r3, [sp, #0]
 8000952:	2300      	movs	r3, #0
 8000954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000958:	490a      	ldr	r1, [pc, #40]	@ (8000984 <Task1+0x80>)
 800095a:	480b      	ldr	r0, [pc, #44]	@ (8000988 <Task1+0x84>)
 800095c:	f002 fe9c 	bl	8003698 <xTaskCreate>
 8000960:	4603      	mov	r3, r0
 8000962:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <Task1+0x88>)
 8000964:	6013      	str	r3, [r2, #0]
		NULL, osPriorityNormal, &task2Handler);
		if (retVal != pdPASS) {
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <Task1+0x88>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d001      	beq.n	8000972 <Task1+0x6e>
			while (1)
 800096e:	bf00      	nop
 8000970:	e7fd      	b.n	800096e <Task1+0x6a>
				;
		} // check if task creation failed


		// Task not needed for rest of program duration, so delete it
		vTaskDelete(NULL);
 8000972:	2000      	movs	r0, #0
 8000974:	f002 ffee 	bl	8003954 <vTaskDelete>
		if (xSemaphoreTake(configMutex, portMAX_DELAY) == pdTRUE) {
 8000978:	e7c8      	b.n	800090c <Task1+0x8>
 800097a:	bf00      	nop
 800097c:	20000088 	.word	0x20000088
 8000980:	20000080 	.word	0x20000080
 8000984:	0800607c 	.word	0x0800607c
 8000988:	08000991 	.word	0x08000991
 800098c:	20000190 	.word	0x20000190

08000990 <Task2>:
	}
}

/* Send Data */
void Task2(void *argument) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	// Infinite Loop
	for (;;) {
		// Get measurements for Nunchuck #2
		N2C_Read2(measurments2);
 8000998:	4807      	ldr	r0, [pc, #28]	@ (80009b8 <Task2+0x28>)
 800099a:	f7ff feb5 	bl	8000708 <N2C_Read2>

		// Get measurements for Nunchuck #1
		N2C_Read1(measurments1);
 800099e:	4807      	ldr	r0, [pc, #28]	@ (80009bc <Task2+0x2c>)
 80009a0:	f7ff fdb4 	bl	800050c <N2C_Read1>

		// Decode Raw Bytes Measurement into Global Variables
		split_data();
 80009a4:	f000 f80c 	bl	80009c0 <split_data>

		// Uploads data to serial port
		print_data();
 80009a8:	f000 f932 	bl	8000c10 <print_data>

		// Wait for 5ms
		vTaskDelay(5 / portTICK_PERIOD_MS);
 80009ac:	2005      	movs	r0, #5
 80009ae:	f003 f845 	bl	8003a3c <vTaskDelay>
		N2C_Read2(measurments2);
 80009b2:	bf00      	nop
 80009b4:	e7f0      	b.n	8000998 <Task2+0x8>
 80009b6:	bf00      	nop
 80009b8:	20000094 	.word	0x20000094
 80009bc:	2000008c 	.word	0x2000008c

080009c0 <split_data>:
	}
}

// Decode Raw Bytes Measurement into Global Variables
void split_data() {
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
// x and y axis from first 2 bytes
	stick_x1 = measurments1[0];
 80009c4:	4b82      	ldr	r3, [pc, #520]	@ (8000bd0 <split_data+0x210>)
 80009c6:	781a      	ldrb	r2, [r3, #0]
 80009c8:	4b82      	ldr	r3, [pc, #520]	@ (8000bd4 <split_data+0x214>)
 80009ca:	701a      	strb	r2, [r3, #0]
	stick_y1 = measurments1[1];
 80009cc:	4b80      	ldr	r3, [pc, #512]	@ (8000bd0 <split_data+0x210>)
 80009ce:	785a      	ldrb	r2, [r3, #1]
 80009d0:	4b81      	ldr	r3, [pc, #516]	@ (8000bd8 <split_data+0x218>)
 80009d2:	701a      	strb	r2, [r3, #0]

// x and y axis from first 2 bytes
	stick_x2 = measurments2[0];
 80009d4:	4b81      	ldr	r3, [pc, #516]	@ (8000bdc <split_data+0x21c>)
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	4b81      	ldr	r3, [pc, #516]	@ (8000be0 <split_data+0x220>)
 80009da:	701a      	strb	r2, [r3, #0]
	stick_y2 = measurments2[1];
 80009dc:	4b7f      	ldr	r3, [pc, #508]	@ (8000bdc <split_data+0x21c>)
 80009de:	785a      	ldrb	r2, [r3, #1]
 80009e0:	4b80      	ldr	r3, [pc, #512]	@ (8000be4 <split_data+0x224>)
 80009e2:	701a      	strb	r2, [r3, #0]

// Might want to Reset accelerometer values
	acc_x1 = 0;
 80009e4:	4b80      	ldr	r3, [pc, #512]	@ (8000be8 <split_data+0x228>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	801a      	strh	r2, [r3, #0]
	acc_y1 = 0;
 80009ea:	4b80      	ldr	r3, [pc, #512]	@ (8000bec <split_data+0x22c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	801a      	strh	r2, [r3, #0]
	acc_z1 = 0;
 80009f0:	4b7f      	ldr	r3, [pc, #508]	@ (8000bf0 <split_data+0x230>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	801a      	strh	r2, [r3, #0]

// Might want to Reset accelerometer values
	acc_x2 = 0;
 80009f6:	4b7f      	ldr	r3, [pc, #508]	@ (8000bf4 <split_data+0x234>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	801a      	strh	r2, [r3, #0]
	acc_y2 = 0;
 80009fc:	4b7e      	ldr	r3, [pc, #504]	@ (8000bf8 <split_data+0x238>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	801a      	strh	r2, [r3, #0]
	acc_z2 = 0;
 8000a02:	4b7e      	ldr	r3, [pc, #504]	@ (8000bfc <split_data+0x23c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	801a      	strh	r2, [r3, #0]

// higher 8 bits of accelerometer from next 3 bytes
	acc_x1 |= (measurments1[2] << 2);
 8000a08:	4b71      	ldr	r3, [pc, #452]	@ (8000bd0 <split_data+0x210>)
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	b21a      	sxth	r2, r3
 8000a10:	4b75      	ldr	r3, [pc, #468]	@ (8000be8 <split_data+0x228>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	4b72      	ldr	r3, [pc, #456]	@ (8000be8 <split_data+0x228>)
 8000a20:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (measurments1[3] << 2);
 8000a22:	4b6b      	ldr	r3, [pc, #428]	@ (8000bd0 <split_data+0x210>)
 8000a24:	78db      	ldrb	r3, [r3, #3]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	b21a      	sxth	r2, r3
 8000a2a:	4b70      	ldr	r3, [pc, #448]	@ (8000bec <split_data+0x22c>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	4313      	orrs	r3, r2
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b6c      	ldr	r3, [pc, #432]	@ (8000bec <split_data+0x22c>)
 8000a3a:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (measurments1[4] << 2);
 8000a3c:	4b64      	ldr	r3, [pc, #400]	@ (8000bd0 <split_data+0x210>)
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	4b6a      	ldr	r3, [pc, #424]	@ (8000bf0 <split_data+0x230>)
 8000a46:	881b      	ldrh	r3, [r3, #0]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	b21b      	sxth	r3, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	4b67      	ldr	r3, [pc, #412]	@ (8000bf0 <split_data+0x230>)
 8000a54:	801a      	strh	r2, [r3, #0]

// higher 8 bits of accelerometer from next 3 bytes
	acc_x2 |= (measurments2[2] << 2);
 8000a56:	4b61      	ldr	r3, [pc, #388]	@ (8000bdc <split_data+0x21c>)
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	4b65      	ldr	r3, [pc, #404]	@ (8000bf4 <split_data+0x234>)
 8000a60:	881b      	ldrh	r3, [r3, #0]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	b21b      	sxth	r3, r3
 8000a66:	4313      	orrs	r3, r2
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b61      	ldr	r3, [pc, #388]	@ (8000bf4 <split_data+0x234>)
 8000a6e:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (measurments2[3] << 2);
 8000a70:	4b5a      	ldr	r3, [pc, #360]	@ (8000bdc <split_data+0x21c>)
 8000a72:	78db      	ldrb	r3, [r3, #3]
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	b21a      	sxth	r2, r3
 8000a78:	4b5f      	ldr	r3, [pc, #380]	@ (8000bf8 <split_data+0x238>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	4b5c      	ldr	r3, [pc, #368]	@ (8000bf8 <split_data+0x238>)
 8000a88:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (measurments2[4] << 2);
 8000a8a:	4b54      	ldr	r3, [pc, #336]	@ (8000bdc <split_data+0x21c>)
 8000a8c:	791b      	ldrb	r3, [r3, #4]
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	4b5a      	ldr	r3, [pc, #360]	@ (8000bfc <split_data+0x23c>)
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4b56      	ldr	r3, [pc, #344]	@ (8000bfc <split_data+0x23c>)
 8000aa2:	801a      	strh	r2, [r3, #0]

// lower 2 bits from last byte
	acc_x1 |= (((1 << 2) - 1) & (measurments1[5] >> 3));
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd0 <split_data+0x210>)
 8000aa6:	795b      	ldrb	r3, [r3, #5]
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	b21a      	sxth	r2, r3
 8000ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8000be8 <split_data+0x228>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b21b      	sxth	r3, r3
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	4b49      	ldr	r3, [pc, #292]	@ (8000be8 <split_data+0x228>)
 8000ac4:	801a      	strh	r2, [r3, #0]
	acc_y1 |= (((1 << 2) - 1) & (measurments1[5] >> 5));
 8000ac6:	4b42      	ldr	r3, [pc, #264]	@ (8000bd0 <split_data+0x210>)
 8000ac8:	795b      	ldrb	r3, [r3, #5]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	4b45      	ldr	r3, [pc, #276]	@ (8000bec <split_data+0x22c>)
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b41      	ldr	r3, [pc, #260]	@ (8000bec <split_data+0x22c>)
 8000ae6:	801a      	strh	r2, [r3, #0]
	acc_z1 |= (((1 << 2) - 1) & (measurments1[5] >> 7));
 8000ae8:	4b39      	ldr	r3, [pc, #228]	@ (8000bd0 <split_data+0x210>)
 8000aea:	795b      	ldrb	r3, [r3, #5]
 8000aec:	09db      	lsrs	r3, r3, #7
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bf0 <split_data+0x230>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf0 <split_data+0x230>)
 8000afe:	801a      	strh	r2, [r3, #0]

// lower 2 bits from last byte
	acc_x2 |= (((1 << 2) - 1) & (measurments2[5] >> 3));
 8000b00:	4b36      	ldr	r3, [pc, #216]	@ (8000bdc <split_data+0x21c>)
 8000b02:	795b      	ldrb	r3, [r3, #5]
 8000b04:	08db      	lsrs	r3, r3, #3
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	4b38      	ldr	r3, [pc, #224]	@ (8000bf4 <split_data+0x234>)
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	b21b      	sxth	r3, r3
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	4b35      	ldr	r3, [pc, #212]	@ (8000bf4 <split_data+0x234>)
 8000b20:	801a      	strh	r2, [r3, #0]
	acc_y2 |= (((1 << 2) - 1) & (measurments2[5] >> 5));
 8000b22:	4b2e      	ldr	r3, [pc, #184]	@ (8000bdc <split_data+0x21c>)
 8000b24:	795b      	ldrb	r3, [r3, #5]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	b21b      	sxth	r3, r3
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <split_data+0x238>)
 8000b34:	881b      	ldrh	r3, [r3, #0]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf8 <split_data+0x238>)
 8000b42:	801a      	strh	r2, [r3, #0]
	acc_z2 |= (((1 << 2) - 1) & (measurments2[5] >> 7));
 8000b44:	4b25      	ldr	r3, [pc, #148]	@ (8000bdc <split_data+0x21c>)
 8000b46:	795b      	ldrb	r3, [r3, #5]
 8000b48:	09db      	lsrs	r3, r3, #7
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <split_data+0x23c>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4b28      	ldr	r3, [pc, #160]	@ (8000bfc <split_data+0x23c>)
 8000b5a:	801a      	strh	r2, [r3, #0]

// Buttons are last 2 bits of last byte
	button_c1 = (1 & ~(measurments1[5] >> 1));
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <split_data+0x210>)
 8000b5e:	795b      	ldrb	r3, [r3, #5]
 8000b60:	085b      	lsrs	r3, r3, #1
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <split_data+0x240>)
 8000b76:	701a      	strb	r2, [r3, #0]
	button_z1 = (1 & ~(measurments1[5] >> 0));
 8000b78:	4b15      	ldr	r3, [pc, #84]	@ (8000bd0 <split_data+0x210>)
 8000b7a:	795b      	ldrb	r3, [r3, #5]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bf0c      	ite	eq
 8000b84:	2301      	moveq	r3, #1
 8000b86:	2300      	movne	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <split_data+0x244>)
 8000b8e:	701a      	strb	r2, [r3, #0]

// Buttons are last 2 bits of last byte
	button_c2 = (1 & ~(measurments2[5] >> 1));
 8000b90:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <split_data+0x21c>)
 8000b92:	795b      	ldrb	r3, [r3, #5]
 8000b94:	085b      	lsrs	r3, r3, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	bf0c      	ite	eq
 8000ba0:	2301      	moveq	r3, #1
 8000ba2:	2300      	movne	r3, #0
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <split_data+0x248>)
 8000baa:	701a      	strb	r2, [r3, #0]
	button_z2 = (1 & ~(measurments2[5] >> 0));
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <split_data+0x21c>)
 8000bae:	795b      	ldrb	r3, [r3, #5]
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf0c      	ite	eq
 8000bb8:	2301      	moveq	r3, #1
 8000bba:	2300      	movne	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <split_data+0x24c>)
 8000bc2:	701a      	strb	r2, [r3, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000008c 	.word	0x2000008c
 8000bd4:	2000009a 	.word	0x2000009a
 8000bd8:	2000009b 	.word	0x2000009b
 8000bdc:	20000094 	.word	0x20000094
 8000be0:	200000a4 	.word	0x200000a4
 8000be4:	200000a5 	.word	0x200000a5
 8000be8:	2000009c 	.word	0x2000009c
 8000bec:	2000009e 	.word	0x2000009e
 8000bf0:	200000a0 	.word	0x200000a0
 8000bf4:	200000a6 	.word	0x200000a6
 8000bf8:	200000a8 	.word	0x200000a8
 8000bfc:	200000aa 	.word	0x200000aa
 8000c00:	200000a2 	.word	0x200000a2
 8000c04:	200000a3 	.word	0x200000a3
 8000c08:	200000ac 	.word	0x200000ac
 8000c0c:	200000ad 	.word	0x200000ad

08000c10 <print_data>:

// Uploads data to serial port
void print_data() {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
// Convert Data to Strings
	sprintf(sx_str1, "StickX1:%i", stick_x1);
 8000c14:	4b4d      	ldr	r3, [pc, #308]	@ (8000d4c <print_data+0x13c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	494c      	ldr	r1, [pc, #304]	@ (8000d50 <print_data+0x140>)
 8000c1e:	484d      	ldr	r0, [pc, #308]	@ (8000d54 <print_data+0x144>)
 8000c20:	f004 fd22 	bl	8005668 <siprintf>
	sprintf(sy_str1, "StickY1:%i", stick_y1);
 8000c24:	4b4c      	ldr	r3, [pc, #304]	@ (8000d58 <print_data+0x148>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	494b      	ldr	r1, [pc, #300]	@ (8000d5c <print_data+0x14c>)
 8000c2e:	484c      	ldr	r0, [pc, #304]	@ (8000d60 <print_data+0x150>)
 8000c30:	f004 fd1a 	bl	8005668 <siprintf>

	sprintf(ax_str1, "AccX1:%i", acc_x1);
 8000c34:	4b4b      	ldr	r3, [pc, #300]	@ (8000d64 <print_data+0x154>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	494a      	ldr	r1, [pc, #296]	@ (8000d68 <print_data+0x158>)
 8000c3e:	484b      	ldr	r0, [pc, #300]	@ (8000d6c <print_data+0x15c>)
 8000c40:	f004 fd12 	bl	8005668 <siprintf>
	sprintf(ay_str1, "AccY1:%i", acc_y1);
 8000c44:	4b4a      	ldr	r3, [pc, #296]	@ (8000d70 <print_data+0x160>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4949      	ldr	r1, [pc, #292]	@ (8000d74 <print_data+0x164>)
 8000c4e:	484a      	ldr	r0, [pc, #296]	@ (8000d78 <print_data+0x168>)
 8000c50:	f004 fd0a 	bl	8005668 <siprintf>
	sprintf(az_str1, "AccZ1:%i", acc_z1);
 8000c54:	4b49      	ldr	r3, [pc, #292]	@ (8000d7c <print_data+0x16c>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	4948      	ldr	r1, [pc, #288]	@ (8000d80 <print_data+0x170>)
 8000c5e:	4849      	ldr	r0, [pc, #292]	@ (8000d84 <print_data+0x174>)
 8000c60:	f004 fd02 	bl	8005668 <siprintf>

	sprintf(bc_str1, "ButtonC1:%i", button_c1);
 8000c64:	4b48      	ldr	r3, [pc, #288]	@ (8000d88 <print_data+0x178>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4947      	ldr	r1, [pc, #284]	@ (8000d8c <print_data+0x17c>)
 8000c6e:	4848      	ldr	r0, [pc, #288]	@ (8000d90 <print_data+0x180>)
 8000c70:	f004 fcfa 	bl	8005668 <siprintf>
	sprintf(bz_str1, "ButtonZ1:%i", button_z1);
 8000c74:	4b47      	ldr	r3, [pc, #284]	@ (8000d94 <print_data+0x184>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4946      	ldr	r1, [pc, #280]	@ (8000d98 <print_data+0x188>)
 8000c7e:	4847      	ldr	r0, [pc, #284]	@ (8000d9c <print_data+0x18c>)
 8000c80:	f004 fcf2 	bl	8005668 <siprintf>

// Convert Data to Strings
	sprintf(sx_str2, "StickX2:%i", stick_x2);
 8000c84:	4b46      	ldr	r3, [pc, #280]	@ (8000da0 <print_data+0x190>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4945      	ldr	r1, [pc, #276]	@ (8000da4 <print_data+0x194>)
 8000c8e:	4846      	ldr	r0, [pc, #280]	@ (8000da8 <print_data+0x198>)
 8000c90:	f004 fcea 	bl	8005668 <siprintf>
	sprintf(sy_str2, "StickY2:%i", stick_y2);
 8000c94:	4b45      	ldr	r3, [pc, #276]	@ (8000dac <print_data+0x19c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4944      	ldr	r1, [pc, #272]	@ (8000db0 <print_data+0x1a0>)
 8000c9e:	4845      	ldr	r0, [pc, #276]	@ (8000db4 <print_data+0x1a4>)
 8000ca0:	f004 fce2 	bl	8005668 <siprintf>

	sprintf(ax_str2, "AccX2:%i", acc_x2);
 8000ca4:	4b44      	ldr	r3, [pc, #272]	@ (8000db8 <print_data+0x1a8>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	461a      	mov	r2, r3
 8000cac:	4943      	ldr	r1, [pc, #268]	@ (8000dbc <print_data+0x1ac>)
 8000cae:	4844      	ldr	r0, [pc, #272]	@ (8000dc0 <print_data+0x1b0>)
 8000cb0:	f004 fcda 	bl	8005668 <siprintf>
	sprintf(ay_str2, "AccY2:%i", acc_y2);
 8000cb4:	4b43      	ldr	r3, [pc, #268]	@ (8000dc4 <print_data+0x1b4>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4942      	ldr	r1, [pc, #264]	@ (8000dc8 <print_data+0x1b8>)
 8000cbe:	4843      	ldr	r0, [pc, #268]	@ (8000dcc <print_data+0x1bc>)
 8000cc0:	f004 fcd2 	bl	8005668 <siprintf>
	sprintf(az_str2, "AccZ2:%i", acc_z2);
 8000cc4:	4b42      	ldr	r3, [pc, #264]	@ (8000dd0 <print_data+0x1c0>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	461a      	mov	r2, r3
 8000ccc:	4941      	ldr	r1, [pc, #260]	@ (8000dd4 <print_data+0x1c4>)
 8000cce:	4842      	ldr	r0, [pc, #264]	@ (8000dd8 <print_data+0x1c8>)
 8000cd0:	f004 fcca 	bl	8005668 <siprintf>

	sprintf(bc_str2, "ButtonC2:%i", button_c2);
 8000cd4:	4b41      	ldr	r3, [pc, #260]	@ (8000ddc <print_data+0x1cc>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4940      	ldr	r1, [pc, #256]	@ (8000de0 <print_data+0x1d0>)
 8000cde:	4841      	ldr	r0, [pc, #260]	@ (8000de4 <print_data+0x1d4>)
 8000ce0:	f004 fcc2 	bl	8005668 <siprintf>
	sprintf(bz_str2, "ButtonZ2:%i", button_z2);
 8000ce4:	4b40      	ldr	r3, [pc, #256]	@ (8000de8 <print_data+0x1d8>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	461a      	mov	r2, r3
 8000cec:	493f      	ldr	r1, [pc, #252]	@ (8000dec <print_data+0x1dc>)
 8000cee:	4840      	ldr	r0, [pc, #256]	@ (8000df0 <print_data+0x1e0>)
 8000cf0:	f004 fcba 	bl	8005668 <siprintf>

// Print strings to terminal
	UART_PrintLn(sx_str1);
 8000cf4:	4817      	ldr	r0, [pc, #92]	@ (8000d54 <print_data+0x144>)
 8000cf6:	f000 fa47 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(sy_str1);
 8000cfa:	4819      	ldr	r0, [pc, #100]	@ (8000d60 <print_data+0x150>)
 8000cfc:	f000 fa44 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(ax_str1);
 8000d00:	481a      	ldr	r0, [pc, #104]	@ (8000d6c <print_data+0x15c>)
 8000d02:	f000 fa41 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(ay_str1);
 8000d06:	481c      	ldr	r0, [pc, #112]	@ (8000d78 <print_data+0x168>)
 8000d08:	f000 fa3e 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(az_str1);
 8000d0c:	481d      	ldr	r0, [pc, #116]	@ (8000d84 <print_data+0x174>)
 8000d0e:	f000 fa3b 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(bc_str1);
 8000d12:	481f      	ldr	r0, [pc, #124]	@ (8000d90 <print_data+0x180>)
 8000d14:	f000 fa38 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(bz_str1);
 8000d18:	4820      	ldr	r0, [pc, #128]	@ (8000d9c <print_data+0x18c>)
 8000d1a:	f000 fa35 	bl	8001188 <UART_PrintLn>

// Print strings to terminal
	UART_PrintLn(sx_str2);
 8000d1e:	4822      	ldr	r0, [pc, #136]	@ (8000da8 <print_data+0x198>)
 8000d20:	f000 fa32 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(sy_str2);
 8000d24:	4823      	ldr	r0, [pc, #140]	@ (8000db4 <print_data+0x1a4>)
 8000d26:	f000 fa2f 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(ax_str2);
 8000d2a:	4825      	ldr	r0, [pc, #148]	@ (8000dc0 <print_data+0x1b0>)
 8000d2c:	f000 fa2c 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(ay_str2);
 8000d30:	4826      	ldr	r0, [pc, #152]	@ (8000dcc <print_data+0x1bc>)
 8000d32:	f000 fa29 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(az_str2);
 8000d36:	4828      	ldr	r0, [pc, #160]	@ (8000dd8 <print_data+0x1c8>)
 8000d38:	f000 fa26 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(bc_str2);
 8000d3c:	4829      	ldr	r0, [pc, #164]	@ (8000de4 <print_data+0x1d4>)
 8000d3e:	f000 fa23 	bl	8001188 <UART_PrintLn>
	UART_PrintLn(bz_str2);
 8000d42:	482b      	ldr	r0, [pc, #172]	@ (8000df0 <print_data+0x1e0>)
 8000d44:	f000 fa20 	bl	8001188 <UART_PrintLn>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000009a 	.word	0x2000009a
 8000d50:	08006088 	.word	0x08006088
 8000d54:	200000b0 	.word	0x200000b0
 8000d58:	2000009b 	.word	0x2000009b
 8000d5c:	08006094 	.word	0x08006094
 8000d60:	200000c0 	.word	0x200000c0
 8000d64:	2000009c 	.word	0x2000009c
 8000d68:	080060a0 	.word	0x080060a0
 8000d6c:	200000d0 	.word	0x200000d0
 8000d70:	2000009e 	.word	0x2000009e
 8000d74:	080060ac 	.word	0x080060ac
 8000d78:	200000e0 	.word	0x200000e0
 8000d7c:	200000a0 	.word	0x200000a0
 8000d80:	080060b8 	.word	0x080060b8
 8000d84:	200000f0 	.word	0x200000f0
 8000d88:	200000a2 	.word	0x200000a2
 8000d8c:	080060c4 	.word	0x080060c4
 8000d90:	20000100 	.word	0x20000100
 8000d94:	200000a3 	.word	0x200000a3
 8000d98:	080060d0 	.word	0x080060d0
 8000d9c:	20000110 	.word	0x20000110
 8000da0:	200000a4 	.word	0x200000a4
 8000da4:	080060dc 	.word	0x080060dc
 8000da8:	20000120 	.word	0x20000120
 8000dac:	200000a5 	.word	0x200000a5
 8000db0:	080060e8 	.word	0x080060e8
 8000db4:	20000130 	.word	0x20000130
 8000db8:	200000a6 	.word	0x200000a6
 8000dbc:	080060f4 	.word	0x080060f4
 8000dc0:	20000140 	.word	0x20000140
 8000dc4:	200000a8 	.word	0x200000a8
 8000dc8:	08006100 	.word	0x08006100
 8000dcc:	20000150 	.word	0x20000150
 8000dd0:	200000aa 	.word	0x200000aa
 8000dd4:	0800610c 	.word	0x0800610c
 8000dd8:	20000160 	.word	0x20000160
 8000ddc:	200000ac 	.word	0x200000ac
 8000de0:	08006118 	.word	0x08006118
 8000de4:	20000170 	.word	0x20000170
 8000de8:	200000ad 	.word	0x200000ad
 8000dec:	08006124 	.word	0x08006124
 8000df0:	20000180 	.word	0x20000180

08000df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b096      	sub	sp, #88	@ 0x58
 8000df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	2244      	movs	r2, #68	@ 0x44
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f004 fc50 	bl	80056a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e08:	463b      	mov	r3, r7
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e1a:	f000 fb2f 	bl	800147c <HAL_PWREx_ControlVoltageScaling>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e24:	f000 f83e 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e28:	2310      	movs	r3, #16
 8000e2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e34:	2360      	movs	r3, #96	@ 0x60
 8000e36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fb71 	bl	8001528 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000e4c:	f000 f82a 	bl	8000ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e50:	230f      	movs	r3, #15
 8000e52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 ff39 	bl	8001ce0 <HAL_RCC_ClockConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000e74:	f000 f816 	bl	8000ea4 <Error_Handler>
  }
}
 8000e78:	bf00      	nop
 8000e7a:	3758      	adds	r7, #88	@ 0x58
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d101      	bne.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e92:	f000 f9e3 	bl	800125c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40014800 	.word	0x40014800

08000ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea8:	b672      	cpsid	i
}
 8000eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <Error_Handler+0x8>

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <HAL_MspInit+0x4c>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eba:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_MspInit+0x4c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_MspInit+0x4c>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	210f      	movs	r1, #15
 8000eea:	f06f 0001 	mvn.w	r0, #1
 8000eee:	f000 fa8d 	bl	800140c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	@ 0x30
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc8 <HAL_InitTick+0xc8>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f12:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc8 <HAL_InitTick+0xc8>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <HAL_InitTick+0xc8>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f26:	f107 020c 	add.w	r2, r7, #12
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f001 f883 	bl	800203c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f36:	f001 f86b 	bl	8002010 <HAL_RCC_GetPCLK2Freq>
 8000f3a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3e:	4a23      	ldr	r2, [pc, #140]	@ (8000fcc <HAL_InitTick+0xcc>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	0c9b      	lsrs	r3, r3, #18
 8000f46:	3b01      	subs	r3, #1
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f4c:	4a21      	ldr	r2, [pc, #132]	@ (8000fd4 <HAL_InitTick+0xd4>)
 8000f4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f56:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000f58:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8000f70:	4817      	ldr	r0, [pc, #92]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f72:	f001 f8f5 	bl	8002160 <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d11b      	bne.n	8000fbc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000f84:	4812      	ldr	r0, [pc, #72]	@ (8000fd0 <HAL_InitTick+0xd0>)
 8000f86:	f001 f94d 	bl	8002224 <HAL_TIM_Base_Start_IT>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d111      	bne.n	8000fbc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000f98:	201a      	movs	r0, #26
 8000f9a:	f000 fa53 	bl	8001444 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d808      	bhi.n	8000fb6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	201a      	movs	r0, #26
 8000faa:	f000 fa2f 	bl	800140c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fae:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd8 <HAL_InitTick+0xd8>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	e002      	b.n	8000fbc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3730      	adds	r7, #48	@ 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	431bde83 	.word	0x431bde83
 8000fd0:	20000194 	.word	0x20000194
 8000fd4:	40014800 	.word	0x40014800
 8000fd8:	20000004 	.word	0x20000004

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <UsageFault_Handler+0x4>

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001018:	4802      	ldr	r0, [pc, #8]	@ (8001024 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800101a:	f001 f973 	bl	8002304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000194 	.word	0x20000194

08001028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001030:	4a14      	ldr	r2, [pc, #80]	@ (8001084 <_sbrk+0x5c>)
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <_sbrk+0x60>)
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d102      	bne.n	800104a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <_sbrk+0x64>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <_sbrk+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <_sbrk+0x64>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	429a      	cmp	r2, r3
 8001056:	d207      	bcs.n	8001068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001058:	f004 fb84 	bl	8005764 <__errno>
 800105c:	4603      	mov	r3, r0
 800105e:	220c      	movs	r2, #12
 8001060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	e009      	b.n	800107c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001068:	4b08      	ldr	r3, [pc, #32]	@ (800108c <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	4a05      	ldr	r2, [pc, #20]	@ (800108c <_sbrk+0x64>)
 8001078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107a:	68fb      	ldr	r3, [r7, #12]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20018000 	.word	0x20018000
 8001088:	00000f00 	.word	0x00000f00
 800108c:	200001e0 	.word	0x200001e0
 8001090:	20001cd0 	.word	0x20001cd0

08001094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <SystemInit+0x20>)
 800109a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109e:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <SystemInit+0x20>)
 80010a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <UART_Init>:
 */

#include "main.h"
#include "uart.h"

void UART_Init(void) {
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	// Configure GPIOA for USART2
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80010bc:	4b23      	ldr	r3, [pc, #140]	@ (800114c <UART_Init+0x94>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a22      	ldr	r2, [pc, #136]	@ (800114c <UART_Init+0x94>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN);
 80010c8:	4b20      	ldr	r3, [pc, #128]	@ (800114c <UART_Init+0x94>)
 80010ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010cc:	4a1f      	ldr	r2, [pc, #124]	@ (800114c <UART_Init+0x94>)
 80010ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d2:	6593      	str	r3, [r2, #88]	@ 0x58

	// Set Pins 2 and 3 to AF mode
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 80010d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80010de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80010e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);
 80010e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80010ee:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80010f2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 80010f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80010fe:	f423 43ee 	bic.w	r3, r3, #30464	@ 0x7700
 8001102:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos) | 7 << GPIO_AFRL_AFSEL3_Pos);
 8001104:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800110e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001112:	6213      	str	r3, [r2, #32]
	 * TE		1
	 * RE		1
	 * USEM		0
	 * UE		1
	 */
	USART2->CR1 |= (0b000100000);
 8001114:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <UART_Init+0x98>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <UART_Init+0x98>)
 800111a:	f043 0320 	orr.w	r3, r3, #32
 800111e:	6013      	str	r3, [r2, #0]

	// Configure BR

	USART2->BRR = (35);
 8001120:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <UART_Init+0x98>)
 8001122:	2223      	movs	r2, #35	@ 0x23
 8001124:	60da      	str	r2, [r3, #12]

	// Enable  bits
	USART2->CR1 |= (0b1101);
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <UART_Init+0x98>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <UART_Init+0x98>)
 800112c:	f043 030d 	orr.w	r3, r3, #13
 8001130:	6013      	str	r3, [r2, #0]

	// Enable interupts
	NVIC->ISER[1] |= (1 << (USART2_IRQn & 0X1F));
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <UART_Init+0x9c>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a07      	ldr	r2, [pc, #28]	@ (8001154 <UART_Init+0x9c>)
 8001138:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800113c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 800113e:	b662      	cpsie	i
}
 8001140:	bf00      	nop
	__enable_irq();

}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000
 8001150:	40004400 	.word	0x40004400
 8001154:	e000e100 	.word	0xe000e100

08001158 <UART_Print_Char>:

// Prints a character to the UART serial connection
void UART_Print_Char(char character) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	while (!(USART2->ISR & 1 << 7)) {
 8001162:	bf00      	nop
 8001164:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <UART_Print_Char+0x2c>)
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f9      	beq.n	8001164 <UART_Print_Char+0xc>
	};
	USART2->TDR = character;
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <UART_Print_Char+0x2c>)
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	b292      	uxth	r2, r2
 8001176:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	40004400 	.word	0x40004400

08001188 <UART_PrintLn>:

// Prints a character to the UART serial connection and appends a NEWLINE char
void UART_PrintLn(char *output) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 8001194:	e009      	b.n	80011aa <UART_PrintLn+0x22>
		UART_Print_Char(output[i]);
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ffda 	bl	8001158 <UART_Print_Char>
		i++;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	3301      	adds	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
	while (output[i] != '\0') {
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1ef      	bne.n	8001196 <UART_PrintLn+0xe>
	}
	// Finish with new line and return cairage chars
	while (!(USART2->ISR & 1 << 7)) {
 80011b6:	bf00      	nop
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <UART_PrintLn+0x4c>)
 80011ba:	69db      	ldr	r3, [r3, #28]
 80011bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f9      	beq.n	80011b8 <UART_PrintLn+0x30>
	};
	USART2->TDR = '\n';
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <UART_PrintLn+0x4c>)
 80011c6:	220a      	movs	r2, #10
 80011c8:	851a      	strh	r2, [r3, #40]	@ 0x28
	//while(!(USART2 -> ISR & 1 << 7)){};
	//USART2 -> TDR = '\r';
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40004400 	.word	0x40004400

080011d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001210 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011dc:	f7ff ff5a 	bl	8001094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e0:	480c      	ldr	r0, [pc, #48]	@ (8001214 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e2:	490d      	ldr	r1, [pc, #52]	@ (8001218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e4:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <LoopForever+0xe>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001224 <LoopForever+0x16>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001206:	f004 fab3 	bl	8005770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120a:	f7ff fb35 	bl	8000878 <main>

0800120e <LoopForever>:

LoopForever:
    b LoopForever
 800120e:	e7fe      	b.n	800120e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001210:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800121c:	080061d4 	.word	0x080061d4
  ldr r2, =_sbss
 8001220:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001224:	20001ccc 	.word	0x20001ccc

08001228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_2_IRQHandler>

0800122a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001234:	2003      	movs	r0, #3
 8001236:	f000 f8de 	bl	80013f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123a:	200f      	movs	r0, #15
 800123c:	f7ff fe60 	bl	8000f00 <HAL_InitTick>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d002      	beq.n	800124c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	e001      	b.n	8001250 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800124c:	f7ff fe30 	bl	8000eb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001250:	79fb      	ldrb	r3, [r7, #7]
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008
 8001280:	200001e4 	.word	0x200001e4

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200001e4 	.word	0x200001e4

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	@ (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	@ (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	@ 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff4c 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800141e:	f7ff ff61 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001422:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	68b9      	ldr	r1, [r7, #8]
 8001428:	6978      	ldr	r0, [r7, #20]
 800142a:	f7ff ffb1 	bl	8001390 <NVIC_EncodePriority>
 800142e:	4602      	mov	r2, r0
 8001430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff80 	bl	800133c <__NVIC_SetPriority>
}
 800143c:	bf00      	nop
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff ff54 	bl	8001300 <__NVIC_EnableIRQ>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001464:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <HAL_PWREx_GetVoltageRange+0x18>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40007000 	.word	0x40007000

0800147c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800148a:	d130      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001498:	d038      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800149a:	4b20      	ldr	r3, [pc, #128]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014a2:	4a1e      	ldr	r2, [pc, #120]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2232      	movs	r2, #50	@ 0x32
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001524 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	3301      	adds	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c0:	e002      	b.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ca:	695b      	ldr	r3, [r3, #20]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014d4:	d102      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f2      	bne.n	80014c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014e8:	d110      	bne.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e00f      	b.n	800150e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014fa:	d007      	beq.n	800150c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014fc:	4b07      	ldr	r3, [pc, #28]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001504:	4a05      	ldr	r2, [pc, #20]	@ (800151c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800150a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40007000 	.word	0x40007000
 8001520:	20000000 	.word	0x20000000
 8001524:	431bde83 	.word	0x431bde83

08001528 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e3ca      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153a:	4b97      	ldr	r3, [pc, #604]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001544:	4b94      	ldr	r3, [pc, #592]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	2b00      	cmp	r3, #0
 8001558:	f000 80e4 	beq.w	8001724 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_RCC_OscConfig+0x4a>
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b0c      	cmp	r3, #12
 8001566:	f040 808b 	bne.w	8001680 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b01      	cmp	r3, #1
 800156e:	f040 8087 	bne.w	8001680 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001572:	4b89      	ldr	r3, [pc, #548]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <HAL_RCC_OscConfig+0x62>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e3a2      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1a      	ldr	r2, [r3, #32]
 800158e:	4b82      	ldr	r3, [pc, #520]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_RCC_OscConfig+0x7c>
 800159a:	4b7f      	ldr	r3, [pc, #508]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015a2:	e005      	b.n	80015b0 <HAL_RCC_OscConfig+0x88>
 80015a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d223      	bcs.n	80015fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 fd71 	bl	80020a0 <RCC_SetFlashLatencyFromMSIRange>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e383      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c8:	4b73      	ldr	r3, [pc, #460]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a72      	ldr	r2, [pc, #456]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015ce:	f043 0308 	orr.w	r3, r3, #8
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b70      	ldr	r3, [pc, #448]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	496d      	ldr	r1, [pc, #436]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	4968      	ldr	r1, [pc, #416]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e025      	b.n	8001648 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fc:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a65      	ldr	r2, [pc, #404]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b63      	ldr	r3, [pc, #396]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4960      	ldr	r1, [pc, #384]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161a:	4b5f      	ldr	r3, [pc, #380]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	495b      	ldr	r1, [pc, #364]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d109      	bne.n	8001648 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 fd31 	bl	80020a0 <RCC_SetFlashLatencyFromMSIRange>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e343      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001648:	f000 fc4a 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 800164c:	4602      	mov	r2, r0
 800164e:	4b52      	ldr	r3, [pc, #328]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	4950      	ldr	r1, [pc, #320]	@ (800179c <HAL_RCC_OscConfig+0x274>)
 800165a:	5ccb      	ldrb	r3, [r1, r3]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	4a4e      	ldr	r2, [pc, #312]	@ (80017a0 <HAL_RCC_OscConfig+0x278>)
 8001666:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001668:	4b4e      	ldr	r3, [pc, #312]	@ (80017a4 <HAL_RCC_OscConfig+0x27c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc47 	bl	8000f00 <HAL_InitTick>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d052      	beq.n	8001722 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	e327      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d032      	beq.n	80016ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001688:	4b43      	ldr	r3, [pc, #268]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a42      	ldr	r2, [pc, #264]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001694:	f7ff fdf6 	bl	8001284 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169c:	f7ff fdf2 	bl	8001284 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e310      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a36      	ldr	r2, [pc, #216]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4931      	ldr	r1, [pc, #196]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	492c      	ldr	r1, [pc, #176]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	604b      	str	r3, [r1, #4]
 80016ec:	e01a      	b.n	8001724 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fdc3 	bl	8001284 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001702:	f7ff fdbf 	bl	8001284 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e2dd      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001714:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x1da>
 8001720:	e000      	b.n	8001724 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001722:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d074      	beq.n	800181a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b08      	cmp	r3, #8
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x21a>
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d10e      	bne.n	800175a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b03      	cmp	r3, #3
 8001740:	d10b      	bne.n	800175a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d064      	beq.n	8001818 <HAL_RCC_OscConfig+0x2f0>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d160      	bne.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e2ba      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x24a>
 8001764:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0b      	ldr	r2, [pc, #44]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800176a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	e026      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800177a:	d115      	bne.n	80017a8 <HAL_RCC_OscConfig+0x280>
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 8001782:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a02      	ldr	r2, [pc, #8]	@ (8001798 <HAL_RCC_OscConfig+0x270>)
 800178e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x298>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	08006148 	.word	0x08006148
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004
 80017a8:	4ba0      	ldr	r3, [pc, #640]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a9f      	ldr	r2, [pc, #636]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b9d      	ldr	r3, [pc, #628]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a9c      	ldr	r2, [pc, #624]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d013      	beq.n	80017f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c8:	f7ff fd5c 	bl	8001284 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d0:	f7ff fd58 	bl	8001284 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b64      	cmp	r3, #100	@ 0x64
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e276      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e2:	4b92      	ldr	r3, [pc, #584]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2a8>
 80017ee:	e014      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fd48 	bl	8001284 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff fd44 	bl	8001284 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e262      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180a:	4b88      	ldr	r3, [pc, #544]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2d0>
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d060      	beq.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d005      	beq.n	8001838 <HAL_RCC_OscConfig+0x310>
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d119      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d116      	bne.n	8001866 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	4b7c      	ldr	r3, [pc, #496]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x328>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e23f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b76      	ldr	r3, [pc, #472]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	061b      	lsls	r3, r3, #24
 800185e:	4973      	ldr	r1, [pc, #460]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001864:	e040      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d023      	beq.n	80018b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186e:	4b6f      	ldr	r3, [pc, #444]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a6e      	ldr	r2, [pc, #440]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fd03 	bl	8001284 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001882:	f7ff fcff 	bl	8001284 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e21d      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001894:	4b65      	ldr	r3, [pc, #404]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a0:	4b62      	ldr	r3, [pc, #392]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	495f      	ldr	r1, [pc, #380]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e018      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a5c      	ldr	r2, [pc, #368]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff fcdf 	bl	8001284 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fcdb 	bl	8001284 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e1f9      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018dc:	4b53      	ldr	r3, [pc, #332]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f0      	bne.n	80018ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03c      	beq.n	800196e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fc:	4b4b      	ldr	r3, [pc, #300]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80018fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001902:	4a4a      	ldr	r2, [pc, #296]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fcba 	bl	8001284 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fcb6 	bl	8001284 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1d4      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001926:	4b41      	ldr	r3, [pc, #260]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ef      	beq.n	8001914 <HAL_RCC_OscConfig+0x3ec>
 8001934:	e01b      	b.n	800196e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001936:	4b3d      	ldr	r3, [pc, #244]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800193c:	4a3b      	ldr	r2, [pc, #236]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff fc9d 	bl	8001284 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff fc99 	bl	8001284 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1b7      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001960:	4b32      	ldr	r3, [pc, #200]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ef      	bne.n	800194e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	f000 80a6 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001980:	4b2a      	ldr	r3, [pc, #168]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10d      	bne.n	80019a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	4a26      	ldr	r2, [pc, #152]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001996:	6593      	str	r3, [r2, #88]	@ 0x58
 8001998:	4b24      	ldr	r3, [pc, #144]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a8:	4b21      	ldr	r3, [pc, #132]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d118      	bne.n	80019e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fc60 	bl	8001284 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c8:	f7ff fc5c 	bl	8001284 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e17a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_RCC_OscConfig+0x508>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d108      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4d8>
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019fe:	e029      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d115      	bne.n	8001a34 <HAL_RCC_OscConfig+0x50c>
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0e:	4a07      	ldr	r2, [pc, #28]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a1e:	4a03      	ldr	r2, [pc, #12]	@ (8001a2c <HAL_RCC_OscConfig+0x504>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a28:	e014      	b.n	8001a54 <HAL_RCC_OscConfig+0x52c>
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40007000 	.word	0x40007000
 8001a34:	4b9c      	ldr	r3, [pc, #624]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a3a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a3c:	f023 0301 	bic.w	r3, r3, #1
 8001a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a44:	4b98      	ldr	r3, [pc, #608]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a4a:	4a97      	ldr	r2, [pc, #604]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a4c:	f023 0304 	bic.w	r3, r3, #4
 8001a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d016      	beq.n	8001a8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fc12 	bl	8001284 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff fc0e 	bl	8001284 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e12a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ed      	beq.n	8001a64 <HAL_RCC_OscConfig+0x53c>
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fbfb 	bl	8001284 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fbf7 	bl	8001284 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e113      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001aa8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1ed      	bne.n	8001a92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001abc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac0:	4a79      	ldr	r2, [pc, #484]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80fe 	beq.w	8001cce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	f040 80d0 	bne.w	8001c7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001adc:	4b72      	ldr	r3, [pc, #456]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0203 	and.w	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d130      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	3b01      	subs	r3, #1
 8001afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d127      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d11f      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001b1c:	2a07      	cmp	r2, #7
 8001b1e:	bf14      	ite	ne
 8001b20:	2201      	movne	r2, #1
 8001b22:	2200      	moveq	r2, #0
 8001b24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d113      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b34:	085b      	lsrs	r3, r3, #1
 8001b36:	3b01      	subs	r3, #1
 8001b38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	085b      	lsrs	r3, r3, #1
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d06e      	beq.n	8001c30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d069      	beq.n	8001c2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b58:	4b53      	ldr	r3, [pc, #332]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d105      	bne.n	8001b70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b64:	4b50      	ldr	r3, [pc, #320]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0ad      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a4b      	ldr	r2, [pc, #300]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b80:	f7ff fb80 	bl	8001284 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b88:	f7ff fb7c 	bl	8001284 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e09a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba6:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b40      	ldr	r3, [pc, #256]	@ (8001cac <HAL_RCC_OscConfig+0x784>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	4311      	orrs	r1, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bc0:	0212      	lsls	r2, r2, #8
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bc8:	0852      	lsrs	r2, r2, #1
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	0552      	lsls	r2, r2, #21
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bd4:	0852      	lsrs	r2, r2, #1
 8001bd6:	3a01      	subs	r2, #1
 8001bd8:	0652      	lsls	r2, r2, #25
 8001bda:	4311      	orrs	r1, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001be0:	0912      	lsrs	r2, r2, #4
 8001be2:	0452      	lsls	r2, r2, #17
 8001be4:	430a      	orrs	r2, r1
 8001be6:	4930      	ldr	r1, [pc, #192]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bec:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c04:	f7ff fb3e 	bl	8001284 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7ff fb3a 	bl	8001284 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e058      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c2a:	e050      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e04f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d148      	bne.n	8001cce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4a16      	ldr	r2, [pc, #88]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c54:	f7ff fb16 	bl	8001284 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff fb12 	bl	8001284 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e030      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x734>
 8001c7a:	e028      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d023      	beq.n	8001cca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a08      	ldr	r2, [pc, #32]	@ (8001ca8 <HAL_RCC_OscConfig+0x780>)
 8001c88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff faf9 	bl	8001284 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	e00c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff faf5 	bl	8001284 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d905      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e013      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ec      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	4905      	ldr	r1, [pc, #20]	@ (8001cd8 <HAL_RCC_OscConfig+0x7b0>)
 8001cc2:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <HAL_RCC_OscConfig+0x7b4>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
 8001cc8:	e001      	b.n	8001cce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	feeefffc 	.word	0xfeeefffc

08001ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0e7      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b75      	ldr	r3, [pc, #468]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d910      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b72      	ldr	r3, [pc, #456]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 0207 	bic.w	r2, r3, #7
 8001d0a:	4970      	ldr	r1, [pc, #448]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b6e      	ldr	r3, [pc, #440]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0cf      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d010      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	4b66      	ldr	r3, [pc, #408]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d908      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b63      	ldr	r3, [pc, #396]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4960      	ldr	r1, [pc, #384]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d04c      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	4b5a      	ldr	r3, [pc, #360]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0a6      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7e:	4b54      	ldr	r3, [pc, #336]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e09a      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d96:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e08e      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e086      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b46      	ldr	r3, [pc, #280]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4943      	ldr	r1, [pc, #268]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc8:	f7ff fa5c 	bl	8001284 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff fa58 	bl	8001284 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e06e      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d010      	beq.n	8001e26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b31      	ldr	r3, [pc, #196]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d208      	bcs.n	8001e26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e14:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	492b      	ldr	r1, [pc, #172]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e26:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d210      	bcs.n	8001e56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e34:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 0207 	bic.w	r2, r3, #7
 8001e3c:	4923      	ldr	r1, [pc, #140]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e44:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <HAL_RCC_ClockConfig+0x1ec>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e036      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	4918      	ldr	r1, [pc, #96]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d009      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4910      	ldr	r1, [pc, #64]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e94:	f000 f824 	bl	8001ee0 <HAL_RCC_GetSysClockFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	490b      	ldr	r1, [pc, #44]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_RCC_ClockConfig+0x1fc>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f821 	bl	8000f00 <HAL_InitTick>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08006148 	.word	0x08006148
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004

08001ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eee:	4b3e      	ldr	r3, [pc, #248]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x34>
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d121      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d11e      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f14:	4b34      	ldr	r3, [pc, #208]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f20:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e005      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f58:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e004      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f64:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	2b0c      	cmp	r3, #12
 8001f6c:	d134      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d003      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0xac>
 8001f84:	e005      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f88:	617b      	str	r3, [r7, #20]
      break;
 8001f8a:	e005      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f8e:	617b      	str	r3, [r7, #20]
      break;
 8001f90:	e002      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	617b      	str	r3, [r7, #20]
      break;
 8001f96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f98:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	fb03 f202 	mul.w	r2, r3, r2
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	0e5b      	lsrs	r3, r3, #25
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	3301      	adds	r3, #1
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fd8:	69bb      	ldr	r3, [r7, #24]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08006160 	.word	0x08006160
 8001ff0:	00f42400 	.word	0x00f42400
 8001ff4:	007a1200 	.word	0x007a1200

08001ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	@ (800200c <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000000 	.word	0x20000000

08002010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002014:	f7ff fff0 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	0adb      	lsrs	r3, r3, #11
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	4904      	ldr	r1, [pc, #16]	@ (8002038 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40021000 	.word	0x40021000
 8002038:	08006158 	.word	0x08006158

0800203c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	220f      	movs	r2, #15
 800204a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0203 	and.w	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002058:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <HAL_RCC_GetClockConfig+0x5c>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <HAL_RCC_GetClockConfig+0x60>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0207 	and.w	r2, r3, #7
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	40022000 	.word	0x40022000

080020a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020b8:	f7ff f9d2 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 80020bc:	6178      	str	r0, [r7, #20]
 80020be:	e014      	b.n	80020ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c4:	4a24      	ldr	r2, [pc, #144]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80020cc:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020d8:	f7ff f9c2 	bl	8001460 <HAL_PWREx_GetVoltageRange>
 80020dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020f0:	d10b      	bne.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b80      	cmp	r3, #128	@ 0x80
 80020f6:	d919      	bls.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80020fc:	d902      	bls.n	8002104 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020fe:	2302      	movs	r3, #2
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	e013      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002104:	2301      	movs	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e010      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b80      	cmp	r3, #128	@ 0x80
 800210e:	d902      	bls.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002110:	2303      	movs	r3, #3
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	e00a      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b80      	cmp	r3, #128	@ 0x80
 800211a:	d102      	bne.n	8002122 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800211c:	2302      	movs	r3, #2
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	e004      	b.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b70      	cmp	r3, #112	@ 0x70
 8002126:	d101      	bne.n	800212c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002128:	2301      	movs	r3, #1
 800212a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 0207 	bic.w	r2, r3, #7
 8002134:	4909      	ldr	r1, [pc, #36]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800213c:	4b07      	ldr	r3, [pc, #28]	@ (800215c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	40022000 	.word	0x40022000

08002160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e049      	b.n	8002206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f841 	bl	800220e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2202      	movs	r2, #2
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	4619      	mov	r1, r3
 800219e:	4610      	mov	r0, r2
 80021a0:	f000 f9da 	bl	8002558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d001      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e04f      	b.n	80022dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a23      	ldr	r2, [pc, #140]	@ (80022e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01d      	beq.n	800229a <HAL_TIM_Base_Start_IT+0x76>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002266:	d018      	beq.n	800229a <HAL_TIM_Base_Start_IT+0x76>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1f      	ldr	r2, [pc, #124]	@ (80022ec <HAL_TIM_Base_Start_IT+0xc8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d013      	beq.n	800229a <HAL_TIM_Base_Start_IT+0x76>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1e      	ldr	r2, [pc, #120]	@ (80022f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d00e      	beq.n	800229a <HAL_TIM_Base_Start_IT+0x76>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1c      	ldr	r2, [pc, #112]	@ (80022f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d009      	beq.n	800229a <HAL_TIM_Base_Start_IT+0x76>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1b      	ldr	r2, [pc, #108]	@ (80022f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d004      	beq.n	800229a <HAL_TIM_Base_Start_IT+0x76>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <HAL_TIM_Base_Start_IT+0xd8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d115      	bne.n	80022c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <HAL_TIM_Base_Start_IT+0xdc>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d015      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0xb4>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022b2:	d011      	beq.n	80022d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c4:	e008      	b.n	80022d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0201 	orr.w	r2, r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e000      	b.n	80022da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800
 80022f4:	40000c00 	.word	0x40000c00
 80022f8:	40013400 	.word	0x40013400
 80022fc:	40014000 	.word	0x40014000
 8002300:	00010007 	.word	0x00010007

08002304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d020      	beq.n	8002368 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01b      	beq.n	8002368 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0202 	mvn.w	r2, #2
 8002338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 f8e4 	bl	800251c <HAL_TIM_IC_CaptureCallback>
 8002354:	e005      	b.n	8002362 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8d6 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f8e7 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d020      	beq.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01b      	beq.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0204 	mvn.w	r2, #4
 8002384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f8be 	bl	800251c <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 f8b0 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f8c1 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d020      	beq.n	8002400 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01b      	beq.n	8002400 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0208 	mvn.w	r2, #8
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2204      	movs	r2, #4
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f898 	bl	800251c <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f88a 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f89b 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d020      	beq.n	800244c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01b      	beq.n	800244c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0210 	mvn.w	r2, #16
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2208      	movs	r2, #8
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f872 	bl	800251c <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f864 	bl	8002508 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f875 	bl	8002530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0201 	mvn.w	r2, #1
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fd08 	bl	8000e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f906 	bl	80026a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00c      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80024b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f8fe 	bl	80026b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00c      	beq.n	80024dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f834 	bl	8002544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00c      	beq.n	8002500 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0220 	mvn.w	r2, #32
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f8c6 	bl	800268c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a40      	ldr	r2, [pc, #256]	@ (800266c <TIM_Base_SetConfig+0x114>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002576:	d00f      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3d      	ldr	r2, [pc, #244]	@ (8002670 <TIM_Base_SetConfig+0x118>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00b      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3c      	ldr	r2, [pc, #240]	@ (8002674 <TIM_Base_SetConfig+0x11c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3b      	ldr	r2, [pc, #236]	@ (8002678 <TIM_Base_SetConfig+0x120>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3a      	ldr	r2, [pc, #232]	@ (800267c <TIM_Base_SetConfig+0x124>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800259e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a2f      	ldr	r2, [pc, #188]	@ (800266c <TIM_Base_SetConfig+0x114>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01f      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025b8:	d01b      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002670 <TIM_Base_SetConfig+0x118>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d017      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002674 <TIM_Base_SetConfig+0x11c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002678 <TIM_Base_SetConfig+0x120>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00f      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a29      	ldr	r2, [pc, #164]	@ (800267c <TIM_Base_SetConfig+0x124>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00b      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a28      	ldr	r2, [pc, #160]	@ (8002680 <TIM_Base_SetConfig+0x128>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a27      	ldr	r2, [pc, #156]	@ (8002684 <TIM_Base_SetConfig+0x12c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d003      	beq.n	80025f2 <TIM_Base_SetConfig+0x9a>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a26      	ldr	r2, [pc, #152]	@ (8002688 <TIM_Base_SetConfig+0x130>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d108      	bne.n	8002604 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4313      	orrs	r3, r2
 8002610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a10      	ldr	r2, [pc, #64]	@ (800266c <TIM_Base_SetConfig+0x114>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d00f      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a12      	ldr	r2, [pc, #72]	@ (800267c <TIM_Base_SetConfig+0x124>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00b      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a11      	ldr	r2, [pc, #68]	@ (8002680 <TIM_Base_SetConfig+0x128>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a10      	ldr	r2, [pc, #64]	@ (8002684 <TIM_Base_SetConfig+0x12c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d003      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0f      	ldr	r2, [pc, #60]	@ (8002688 <TIM_Base_SetConfig+0x130>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d103      	bne.n	8002658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	615a      	str	r2, [r3, #20]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40012c00 	.word	0x40012c00
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40013400 	.word	0x40013400
 8002680:	40014000 	.word	0x40014000
 8002684:	40014400 	.word	0x40014400
 8002688:	40014800 	.word	0x40014800

0800268c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <SysTick_Handler+0x1c>)
 80026ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80026d0:	f001 fe4e 	bl	8004370 <xTaskGetSchedulerState>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d001      	beq.n	80026de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80026da:	f002 fd45 	bl	8005168 <xPortSysTickHandler>
  }
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a07      	ldr	r2, [pc, #28]	@ (8002714 <vApplicationGetIdleTaskMemory+0x2c>)
 80026f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <vApplicationGetIdleTaskMemory+0x30>)
 80026fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2280      	movs	r2, #128	@ 0x80
 8002704:	601a      	str	r2, [r3, #0]
}
 8002706:	bf00      	nop
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	200001e8 	.word	0x200001e8
 8002718:	20000290 	.word	0x20000290

0800271c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <vApplicationGetTimerTaskMemory+0x2c>)
 800272c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	4a06      	ldr	r2, [pc, #24]	@ (800274c <vApplicationGetTimerTaskMemory+0x30>)
 8002732:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800273a:	601a      	str	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	20000490 	.word	0x20000490
 800274c:	20000538 	.word	0x20000538

08002750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f103 0208 	add.w	r2, r3, #8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f103 0208 	add.w	r2, r3, #8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 0208 	add.w	r2, r3, #8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d103      	bne.n	8002812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e00c      	b.n	800282c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3308      	adds	r3, #8
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e002      	b.n	8002820 <vListInsert+0x2e>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	429a      	cmp	r2, r3
 800282a:	d2f6      	bcs.n	800281a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	601a      	str	r2, [r3, #0]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6892      	ldr	r2, [r2, #8]
 800287a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6852      	ldr	r2, [r2, #4]
 8002884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	d103      	bne.n	8002898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028e4:	f002 fbb0 	bl	8005048 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	68f9      	ldr	r1, [r7, #12]
 80028f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	441a      	add	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002914:	3b01      	subs	r3, #1
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	441a      	add	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	22ff      	movs	r2, #255	@ 0xff
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	22ff      	movs	r2, #255	@ 0xff
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d114      	bne.n	8002964 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01a      	beq.n	8002978 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3310      	adds	r3, #16
 8002946:	4618      	mov	r0, r3
 8002948:	f001 fb4c 	bl	8003fe4 <xTaskRemoveFromEventList>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <xQueueGenericReset+0xd0>)
 8002954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	e009      	b.n	8002978 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3310      	adds	r3, #16
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fef1 	bl	8002750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3324      	adds	r3, #36	@ 0x24
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff feec 	bl	8002750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002978:	f002 fb98 	bl	80050ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800297c:	2301      	movs	r3, #1
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08e      	sub	sp, #56	@ 0x38
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10b      	bne.n	80029d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	e7fd      	b.n	80029d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <xQueueGenericCreateStatic+0x56>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <xQueueGenericCreateStatic+0x5a>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <xQueueGenericCreateStatic+0x5c>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80029ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	623b      	str	r3, [r7, #32]
}
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d102      	bne.n	8002a10 <xQueueGenericCreateStatic+0x84>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <xQueueGenericCreateStatic+0x88>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <xQueueGenericCreateStatic+0x8a>
 8002a14:	2300      	movs	r3, #0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a1e:	f383 8811 	msr	BASEPRI, r3
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	f3bf 8f4f 	dsb	sy
 8002a2a:	61fb      	str	r3, [r7, #28]
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	e7fd      	b.n	8002a2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a32:	2350      	movs	r3, #80	@ 0x50
 8002a34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b50      	cmp	r3, #80	@ 0x50
 8002a3a:	d00b      	beq.n	8002a54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a40:	f383 8811 	msr	BASEPRI, r3
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	f3bf 8f4f 	dsb	sy
 8002a4c:	61bb      	str	r3, [r7, #24]
}
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002a54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f840 	bl	8002afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3730      	adds	r7, #48	@ 0x30
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b08a      	sub	sp, #40	@ 0x28
 8002a8a:	af02      	add	r7, sp, #8
 8002a8c:	60f8      	str	r0, [r7, #12]
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	4613      	mov	r3, r2
 8002a92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	613b      	str	r3, [r7, #16]
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	e7fd      	b.n	8002aae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	3350      	adds	r3, #80	@ 0x50
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fbe3 	bl	800528c <pvPortMalloc>
 8002ac6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d011      	beq.n	8002af2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	3350      	adds	r3, #80	@ 0x50
 8002ad6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ae0:	79fa      	ldrb	r2, [r7, #7]
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f805 	bl	8002afc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002af2:	69bb      	ldr	r3, [r7, #24]
	}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d103      	bne.n	8002b18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e002      	b.n	8002b1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	69b8      	ldr	r0, [r7, #24]
 8002b2e:	f7ff fec3 	bl	80028b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002b62:	2300      	movs	r3, #0
 8002b64:	2200      	movs	r2, #0
 8002b66:	2100      	movs	r1, #0
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f81d 	bl	8002ba8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002b80:	2301      	movs	r3, #1
 8002b82:	617b      	str	r3, [r7, #20]
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	6939      	ldr	r1, [r7, #16]
 8002b8e:	6978      	ldr	r0, [r7, #20]
 8002b90:	f7ff ff79 	bl	8002a86 <xQueueGenericCreate>
 8002b94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7ff ffd3 	bl	8002b42 <prvInitialiseMutex>

		return xNewQueue;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
	}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	@ 0x38
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <xQueueGenericSend+0x34>
	__asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <xQueueGenericSend+0x42>
 8002be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <xQueueGenericSend+0x46>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <xQueueGenericSend+0x48>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <xQueueGenericSend+0x64>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d103      	bne.n	8002c1a <xQueueGenericSend+0x72>
 8002c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <xQueueGenericSend+0x76>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <xQueueGenericSend+0x78>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10b      	bne.n	8002c3c <xQueueGenericSend+0x94>
	__asm volatile
 8002c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	623b      	str	r3, [r7, #32]
}
 8002c36:	bf00      	nop
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c3c:	f001 fb98 	bl	8004370 <xTaskGetSchedulerState>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <xQueueGenericSend+0xa4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <xQueueGenericSend+0xa8>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <xQueueGenericSend+0xaa>
 8002c50:	2300      	movs	r3, #0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10b      	bne.n	8002c6e <xQueueGenericSend+0xc6>
	__asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	61fb      	str	r3, [r7, #28]
}
 8002c68:	bf00      	nop
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c6e:	f002 f9eb 	bl	8005048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d302      	bcc.n	8002c84 <xQueueGenericSend+0xdc>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d129      	bne.n	8002cd8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c8a:	f000 fb37 	bl	80032fc <prvCopyDataToQueue>
 8002c8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d010      	beq.n	8002cba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9a:	3324      	adds	r3, #36	@ 0x24
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 f9a1 	bl	8003fe4 <xTaskRemoveFromEventList>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8002da8 <xQueueGenericSend+0x200>)
 8002caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	e00a      	b.n	8002cd0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002cc0:	4b39      	ldr	r3, [pc, #228]	@ (8002da8 <xQueueGenericSend+0x200>)
 8002cc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002cd0:	f002 f9ec 	bl	80050ac <vPortExitCritical>
				return pdPASS;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e063      	b.n	8002da0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d103      	bne.n	8002ce6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cde:	f002 f9e5 	bl	80050ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e05c      	b.n	8002da0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f001 f9db 	bl	80040ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cfa:	f002 f9d7 	bl	80050ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cfe:	f000 ff43 	bl	8003b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d02:	f002 f9a1 	bl	8005048 <vPortEnterCritical>
 8002d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d12:	d103      	bne.n	8002d1c <xQueueGenericSend+0x174>
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d103      	bne.n	8002d32 <xQueueGenericSend+0x18a>
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d32:	f002 f9bb 	bl	80050ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d36:	1d3a      	adds	r2, r7, #4
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 f9ca 	bl	80040d8 <xTaskCheckForTimeOut>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d124      	bne.n	8002d94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d4c:	f000 fbce 	bl	80034ec <prvIsQueueFull>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d018      	beq.n	8002d88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d58:	3310      	adds	r3, #16
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 f8ee 	bl	8003f40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d66:	f000 fb59 	bl	800341c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d6a:	f000 ff1b 	bl	8003ba4 <xTaskResumeAll>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f af7c 	bne.w	8002c6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002d76:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <xQueueGenericSend+0x200>)
 8002d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	e772      	b.n	8002c6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d8a:	f000 fb47 	bl	800341c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d8e:	f000 ff09 	bl	8003ba4 <xTaskResumeAll>
 8002d92:	e76c      	b.n	8002c6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d96:	f000 fb41 	bl	800341c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d9a:	f000 ff03 	bl	8003ba4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3738      	adds	r7, #56	@ 0x38
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	e000ed04 	.word	0xe000ed04

08002dac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b090      	sub	sp, #64	@ 0x40
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002dd6:	bf00      	nop
 8002dd8:	bf00      	nop
 8002dda:	e7fd      	b.n	8002dd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <xQueueGenericSendFromISR+0x3e>
 8002de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <xQueueGenericSendFromISR+0x42>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <xQueueGenericSendFromISR+0x44>
 8002dee:	2300      	movs	r3, #0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10b      	bne.n	8002e0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d103      	bne.n	8002e1a <xQueueGenericSendFromISR+0x6e>
 8002e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <xQueueGenericSendFromISR+0x72>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <xQueueGenericSendFromISR+0x74>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10b      	bne.n	8002e3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	623b      	str	r3, [r7, #32]
}
 8002e36:	bf00      	nop
 8002e38:	bf00      	nop
 8002e3a:	e7fd      	b.n	8002e38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e3c:	f002 f9e4 	bl	8005208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002e40:	f3ef 8211 	mrs	r2, BASEPRI
 8002e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	61fa      	str	r2, [r7, #28]
 8002e56:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002e58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d302      	bcc.n	8002e6e <xQueueGenericSendFromISR+0xc2>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d12f      	bne.n	8002ece <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002e84:	f000 fa3a 	bl	80032fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d112      	bne.n	8002eb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d016      	beq.n	8002ec8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9c:	3324      	adds	r3, #36	@ 0x24
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 f8a0 	bl	8003fe4 <xTaskRemoveFromEventList>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00b      	beq.n	8002ec8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e007      	b.n	8002ec8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	b25a      	sxtb	r2, r3
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002ecc:	e001      	b.n	8002ed2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002edc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3740      	adds	r7, #64	@ 0x40
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08c      	sub	sp, #48	@ 0x30
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <xQueueReceive+0x32>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	623b      	str	r3, [r7, #32]
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	e7fd      	b.n	8002f16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d103      	bne.n	8002f28 <xQueueReceive+0x40>
 8002f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <xQueueReceive+0x44>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <xQueueReceive+0x46>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <xQueueReceive+0x62>
	__asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	61fb      	str	r3, [r7, #28]
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	e7fd      	b.n	8002f46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f4a:	f001 fa11 	bl	8004370 <xTaskGetSchedulerState>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <xQueueReceive+0x72>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <xQueueReceive+0x76>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <xQueueReceive+0x78>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10b      	bne.n	8002f7c <xQueueReceive+0x94>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	61bb      	str	r3, [r7, #24]
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f7c:	f002 f864 	bl	8005048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01f      	beq.n	8002fcc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f90:	f000 fa1e 	bl	80033d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	1e5a      	subs	r2, r3, #1
 8002f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00f      	beq.n	8002fc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	3310      	adds	r3, #16
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 f81b 	bl	8003fe4 <xTaskRemoveFromEventList>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80030a8 <xQueueReceive+0x1c0>)
 8002fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002fc4:	f002 f872 	bl	80050ac <vPortExitCritical>
				return pdPASS;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e069      	b.n	80030a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fd2:	f002 f86b 	bl	80050ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e062      	b.n	80030a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fe0:	f107 0310 	add.w	r3, r7, #16
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 f861 	bl	80040ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fee:	f002 f85d 	bl	80050ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ff2:	f000 fdc9 	bl	8003b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ff6:	f002 f827 	bl	8005048 <vPortEnterCritical>
 8002ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003000:	b25b      	sxtb	r3, r3
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d103      	bne.n	8003010 <xQueueReceive+0x128>
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003012:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003016:	b25b      	sxtb	r3, r3
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d103      	bne.n	8003026 <xQueueReceive+0x13e>
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003026:	f002 f841 	bl	80050ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800302a:	1d3a      	adds	r2, r7, #4
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f001 f850 	bl	80040d8 <xTaskCheckForTimeOut>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d123      	bne.n	8003086 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800303e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003040:	f000 fa3e 	bl	80034c0 <prvIsQueueEmpty>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d017      	beq.n	800307a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	3324      	adds	r3, #36	@ 0x24
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f000 ff74 	bl	8003f40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800305a:	f000 f9df 	bl	800341c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800305e:	f000 fda1 	bl	8003ba4 <xTaskResumeAll>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d189      	bne.n	8002f7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003068:	4b0f      	ldr	r3, [pc, #60]	@ (80030a8 <xQueueReceive+0x1c0>)
 800306a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	e780      	b.n	8002f7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800307a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800307c:	f000 f9ce 	bl	800341c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003080:	f000 fd90 	bl	8003ba4 <xTaskResumeAll>
 8003084:	e77a      	b.n	8002f7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003086:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003088:	f000 f9c8 	bl	800341c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800308c:	f000 fd8a 	bl	8003ba4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003092:	f000 fa15 	bl	80034c0 <prvIsQueueEmpty>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	f43f af6f 	beq.w	8002f7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800309e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3730      	adds	r7, #48	@ 0x30
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08e      	sub	sp, #56	@ 0x38
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80030be:	2300      	movs	r3, #0
 80030c0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80030c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	623b      	str	r3, [r7, #32]
}
 80030da:	bf00      	nop
 80030dc:	bf00      	nop
 80030de:	e7fd      	b.n	80030dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	61fb      	str	r3, [r7, #28]
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003100:	f001 f936 	bl	8004370 <xTaskGetSchedulerState>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d102      	bne.n	8003110 <xQueueSemaphoreTake+0x64>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <xQueueSemaphoreTake+0x68>
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <xQueueSemaphoreTake+0x6a>
 8003114:	2300      	movs	r3, #0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10b      	bne.n	8003132 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	61bb      	str	r3, [r7, #24]
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	e7fd      	b.n	800312e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003132:	f001 ff89 	bl	8005048 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	d024      	beq.n	800318c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003144:	1e5a      	subs	r2, r3, #1
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800314a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003152:	f001 fa87 	bl	8004664 <pvTaskIncrementMutexHeldCount>
 8003156:	4602      	mov	r2, r0
 8003158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800315c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00f      	beq.n	8003184 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003166:	3310      	adds	r3, #16
 8003168:	4618      	mov	r0, r3
 800316a:	f000 ff3b 	bl	8003fe4 <xTaskRemoveFromEventList>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d007      	beq.n	8003184 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003174:	4b54      	ldr	r3, [pc, #336]	@ (80032c8 <xQueueSemaphoreTake+0x21c>)
 8003176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003184:	f001 ff92 	bl	80050ac <vPortExitCritical>
				return pdPASS;
 8003188:	2301      	movs	r3, #1
 800318a:	e098      	b.n	80032be <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d112      	bne.n	80031b8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	617b      	str	r3, [r7, #20]
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80031b0:	f001 ff7c 	bl	80050ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e082      	b.n	80032be <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	4618      	mov	r0, r3
 80031c4:	f000 ff72 	bl	80040ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031c8:	2301      	movs	r3, #1
 80031ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031cc:	f001 ff6e 	bl	80050ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031d0:	f000 fcda 	bl	8003b88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031d4:	f001 ff38 	bl	8005048 <vPortEnterCritical>
 80031d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d103      	bne.n	80031ee <xQueueSemaphoreTake+0x142>
 80031e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031f4:	b25b      	sxtb	r3, r3
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d103      	bne.n	8003204 <xQueueSemaphoreTake+0x158>
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003204:	f001 ff52 	bl	80050ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003208:	463a      	mov	r2, r7
 800320a:	f107 030c 	add.w	r3, r7, #12
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f000 ff61 	bl	80040d8 <xTaskCheckForTimeOut>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d132      	bne.n	8003282 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800321c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800321e:	f000 f94f 	bl	80034c0 <prvIsQueueEmpty>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d026      	beq.n	8003276 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003230:	f001 ff0a 	bl	8005048 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4618      	mov	r0, r3
 800323a:	f001 f8b7 	bl	80043ac <xTaskPriorityInherit>
 800323e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003240:	f001 ff34 	bl	80050ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003246:	3324      	adds	r3, #36	@ 0x24
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fe77 	bl	8003f40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003252:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003254:	f000 f8e2 	bl	800341c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003258:	f000 fca4 	bl	8003ba4 <xTaskResumeAll>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	f47f af67 	bne.w	8003132 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003264:	4b18      	ldr	r3, [pc, #96]	@ (80032c8 <xQueueSemaphoreTake+0x21c>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
 8003274:	e75d      	b.n	8003132 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003276:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003278:	f000 f8d0 	bl	800341c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800327c:	f000 fc92 	bl	8003ba4 <xTaskResumeAll>
 8003280:	e757      	b.n	8003132 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003282:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003284:	f000 f8ca 	bl	800341c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003288:	f000 fc8c 	bl	8003ba4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800328c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800328e:	f000 f917 	bl	80034c0 <prvIsQueueEmpty>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	f43f af4c 	beq.w	8003132 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00d      	beq.n	80032bc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80032a0:	f001 fed2 	bl	8005048 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032a6:	f000 f811 	bl	80032cc <prvGetDisinheritPriorityAfterTimeout>
 80032aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80032ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 f952 	bl	800455c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80032b8:	f001 fef8 	bl	80050ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3738      	adds	r7, #56	@ 0x38
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	e000ed04 	.word	0xe000ed04

080032cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d006      	beq.n	80032ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e001      	b.n	80032ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80032ee:	68fb      	ldr	r3, [r7, #12]
	}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003308:	2300      	movs	r3, #0
 800330a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003310:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10d      	bne.n	8003336 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d14d      	bne.n	80033be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f001 f8a8 	bl	800447c <xTaskPriorityDisinherit>
 800332c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	e043      	b.n	80033be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d119      	bne.n	8003370 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6858      	ldr	r0, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003344:	461a      	mov	r2, r3
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	f002 fa38 	bl	80057bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	441a      	add	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	d32b      	bcc.n	80033be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	e026      	b.n	80033be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68d8      	ldr	r0, [r3, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	461a      	mov	r2, r3
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	f002 fa1e 	bl	80057bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68da      	ldr	r2, [r3, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	425b      	negs	r3, r3
 800338a:	441a      	add	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d207      	bcs.n	80033ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	425b      	negs	r3, r3
 80033a6:	441a      	add	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d105      	bne.n	80033be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80033c6:	697b      	ldr	r3, [r7, #20]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d018      	beq.n	8003414 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d303      	bcc.n	8003404 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68d9      	ldr	r1, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	461a      	mov	r2, r3
 800340e:	6838      	ldr	r0, [r7, #0]
 8003410:	f002 f9d4 	bl	80057bc <memcpy>
	}
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003424:	f001 fe10 	bl	8005048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800342e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003430:	e011      	b.n	8003456 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d012      	beq.n	8003460 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3324      	adds	r3, #36	@ 0x24
 800343e:	4618      	mov	r0, r3
 8003440:	f000 fdd0 	bl	8003fe4 <xTaskRemoveFromEventList>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800344a:	f000 fea9 	bl	80041a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	3b01      	subs	r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345a:	2b00      	cmp	r3, #0
 800345c:	dce9      	bgt.n	8003432 <prvUnlockQueue+0x16>
 800345e:	e000      	b.n	8003462 <prvUnlockQueue+0x46>
					break;
 8003460:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	22ff      	movs	r2, #255	@ 0xff
 8003466:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800346a:	f001 fe1f 	bl	80050ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800346e:	f001 fdeb 	bl	8005048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003478:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800347a:	e011      	b.n	80034a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d012      	beq.n	80034aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3310      	adds	r3, #16
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fdab 	bl	8003fe4 <xTaskRemoveFromEventList>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003494:	f000 fe84 	bl	80041a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003498:	7bbb      	ldrb	r3, [r7, #14]
 800349a:	3b01      	subs	r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	dce9      	bgt.n	800347c <prvUnlockQueue+0x60>
 80034a8:	e000      	b.n	80034ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	22ff      	movs	r2, #255	@ 0xff
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80034b4:	f001 fdfa 	bl	80050ac <vPortExitCritical>
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034c8:	f001 fdbe 	bl	8005048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80034d4:	2301      	movs	r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	e001      	b.n	80034de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034de:	f001 fde5 	bl	80050ac <vPortExitCritical>

	return xReturn;
 80034e2:	68fb      	ldr	r3, [r7, #12]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034f4:	f001 fda8 	bl	8005048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003500:	429a      	cmp	r2, r3
 8003502:	d102      	bne.n	800350a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003504:	2301      	movs	r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	e001      	b.n	800350e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800350e:	f001 fdcd 	bl	80050ac <vPortExitCritical>

	return xReturn;
 8003512:	68fb      	ldr	r3, [r7, #12]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e014      	b.n	8003556 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800352c:	4a0f      	ldr	r2, [pc, #60]	@ (800356c <vQueueAddToRegistry+0x50>)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003538:	490c      	ldr	r1, [pc, #48]	@ (800356c <vQueueAddToRegistry+0x50>)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003542:	4a0a      	ldr	r2, [pc, #40]	@ (800356c <vQueueAddToRegistry+0x50>)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800354e:	e006      	b.n	800355e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b07      	cmp	r3, #7
 800355a:	d9e7      	bls.n	800352c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800355c:	bf00      	nop
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000938 	.word	0x20000938

08003570 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003580:	f001 fd62 	bl	8005048 <vPortEnterCritical>
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800358a:	b25b      	sxtb	r3, r3
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d103      	bne.n	800359a <vQueueWaitForMessageRestricted+0x2a>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035a0:	b25b      	sxtb	r3, r3
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d103      	bne.n	80035b0 <vQueueWaitForMessageRestricted+0x40>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035b0:	f001 fd7c 	bl	80050ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	3324      	adds	r3, #36	@ 0x24
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	68b9      	ldr	r1, [r7, #8]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fce1 	bl	8003f8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff ff26 	bl	800341c <prvUnlockQueue>
	}
 80035d0:	bf00      	nop
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08e      	sub	sp, #56	@ 0x38
 80035dc:	af04      	add	r7, sp, #16
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <xTaskCreateStatic+0x2c>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	623b      	str	r3, [r7, #32]
}
 80035fe:	bf00      	nop
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10b      	bne.n	8003622 <xTaskCreateStatic+0x4a>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	61fb      	str	r3, [r7, #28]
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	e7fd      	b.n	800361e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003622:	23a8      	movs	r3, #168	@ 0xa8
 8003624:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	2ba8      	cmp	r3, #168	@ 0xa8
 800362a:	d00b      	beq.n	8003644 <xTaskCreateStatic+0x6c>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	61bb      	str	r3, [r7, #24]
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	e7fd      	b.n	8003640 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003644:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01e      	beq.n	800368a <xTaskCreateStatic+0xb2>
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01b      	beq.n	800368a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	2202      	movs	r2, #2
 8003660:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003664:	2300      	movs	r3, #0
 8003666:	9303      	str	r3, [sp, #12]
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	9302      	str	r3, [sp, #8]
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f851 	bl	8003724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003682:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003684:	f000 f8f6 	bl	8003874 <prvAddNewTaskToReadyList>
 8003688:	e001      	b.n	800368e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800368e:	697b      	ldr	r3, [r7, #20]
	}
 8003690:	4618      	mov	r0, r3
 8003692:	3728      	adds	r7, #40	@ 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	@ 0x30
 800369c:	af04      	add	r7, sp, #16
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fded 	bl	800528c <pvPortMalloc>
 80036b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036ba:	20a8      	movs	r0, #168	@ 0xa8
 80036bc:	f001 fde6 	bl	800528c <pvPortMalloc>
 80036c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80036ce:	e005      	b.n	80036dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036d0:	6978      	ldr	r0, [r7, #20]
 80036d2:	f001 fea9 	bl	8005428 <vPortFree>
 80036d6:	e001      	b.n	80036dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	2300      	movs	r3, #0
 80036ee:	9303      	str	r3, [sp, #12]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	9302      	str	r3, [sp, #8]
 80036f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f6:	9301      	str	r3, [sp, #4]
 80036f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68b9      	ldr	r1, [r7, #8]
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f80f 	bl	8003724 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003706:	69f8      	ldr	r0, [r7, #28]
 8003708:	f000 f8b4 	bl	8003874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800370c:	2301      	movs	r3, #1
 800370e:	61bb      	str	r3, [r7, #24]
 8003710:	e002      	b.n	8003718 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
 8003716:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003718:	69bb      	ldr	r3, [r7, #24]
	}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003734:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	461a      	mov	r2, r3
 800373c:	21a5      	movs	r1, #165	@ 0xa5
 800373e:	f001 ffb3 	bl	80056a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800374c:	3b01      	subs	r3, #1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f023 0307 	bic.w	r3, r3, #7
 800375a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	617b      	str	r3, [r7, #20]
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	e7fd      	b.n	800377a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01f      	beq.n	80037c4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	e012      	b.n	80037b0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	4413      	add	r3, r2
 8003790:	7819      	ldrb	r1, [r3, #0]
 8003792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	3334      	adds	r3, #52	@ 0x34
 800379a:	460a      	mov	r2, r1
 800379c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3301      	adds	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b0f      	cmp	r3, #15
 80037b4:	d9e9      	bls.n	800378a <prvInitialiseNewTask+0x66>
 80037b6:	e000      	b.n	80037ba <prvInitialiseNewTask+0x96>
			{
				break;
 80037b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037c2:	e003      	b.n	80037cc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ce:	2b37      	cmp	r3, #55	@ 0x37
 80037d0:	d901      	bls.n	80037d6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037d2:	2337      	movs	r3, #55	@ 0x37
 80037d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037da:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037e0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	2200      	movs	r2, #0
 80037e6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ea:	3304      	adds	r3, #4
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fe ffcf 	bl	8002790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	3318      	adds	r3, #24
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe ffca 	bl	8002790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003800:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	2200      	movs	r2, #0
 8003816:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800381a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381c:	2200      	movs	r2, #0
 800381e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	3354      	adds	r3, #84	@ 0x54
 8003826:	224c      	movs	r2, #76	@ 0x4c
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f001 ff3c 	bl	80056a8 <memset>
 8003830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003832:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <prvInitialiseNewTask+0x144>)
 8003834:	659a      	str	r2, [r3, #88]	@ 0x58
 8003836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003838:	4a0c      	ldr	r2, [pc, #48]	@ (800386c <prvInitialiseNewTask+0x148>)
 800383a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800383c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383e:	4a0c      	ldr	r2, [pc, #48]	@ (8003870 <prvInitialiseNewTask+0x14c>)
 8003840:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	68f9      	ldr	r1, [r7, #12]
 8003846:	69b8      	ldr	r0, [r7, #24]
 8003848:	f001 face 	bl	8004de8 <pxPortInitialiseStack>
 800384c:	4602      	mov	r2, r0
 800384e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003850:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800385c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800385e:	bf00      	nop
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20001b84 	.word	0x20001b84
 800386c:	20001bec 	.word	0x20001bec
 8003870:	20001c54 	.word	0x20001c54

08003874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800387c:	f001 fbe4 	bl	8005048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003880:	4b2d      	ldr	r3, [pc, #180]	@ (8003938 <prvAddNewTaskToReadyList+0xc4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a2c      	ldr	r2, [pc, #176]	@ (8003938 <prvAddNewTaskToReadyList+0xc4>)
 8003888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800388a:	4b2c      	ldr	r3, [pc, #176]	@ (800393c <prvAddNewTaskToReadyList+0xc8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003892:	4a2a      	ldr	r2, [pc, #168]	@ (800393c <prvAddNewTaskToReadyList+0xc8>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003898:	4b27      	ldr	r3, [pc, #156]	@ (8003938 <prvAddNewTaskToReadyList+0xc4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d110      	bne.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038a0:	f000 fca2 	bl	80041e8 <prvInitialiseTaskLists>
 80038a4:	e00d      	b.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038a6:	4b26      	ldr	r3, [pc, #152]	@ (8003940 <prvAddNewTaskToReadyList+0xcc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038ae:	4b23      	ldr	r3, [pc, #140]	@ (800393c <prvAddNewTaskToReadyList+0xc8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d802      	bhi.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038bc:	4a1f      	ldr	r2, [pc, #124]	@ (800393c <prvAddNewTaskToReadyList+0xc8>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038c2:	4b20      	ldr	r3, [pc, #128]	@ (8003944 <prvAddNewTaskToReadyList+0xd0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3301      	adds	r3, #1
 80038c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003944 <prvAddNewTaskToReadyList+0xd0>)
 80038ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003944 <prvAddNewTaskToReadyList+0xd0>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003948 <prvAddNewTaskToReadyList+0xd4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d903      	bls.n	80038e8 <prvAddNewTaskToReadyList+0x74>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	4a18      	ldr	r2, [pc, #96]	@ (8003948 <prvAddNewTaskToReadyList+0xd4>)
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4a15      	ldr	r2, [pc, #84]	@ (800394c <prvAddNewTaskToReadyList+0xd8>)
 80038f6:	441a      	add	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f7fe ff53 	bl	80027aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003904:	f001 fbd2 	bl	80050ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003908:	4b0d      	ldr	r3, [pc, #52]	@ (8003940 <prvAddNewTaskToReadyList+0xcc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003910:	4b0a      	ldr	r3, [pc, #40]	@ (800393c <prvAddNewTaskToReadyList+0xc8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	429a      	cmp	r2, r3
 800391c:	d207      	bcs.n	800392e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800391e:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <prvAddNewTaskToReadyList+0xdc>)
 8003920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000e4c 	.word	0x20000e4c
 800393c:	20000978 	.word	0x20000978
 8003940:	20000e58 	.word	0x20000e58
 8003944:	20000e68 	.word	0x20000e68
 8003948:	20000e54 	.word	0x20000e54
 800394c:	2000097c 	.word	0x2000097c
 8003950:	e000ed04 	.word	0xe000ed04

08003954 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800395c:	f001 fb74 	bl	8005048 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d102      	bne.n	800396c <vTaskDelete+0x18>
 8003966:	4b2d      	ldr	r3, [pc, #180]	@ (8003a1c <vTaskDelete+0xc8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	e000      	b.n	800396e <vTaskDelete+0x1a>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3304      	adds	r3, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe ff75 	bl	8002864 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3318      	adds	r3, #24
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe ff6c 	bl	8002864 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800398c:	4b24      	ldr	r3, [pc, #144]	@ (8003a20 <vTaskDelete+0xcc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	4a23      	ldr	r2, [pc, #140]	@ (8003a20 <vTaskDelete+0xcc>)
 8003994:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003996:	4b21      	ldr	r3, [pc, #132]	@ (8003a1c <vTaskDelete+0xc8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	429a      	cmp	r2, r3
 800399e:	d10b      	bne.n	80039b8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	481f      	ldr	r0, [pc, #124]	@ (8003a24 <vTaskDelete+0xd0>)
 80039a8:	f7fe feff 	bl	80027aa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80039ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003a28 <vTaskDelete+0xd4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3301      	adds	r3, #1
 80039b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a28 <vTaskDelete+0xd4>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e009      	b.n	80039cc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80039b8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a2c <vTaskDelete+0xd8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3b01      	subs	r3, #1
 80039be:	4a1b      	ldr	r2, [pc, #108]	@ (8003a2c <vTaskDelete+0xd8>)
 80039c0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fc7e 	bl	80042c4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80039c8:	f000 fcb2 	bl	8004330 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80039cc:	f001 fb6e 	bl	80050ac <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80039d0:	4b17      	ldr	r3, [pc, #92]	@ (8003a30 <vTaskDelete+0xdc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01c      	beq.n	8003a12 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80039d8:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <vTaskDelete+0xc8>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d117      	bne.n	8003a12 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80039e2:	4b14      	ldr	r3, [pc, #80]	@ (8003a34 <vTaskDelete+0xe0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <vTaskDelete+0xae>
	__asm volatile
 80039ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	60bb      	str	r3, [r7, #8]
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	e7fd      	b.n	80039fe <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003a02:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <vTaskDelete+0xe4>)
 8003a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000978 	.word	0x20000978
 8003a20:	20000e68 	.word	0x20000e68
 8003a24:	20000e20 	.word	0x20000e20
 8003a28:	20000e34 	.word	0x20000e34
 8003a2c:	20000e4c 	.word	0x20000e4c
 8003a30:	20000e58 	.word	0x20000e58
 8003a34:	20000e74 	.word	0x20000e74
 8003a38:	e000ed04 	.word	0xe000ed04

08003a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d018      	beq.n	8003a80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a4e:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <vTaskDelay+0x64>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00b      	beq.n	8003a6e <vTaskDelay+0x32>
	__asm volatile
 8003a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	60bb      	str	r3, [r7, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	e7fd      	b.n	8003a6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003a6e:	f000 f88b 	bl	8003b88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a72:	2100      	movs	r1, #0
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fe09 	bl	800468c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a7a:	f000 f893 	bl	8003ba4 <xTaskResumeAll>
 8003a7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d107      	bne.n	8003a96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003a86:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <vTaskDelay+0x68>)
 8003a88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000e74 	.word	0x20000e74
 8003aa4:	e000ed04 	.word	0xe000ed04

08003aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b08a      	sub	sp, #40	@ 0x28
 8003aac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ab6:	463a      	mov	r2, r7
 8003ab8:	1d39      	adds	r1, r7, #4
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe fe12 	bl	80026e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	9202      	str	r2, [sp, #8]
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	460a      	mov	r2, r1
 8003ad6:	4924      	ldr	r1, [pc, #144]	@ (8003b68 <vTaskStartScheduler+0xc0>)
 8003ad8:	4824      	ldr	r0, [pc, #144]	@ (8003b6c <vTaskStartScheduler+0xc4>)
 8003ada:	f7ff fd7d 	bl	80035d8 <xTaskCreateStatic>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4a23      	ldr	r2, [pc, #140]	@ (8003b70 <vTaskStartScheduler+0xc8>)
 8003ae2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ae4:	4b22      	ldr	r3, [pc, #136]	@ (8003b70 <vTaskStartScheduler+0xc8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003aec:	2301      	movs	r3, #1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e001      	b.n	8003af6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d102      	bne.n	8003b02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003afc:	f000 fe1a 	bl	8004734 <xTimerCreateTimerTask>
 8003b00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d11b      	bne.n	8003b40 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	613b      	str	r3, [r7, #16]
}
 8003b1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b1c:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <vTaskStartScheduler+0xcc>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3354      	adds	r3, #84	@ 0x54
 8003b22:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <vTaskStartScheduler+0xd0>)
 8003b24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b26:	4b15      	ldr	r3, [pc, #84]	@ (8003b7c <vTaskStartScheduler+0xd4>)
 8003b28:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b2e:	4b14      	ldr	r3, [pc, #80]	@ (8003b80 <vTaskStartScheduler+0xd8>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b34:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <vTaskStartScheduler+0xdc>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b3a:	f001 f9e1 	bl	8004f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b3e:	e00f      	b.n	8003b60 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b46:	d10b      	bne.n	8003b60 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60fb      	str	r3, [r7, #12]
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <vTaskStartScheduler+0xb4>
}
 8003b60:	bf00      	nop
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	08006130 	.word	0x08006130
 8003b6c:	080041b9 	.word	0x080041b9
 8003b70:	20000e70 	.word	0x20000e70
 8003b74:	20000978 	.word	0x20000978
 8003b78:	20000010 	.word	0x20000010
 8003b7c:	20000e6c 	.word	0x20000e6c
 8003b80:	20000e58 	.word	0x20000e58
 8003b84:	20000e50 	.word	0x20000e50

08003b88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ba0 <vTaskSuspendAll+0x18>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	4a03      	ldr	r2, [pc, #12]	@ (8003ba0 <vTaskSuspendAll+0x18>)
 8003b94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	20000e74 	.word	0x20000e74

08003ba4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003bb2:	4b42      	ldr	r3, [pc, #264]	@ (8003cbc <xTaskResumeAll+0x118>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	603b      	str	r3, [r7, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	e7fd      	b.n	8003bce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bd2:	f001 fa39 	bl	8005048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bd6:	4b39      	ldr	r3, [pc, #228]	@ (8003cbc <xTaskResumeAll+0x118>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	4a37      	ldr	r2, [pc, #220]	@ (8003cbc <xTaskResumeAll+0x118>)
 8003bde:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003be0:	4b36      	ldr	r3, [pc, #216]	@ (8003cbc <xTaskResumeAll+0x118>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d162      	bne.n	8003cae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003be8:	4b35      	ldr	r3, [pc, #212]	@ (8003cc0 <xTaskResumeAll+0x11c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05e      	beq.n	8003cae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bf0:	e02f      	b.n	8003c52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf2:	4b34      	ldr	r3, [pc, #208]	@ (8003cc4 <xTaskResumeAll+0x120>)
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fe30 	bl	8002864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fe2b 	bl	8002864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c12:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc8 <xTaskResumeAll+0x124>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d903      	bls.n	8003c22 <xTaskResumeAll+0x7e>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc8 <xTaskResumeAll+0x124>)
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4a27      	ldr	r2, [pc, #156]	@ (8003ccc <xTaskResumeAll+0x128>)
 8003c30:	441a      	add	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3304      	adds	r3, #4
 8003c36:	4619      	mov	r1, r3
 8003c38:	4610      	mov	r0, r2
 8003c3a:	f7fe fdb6 	bl	80027aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c42:	4b23      	ldr	r3, [pc, #140]	@ (8003cd0 <xTaskResumeAll+0x12c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003c4c:	4b21      	ldr	r3, [pc, #132]	@ (8003cd4 <xTaskResumeAll+0x130>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c52:	4b1c      	ldr	r3, [pc, #112]	@ (8003cc4 <xTaskResumeAll+0x120>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1cb      	bne.n	8003bf2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c60:	f000 fb66 	bl	8004330 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c64:	4b1c      	ldr	r3, [pc, #112]	@ (8003cd8 <xTaskResumeAll+0x134>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c70:	f000 f846 	bl	8003d00 <xTaskIncrementTick>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003c7a:	4b16      	ldr	r3, [pc, #88]	@ (8003cd4 <xTaskResumeAll+0x130>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1f1      	bne.n	8003c70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003c8c:	4b12      	ldr	r3, [pc, #72]	@ (8003cd8 <xTaskResumeAll+0x134>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c92:	4b10      	ldr	r3, [pc, #64]	@ (8003cd4 <xTaskResumeAll+0x130>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <xTaskResumeAll+0x138>)
 8003ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cae:	f001 f9fd 	bl	80050ac <vPortExitCritical>

	return xAlreadyYielded;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	20000e74 	.word	0x20000e74
 8003cc0:	20000e4c 	.word	0x20000e4c
 8003cc4:	20000e0c 	.word	0x20000e0c
 8003cc8:	20000e54 	.word	0x20000e54
 8003ccc:	2000097c 	.word	0x2000097c
 8003cd0:	20000978 	.word	0x20000978
 8003cd4:	20000e60 	.word	0x20000e60
 8003cd8:	20000e5c 	.word	0x20000e5c
 8003cdc:	e000ed04 	.word	0xe000ed04

08003ce0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ce6:	4b05      	ldr	r3, [pc, #20]	@ (8003cfc <xTaskGetTickCount+0x1c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003cec:	687b      	ldr	r3, [r7, #4]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000e50 	.word	0x20000e50

08003d00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e48 <xTaskIncrementTick+0x148>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 8090 	bne.w	8003e34 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d14:	4b4d      	ldr	r3, [pc, #308]	@ (8003e4c <xTaskIncrementTick+0x14c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d1c:	4a4b      	ldr	r2, [pc, #300]	@ (8003e4c <xTaskIncrementTick+0x14c>)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d121      	bne.n	8003d6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d28:	4b49      	ldr	r3, [pc, #292]	@ (8003e50 <xTaskIncrementTick+0x150>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	603b      	str	r3, [r7, #0]
}
 8003d44:	bf00      	nop
 8003d46:	bf00      	nop
 8003d48:	e7fd      	b.n	8003d46 <xTaskIncrementTick+0x46>
 8003d4a:	4b41      	ldr	r3, [pc, #260]	@ (8003e50 <xTaskIncrementTick+0x150>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	4b40      	ldr	r3, [pc, #256]	@ (8003e54 <xTaskIncrementTick+0x154>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3e      	ldr	r2, [pc, #248]	@ (8003e50 <xTaskIncrementTick+0x150>)
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4a3e      	ldr	r2, [pc, #248]	@ (8003e54 <xTaskIncrementTick+0x154>)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e58 <xTaskIncrementTick+0x158>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	4a3c      	ldr	r2, [pc, #240]	@ (8003e58 <xTaskIncrementTick+0x158>)
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	f000 fae2 	bl	8004330 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e5c <xTaskIncrementTick+0x15c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d349      	bcc.n	8003e0a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d76:	4b36      	ldr	r3, [pc, #216]	@ (8003e50 <xTaskIncrementTick+0x150>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d80:	4b36      	ldr	r3, [pc, #216]	@ (8003e5c <xTaskIncrementTick+0x15c>)
 8003d82:	f04f 32ff 	mov.w	r2, #4294967295
 8003d86:	601a      	str	r2, [r3, #0]
					break;
 8003d88:	e03f      	b.n	8003e0a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d8a:	4b31      	ldr	r3, [pc, #196]	@ (8003e50 <xTaskIncrementTick+0x150>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d203      	bcs.n	8003daa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003da2:	4a2e      	ldr	r2, [pc, #184]	@ (8003e5c <xTaskIncrementTick+0x15c>)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003da8:	e02f      	b.n	8003e0a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fd58 	bl	8002864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d004      	beq.n	8003dc6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fd4f 	bl	8002864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dca:	4b25      	ldr	r3, [pc, #148]	@ (8003e60 <xTaskIncrementTick+0x160>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d903      	bls.n	8003dda <xTaskIncrementTick+0xda>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	4a22      	ldr	r2, [pc, #136]	@ (8003e60 <xTaskIncrementTick+0x160>)
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e64 <xTaskIncrementTick+0x164>)
 8003de8:	441a      	add	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f7fe fcda 	bl	80027aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <xTaskIncrementTick+0x168>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d3b8      	bcc.n	8003d76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e08:	e7b5      	b.n	8003d76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e0a:	4b17      	ldr	r3, [pc, #92]	@ (8003e68 <xTaskIncrementTick+0x168>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e10:	4914      	ldr	r1, [pc, #80]	@ (8003e64 <xTaskIncrementTick+0x164>)
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d901      	bls.n	8003e26 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003e22:	2301      	movs	r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e26:	4b11      	ldr	r3, [pc, #68]	@ (8003e6c <xTaskIncrementTick+0x16c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	e004      	b.n	8003e3e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e34:	4b0e      	ldr	r3, [pc, #56]	@ (8003e70 <xTaskIncrementTick+0x170>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e70 <xTaskIncrementTick+0x170>)
 8003e3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003e3e:	697b      	ldr	r3, [r7, #20]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000e74 	.word	0x20000e74
 8003e4c:	20000e50 	.word	0x20000e50
 8003e50:	20000e04 	.word	0x20000e04
 8003e54:	20000e08 	.word	0x20000e08
 8003e58:	20000e64 	.word	0x20000e64
 8003e5c:	20000e6c 	.word	0x20000e6c
 8003e60:	20000e54 	.word	0x20000e54
 8003e64:	2000097c 	.word	0x2000097c
 8003e68:	20000978 	.word	0x20000978
 8003e6c:	20000e60 	.word	0x20000e60
 8003e70:	20000e5c 	.word	0x20000e5c

08003e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003f28 <vTaskSwitchContext+0xb4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e82:	4b2a      	ldr	r3, [pc, #168]	@ (8003f2c <vTaskSwitchContext+0xb8>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e88:	e047      	b.n	8003f1a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003e8a:	4b28      	ldr	r3, [pc, #160]	@ (8003f2c <vTaskSwitchContext+0xb8>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e90:	4b27      	ldr	r3, [pc, #156]	@ (8003f30 <vTaskSwitchContext+0xbc>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	e011      	b.n	8003ebc <vTaskSwitchContext+0x48>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <vTaskSwitchContext+0x42>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	607b      	str	r3, [r7, #4]
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	e7fd      	b.n	8003eb2 <vTaskSwitchContext+0x3e>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	491d      	ldr	r1, [pc, #116]	@ (8003f34 <vTaskSwitchContext+0xc0>)
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0e3      	beq.n	8003e98 <vTaskSwitchContext+0x24>
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4a16      	ldr	r2, [pc, #88]	@ (8003f34 <vTaskSwitchContext+0xc0>)
 8003edc:	4413      	add	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d104      	bne.n	8003f00 <vTaskSwitchContext+0x8c>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	4a0c      	ldr	r2, [pc, #48]	@ (8003f38 <vTaskSwitchContext+0xc4>)
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4a09      	ldr	r2, [pc, #36]	@ (8003f30 <vTaskSwitchContext+0xbc>)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f10:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <vTaskSwitchContext+0xc4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3354      	adds	r3, #84	@ 0x54
 8003f16:	4a09      	ldr	r2, [pc, #36]	@ (8003f3c <vTaskSwitchContext+0xc8>)
 8003f18:	6013      	str	r3, [r2, #0]
}
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000e74 	.word	0x20000e74
 8003f2c:	20000e60 	.word	0x20000e60
 8003f30:	20000e54 	.word	0x20000e54
 8003f34:	2000097c 	.word	0x2000097c
 8003f38:	20000978 	.word	0x20000978
 8003f3c:	20000010 	.word	0x20000010

08003f40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	60fb      	str	r3, [r7, #12]
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	e7fd      	b.n	8003f64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f68:	4b07      	ldr	r3, [pc, #28]	@ (8003f88 <vTaskPlaceOnEventList+0x48>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3318      	adds	r3, #24
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f7fe fc3e 	bl	80027f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f76:	2101      	movs	r1, #1
 8003f78:	6838      	ldr	r0, [r7, #0]
 8003f7a:	f000 fb87 	bl	800468c <prvAddCurrentTaskToDelayedList>
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000978 	.word	0x20000978

08003f8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	617b      	str	r3, [r7, #20]
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe0 <vTaskPlaceOnEventListRestricted+0x54>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3318      	adds	r3, #24
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7fe fbf3 	bl	80027aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
 8003fce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	68b8      	ldr	r0, [r7, #8]
 8003fd4:	f000 fb5a 	bl	800468c <prvAddCurrentTaskToDelayedList>
	}
 8003fd8:	bf00      	nop
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000978 	.word	0x20000978

08003fe4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ffe:	f383 8811 	msr	BASEPRI, r3
 8004002:	f3bf 8f6f 	isb	sy
 8004006:	f3bf 8f4f 	dsb	sy
 800400a:	60fb      	str	r3, [r7, #12]
}
 800400c:	bf00      	nop
 800400e:	bf00      	nop
 8004010:	e7fd      	b.n	800400e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	3318      	adds	r3, #24
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fc24 	bl	8002864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800401c:	4b1d      	ldr	r3, [pc, #116]	@ (8004094 <xTaskRemoveFromEventList+0xb0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11d      	bne.n	8004060 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	3304      	adds	r3, #4
 8004028:	4618      	mov	r0, r3
 800402a:	f7fe fc1b 	bl	8002864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004032:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <xTaskRemoveFromEventList+0xb4>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d903      	bls.n	8004042 <xTaskRemoveFromEventList+0x5e>
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	4a16      	ldr	r2, [pc, #88]	@ (8004098 <xTaskRemoveFromEventList+0xb4>)
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4a13      	ldr	r2, [pc, #76]	@ (800409c <xTaskRemoveFromEventList+0xb8>)
 8004050:	441a      	add	r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3304      	adds	r3, #4
 8004056:	4619      	mov	r1, r3
 8004058:	4610      	mov	r0, r2
 800405a:	f7fe fba6 	bl	80027aa <vListInsertEnd>
 800405e:	e005      	b.n	800406c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	3318      	adds	r3, #24
 8004064:	4619      	mov	r1, r3
 8004066:	480e      	ldr	r0, [pc, #56]	@ (80040a0 <xTaskRemoveFromEventList+0xbc>)
 8004068:	f7fe fb9f 	bl	80027aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004070:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <xTaskRemoveFromEventList+0xc0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	429a      	cmp	r2, r3
 8004078:	d905      	bls.n	8004086 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800407a:	2301      	movs	r3, #1
 800407c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800407e:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <xTaskRemoveFromEventList+0xc4>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e001      	b.n	800408a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800408a:	697b      	ldr	r3, [r7, #20]
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000e74 	.word	0x20000e74
 8004098:	20000e54 	.word	0x20000e54
 800409c:	2000097c 	.word	0x2000097c
 80040a0:	20000e0c 	.word	0x20000e0c
 80040a4:	20000978 	.word	0x20000978
 80040a8:	20000e60 	.word	0x20000e60

080040ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040b4:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <vTaskInternalSetTimeOutState+0x24>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80040bc:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <vTaskInternalSetTimeOutState+0x28>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	605a      	str	r2, [r3, #4]
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	20000e64 	.word	0x20000e64
 80040d4:	20000e50 	.word	0x20000e50

080040d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	613b      	str	r3, [r7, #16]
}
 80040fa:	bf00      	nop
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10b      	bne.n	800411e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60fb      	str	r3, [r7, #12]
}
 8004118:	bf00      	nop
 800411a:	bf00      	nop
 800411c:	e7fd      	b.n	800411a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800411e:	f000 ff93 	bl	8005048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004122:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <xTaskCheckForTimeOut+0xc0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d102      	bne.n	8004142 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	e023      	b.n	800418a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4b15      	ldr	r3, [pc, #84]	@ (800419c <xTaskCheckForTimeOut+0xc4>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d007      	beq.n	800415e <xTaskCheckForTimeOut+0x86>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	429a      	cmp	r2, r3
 8004156:	d302      	bcc.n	800415e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004158:	2301      	movs	r3, #1
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	e015      	b.n	800418a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	429a      	cmp	r2, r3
 8004166:	d20b      	bcs.n	8004180 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	1ad2      	subs	r2, r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff99 	bl	80040ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e004      	b.n	800418a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800418a:	f000 ff8f 	bl	80050ac <vPortExitCritical>

	return xReturn;
 800418e:	69fb      	ldr	r3, [r7, #28]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000e50 	.word	0x20000e50
 800419c:	20000e64 	.word	0x20000e64

080041a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80041a4:	4b03      	ldr	r3, [pc, #12]	@ (80041b4 <vTaskMissedYield+0x14>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20000e60 	.word	0x20000e60

080041b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80041c0:	f000 f852 	bl	8004268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80041c4:	4b06      	ldr	r3, [pc, #24]	@ (80041e0 <prvIdleTask+0x28>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d9f9      	bls.n	80041c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <prvIdleTask+0x2c>)
 80041ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041dc:	e7f0      	b.n	80041c0 <prvIdleTask+0x8>
 80041de:	bf00      	nop
 80041e0:	2000097c 	.word	0x2000097c
 80041e4:	e000ed04 	.word	0xe000ed04

080041e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
 80041f2:	e00c      	b.n	800420e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4a12      	ldr	r2, [pc, #72]	@ (8004248 <prvInitialiseTaskLists+0x60>)
 8004200:	4413      	add	r3, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe faa4 	bl	8002750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3301      	adds	r3, #1
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b37      	cmp	r3, #55	@ 0x37
 8004212:	d9ef      	bls.n	80041f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004214:	480d      	ldr	r0, [pc, #52]	@ (800424c <prvInitialiseTaskLists+0x64>)
 8004216:	f7fe fa9b 	bl	8002750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800421a:	480d      	ldr	r0, [pc, #52]	@ (8004250 <prvInitialiseTaskLists+0x68>)
 800421c:	f7fe fa98 	bl	8002750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004220:	480c      	ldr	r0, [pc, #48]	@ (8004254 <prvInitialiseTaskLists+0x6c>)
 8004222:	f7fe fa95 	bl	8002750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004226:	480c      	ldr	r0, [pc, #48]	@ (8004258 <prvInitialiseTaskLists+0x70>)
 8004228:	f7fe fa92 	bl	8002750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800422c:	480b      	ldr	r0, [pc, #44]	@ (800425c <prvInitialiseTaskLists+0x74>)
 800422e:	f7fe fa8f 	bl	8002750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004232:	4b0b      	ldr	r3, [pc, #44]	@ (8004260 <prvInitialiseTaskLists+0x78>)
 8004234:	4a05      	ldr	r2, [pc, #20]	@ (800424c <prvInitialiseTaskLists+0x64>)
 8004236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004238:	4b0a      	ldr	r3, [pc, #40]	@ (8004264 <prvInitialiseTaskLists+0x7c>)
 800423a:	4a05      	ldr	r2, [pc, #20]	@ (8004250 <prvInitialiseTaskLists+0x68>)
 800423c:	601a      	str	r2, [r3, #0]
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	2000097c 	.word	0x2000097c
 800424c:	20000ddc 	.word	0x20000ddc
 8004250:	20000df0 	.word	0x20000df0
 8004254:	20000e0c 	.word	0x20000e0c
 8004258:	20000e20 	.word	0x20000e20
 800425c:	20000e38 	.word	0x20000e38
 8004260:	20000e04 	.word	0x20000e04
 8004264:	20000e08 	.word	0x20000e08

08004268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800426e:	e019      	b.n	80042a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004270:	f000 feea 	bl	8005048 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004274:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <prvCheckTasksWaitingTermination+0x50>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3304      	adds	r3, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe faef 	bl	8002864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004286:	4b0d      	ldr	r3, [pc, #52]	@ (80042bc <prvCheckTasksWaitingTermination+0x54>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3b01      	subs	r3, #1
 800428c:	4a0b      	ldr	r2, [pc, #44]	@ (80042bc <prvCheckTasksWaitingTermination+0x54>)
 800428e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004290:	4b0b      	ldr	r3, [pc, #44]	@ (80042c0 <prvCheckTasksWaitingTermination+0x58>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3b01      	subs	r3, #1
 8004296:	4a0a      	ldr	r2, [pc, #40]	@ (80042c0 <prvCheckTasksWaitingTermination+0x58>)
 8004298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800429a:	f000 ff07 	bl	80050ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f810 	bl	80042c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042a4:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <prvCheckTasksWaitingTermination+0x58>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e1      	bne.n	8004270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000e20 	.word	0x20000e20
 80042bc:	20000e4c 	.word	0x20000e4c
 80042c0:	20000e34 	.word	0x20000e34

080042c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	3354      	adds	r3, #84	@ 0x54
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 f9f1 	bl	80056b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d108      	bne.n	80042f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e4:	4618      	mov	r0, r3
 80042e6:	f001 f89f 	bl	8005428 <vPortFree>
				vPortFree( pxTCB );
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f001 f89c 	bl	8005428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80042f0:	e019      	b.n	8004326 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d103      	bne.n	8004304 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 f893 	bl	8005428 <vPortFree>
	}
 8004302:	e010      	b.n	8004326 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800430a:	2b02      	cmp	r3, #2
 800430c:	d00b      	beq.n	8004326 <prvDeleteTCB+0x62>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	60fb      	str	r3, [r7, #12]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <prvDeleteTCB+0x5e>
	}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004336:	4b0c      	ldr	r3, [pc, #48]	@ (8004368 <prvResetNextTaskUnblockTime+0x38>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d104      	bne.n	800434a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004340:	4b0a      	ldr	r3, [pc, #40]	@ (800436c <prvResetNextTaskUnblockTime+0x3c>)
 8004342:	f04f 32ff 	mov.w	r2, #4294967295
 8004346:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004348:	e008      	b.n	800435c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434a:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <prvResetNextTaskUnblockTime+0x38>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	4a04      	ldr	r2, [pc, #16]	@ (800436c <prvResetNextTaskUnblockTime+0x3c>)
 800435a:	6013      	str	r3, [r2, #0]
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	20000e04 	.word	0x20000e04
 800436c:	20000e6c 	.word	0x20000e6c

08004370 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <xTaskGetSchedulerState+0x34>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800437e:	2301      	movs	r3, #1
 8004380:	607b      	str	r3, [r7, #4]
 8004382:	e008      	b.n	8004396 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004384:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <xTaskGetSchedulerState+0x38>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800438c:	2302      	movs	r3, #2
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	e001      	b.n	8004396 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004392:	2300      	movs	r3, #0
 8004394:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004396:	687b      	ldr	r3, [r7, #4]
	}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	20000e58 	.word	0x20000e58
 80043a8:	20000e74 	.word	0x20000e74

080043ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d051      	beq.n	8004466 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004470 <xTaskPriorityInherit+0xc4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d241      	bcs.n	8004454 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	db06      	blt.n	80043e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043d8:	4b25      	ldr	r3, [pc, #148]	@ (8004470 <xTaskPriorityInherit+0xc4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	6959      	ldr	r1, [r3, #20]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ee:	4613      	mov	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004474 <xTaskPriorityInherit+0xc8>)
 80043f8:	4413      	add	r3, r2
 80043fa:	4299      	cmp	r1, r3
 80043fc:	d122      	bne.n	8004444 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3304      	adds	r3, #4
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe fa2e 	bl	8002864 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004408:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <xTaskPriorityInherit+0xc4>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004416:	4b18      	ldr	r3, [pc, #96]	@ (8004478 <xTaskPriorityInherit+0xcc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d903      	bls.n	8004426 <xTaskPriorityInherit+0x7a>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004422:	4a15      	ldr	r2, [pc, #84]	@ (8004478 <xTaskPriorityInherit+0xcc>)
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442a:	4613      	mov	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4a10      	ldr	r2, [pc, #64]	@ (8004474 <xTaskPriorityInherit+0xc8>)
 8004434:	441a      	add	r2, r3
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3304      	adds	r3, #4
 800443a:	4619      	mov	r1, r3
 800443c:	4610      	mov	r0, r2
 800443e:	f7fe f9b4 	bl	80027aa <vListInsertEnd>
 8004442:	e004      	b.n	800444e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004444:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <xTaskPriorityInherit+0xc4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800444e:	2301      	movs	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e008      	b.n	8004466 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <xTaskPriorityInherit+0xc4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	429a      	cmp	r2, r3
 8004460:	d201      	bcs.n	8004466 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004462:	2301      	movs	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004466:	68fb      	ldr	r3, [r7, #12]
	}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000978 	.word	0x20000978
 8004474:	2000097c 	.word	0x2000097c
 8004478:	20000e54 	.word	0x20000e54

0800447c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004488:	2300      	movs	r3, #0
 800448a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d058      	beq.n	8004544 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004492:	4b2f      	ldr	r3, [pc, #188]	@ (8004550 <xTaskPriorityDisinherit+0xd4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	429a      	cmp	r2, r3
 800449a:	d00b      	beq.n	80044b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	60fb      	str	r3, [r7, #12]
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	e7fd      	b.n	80044b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	60bb      	str	r3, [r7, #8]
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d8:	1e5a      	subs	r2, r3, #1
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d02c      	beq.n	8004544 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d128      	bne.n	8004544 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe f9b4 	bl	8002864 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004514:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <xTaskPriorityDisinherit+0xd8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d903      	bls.n	8004524 <xTaskPriorityDisinherit+0xa8>
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	4a0c      	ldr	r2, [pc, #48]	@ (8004554 <xTaskPriorityDisinherit+0xd8>)
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4a09      	ldr	r2, [pc, #36]	@ (8004558 <xTaskPriorityDisinherit+0xdc>)
 8004532:	441a      	add	r2, r3
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	3304      	adds	r3, #4
 8004538:	4619      	mov	r1, r3
 800453a:	4610      	mov	r0, r2
 800453c:	f7fe f935 	bl	80027aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004540:	2301      	movs	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004544:	697b      	ldr	r3, [r7, #20]
	}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000978 	.word	0x20000978
 8004554:	20000e54 	.word	0x20000e54
 8004558:	2000097c 	.word	0x2000097c

0800455c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800456a:	2301      	movs	r3, #1
 800456c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d06c      	beq.n	800464e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800457c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004580:	f383 8811 	msr	BASEPRI, r3
 8004584:	f3bf 8f6f 	isb	sy
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	60fb      	str	r3, [r7, #12]
}
 800458e:	bf00      	nop
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d902      	bls.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	e002      	b.n	80045aa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d04c      	beq.n	800464e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d147      	bne.n	800464e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80045be:	4b26      	ldr	r3, [pc, #152]	@ (8004658 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d10b      	bne.n	80045e0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80045c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	60bb      	str	r3, [r7, #8]
}
 80045da:	bf00      	nop
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db04      	blt.n	80045fe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	6959      	ldr	r1, [r3, #20]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4a13      	ldr	r2, [pc, #76]	@ (800465c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800460e:	4413      	add	r3, r2
 8004610:	4299      	cmp	r1, r3
 8004612:	d11c      	bne.n	800464e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	3304      	adds	r3, #4
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe f923 	bl	8002864 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004622:	4b0f      	ldr	r3, [pc, #60]	@ (8004660 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d903      	bls.n	8004632 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462e:	4a0c      	ldr	r2, [pc, #48]	@ (8004660 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	4a07      	ldr	r2, [pc, #28]	@ (800465c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004640:	441a      	add	r2, r3
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	3304      	adds	r3, #4
 8004646:	4619      	mov	r1, r3
 8004648:	4610      	mov	r0, r2
 800464a:	f7fe f8ae 	bl	80027aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800464e:	bf00      	nop
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000978 	.word	0x20000978
 800465c:	2000097c 	.word	0x2000097c
 8004660:	20000e54 	.word	0x20000e54

08004664 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004668:	4b07      	ldr	r3, [pc, #28]	@ (8004688 <pvTaskIncrementMutexHeldCount+0x24>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d004      	beq.n	800467a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004670:	4b05      	ldr	r3, [pc, #20]	@ (8004688 <pvTaskIncrementMutexHeldCount+0x24>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004676:	3201      	adds	r2, #1
 8004678:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800467a:	4b03      	ldr	r3, [pc, #12]	@ (8004688 <pvTaskIncrementMutexHeldCount+0x24>)
 800467c:	681b      	ldr	r3, [r3, #0]
	}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	20000978 	.word	0x20000978

0800468c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004696:	4b21      	ldr	r3, [pc, #132]	@ (800471c <prvAddCurrentTaskToDelayedList+0x90>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800469c:	4b20      	ldr	r3, [pc, #128]	@ (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe f8de 	bl	8002864 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d10a      	bne.n	80046c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4819      	ldr	r0, [pc, #100]	@ (8004724 <prvAddCurrentTaskToDelayedList+0x98>)
 80046c0:	f7fe f873 	bl	80027aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046c4:	e026      	b.n	8004714 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046ce:	4b14      	ldr	r3, [pc, #80]	@ (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d209      	bcs.n	80046f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046de:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7fe f881 	bl	80027f2 <vListInsert>
}
 80046f0:	e010      	b.n	8004714 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f2:	4b0e      	ldr	r3, [pc, #56]	@ (800472c <prvAddCurrentTaskToDelayedList+0xa0>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fe f877 	bl	80027f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004704:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d202      	bcs.n	8004714 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800470e:	4a08      	ldr	r2, [pc, #32]	@ (8004730 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6013      	str	r3, [r2, #0]
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000e50 	.word	0x20000e50
 8004720:	20000978 	.word	0x20000978
 8004724:	20000e38 	.word	0x20000e38
 8004728:	20000e08 	.word	0x20000e08
 800472c:	20000e04 	.word	0x20000e04
 8004730:	20000e6c 	.word	0x20000e6c

08004734 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	@ 0x28
 8004738:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800473e:	f000 fb13 	bl	8004d68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004742:	4b1d      	ldr	r3, [pc, #116]	@ (80047b8 <xTimerCreateTimerTask+0x84>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d021      	beq.n	800478e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004752:	1d3a      	adds	r2, r7, #4
 8004754:	f107 0108 	add.w	r1, r7, #8
 8004758:	f107 030c 	add.w	r3, r7, #12
 800475c:	4618      	mov	r0, r3
 800475e:	f7fd ffdd 	bl	800271c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	9202      	str	r2, [sp, #8]
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	2302      	movs	r3, #2
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2300      	movs	r3, #0
 8004772:	460a      	mov	r2, r1
 8004774:	4911      	ldr	r1, [pc, #68]	@ (80047bc <xTimerCreateTimerTask+0x88>)
 8004776:	4812      	ldr	r0, [pc, #72]	@ (80047c0 <xTimerCreateTimerTask+0x8c>)
 8004778:	f7fe ff2e 	bl	80035d8 <xTaskCreateStatic>
 800477c:	4603      	mov	r3, r0
 800477e:	4a11      	ldr	r2, [pc, #68]	@ (80047c4 <xTimerCreateTimerTask+0x90>)
 8004780:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004782:	4b10      	ldr	r3, [pc, #64]	@ (80047c4 <xTimerCreateTimerTask+0x90>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800478a:	2301      	movs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	613b      	str	r3, [r7, #16]
}
 80047a6:	bf00      	nop
 80047a8:	bf00      	nop
 80047aa:	e7fd      	b.n	80047a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047ac:	697b      	ldr	r3, [r7, #20]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000ea8 	.word	0x20000ea8
 80047bc:	08006138 	.word	0x08006138
 80047c0:	08004901 	.word	0x08004901
 80047c4:	20000eac 	.word	0x20000eac

080047c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b08a      	sub	sp, #40	@ 0x28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10b      	bne.n	80047f8 <xTimerGenericCommand+0x30>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	623b      	str	r3, [r7, #32]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047f8:	4b19      	ldr	r3, [pc, #100]	@ (8004860 <xTimerGenericCommand+0x98>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d02a      	beq.n	8004856 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b05      	cmp	r3, #5
 8004810:	dc18      	bgt.n	8004844 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004812:	f7ff fdad 	bl	8004370 <xTaskGetSchedulerState>
 8004816:	4603      	mov	r3, r0
 8004818:	2b02      	cmp	r3, #2
 800481a:	d109      	bne.n	8004830 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800481c:	4b10      	ldr	r3, [pc, #64]	@ (8004860 <xTimerGenericCommand+0x98>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	f107 0110 	add.w	r1, r7, #16
 8004824:	2300      	movs	r3, #0
 8004826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004828:	f7fe f9be 	bl	8002ba8 <xQueueGenericSend>
 800482c:	6278      	str	r0, [r7, #36]	@ 0x24
 800482e:	e012      	b.n	8004856 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004830:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <xTimerGenericCommand+0x98>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	f107 0110 	add.w	r1, r7, #16
 8004838:	2300      	movs	r3, #0
 800483a:	2200      	movs	r2, #0
 800483c:	f7fe f9b4 	bl	8002ba8 <xQueueGenericSend>
 8004840:	6278      	str	r0, [r7, #36]	@ 0x24
 8004842:	e008      	b.n	8004856 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004844:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <xTimerGenericCommand+0x98>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	f107 0110 	add.w	r1, r7, #16
 800484c:	2300      	movs	r3, #0
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	f7fe faac 	bl	8002dac <xQueueGenericSendFromISR>
 8004854:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004858:	4618      	mov	r0, r3
 800485a:	3728      	adds	r7, #40	@ 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000ea8 	.word	0x20000ea8

08004864 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b088      	sub	sp, #32
 8004868:	af02      	add	r7, sp, #8
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486e:	4b23      	ldr	r3, [pc, #140]	@ (80048fc <prvProcessExpiredTimer+0x98>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3304      	adds	r3, #4
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd fff1 	bl	8002864 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d023      	beq.n	80048d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	699a      	ldr	r2, [r3, #24]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	18d1      	adds	r1, r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	6978      	ldr	r0, [r7, #20]
 800489e:	f000 f8d5 	bl	8004a4c <prvInsertTimerInActiveList>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048a8:	2300      	movs	r3, #0
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2300      	movs	r3, #0
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	2100      	movs	r1, #0
 80048b2:	6978      	ldr	r0, [r7, #20]
 80048b4:	f7ff ff88 	bl	80047c8 <xTimerGenericCommand>
 80048b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d114      	bne.n	80048ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	60fb      	str	r3, [r7, #12]
}
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	6978      	ldr	r0, [r7, #20]
 80048f0:	4798      	blx	r3
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000ea0 	.word	0x20000ea0

08004900 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004908:	f107 0308 	add.w	r3, r7, #8
 800490c:	4618      	mov	r0, r3
 800490e:	f000 f859 	bl	80049c4 <prvGetNextExpireTime>
 8004912:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4619      	mov	r1, r3
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f805 	bl	8004928 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800491e:	f000 f8d7 	bl	8004ad0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004922:	bf00      	nop
 8004924:	e7f0      	b.n	8004908 <prvTimerTask+0x8>
	...

08004928 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004932:	f7ff f929 	bl	8003b88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004936:	f107 0308 	add.w	r3, r7, #8
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f866 	bl	8004a0c <prvSampleTimeNow>
 8004940:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d130      	bne.n	80049aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10a      	bne.n	8004964 <prvProcessTimerOrBlockTask+0x3c>
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	429a      	cmp	r2, r3
 8004954:	d806      	bhi.n	8004964 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004956:	f7ff f925 	bl	8003ba4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ff81 	bl	8004864 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004962:	e024      	b.n	80049ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800496a:	4b13      	ldr	r3, [pc, #76]	@ (80049b8 <prvProcessTimerOrBlockTask+0x90>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <prvProcessTimerOrBlockTask+0x50>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <prvProcessTimerOrBlockTask+0x52>
 8004978:	2300      	movs	r3, #0
 800497a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800497c:	4b0f      	ldr	r3, [pc, #60]	@ (80049bc <prvProcessTimerOrBlockTask+0x94>)
 800497e:	6818      	ldr	r0, [r3, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	4619      	mov	r1, r3
 800498a:	f7fe fdf1 	bl	8003570 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800498e:	f7ff f909 	bl	8003ba4 <xTaskResumeAll>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004998:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <prvProcessTimerOrBlockTask+0x98>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
}
 80049a8:	e001      	b.n	80049ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049aa:	f7ff f8fb 	bl	8003ba4 <xTaskResumeAll>
}
 80049ae:	bf00      	nop
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000ea4 	.word	0x20000ea4
 80049bc:	20000ea8 	.word	0x20000ea8
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004a08 <prvGetNextExpireTime+0x44>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <prvGetNextExpireTime+0x16>
 80049d6:	2201      	movs	r2, #1
 80049d8:	e000      	b.n	80049dc <prvGetNextExpireTime+0x18>
 80049da:	2200      	movs	r2, #0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049e8:	4b07      	ldr	r3, [pc, #28]	@ (8004a08 <prvGetNextExpireTime+0x44>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	e001      	b.n	80049f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049f8:	68fb      	ldr	r3, [r7, #12]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000ea0 	.word	0x20000ea0

08004a0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a14:	f7ff f964 	bl	8003ce0 <xTaskGetTickCount>
 8004a18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a48 <prvSampleTimeNow+0x3c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d205      	bcs.n	8004a30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a24:	f000 f93a 	bl	8004c9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	e002      	b.n	8004a36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a36:	4a04      	ldr	r2, [pc, #16]	@ (8004a48 <prvSampleTimeNow+0x3c>)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000eb0 	.word	0x20000eb0

08004a4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d812      	bhi.n	8004a98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	1ad2      	subs	r2, r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d302      	bcc.n	8004a86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a80:	2301      	movs	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e01b      	b.n	8004abe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a86:	4b10      	ldr	r3, [pc, #64]	@ (8004ac8 <prvInsertTimerInActiveList+0x7c>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4610      	mov	r0, r2
 8004a92:	f7fd feae 	bl	80027f2 <vListInsert>
 8004a96:	e012      	b.n	8004abe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d206      	bcs.n	8004aae <prvInsertTimerInActiveList+0x62>
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d302      	bcc.n	8004aae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e007      	b.n	8004abe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aae:	4b07      	ldr	r3, [pc, #28]	@ (8004acc <prvInsertTimerInActiveList+0x80>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f7fd fe9a 	bl	80027f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004abe:	697b      	ldr	r3, [r7, #20]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20000ea4 	.word	0x20000ea4
 8004acc:	20000ea0 	.word	0x20000ea0

08004ad0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	@ 0x38
 8004ad4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ad6:	e0ce      	b.n	8004c76 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da19      	bge.n	8004b12 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	61fb      	str	r3, [r7, #28]
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b08:	6850      	ldr	r0, [r2, #4]
 8004b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b0c:	6892      	ldr	r2, [r2, #8]
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f2c0 80ae 	blt.w	8004c76 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fd fe9a 	bl	8002864 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b30:	463b      	mov	r3, r7
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff6a 	bl	8004a0c <prvSampleTimeNow>
 8004b38:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b09      	cmp	r3, #9
 8004b3e:	f200 8097 	bhi.w	8004c70 <prvProcessReceivedCommands+0x1a0>
 8004b42:	a201      	add	r2, pc, #4	@ (adr r2, 8004b48 <prvProcessReceivedCommands+0x78>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b71 	.word	0x08004b71
 8004b4c:	08004b71 	.word	0x08004b71
 8004b50:	08004b71 	.word	0x08004b71
 8004b54:	08004be7 	.word	0x08004be7
 8004b58:	08004bfb 	.word	0x08004bfb
 8004b5c:	08004c47 	.word	0x08004c47
 8004b60:	08004b71 	.word	0x08004b71
 8004b64:	08004b71 	.word	0x08004b71
 8004b68:	08004be7 	.word	0x08004be7
 8004b6c:	08004bfb 	.word	0x08004bfb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	18d1      	adds	r1, r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b90:	f7ff ff5c 	bl	8004a4c <prvInsertTimerInActiveList>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d06c      	beq.n	8004c74 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ba0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d061      	beq.n	8004c74 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	441a      	add	r2, r3
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bc2:	f7ff fe01 	bl	80047c8 <xTimerGenericCommand>
 8004bc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d152      	bne.n	8004c74 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	61bb      	str	r3, [r7, #24]
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004bf8:	e03d      	b.n	8004c76 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10b      	bne.n	8004c32 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	617b      	str	r3, [r7, #20]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	18d1      	adds	r1, r2, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c40:	f7ff ff04 	bl	8004a4c <prvInsertTimerInActiveList>
					break;
 8004c44:	e017      	b.n	8004c76 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d103      	bne.n	8004c5c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004c54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c56:	f000 fbe7 	bl	8005428 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c5a:	e00c      	b.n	8004c76 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c62:	f023 0301 	bic.w	r3, r3, #1
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c6e:	e002      	b.n	8004c76 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004c70:	bf00      	nop
 8004c72:	e000      	b.n	8004c76 <prvProcessReceivedCommands+0x1a6>
					break;
 8004c74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c76:	4b08      	ldr	r3, [pc, #32]	@ (8004c98 <prvProcessReceivedCommands+0x1c8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	1d39      	adds	r1, r7, #4
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe f932 	bl	8002ee8 <xQueueReceive>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f47f af26 	bne.w	8004ad8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c8c:	bf00      	nop
 8004c8e:	bf00      	nop
 8004c90:	3730      	adds	r7, #48	@ 0x30
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000ea8 	.word	0x20000ea8

08004c9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ca2:	e049      	b.n	8004d38 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d60 <prvSwitchTimerLists+0xc4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cae:	4b2c      	ldr	r3, [pc, #176]	@ (8004d60 <prvSwitchTimerLists+0xc4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fd fdd1 	bl	8002864 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02f      	beq.n	8004d38 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4413      	add	r3, r2
 8004ce0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d90e      	bls.n	8004d08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d60 <prvSwitchTimerLists+0xc4>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7fd fd76 	bl	80027f2 <vListInsert>
 8004d06:	e017      	b.n	8004d38 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	2100      	movs	r1, #0
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f7ff fd58 	bl	80047c8 <xTimerGenericCommand>
 8004d18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10b      	bne.n	8004d38 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	603b      	str	r3, [r7, #0]
}
 8004d32:	bf00      	nop
 8004d34:	bf00      	nop
 8004d36:	e7fd      	b.n	8004d34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d38:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <prvSwitchTimerLists+0xc4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1b0      	bne.n	8004ca4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d42:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <prvSwitchTimerLists+0xc4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d48:	4b06      	ldr	r3, [pc, #24]	@ (8004d64 <prvSwitchTimerLists+0xc8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <prvSwitchTimerLists+0xc4>)
 8004d4e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d50:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <prvSwitchTimerLists+0xc8>)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	6013      	str	r3, [r2, #0]
}
 8004d56:	bf00      	nop
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000ea0 	.word	0x20000ea0
 8004d64:	20000ea4 	.word	0x20000ea4

08004d68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d6e:	f000 f96b 	bl	8005048 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d72:	4b15      	ldr	r3, [pc, #84]	@ (8004dc8 <prvCheckForValidListAndQueue+0x60>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d120      	bne.n	8004dbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d7a:	4814      	ldr	r0, [pc, #80]	@ (8004dcc <prvCheckForValidListAndQueue+0x64>)
 8004d7c:	f7fd fce8 	bl	8002750 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d80:	4813      	ldr	r0, [pc, #76]	@ (8004dd0 <prvCheckForValidListAndQueue+0x68>)
 8004d82:	f7fd fce5 	bl	8002750 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d86:	4b13      	ldr	r3, [pc, #76]	@ (8004dd4 <prvCheckForValidListAndQueue+0x6c>)
 8004d88:	4a10      	ldr	r2, [pc, #64]	@ (8004dcc <prvCheckForValidListAndQueue+0x64>)
 8004d8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d8c:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <prvCheckForValidListAndQueue+0x70>)
 8004d8e:	4a10      	ldr	r2, [pc, #64]	@ (8004dd0 <prvCheckForValidListAndQueue+0x68>)
 8004d90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d92:	2300      	movs	r3, #0
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	4b11      	ldr	r3, [pc, #68]	@ (8004ddc <prvCheckForValidListAndQueue+0x74>)
 8004d98:	4a11      	ldr	r2, [pc, #68]	@ (8004de0 <prvCheckForValidListAndQueue+0x78>)
 8004d9a:	2110      	movs	r1, #16
 8004d9c:	200a      	movs	r0, #10
 8004d9e:	f7fd fdf5 	bl	800298c <xQueueGenericCreateStatic>
 8004da2:	4603      	mov	r3, r0
 8004da4:	4a08      	ldr	r2, [pc, #32]	@ (8004dc8 <prvCheckForValidListAndQueue+0x60>)
 8004da6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004da8:	4b07      	ldr	r3, [pc, #28]	@ (8004dc8 <prvCheckForValidListAndQueue+0x60>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004db0:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <prvCheckForValidListAndQueue+0x60>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	490b      	ldr	r1, [pc, #44]	@ (8004de4 <prvCheckForValidListAndQueue+0x7c>)
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fbb0 	bl	800351c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dbc:	f000 f976 	bl	80050ac <vPortExitCritical>
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000ea8 	.word	0x20000ea8
 8004dcc:	20000e78 	.word	0x20000e78
 8004dd0:	20000e8c 	.word	0x20000e8c
 8004dd4:	20000ea0 	.word	0x20000ea0
 8004dd8:	20000ea4 	.word	0x20000ea4
 8004ddc:	20000f54 	.word	0x20000f54
 8004de0:	20000eb4 	.word	0x20000eb4
 8004de4:	08006140 	.word	0x08006140

08004de8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	3b04      	subs	r3, #4
 8004df8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b04      	subs	r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f023 0201 	bic.w	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b04      	subs	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e18:	4a0c      	ldr	r2, [pc, #48]	@ (8004e4c <pxPortInitialiseStack+0x64>)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3b14      	subs	r3, #20
 8004e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3b04      	subs	r3, #4
 8004e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f06f 0202 	mvn.w	r2, #2
 8004e36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b20      	subs	r3, #32
 8004e3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	08004e51 	.word	0x08004e51

08004e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ea8 <prvTaskExitError+0x58>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d00b      	beq.n	8004e7c <prvTaskExitError+0x2c>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	60fb      	str	r3, [r7, #12]
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	e7fd      	b.n	8004e78 <prvTaskExitError+0x28>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	60bb      	str	r3, [r7, #8]
}
 8004e8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e90:	bf00      	nop
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0fc      	beq.n	8004e92 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	2000000c 	.word	0x2000000c
 8004eac:	00000000 	.word	0x00000000

08004eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004eb0:	4b07      	ldr	r3, [pc, #28]	@ (8004ed0 <pxCurrentTCBConst2>)
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	6808      	ldr	r0, [r1, #0]
 8004eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eba:	f380 8809 	msr	PSP, r0
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8811 	msr	BASEPRI, r0
 8004eca:	4770      	bx	lr
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst2>:
 8004ed0:	20000978 	.word	0x20000978
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ed8:	4808      	ldr	r0, [pc, #32]	@ (8004efc <prvPortStartFirstTask+0x24>)
 8004eda:	6800      	ldr	r0, [r0, #0]
 8004edc:	6800      	ldr	r0, [r0, #0]
 8004ede:	f380 8808 	msr	MSP, r0
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8814 	msr	CONTROL, r0
 8004eea:	b662      	cpsie	i
 8004eec:	b661      	cpsie	f
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	df00      	svc	0
 8004ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004efa:	bf00      	nop
 8004efc:	e000ed08 	.word	0xe000ed08

08004f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f06:	4b47      	ldr	r3, [pc, #284]	@ (8005024 <xPortStartScheduler+0x124>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a47      	ldr	r2, [pc, #284]	@ (8005028 <xPortStartScheduler+0x128>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10b      	bne.n	8004f28 <xPortStartScheduler+0x28>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	613b      	str	r3, [r7, #16]
}
 8004f22:	bf00      	nop
 8004f24:	bf00      	nop
 8004f26:	e7fd      	b.n	8004f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f28:	4b3e      	ldr	r3, [pc, #248]	@ (8005024 <xPortStartScheduler+0x124>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800502c <xPortStartScheduler+0x12c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d10b      	bne.n	8004f4a <xPortStartScheduler+0x4a>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	60fb      	str	r3, [r7, #12]
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f4a:	4b39      	ldr	r3, [pc, #228]	@ (8005030 <xPortStartScheduler+0x130>)
 8004f4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	22ff      	movs	r2, #255	@ 0xff
 8004f5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	4b31      	ldr	r3, [pc, #196]	@ (8005034 <xPortStartScheduler+0x134>)
 8004f70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f72:	4b31      	ldr	r3, [pc, #196]	@ (8005038 <xPortStartScheduler+0x138>)
 8004f74:	2207      	movs	r2, #7
 8004f76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f78:	e009      	b.n	8004f8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005038 <xPortStartScheduler+0x138>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	4a2d      	ldr	r2, [pc, #180]	@ (8005038 <xPortStartScheduler+0x138>)
 8004f82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f96:	2b80      	cmp	r3, #128	@ 0x80
 8004f98:	d0ef      	beq.n	8004f7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f9a:	4b27      	ldr	r3, [pc, #156]	@ (8005038 <xPortStartScheduler+0x138>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f1c3 0307 	rsb	r3, r3, #7
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d00b      	beq.n	8004fbe <xPortStartScheduler+0xbe>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	60bb      	str	r3, [r7, #8]
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8005038 <xPortStartScheduler+0x138>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005038 <xPortStartScheduler+0x138>)
 8004fc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005038 <xPortStartScheduler+0x138>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fd0:	4a19      	ldr	r2, [pc, #100]	@ (8005038 <xPortStartScheduler+0x138>)
 8004fd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fdc:	4b17      	ldr	r3, [pc, #92]	@ (800503c <xPortStartScheduler+0x13c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a16      	ldr	r2, [pc, #88]	@ (800503c <xPortStartScheduler+0x13c>)
 8004fe2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fe6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fe8:	4b14      	ldr	r3, [pc, #80]	@ (800503c <xPortStartScheduler+0x13c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a13      	ldr	r2, [pc, #76]	@ (800503c <xPortStartScheduler+0x13c>)
 8004fee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004ff2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ff4:	f000 f8da 	bl	80051ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ff8:	4b11      	ldr	r3, [pc, #68]	@ (8005040 <xPortStartScheduler+0x140>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ffe:	f000 f8f9 	bl	80051f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005002:	4b10      	ldr	r3, [pc, #64]	@ (8005044 <xPortStartScheduler+0x144>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a0f      	ldr	r2, [pc, #60]	@ (8005044 <xPortStartScheduler+0x144>)
 8005008:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800500c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800500e:	f7ff ff63 	bl	8004ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005012:	f7fe ff2f 	bl	8003e74 <vTaskSwitchContext>
	prvTaskExitError();
 8005016:	f7ff ff1b 	bl	8004e50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	e000ed00 	.word	0xe000ed00
 8005028:	410fc271 	.word	0x410fc271
 800502c:	410fc270 	.word	0x410fc270
 8005030:	e000e400 	.word	0xe000e400
 8005034:	20000fa4 	.word	0x20000fa4
 8005038:	20000fa8 	.word	0x20000fa8
 800503c:	e000ed20 	.word	0xe000ed20
 8005040:	2000000c 	.word	0x2000000c
 8005044:	e000ef34 	.word	0xe000ef34

08005048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	607b      	str	r3, [r7, #4]
}
 8005060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005062:	4b10      	ldr	r3, [pc, #64]	@ (80050a4 <vPortEnterCritical+0x5c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3301      	adds	r3, #1
 8005068:	4a0e      	ldr	r2, [pc, #56]	@ (80050a4 <vPortEnterCritical+0x5c>)
 800506a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800506c:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <vPortEnterCritical+0x5c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d110      	bne.n	8005096 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005074:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <vPortEnterCritical+0x60>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00b      	beq.n	8005096 <vPortEnterCritical+0x4e>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	603b      	str	r3, [r7, #0]
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	e7fd      	b.n	8005092 <vPortEnterCritical+0x4a>
	}
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	2000000c 	.word	0x2000000c
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050b2:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <vPortExitCritical+0x50>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10b      	bne.n	80050d2 <vPortExitCritical+0x26>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	607b      	str	r3, [r7, #4]
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	e7fd      	b.n	80050ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050d2:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <vPortExitCritical+0x50>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	4a08      	ldr	r2, [pc, #32]	@ (80050fc <vPortExitCritical+0x50>)
 80050da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050dc:	4b07      	ldr	r3, [pc, #28]	@ (80050fc <vPortExitCritical+0x50>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <vPortExitCritical+0x44>
 80050e4:	2300      	movs	r3, #0
 80050e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f383 8811 	msr	BASEPRI, r3
}
 80050ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	2000000c 	.word	0x2000000c

08005100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005100:	f3ef 8009 	mrs	r0, PSP
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	4b15      	ldr	r3, [pc, #84]	@ (8005160 <pxCurrentTCBConst>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	f01e 0f10 	tst.w	lr, #16
 8005110:	bf08      	it	eq
 8005112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	6010      	str	r0, [r2, #0]
 800511c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005124:	f380 8811 	msr	BASEPRI, r0
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f7fe fea0 	bl	8003e74 <vTaskSwitchContext>
 8005134:	f04f 0000 	mov.w	r0, #0
 8005138:	f380 8811 	msr	BASEPRI, r0
 800513c:	bc09      	pop	{r0, r3}
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	6808      	ldr	r0, [r1, #0]
 8005142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005146:	f01e 0f10 	tst.w	lr, #16
 800514a:	bf08      	it	eq
 800514c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005150:	f380 8809 	msr	PSP, r0
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w

08005160 <pxCurrentTCBConst>:
 8005160:	20000978 	.word	0x20000978
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop

08005168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005182:	f7fe fdbd 	bl	8003d00 <xTaskIncrementTick>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800518c:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <xPortSysTickHandler+0x40>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051b6:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <vPortSetupTimerInterrupt+0x38>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051bc:	4b0a      	ldr	r3, [pc, #40]	@ (80051e8 <vPortSetupTimerInterrupt+0x3c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	@ (80051ec <vPortSetupTimerInterrupt+0x40>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	4a09      	ldr	r2, [pc, #36]	@ (80051f0 <vPortSetupTimerInterrupt+0x44>)
 80051ca:	3b01      	subs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ce:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e010 	.word	0xe000e010
 80051e4:	e000e018 	.word	0xe000e018
 80051e8:	20000000 	.word	0x20000000
 80051ec:	10624dd3 	.word	0x10624dd3
 80051f0:	e000e014 	.word	0xe000e014

080051f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005204 <vPortEnableVFP+0x10>
 80051f8:	6801      	ldr	r1, [r0, #0]
 80051fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80051fe:	6001      	str	r1, [r0, #0]
 8005200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005202:	bf00      	nop
 8005204:	e000ed88 	.word	0xe000ed88

08005208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800520e:	f3ef 8305 	mrs	r3, IPSR
 8005212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b0f      	cmp	r3, #15
 8005218:	d915      	bls.n	8005246 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800521a:	4a18      	ldr	r2, [pc, #96]	@ (800527c <vPortValidateInterruptPriority+0x74>)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005224:	4b16      	ldr	r3, [pc, #88]	@ (8005280 <vPortValidateInterruptPriority+0x78>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	7afa      	ldrb	r2, [r7, #11]
 800522a:	429a      	cmp	r2, r3
 800522c:	d20b      	bcs.n	8005246 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	607b      	str	r3, [r7, #4]
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	e7fd      	b.n	8005242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005246:	4b0f      	ldr	r3, [pc, #60]	@ (8005284 <vPortValidateInterruptPriority+0x7c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800524e:	4b0e      	ldr	r3, [pc, #56]	@ (8005288 <vPortValidateInterruptPriority+0x80>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d90b      	bls.n	800526e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	603b      	str	r3, [r7, #0]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <vPortValidateInterruptPriority+0x62>
	}
 800526e:	bf00      	nop
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	e000e3f0 	.word	0xe000e3f0
 8005280:	20000fa4 	.word	0x20000fa4
 8005284:	e000ed0c 	.word	0xe000ed0c
 8005288:	20000fa8 	.word	0x20000fa8

0800528c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	@ 0x28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005298:	f7fe fc76 	bl	8003b88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800529c:	4b5c      	ldr	r3, [pc, #368]	@ (8005410 <pvPortMalloc+0x184>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052a4:	f000 f924 	bl	80054f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052a8:	4b5a      	ldr	r3, [pc, #360]	@ (8005414 <pvPortMalloc+0x188>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f040 8095 	bne.w	80053e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01e      	beq.n	80052fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052bc:	2208      	movs	r2, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4413      	add	r3, r2
 80052c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d015      	beq.n	80052fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f023 0307 	bic.w	r3, r3, #7
 80052d4:	3308      	adds	r3, #8
 80052d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <pvPortMalloc+0x6e>
	__asm volatile
 80052e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e6:	f383 8811 	msr	BASEPRI, r3
 80052ea:	f3bf 8f6f 	isb	sy
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	617b      	str	r3, [r7, #20]
}
 80052f4:	bf00      	nop
 80052f6:	bf00      	nop
 80052f8:	e7fd      	b.n	80052f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d06f      	beq.n	80053e0 <pvPortMalloc+0x154>
 8005300:	4b45      	ldr	r3, [pc, #276]	@ (8005418 <pvPortMalloc+0x18c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	429a      	cmp	r2, r3
 8005308:	d86a      	bhi.n	80053e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800530a:	4b44      	ldr	r3, [pc, #272]	@ (800541c <pvPortMalloc+0x190>)
 800530c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800530e:	4b43      	ldr	r3, [pc, #268]	@ (800541c <pvPortMalloc+0x190>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005314:	e004      	b.n	8005320 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	d903      	bls.n	8005332 <pvPortMalloc+0xa6>
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f1      	bne.n	8005316 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005332:	4b37      	ldr	r3, [pc, #220]	@ (8005410 <pvPortMalloc+0x184>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005338:	429a      	cmp	r2, r3
 800533a:	d051      	beq.n	80053e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2208      	movs	r2, #8
 8005342:	4413      	add	r3, r2
 8005344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	1ad2      	subs	r2, r2, r3
 8005356:	2308      	movs	r3, #8
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	429a      	cmp	r2, r3
 800535c:	d920      	bls.n	80053a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800535e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <pvPortMalloc+0xfc>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	613b      	str	r3, [r7, #16]
}
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800539a:	69b8      	ldr	r0, [r7, #24]
 800539c:	f000 f90a 	bl	80055b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005418 <pvPortMalloc+0x18c>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005418 <pvPortMalloc+0x18c>)
 80053ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <pvPortMalloc+0x18c>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <pvPortMalloc+0x194>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d203      	bcs.n	80053c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053ba:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <pvPortMalloc+0x18c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a18      	ldr	r2, [pc, #96]	@ (8005420 <pvPortMalloc+0x194>)
 80053c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <pvPortMalloc+0x188>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053d6:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <pvPortMalloc+0x198>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <pvPortMalloc+0x198>)
 80053de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053e0:	f7fe fbe0 	bl	8003ba4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <pvPortMalloc+0x17a>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	60fb      	str	r3, [r7, #12]
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	e7fd      	b.n	8005402 <pvPortMalloc+0x176>
	return pvReturn;
 8005406:	69fb      	ldr	r3, [r7, #28]
}
 8005408:	4618      	mov	r0, r3
 800540a:	3728      	adds	r7, #40	@ 0x28
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20001b6c 	.word	0x20001b6c
 8005414:	20001b80 	.word	0x20001b80
 8005418:	20001b70 	.word	0x20001b70
 800541c:	20001b64 	.word	0x20001b64
 8005420:	20001b74 	.word	0x20001b74
 8005424:	20001b78 	.word	0x20001b78

08005428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d04f      	beq.n	80054da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800543a:	2308      	movs	r3, #8
 800543c:	425b      	negs	r3, r3
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4413      	add	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	4b25      	ldr	r3, [pc, #148]	@ (80054e4 <vPortFree+0xbc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4013      	ands	r3, r2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10b      	bne.n	800546e <vPortFree+0x46>
	__asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	60fb      	str	r3, [r7, #12]
}
 8005468:	bf00      	nop
 800546a:	bf00      	nop
 800546c:	e7fd      	b.n	800546a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <vPortFree+0x66>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547a:	f383 8811 	msr	BASEPRI, r3
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	60bb      	str	r3, [r7, #8]
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	e7fd      	b.n	800548a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <vPortFree+0xbc>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01e      	beq.n	80054da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d11a      	bne.n	80054da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	4b0e      	ldr	r3, [pc, #56]	@ (80054e4 <vPortFree+0xbc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	401a      	ands	r2, r3
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054b4:	f7fe fb68 	bl	8003b88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <vPortFree+0xc0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4413      	add	r3, r2
 80054c2:	4a09      	ldr	r2, [pc, #36]	@ (80054e8 <vPortFree+0xc0>)
 80054c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054c6:	6938      	ldr	r0, [r7, #16]
 80054c8:	f000 f874 	bl	80055b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054cc:	4b07      	ldr	r3, [pc, #28]	@ (80054ec <vPortFree+0xc4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3301      	adds	r3, #1
 80054d2:	4a06      	ldr	r2, [pc, #24]	@ (80054ec <vPortFree+0xc4>)
 80054d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054d6:	f7fe fb65 	bl	8003ba4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054da:	bf00      	nop
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20001b80 	.word	0x20001b80
 80054e8:	20001b70 	.word	0x20001b70
 80054ec:	20001b7c 	.word	0x20001b7c

080054f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80054fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054fc:	4b27      	ldr	r3, [pc, #156]	@ (800559c <prvHeapInit+0xac>)
 80054fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00c      	beq.n	8005524 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3307      	adds	r3, #7
 800550e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	4a1f      	ldr	r2, [pc, #124]	@ (800559c <prvHeapInit+0xac>)
 8005520:	4413      	add	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005528:	4a1d      	ldr	r2, [pc, #116]	@ (80055a0 <prvHeapInit+0xb0>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800552e:	4b1c      	ldr	r3, [pc, #112]	@ (80055a0 <prvHeapInit+0xb0>)
 8005530:	2200      	movs	r2, #0
 8005532:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	4413      	add	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800553c:	2208      	movs	r2, #8
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	1a9b      	subs	r3, r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f023 0307 	bic.w	r3, r3, #7
 800554a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a15      	ldr	r2, [pc, #84]	@ (80055a4 <prvHeapInit+0xb4>)
 8005550:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005552:	4b14      	ldr	r3, [pc, #80]	@ (80055a4 <prvHeapInit+0xb4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2200      	movs	r2, #0
 8005558:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800555a:	4b12      	ldr	r3, [pc, #72]	@ (80055a4 <prvHeapInit+0xb4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	1ad2      	subs	r2, r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005570:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <prvHeapInit+0xb4>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4a0a      	ldr	r2, [pc, #40]	@ (80055a8 <prvHeapInit+0xb8>)
 800557e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	4a09      	ldr	r2, [pc, #36]	@ (80055ac <prvHeapInit+0xbc>)
 8005586:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005588:	4b09      	ldr	r3, [pc, #36]	@ (80055b0 <prvHeapInit+0xc0>)
 800558a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800558e:	601a      	str	r2, [r3, #0]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr
 800559c:	20000fac 	.word	0x20000fac
 80055a0:	20001b64 	.word	0x20001b64
 80055a4:	20001b6c 	.word	0x20001b6c
 80055a8:	20001b74 	.word	0x20001b74
 80055ac:	20001b70 	.word	0x20001b70
 80055b0:	20001b80 	.word	0x20001b80

080055b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055bc:	4b28      	ldr	r3, [pc, #160]	@ (8005660 <prvInsertBlockIntoFreeList+0xac>)
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e002      	b.n	80055c8 <prvInsertBlockIntoFreeList+0x14>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d8f7      	bhi.n	80055c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	4413      	add	r3, r2
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d108      	bne.n	80055f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	441a      	add	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	429a      	cmp	r2, r3
 8005608:	d118      	bne.n	800563c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b15      	ldr	r3, [pc, #84]	@ (8005664 <prvInsertBlockIntoFreeList+0xb0>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d00d      	beq.n	8005632 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e008      	b.n	8005644 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005632:	4b0c      	ldr	r3, [pc, #48]	@ (8005664 <prvInsertBlockIntoFreeList+0xb0>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e003      	b.n	8005644 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	d002      	beq.n	8005652 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005652:	bf00      	nop
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20001b64 	.word	0x20001b64
 8005664:	20001b6c 	.word	0x20001b6c

08005668 <siprintf>:
 8005668:	b40e      	push	{r1, r2, r3}
 800566a:	b500      	push	{lr}
 800566c:	b09c      	sub	sp, #112	@ 0x70
 800566e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005670:	9002      	str	r0, [sp, #8]
 8005672:	9006      	str	r0, [sp, #24]
 8005674:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005678:	4809      	ldr	r0, [pc, #36]	@ (80056a0 <siprintf+0x38>)
 800567a:	9107      	str	r1, [sp, #28]
 800567c:	9104      	str	r1, [sp, #16]
 800567e:	4909      	ldr	r1, [pc, #36]	@ (80056a4 <siprintf+0x3c>)
 8005680:	f853 2b04 	ldr.w	r2, [r3], #4
 8005684:	9105      	str	r1, [sp, #20]
 8005686:	6800      	ldr	r0, [r0, #0]
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	a902      	add	r1, sp, #8
 800568c:	f000 f9f8 	bl	8005a80 <_svfiprintf_r>
 8005690:	9b02      	ldr	r3, [sp, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
 8005696:	b01c      	add	sp, #112	@ 0x70
 8005698:	f85d eb04 	ldr.w	lr, [sp], #4
 800569c:	b003      	add	sp, #12
 800569e:	4770      	bx	lr
 80056a0:	20000010 	.word	0x20000010
 80056a4:	ffff0208 	.word	0xffff0208

080056a8 <memset>:
 80056a8:	4402      	add	r2, r0
 80056aa:	4603      	mov	r3, r0
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	f803 1b01 	strb.w	r1, [r3], #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <_reclaim_reent>:
 80056b8:	4b29      	ldr	r3, [pc, #164]	@ (8005760 <_reclaim_reent+0xa8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4283      	cmp	r3, r0
 80056be:	b570      	push	{r4, r5, r6, lr}
 80056c0:	4604      	mov	r4, r0
 80056c2:	d04b      	beq.n	800575c <_reclaim_reent+0xa4>
 80056c4:	69c3      	ldr	r3, [r0, #28]
 80056c6:	b1ab      	cbz	r3, 80056f4 <_reclaim_reent+0x3c>
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	b16b      	cbz	r3, 80056e8 <_reclaim_reent+0x30>
 80056cc:	2500      	movs	r5, #0
 80056ce:	69e3      	ldr	r3, [r4, #28]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	5959      	ldr	r1, [r3, r5]
 80056d4:	2900      	cmp	r1, #0
 80056d6:	d13b      	bne.n	8005750 <_reclaim_reent+0x98>
 80056d8:	3504      	adds	r5, #4
 80056da:	2d80      	cmp	r5, #128	@ 0x80
 80056dc:	d1f7      	bne.n	80056ce <_reclaim_reent+0x16>
 80056de:	69e3      	ldr	r3, [r4, #28]
 80056e0:	4620      	mov	r0, r4
 80056e2:	68d9      	ldr	r1, [r3, #12]
 80056e4:	f000 f878 	bl	80057d8 <_free_r>
 80056e8:	69e3      	ldr	r3, [r4, #28]
 80056ea:	6819      	ldr	r1, [r3, #0]
 80056ec:	b111      	cbz	r1, 80056f4 <_reclaim_reent+0x3c>
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 f872 	bl	80057d8 <_free_r>
 80056f4:	6961      	ldr	r1, [r4, #20]
 80056f6:	b111      	cbz	r1, 80056fe <_reclaim_reent+0x46>
 80056f8:	4620      	mov	r0, r4
 80056fa:	f000 f86d 	bl	80057d8 <_free_r>
 80056fe:	69e1      	ldr	r1, [r4, #28]
 8005700:	b111      	cbz	r1, 8005708 <_reclaim_reent+0x50>
 8005702:	4620      	mov	r0, r4
 8005704:	f000 f868 	bl	80057d8 <_free_r>
 8005708:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800570a:	b111      	cbz	r1, 8005712 <_reclaim_reent+0x5a>
 800570c:	4620      	mov	r0, r4
 800570e:	f000 f863 	bl	80057d8 <_free_r>
 8005712:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005714:	b111      	cbz	r1, 800571c <_reclaim_reent+0x64>
 8005716:	4620      	mov	r0, r4
 8005718:	f000 f85e 	bl	80057d8 <_free_r>
 800571c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800571e:	b111      	cbz	r1, 8005726 <_reclaim_reent+0x6e>
 8005720:	4620      	mov	r0, r4
 8005722:	f000 f859 	bl	80057d8 <_free_r>
 8005726:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005728:	b111      	cbz	r1, 8005730 <_reclaim_reent+0x78>
 800572a:	4620      	mov	r0, r4
 800572c:	f000 f854 	bl	80057d8 <_free_r>
 8005730:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005732:	b111      	cbz	r1, 800573a <_reclaim_reent+0x82>
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f84f 	bl	80057d8 <_free_r>
 800573a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800573c:	b111      	cbz	r1, 8005744 <_reclaim_reent+0x8c>
 800573e:	4620      	mov	r0, r4
 8005740:	f000 f84a 	bl	80057d8 <_free_r>
 8005744:	6a23      	ldr	r3, [r4, #32]
 8005746:	b14b      	cbz	r3, 800575c <_reclaim_reent+0xa4>
 8005748:	4620      	mov	r0, r4
 800574a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800574e:	4718      	bx	r3
 8005750:	680e      	ldr	r6, [r1, #0]
 8005752:	4620      	mov	r0, r4
 8005754:	f000 f840 	bl	80057d8 <_free_r>
 8005758:	4631      	mov	r1, r6
 800575a:	e7bb      	b.n	80056d4 <_reclaim_reent+0x1c>
 800575c:	bd70      	pop	{r4, r5, r6, pc}
 800575e:	bf00      	nop
 8005760:	20000010 	.word	0x20000010

08005764 <__errno>:
 8005764:	4b01      	ldr	r3, [pc, #4]	@ (800576c <__errno+0x8>)
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000010 	.word	0x20000010

08005770 <__libc_init_array>:
 8005770:	b570      	push	{r4, r5, r6, lr}
 8005772:	4d0d      	ldr	r5, [pc, #52]	@ (80057a8 <__libc_init_array+0x38>)
 8005774:	4c0d      	ldr	r4, [pc, #52]	@ (80057ac <__libc_init_array+0x3c>)
 8005776:	1b64      	subs	r4, r4, r5
 8005778:	10a4      	asrs	r4, r4, #2
 800577a:	2600      	movs	r6, #0
 800577c:	42a6      	cmp	r6, r4
 800577e:	d109      	bne.n	8005794 <__libc_init_array+0x24>
 8005780:	4d0b      	ldr	r5, [pc, #44]	@ (80057b0 <__libc_init_array+0x40>)
 8005782:	4c0c      	ldr	r4, [pc, #48]	@ (80057b4 <__libc_init_array+0x44>)
 8005784:	f000 fc66 	bl	8006054 <_init>
 8005788:	1b64      	subs	r4, r4, r5
 800578a:	10a4      	asrs	r4, r4, #2
 800578c:	2600      	movs	r6, #0
 800578e:	42a6      	cmp	r6, r4
 8005790:	d105      	bne.n	800579e <__libc_init_array+0x2e>
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	f855 3b04 	ldr.w	r3, [r5], #4
 8005798:	4798      	blx	r3
 800579a:	3601      	adds	r6, #1
 800579c:	e7ee      	b.n	800577c <__libc_init_array+0xc>
 800579e:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a2:	4798      	blx	r3
 80057a4:	3601      	adds	r6, #1
 80057a6:	e7f2      	b.n	800578e <__libc_init_array+0x1e>
 80057a8:	080061cc 	.word	0x080061cc
 80057ac:	080061cc 	.word	0x080061cc
 80057b0:	080061cc 	.word	0x080061cc
 80057b4:	080061d0 	.word	0x080061d0

080057b8 <__retarget_lock_acquire_recursive>:
 80057b8:	4770      	bx	lr

080057ba <__retarget_lock_release_recursive>:
 80057ba:	4770      	bx	lr

080057bc <memcpy>:
 80057bc:	440a      	add	r2, r1
 80057be:	4291      	cmp	r1, r2
 80057c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80057c4:	d100      	bne.n	80057c8 <memcpy+0xc>
 80057c6:	4770      	bx	lr
 80057c8:	b510      	push	{r4, lr}
 80057ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057d2:	4291      	cmp	r1, r2
 80057d4:	d1f9      	bne.n	80057ca <memcpy+0xe>
 80057d6:	bd10      	pop	{r4, pc}

080057d8 <_free_r>:
 80057d8:	b538      	push	{r3, r4, r5, lr}
 80057da:	4605      	mov	r5, r0
 80057dc:	2900      	cmp	r1, #0
 80057de:	d041      	beq.n	8005864 <_free_r+0x8c>
 80057e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057e4:	1f0c      	subs	r4, r1, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	bfb8      	it	lt
 80057ea:	18e4      	addlt	r4, r4, r3
 80057ec:	f000 f8e0 	bl	80059b0 <__malloc_lock>
 80057f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005868 <_free_r+0x90>)
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	b933      	cbnz	r3, 8005804 <_free_r+0x2c>
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	6014      	str	r4, [r2, #0]
 80057fa:	4628      	mov	r0, r5
 80057fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005800:	f000 b8dc 	b.w	80059bc <__malloc_unlock>
 8005804:	42a3      	cmp	r3, r4
 8005806:	d908      	bls.n	800581a <_free_r+0x42>
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	1821      	adds	r1, r4, r0
 800580c:	428b      	cmp	r3, r1
 800580e:	bf01      	itttt	eq
 8005810:	6819      	ldreq	r1, [r3, #0]
 8005812:	685b      	ldreq	r3, [r3, #4]
 8005814:	1809      	addeq	r1, r1, r0
 8005816:	6021      	streq	r1, [r4, #0]
 8005818:	e7ed      	b.n	80057f6 <_free_r+0x1e>
 800581a:	461a      	mov	r2, r3
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b10b      	cbz	r3, 8005824 <_free_r+0x4c>
 8005820:	42a3      	cmp	r3, r4
 8005822:	d9fa      	bls.n	800581a <_free_r+0x42>
 8005824:	6811      	ldr	r1, [r2, #0]
 8005826:	1850      	adds	r0, r2, r1
 8005828:	42a0      	cmp	r0, r4
 800582a:	d10b      	bne.n	8005844 <_free_r+0x6c>
 800582c:	6820      	ldr	r0, [r4, #0]
 800582e:	4401      	add	r1, r0
 8005830:	1850      	adds	r0, r2, r1
 8005832:	4283      	cmp	r3, r0
 8005834:	6011      	str	r1, [r2, #0]
 8005836:	d1e0      	bne.n	80057fa <_free_r+0x22>
 8005838:	6818      	ldr	r0, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	6053      	str	r3, [r2, #4]
 800583e:	4408      	add	r0, r1
 8005840:	6010      	str	r0, [r2, #0]
 8005842:	e7da      	b.n	80057fa <_free_r+0x22>
 8005844:	d902      	bls.n	800584c <_free_r+0x74>
 8005846:	230c      	movs	r3, #12
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	e7d6      	b.n	80057fa <_free_r+0x22>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	1821      	adds	r1, r4, r0
 8005850:	428b      	cmp	r3, r1
 8005852:	bf04      	itt	eq
 8005854:	6819      	ldreq	r1, [r3, #0]
 8005856:	685b      	ldreq	r3, [r3, #4]
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	bf04      	itt	eq
 800585c:	1809      	addeq	r1, r1, r0
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	6054      	str	r4, [r2, #4]
 8005862:	e7ca      	b.n	80057fa <_free_r+0x22>
 8005864:	bd38      	pop	{r3, r4, r5, pc}
 8005866:	bf00      	nop
 8005868:	20001cc8 	.word	0x20001cc8

0800586c <sbrk_aligned>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4e0f      	ldr	r6, [pc, #60]	@ (80058ac <sbrk_aligned+0x40>)
 8005870:	460c      	mov	r4, r1
 8005872:	6831      	ldr	r1, [r6, #0]
 8005874:	4605      	mov	r5, r0
 8005876:	b911      	cbnz	r1, 800587e <sbrk_aligned+0x12>
 8005878:	f000 fba6 	bl	8005fc8 <_sbrk_r>
 800587c:	6030      	str	r0, [r6, #0]
 800587e:	4621      	mov	r1, r4
 8005880:	4628      	mov	r0, r5
 8005882:	f000 fba1 	bl	8005fc8 <_sbrk_r>
 8005886:	1c43      	adds	r3, r0, #1
 8005888:	d103      	bne.n	8005892 <sbrk_aligned+0x26>
 800588a:	f04f 34ff 	mov.w	r4, #4294967295
 800588e:	4620      	mov	r0, r4
 8005890:	bd70      	pop	{r4, r5, r6, pc}
 8005892:	1cc4      	adds	r4, r0, #3
 8005894:	f024 0403 	bic.w	r4, r4, #3
 8005898:	42a0      	cmp	r0, r4
 800589a:	d0f8      	beq.n	800588e <sbrk_aligned+0x22>
 800589c:	1a21      	subs	r1, r4, r0
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 fb92 	bl	8005fc8 <_sbrk_r>
 80058a4:	3001      	adds	r0, #1
 80058a6:	d1f2      	bne.n	800588e <sbrk_aligned+0x22>
 80058a8:	e7ef      	b.n	800588a <sbrk_aligned+0x1e>
 80058aa:	bf00      	nop
 80058ac:	20001cc4 	.word	0x20001cc4

080058b0 <_malloc_r>:
 80058b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b4:	1ccd      	adds	r5, r1, #3
 80058b6:	f025 0503 	bic.w	r5, r5, #3
 80058ba:	3508      	adds	r5, #8
 80058bc:	2d0c      	cmp	r5, #12
 80058be:	bf38      	it	cc
 80058c0:	250c      	movcc	r5, #12
 80058c2:	2d00      	cmp	r5, #0
 80058c4:	4606      	mov	r6, r0
 80058c6:	db01      	blt.n	80058cc <_malloc_r+0x1c>
 80058c8:	42a9      	cmp	r1, r5
 80058ca:	d904      	bls.n	80058d6 <_malloc_r+0x26>
 80058cc:	230c      	movs	r3, #12
 80058ce:	6033      	str	r3, [r6, #0]
 80058d0:	2000      	movs	r0, #0
 80058d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059ac <_malloc_r+0xfc>
 80058da:	f000 f869 	bl	80059b0 <__malloc_lock>
 80058de:	f8d8 3000 	ldr.w	r3, [r8]
 80058e2:	461c      	mov	r4, r3
 80058e4:	bb44      	cbnz	r4, 8005938 <_malloc_r+0x88>
 80058e6:	4629      	mov	r1, r5
 80058e8:	4630      	mov	r0, r6
 80058ea:	f7ff ffbf 	bl	800586c <sbrk_aligned>
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	4604      	mov	r4, r0
 80058f2:	d158      	bne.n	80059a6 <_malloc_r+0xf6>
 80058f4:	f8d8 4000 	ldr.w	r4, [r8]
 80058f8:	4627      	mov	r7, r4
 80058fa:	2f00      	cmp	r7, #0
 80058fc:	d143      	bne.n	8005986 <_malloc_r+0xd6>
 80058fe:	2c00      	cmp	r4, #0
 8005900:	d04b      	beq.n	800599a <_malloc_r+0xea>
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	4639      	mov	r1, r7
 8005906:	4630      	mov	r0, r6
 8005908:	eb04 0903 	add.w	r9, r4, r3
 800590c:	f000 fb5c 	bl	8005fc8 <_sbrk_r>
 8005910:	4581      	cmp	r9, r0
 8005912:	d142      	bne.n	800599a <_malloc_r+0xea>
 8005914:	6821      	ldr	r1, [r4, #0]
 8005916:	1a6d      	subs	r5, r5, r1
 8005918:	4629      	mov	r1, r5
 800591a:	4630      	mov	r0, r6
 800591c:	f7ff ffa6 	bl	800586c <sbrk_aligned>
 8005920:	3001      	adds	r0, #1
 8005922:	d03a      	beq.n	800599a <_malloc_r+0xea>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	442b      	add	r3, r5
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	f8d8 3000 	ldr.w	r3, [r8]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	bb62      	cbnz	r2, 800598c <_malloc_r+0xdc>
 8005932:	f8c8 7000 	str.w	r7, [r8]
 8005936:	e00f      	b.n	8005958 <_malloc_r+0xa8>
 8005938:	6822      	ldr	r2, [r4, #0]
 800593a:	1b52      	subs	r2, r2, r5
 800593c:	d420      	bmi.n	8005980 <_malloc_r+0xd0>
 800593e:	2a0b      	cmp	r2, #11
 8005940:	d917      	bls.n	8005972 <_malloc_r+0xc2>
 8005942:	1961      	adds	r1, r4, r5
 8005944:	42a3      	cmp	r3, r4
 8005946:	6025      	str	r5, [r4, #0]
 8005948:	bf18      	it	ne
 800594a:	6059      	strne	r1, [r3, #4]
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	bf08      	it	eq
 8005950:	f8c8 1000 	streq.w	r1, [r8]
 8005954:	5162      	str	r2, [r4, r5]
 8005956:	604b      	str	r3, [r1, #4]
 8005958:	4630      	mov	r0, r6
 800595a:	f000 f82f 	bl	80059bc <__malloc_unlock>
 800595e:	f104 000b 	add.w	r0, r4, #11
 8005962:	1d23      	adds	r3, r4, #4
 8005964:	f020 0007 	bic.w	r0, r0, #7
 8005968:	1ac2      	subs	r2, r0, r3
 800596a:	bf1c      	itt	ne
 800596c:	1a1b      	subne	r3, r3, r0
 800596e:	50a3      	strne	r3, [r4, r2]
 8005970:	e7af      	b.n	80058d2 <_malloc_r+0x22>
 8005972:	6862      	ldr	r2, [r4, #4]
 8005974:	42a3      	cmp	r3, r4
 8005976:	bf0c      	ite	eq
 8005978:	f8c8 2000 	streq.w	r2, [r8]
 800597c:	605a      	strne	r2, [r3, #4]
 800597e:	e7eb      	b.n	8005958 <_malloc_r+0xa8>
 8005980:	4623      	mov	r3, r4
 8005982:	6864      	ldr	r4, [r4, #4]
 8005984:	e7ae      	b.n	80058e4 <_malloc_r+0x34>
 8005986:	463c      	mov	r4, r7
 8005988:	687f      	ldr	r7, [r7, #4]
 800598a:	e7b6      	b.n	80058fa <_malloc_r+0x4a>
 800598c:	461a      	mov	r2, r3
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	42a3      	cmp	r3, r4
 8005992:	d1fb      	bne.n	800598c <_malloc_r+0xdc>
 8005994:	2300      	movs	r3, #0
 8005996:	6053      	str	r3, [r2, #4]
 8005998:	e7de      	b.n	8005958 <_malloc_r+0xa8>
 800599a:	230c      	movs	r3, #12
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	4630      	mov	r0, r6
 80059a0:	f000 f80c 	bl	80059bc <__malloc_unlock>
 80059a4:	e794      	b.n	80058d0 <_malloc_r+0x20>
 80059a6:	6005      	str	r5, [r0, #0]
 80059a8:	e7d6      	b.n	8005958 <_malloc_r+0xa8>
 80059aa:	bf00      	nop
 80059ac:	20001cc8 	.word	0x20001cc8

080059b0 <__malloc_lock>:
 80059b0:	4801      	ldr	r0, [pc, #4]	@ (80059b8 <__malloc_lock+0x8>)
 80059b2:	f7ff bf01 	b.w	80057b8 <__retarget_lock_acquire_recursive>
 80059b6:	bf00      	nop
 80059b8:	20001cc0 	.word	0x20001cc0

080059bc <__malloc_unlock>:
 80059bc:	4801      	ldr	r0, [pc, #4]	@ (80059c4 <__malloc_unlock+0x8>)
 80059be:	f7ff befc 	b.w	80057ba <__retarget_lock_release_recursive>
 80059c2:	bf00      	nop
 80059c4:	20001cc0 	.word	0x20001cc0

080059c8 <__ssputs_r>:
 80059c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059cc:	688e      	ldr	r6, [r1, #8]
 80059ce:	461f      	mov	r7, r3
 80059d0:	42be      	cmp	r6, r7
 80059d2:	680b      	ldr	r3, [r1, #0]
 80059d4:	4682      	mov	sl, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	4690      	mov	r8, r2
 80059da:	d82d      	bhi.n	8005a38 <__ssputs_r+0x70>
 80059dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80059e4:	d026      	beq.n	8005a34 <__ssputs_r+0x6c>
 80059e6:	6965      	ldr	r5, [r4, #20]
 80059e8:	6909      	ldr	r1, [r1, #16]
 80059ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059ee:	eba3 0901 	sub.w	r9, r3, r1
 80059f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059f6:	1c7b      	adds	r3, r7, #1
 80059f8:	444b      	add	r3, r9
 80059fa:	106d      	asrs	r5, r5, #1
 80059fc:	429d      	cmp	r5, r3
 80059fe:	bf38      	it	cc
 8005a00:	461d      	movcc	r5, r3
 8005a02:	0553      	lsls	r3, r2, #21
 8005a04:	d527      	bpl.n	8005a56 <__ssputs_r+0x8e>
 8005a06:	4629      	mov	r1, r5
 8005a08:	f7ff ff52 	bl	80058b0 <_malloc_r>
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	b360      	cbz	r0, 8005a6a <__ssputs_r+0xa2>
 8005a10:	6921      	ldr	r1, [r4, #16]
 8005a12:	464a      	mov	r2, r9
 8005a14:	f7ff fed2 	bl	80057bc <memcpy>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a22:	81a3      	strh	r3, [r4, #12]
 8005a24:	6126      	str	r6, [r4, #16]
 8005a26:	6165      	str	r5, [r4, #20]
 8005a28:	444e      	add	r6, r9
 8005a2a:	eba5 0509 	sub.w	r5, r5, r9
 8005a2e:	6026      	str	r6, [r4, #0]
 8005a30:	60a5      	str	r5, [r4, #8]
 8005a32:	463e      	mov	r6, r7
 8005a34:	42be      	cmp	r6, r7
 8005a36:	d900      	bls.n	8005a3a <__ssputs_r+0x72>
 8005a38:	463e      	mov	r6, r7
 8005a3a:	6820      	ldr	r0, [r4, #0]
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	4641      	mov	r1, r8
 8005a40:	f000 faa8 	bl	8005f94 <memmove>
 8005a44:	68a3      	ldr	r3, [r4, #8]
 8005a46:	1b9b      	subs	r3, r3, r6
 8005a48:	60a3      	str	r3, [r4, #8]
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	4433      	add	r3, r6
 8005a4e:	6023      	str	r3, [r4, #0]
 8005a50:	2000      	movs	r0, #0
 8005a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a56:	462a      	mov	r2, r5
 8005a58:	f000 fac6 	bl	8005fe8 <_realloc_r>
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d1e0      	bne.n	8005a24 <__ssputs_r+0x5c>
 8005a62:	6921      	ldr	r1, [r4, #16]
 8005a64:	4650      	mov	r0, sl
 8005a66:	f7ff feb7 	bl	80057d8 <_free_r>
 8005a6a:	230c      	movs	r3, #12
 8005a6c:	f8ca 3000 	str.w	r3, [sl]
 8005a70:	89a3      	ldrh	r3, [r4, #12]
 8005a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a76:	81a3      	strh	r3, [r4, #12]
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	e7e9      	b.n	8005a52 <__ssputs_r+0x8a>
	...

08005a80 <_svfiprintf_r>:
 8005a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a84:	4698      	mov	r8, r3
 8005a86:	898b      	ldrh	r3, [r1, #12]
 8005a88:	061b      	lsls	r3, r3, #24
 8005a8a:	b09d      	sub	sp, #116	@ 0x74
 8005a8c:	4607      	mov	r7, r0
 8005a8e:	460d      	mov	r5, r1
 8005a90:	4614      	mov	r4, r2
 8005a92:	d510      	bpl.n	8005ab6 <_svfiprintf_r+0x36>
 8005a94:	690b      	ldr	r3, [r1, #16]
 8005a96:	b973      	cbnz	r3, 8005ab6 <_svfiprintf_r+0x36>
 8005a98:	2140      	movs	r1, #64	@ 0x40
 8005a9a:	f7ff ff09 	bl	80058b0 <_malloc_r>
 8005a9e:	6028      	str	r0, [r5, #0]
 8005aa0:	6128      	str	r0, [r5, #16]
 8005aa2:	b930      	cbnz	r0, 8005ab2 <_svfiprintf_r+0x32>
 8005aa4:	230c      	movs	r3, #12
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aac:	b01d      	add	sp, #116	@ 0x74
 8005aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab2:	2340      	movs	r3, #64	@ 0x40
 8005ab4:	616b      	str	r3, [r5, #20]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aba:	2320      	movs	r3, #32
 8005abc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ac4:	2330      	movs	r3, #48	@ 0x30
 8005ac6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c64 <_svfiprintf_r+0x1e4>
 8005aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ace:	f04f 0901 	mov.w	r9, #1
 8005ad2:	4623      	mov	r3, r4
 8005ad4:	469a      	mov	sl, r3
 8005ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ada:	b10a      	cbz	r2, 8005ae0 <_svfiprintf_r+0x60>
 8005adc:	2a25      	cmp	r2, #37	@ 0x25
 8005ade:	d1f9      	bne.n	8005ad4 <_svfiprintf_r+0x54>
 8005ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ae4:	d00b      	beq.n	8005afe <_svfiprintf_r+0x7e>
 8005ae6:	465b      	mov	r3, fp
 8005ae8:	4622      	mov	r2, r4
 8005aea:	4629      	mov	r1, r5
 8005aec:	4638      	mov	r0, r7
 8005aee:	f7ff ff6b 	bl	80059c8 <__ssputs_r>
 8005af2:	3001      	adds	r0, #1
 8005af4:	f000 80a7 	beq.w	8005c46 <_svfiprintf_r+0x1c6>
 8005af8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005afa:	445a      	add	r2, fp
 8005afc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005afe:	f89a 3000 	ldrb.w	r3, [sl]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f000 809f 	beq.w	8005c46 <_svfiprintf_r+0x1c6>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b12:	f10a 0a01 	add.w	sl, sl, #1
 8005b16:	9304      	str	r3, [sp, #16]
 8005b18:	9307      	str	r3, [sp, #28]
 8005b1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b20:	4654      	mov	r4, sl
 8005b22:	2205      	movs	r2, #5
 8005b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b28:	484e      	ldr	r0, [pc, #312]	@ (8005c64 <_svfiprintf_r+0x1e4>)
 8005b2a:	f7fa fb51 	bl	80001d0 <memchr>
 8005b2e:	9a04      	ldr	r2, [sp, #16]
 8005b30:	b9d8      	cbnz	r0, 8005b6a <_svfiprintf_r+0xea>
 8005b32:	06d0      	lsls	r0, r2, #27
 8005b34:	bf44      	itt	mi
 8005b36:	2320      	movmi	r3, #32
 8005b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b3c:	0711      	lsls	r1, r2, #28
 8005b3e:	bf44      	itt	mi
 8005b40:	232b      	movmi	r3, #43	@ 0x2b
 8005b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b46:	f89a 3000 	ldrb.w	r3, [sl]
 8005b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b4c:	d015      	beq.n	8005b7a <_svfiprintf_r+0xfa>
 8005b4e:	9a07      	ldr	r2, [sp, #28]
 8005b50:	4654      	mov	r4, sl
 8005b52:	2000      	movs	r0, #0
 8005b54:	f04f 0c0a 	mov.w	ip, #10
 8005b58:	4621      	mov	r1, r4
 8005b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b5e:	3b30      	subs	r3, #48	@ 0x30
 8005b60:	2b09      	cmp	r3, #9
 8005b62:	d94b      	bls.n	8005bfc <_svfiprintf_r+0x17c>
 8005b64:	b1b0      	cbz	r0, 8005b94 <_svfiprintf_r+0x114>
 8005b66:	9207      	str	r2, [sp, #28]
 8005b68:	e014      	b.n	8005b94 <_svfiprintf_r+0x114>
 8005b6a:	eba0 0308 	sub.w	r3, r0, r8
 8005b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8005b72:	4313      	orrs	r3, r2
 8005b74:	9304      	str	r3, [sp, #16]
 8005b76:	46a2      	mov	sl, r4
 8005b78:	e7d2      	b.n	8005b20 <_svfiprintf_r+0xa0>
 8005b7a:	9b03      	ldr	r3, [sp, #12]
 8005b7c:	1d19      	adds	r1, r3, #4
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	9103      	str	r1, [sp, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	bfbb      	ittet	lt
 8005b86:	425b      	neglt	r3, r3
 8005b88:	f042 0202 	orrlt.w	r2, r2, #2
 8005b8c:	9307      	strge	r3, [sp, #28]
 8005b8e:	9307      	strlt	r3, [sp, #28]
 8005b90:	bfb8      	it	lt
 8005b92:	9204      	strlt	r2, [sp, #16]
 8005b94:	7823      	ldrb	r3, [r4, #0]
 8005b96:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b98:	d10a      	bne.n	8005bb0 <_svfiprintf_r+0x130>
 8005b9a:	7863      	ldrb	r3, [r4, #1]
 8005b9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b9e:	d132      	bne.n	8005c06 <_svfiprintf_r+0x186>
 8005ba0:	9b03      	ldr	r3, [sp, #12]
 8005ba2:	1d1a      	adds	r2, r3, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	9203      	str	r2, [sp, #12]
 8005ba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bac:	3402      	adds	r4, #2
 8005bae:	9305      	str	r3, [sp, #20]
 8005bb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005c74 <_svfiprintf_r+0x1f4>
 8005bb4:	7821      	ldrb	r1, [r4, #0]
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	4650      	mov	r0, sl
 8005bba:	f7fa fb09 	bl	80001d0 <memchr>
 8005bbe:	b138      	cbz	r0, 8005bd0 <_svfiprintf_r+0x150>
 8005bc0:	9b04      	ldr	r3, [sp, #16]
 8005bc2:	eba0 000a 	sub.w	r0, r0, sl
 8005bc6:	2240      	movs	r2, #64	@ 0x40
 8005bc8:	4082      	lsls	r2, r0
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	3401      	adds	r4, #1
 8005bce:	9304      	str	r3, [sp, #16]
 8005bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bd4:	4824      	ldr	r0, [pc, #144]	@ (8005c68 <_svfiprintf_r+0x1e8>)
 8005bd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bda:	2206      	movs	r2, #6
 8005bdc:	f7fa faf8 	bl	80001d0 <memchr>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	d036      	beq.n	8005c52 <_svfiprintf_r+0x1d2>
 8005be4:	4b21      	ldr	r3, [pc, #132]	@ (8005c6c <_svfiprintf_r+0x1ec>)
 8005be6:	bb1b      	cbnz	r3, 8005c30 <_svfiprintf_r+0x1b0>
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	3307      	adds	r3, #7
 8005bec:	f023 0307 	bic.w	r3, r3, #7
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	9303      	str	r3, [sp, #12]
 8005bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf6:	4433      	add	r3, r6
 8005bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bfa:	e76a      	b.n	8005ad2 <_svfiprintf_r+0x52>
 8005bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c00:	460c      	mov	r4, r1
 8005c02:	2001      	movs	r0, #1
 8005c04:	e7a8      	b.n	8005b58 <_svfiprintf_r+0xd8>
 8005c06:	2300      	movs	r3, #0
 8005c08:	3401      	adds	r4, #1
 8005c0a:	9305      	str	r3, [sp, #20]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	f04f 0c0a 	mov.w	ip, #10
 8005c12:	4620      	mov	r0, r4
 8005c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c18:	3a30      	subs	r2, #48	@ 0x30
 8005c1a:	2a09      	cmp	r2, #9
 8005c1c:	d903      	bls.n	8005c26 <_svfiprintf_r+0x1a6>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0c6      	beq.n	8005bb0 <_svfiprintf_r+0x130>
 8005c22:	9105      	str	r1, [sp, #20]
 8005c24:	e7c4      	b.n	8005bb0 <_svfiprintf_r+0x130>
 8005c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e7f0      	b.n	8005c12 <_svfiprintf_r+0x192>
 8005c30:	ab03      	add	r3, sp, #12
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	462a      	mov	r2, r5
 8005c36:	4b0e      	ldr	r3, [pc, #56]	@ (8005c70 <_svfiprintf_r+0x1f0>)
 8005c38:	a904      	add	r1, sp, #16
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	f3af 8000 	nop.w
 8005c40:	1c42      	adds	r2, r0, #1
 8005c42:	4606      	mov	r6, r0
 8005c44:	d1d6      	bne.n	8005bf4 <_svfiprintf_r+0x174>
 8005c46:	89ab      	ldrh	r3, [r5, #12]
 8005c48:	065b      	lsls	r3, r3, #25
 8005c4a:	f53f af2d 	bmi.w	8005aa8 <_svfiprintf_r+0x28>
 8005c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c50:	e72c      	b.n	8005aac <_svfiprintf_r+0x2c>
 8005c52:	ab03      	add	r3, sp, #12
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	462a      	mov	r2, r5
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <_svfiprintf_r+0x1f0>)
 8005c5a:	a904      	add	r1, sp, #16
 8005c5c:	4638      	mov	r0, r7
 8005c5e:	f000 f879 	bl	8005d54 <_printf_i>
 8005c62:	e7ed      	b.n	8005c40 <_svfiprintf_r+0x1c0>
 8005c64:	08006190 	.word	0x08006190
 8005c68:	0800619a 	.word	0x0800619a
 8005c6c:	00000000 	.word	0x00000000
 8005c70:	080059c9 	.word	0x080059c9
 8005c74:	08006196 	.word	0x08006196

08005c78 <_printf_common>:
 8005c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	4698      	mov	r8, r3
 8005c80:	688a      	ldr	r2, [r1, #8]
 8005c82:	690b      	ldr	r3, [r1, #16]
 8005c84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	bfb8      	it	lt
 8005c8c:	4613      	movlt	r3, r2
 8005c8e:	6033      	str	r3, [r6, #0]
 8005c90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c94:	4607      	mov	r7, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	b10a      	cbz	r2, 8005c9e <_printf_common+0x26>
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	6033      	str	r3, [r6, #0]
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	0699      	lsls	r1, r3, #26
 8005ca2:	bf42      	ittt	mi
 8005ca4:	6833      	ldrmi	r3, [r6, #0]
 8005ca6:	3302      	addmi	r3, #2
 8005ca8:	6033      	strmi	r3, [r6, #0]
 8005caa:	6825      	ldr	r5, [r4, #0]
 8005cac:	f015 0506 	ands.w	r5, r5, #6
 8005cb0:	d106      	bne.n	8005cc0 <_printf_common+0x48>
 8005cb2:	f104 0a19 	add.w	sl, r4, #25
 8005cb6:	68e3      	ldr	r3, [r4, #12]
 8005cb8:	6832      	ldr	r2, [r6, #0]
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	42ab      	cmp	r3, r5
 8005cbe:	dc26      	bgt.n	8005d0e <_printf_common+0x96>
 8005cc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cc4:	6822      	ldr	r2, [r4, #0]
 8005cc6:	3b00      	subs	r3, #0
 8005cc8:	bf18      	it	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	0692      	lsls	r2, r2, #26
 8005cce:	d42b      	bmi.n	8005d28 <_printf_common+0xb0>
 8005cd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	47c8      	blx	r9
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d01e      	beq.n	8005d1c <_printf_common+0xa4>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	6922      	ldr	r2, [r4, #16]
 8005ce2:	f003 0306 	and.w	r3, r3, #6
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	bf02      	ittt	eq
 8005cea:	68e5      	ldreq	r5, [r4, #12]
 8005cec:	6833      	ldreq	r3, [r6, #0]
 8005cee:	1aed      	subeq	r5, r5, r3
 8005cf0:	68a3      	ldr	r3, [r4, #8]
 8005cf2:	bf0c      	ite	eq
 8005cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf8:	2500      	movne	r5, #0
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	bfc4      	itt	gt
 8005cfe:	1a9b      	subgt	r3, r3, r2
 8005d00:	18ed      	addgt	r5, r5, r3
 8005d02:	2600      	movs	r6, #0
 8005d04:	341a      	adds	r4, #26
 8005d06:	42b5      	cmp	r5, r6
 8005d08:	d11a      	bne.n	8005d40 <_printf_common+0xc8>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e008      	b.n	8005d20 <_printf_common+0xa8>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	4652      	mov	r2, sl
 8005d12:	4641      	mov	r1, r8
 8005d14:	4638      	mov	r0, r7
 8005d16:	47c8      	blx	r9
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d103      	bne.n	8005d24 <_printf_common+0xac>
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d24:	3501      	adds	r5, #1
 8005d26:	e7c6      	b.n	8005cb6 <_printf_common+0x3e>
 8005d28:	18e1      	adds	r1, r4, r3
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	2030      	movs	r0, #48	@ 0x30
 8005d2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d32:	4422      	add	r2, r4
 8005d34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d3c:	3302      	adds	r3, #2
 8005d3e:	e7c7      	b.n	8005cd0 <_printf_common+0x58>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4622      	mov	r2, r4
 8005d44:	4641      	mov	r1, r8
 8005d46:	4638      	mov	r0, r7
 8005d48:	47c8      	blx	r9
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d0e6      	beq.n	8005d1c <_printf_common+0xa4>
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7d9      	b.n	8005d06 <_printf_common+0x8e>
	...

08005d54 <_printf_i>:
 8005d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d58:	7e0f      	ldrb	r7, [r1, #24]
 8005d5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d5c:	2f78      	cmp	r7, #120	@ 0x78
 8005d5e:	4691      	mov	r9, r2
 8005d60:	4680      	mov	r8, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	469a      	mov	sl, r3
 8005d66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d6a:	d807      	bhi.n	8005d7c <_printf_i+0x28>
 8005d6c:	2f62      	cmp	r7, #98	@ 0x62
 8005d6e:	d80a      	bhi.n	8005d86 <_printf_i+0x32>
 8005d70:	2f00      	cmp	r7, #0
 8005d72:	f000 80d2 	beq.w	8005f1a <_printf_i+0x1c6>
 8005d76:	2f58      	cmp	r7, #88	@ 0x58
 8005d78:	f000 80b9 	beq.w	8005eee <_printf_i+0x19a>
 8005d7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d84:	e03a      	b.n	8005dfc <_printf_i+0xa8>
 8005d86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d8a:	2b15      	cmp	r3, #21
 8005d8c:	d8f6      	bhi.n	8005d7c <_printf_i+0x28>
 8005d8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d94 <_printf_i+0x40>)
 8005d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d94:	08005ded 	.word	0x08005ded
 8005d98:	08005e01 	.word	0x08005e01
 8005d9c:	08005d7d 	.word	0x08005d7d
 8005da0:	08005d7d 	.word	0x08005d7d
 8005da4:	08005d7d 	.word	0x08005d7d
 8005da8:	08005d7d 	.word	0x08005d7d
 8005dac:	08005e01 	.word	0x08005e01
 8005db0:	08005d7d 	.word	0x08005d7d
 8005db4:	08005d7d 	.word	0x08005d7d
 8005db8:	08005d7d 	.word	0x08005d7d
 8005dbc:	08005d7d 	.word	0x08005d7d
 8005dc0:	08005f01 	.word	0x08005f01
 8005dc4:	08005e2b 	.word	0x08005e2b
 8005dc8:	08005ebb 	.word	0x08005ebb
 8005dcc:	08005d7d 	.word	0x08005d7d
 8005dd0:	08005d7d 	.word	0x08005d7d
 8005dd4:	08005f23 	.word	0x08005f23
 8005dd8:	08005d7d 	.word	0x08005d7d
 8005ddc:	08005e2b 	.word	0x08005e2b
 8005de0:	08005d7d 	.word	0x08005d7d
 8005de4:	08005d7d 	.word	0x08005d7d
 8005de8:	08005ec3 	.word	0x08005ec3
 8005dec:	6833      	ldr	r3, [r6, #0]
 8005dee:	1d1a      	adds	r2, r3, #4
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6032      	str	r2, [r6, #0]
 8005df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e09d      	b.n	8005f3c <_printf_i+0x1e8>
 8005e00:	6833      	ldr	r3, [r6, #0]
 8005e02:	6820      	ldr	r0, [r4, #0]
 8005e04:	1d19      	adds	r1, r3, #4
 8005e06:	6031      	str	r1, [r6, #0]
 8005e08:	0606      	lsls	r6, r0, #24
 8005e0a:	d501      	bpl.n	8005e10 <_printf_i+0xbc>
 8005e0c:	681d      	ldr	r5, [r3, #0]
 8005e0e:	e003      	b.n	8005e18 <_printf_i+0xc4>
 8005e10:	0645      	lsls	r5, r0, #25
 8005e12:	d5fb      	bpl.n	8005e0c <_printf_i+0xb8>
 8005e14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e18:	2d00      	cmp	r5, #0
 8005e1a:	da03      	bge.n	8005e24 <_printf_i+0xd0>
 8005e1c:	232d      	movs	r3, #45	@ 0x2d
 8005e1e:	426d      	negs	r5, r5
 8005e20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e24:	4859      	ldr	r0, [pc, #356]	@ (8005f8c <_printf_i+0x238>)
 8005e26:	230a      	movs	r3, #10
 8005e28:	e011      	b.n	8005e4e <_printf_i+0xfa>
 8005e2a:	6821      	ldr	r1, [r4, #0]
 8005e2c:	6833      	ldr	r3, [r6, #0]
 8005e2e:	0608      	lsls	r0, r1, #24
 8005e30:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e34:	d402      	bmi.n	8005e3c <_printf_i+0xe8>
 8005e36:	0649      	lsls	r1, r1, #25
 8005e38:	bf48      	it	mi
 8005e3a:	b2ad      	uxthmi	r5, r5
 8005e3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e3e:	4853      	ldr	r0, [pc, #332]	@ (8005f8c <_printf_i+0x238>)
 8005e40:	6033      	str	r3, [r6, #0]
 8005e42:	bf14      	ite	ne
 8005e44:	230a      	movne	r3, #10
 8005e46:	2308      	moveq	r3, #8
 8005e48:	2100      	movs	r1, #0
 8005e4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e4e:	6866      	ldr	r6, [r4, #4]
 8005e50:	60a6      	str	r6, [r4, #8]
 8005e52:	2e00      	cmp	r6, #0
 8005e54:	bfa2      	ittt	ge
 8005e56:	6821      	ldrge	r1, [r4, #0]
 8005e58:	f021 0104 	bicge.w	r1, r1, #4
 8005e5c:	6021      	strge	r1, [r4, #0]
 8005e5e:	b90d      	cbnz	r5, 8005e64 <_printf_i+0x110>
 8005e60:	2e00      	cmp	r6, #0
 8005e62:	d04b      	beq.n	8005efc <_printf_i+0x1a8>
 8005e64:	4616      	mov	r6, r2
 8005e66:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e6a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e6e:	5dc7      	ldrb	r7, [r0, r7]
 8005e70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e74:	462f      	mov	r7, r5
 8005e76:	42bb      	cmp	r3, r7
 8005e78:	460d      	mov	r5, r1
 8005e7a:	d9f4      	bls.n	8005e66 <_printf_i+0x112>
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d10b      	bne.n	8005e98 <_printf_i+0x144>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	07df      	lsls	r7, r3, #31
 8005e84:	d508      	bpl.n	8005e98 <_printf_i+0x144>
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	6861      	ldr	r1, [r4, #4]
 8005e8a:	4299      	cmp	r1, r3
 8005e8c:	bfde      	ittt	le
 8005e8e:	2330      	movle	r3, #48	@ 0x30
 8005e90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e98:	1b92      	subs	r2, r2, r6
 8005e9a:	6122      	str	r2, [r4, #16]
 8005e9c:	f8cd a000 	str.w	sl, [sp]
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	aa03      	add	r2, sp, #12
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f7ff fee6 	bl	8005c78 <_printf_common>
 8005eac:	3001      	adds	r0, #1
 8005eae:	d14a      	bne.n	8005f46 <_printf_i+0x1f2>
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb4:	b004      	add	sp, #16
 8005eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f043 0320 	orr.w	r3, r3, #32
 8005ec0:	6023      	str	r3, [r4, #0]
 8005ec2:	4833      	ldr	r0, [pc, #204]	@ (8005f90 <_printf_i+0x23c>)
 8005ec4:	2778      	movs	r7, #120	@ 0x78
 8005ec6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	6831      	ldr	r1, [r6, #0]
 8005ece:	061f      	lsls	r7, r3, #24
 8005ed0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ed4:	d402      	bmi.n	8005edc <_printf_i+0x188>
 8005ed6:	065f      	lsls	r7, r3, #25
 8005ed8:	bf48      	it	mi
 8005eda:	b2ad      	uxthmi	r5, r5
 8005edc:	6031      	str	r1, [r6, #0]
 8005ede:	07d9      	lsls	r1, r3, #31
 8005ee0:	bf44      	itt	mi
 8005ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ee6:	6023      	strmi	r3, [r4, #0]
 8005ee8:	b11d      	cbz	r5, 8005ef2 <_printf_i+0x19e>
 8005eea:	2310      	movs	r3, #16
 8005eec:	e7ac      	b.n	8005e48 <_printf_i+0xf4>
 8005eee:	4827      	ldr	r0, [pc, #156]	@ (8005f8c <_printf_i+0x238>)
 8005ef0:	e7e9      	b.n	8005ec6 <_printf_i+0x172>
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	f023 0320 	bic.w	r3, r3, #32
 8005ef8:	6023      	str	r3, [r4, #0]
 8005efa:	e7f6      	b.n	8005eea <_printf_i+0x196>
 8005efc:	4616      	mov	r6, r2
 8005efe:	e7bd      	b.n	8005e7c <_printf_i+0x128>
 8005f00:	6833      	ldr	r3, [r6, #0]
 8005f02:	6825      	ldr	r5, [r4, #0]
 8005f04:	6961      	ldr	r1, [r4, #20]
 8005f06:	1d18      	adds	r0, r3, #4
 8005f08:	6030      	str	r0, [r6, #0]
 8005f0a:	062e      	lsls	r6, r5, #24
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	d501      	bpl.n	8005f14 <_printf_i+0x1c0>
 8005f10:	6019      	str	r1, [r3, #0]
 8005f12:	e002      	b.n	8005f1a <_printf_i+0x1c6>
 8005f14:	0668      	lsls	r0, r5, #25
 8005f16:	d5fb      	bpl.n	8005f10 <_printf_i+0x1bc>
 8005f18:	8019      	strh	r1, [r3, #0]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	6123      	str	r3, [r4, #16]
 8005f1e:	4616      	mov	r6, r2
 8005f20:	e7bc      	b.n	8005e9c <_printf_i+0x148>
 8005f22:	6833      	ldr	r3, [r6, #0]
 8005f24:	1d1a      	adds	r2, r3, #4
 8005f26:	6032      	str	r2, [r6, #0]
 8005f28:	681e      	ldr	r6, [r3, #0]
 8005f2a:	6862      	ldr	r2, [r4, #4]
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4630      	mov	r0, r6
 8005f30:	f7fa f94e 	bl	80001d0 <memchr>
 8005f34:	b108      	cbz	r0, 8005f3a <_printf_i+0x1e6>
 8005f36:	1b80      	subs	r0, r0, r6
 8005f38:	6060      	str	r0, [r4, #4]
 8005f3a:	6863      	ldr	r3, [r4, #4]
 8005f3c:	6123      	str	r3, [r4, #16]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f44:	e7aa      	b.n	8005e9c <_printf_i+0x148>
 8005f46:	6923      	ldr	r3, [r4, #16]
 8005f48:	4632      	mov	r2, r6
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	47d0      	blx	sl
 8005f50:	3001      	adds	r0, #1
 8005f52:	d0ad      	beq.n	8005eb0 <_printf_i+0x15c>
 8005f54:	6823      	ldr	r3, [r4, #0]
 8005f56:	079b      	lsls	r3, r3, #30
 8005f58:	d413      	bmi.n	8005f82 <_printf_i+0x22e>
 8005f5a:	68e0      	ldr	r0, [r4, #12]
 8005f5c:	9b03      	ldr	r3, [sp, #12]
 8005f5e:	4298      	cmp	r0, r3
 8005f60:	bfb8      	it	lt
 8005f62:	4618      	movlt	r0, r3
 8005f64:	e7a6      	b.n	8005eb4 <_printf_i+0x160>
 8005f66:	2301      	movs	r3, #1
 8005f68:	4632      	mov	r2, r6
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	47d0      	blx	sl
 8005f70:	3001      	adds	r0, #1
 8005f72:	d09d      	beq.n	8005eb0 <_printf_i+0x15c>
 8005f74:	3501      	adds	r5, #1
 8005f76:	68e3      	ldr	r3, [r4, #12]
 8005f78:	9903      	ldr	r1, [sp, #12]
 8005f7a:	1a5b      	subs	r3, r3, r1
 8005f7c:	42ab      	cmp	r3, r5
 8005f7e:	dcf2      	bgt.n	8005f66 <_printf_i+0x212>
 8005f80:	e7eb      	b.n	8005f5a <_printf_i+0x206>
 8005f82:	2500      	movs	r5, #0
 8005f84:	f104 0619 	add.w	r6, r4, #25
 8005f88:	e7f5      	b.n	8005f76 <_printf_i+0x222>
 8005f8a:	bf00      	nop
 8005f8c:	080061a1 	.word	0x080061a1
 8005f90:	080061b2 	.word	0x080061b2

08005f94 <memmove>:
 8005f94:	4288      	cmp	r0, r1
 8005f96:	b510      	push	{r4, lr}
 8005f98:	eb01 0402 	add.w	r4, r1, r2
 8005f9c:	d902      	bls.n	8005fa4 <memmove+0x10>
 8005f9e:	4284      	cmp	r4, r0
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	d807      	bhi.n	8005fb4 <memmove+0x20>
 8005fa4:	1e43      	subs	r3, r0, #1
 8005fa6:	42a1      	cmp	r1, r4
 8005fa8:	d008      	beq.n	8005fbc <memmove+0x28>
 8005faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fb2:	e7f8      	b.n	8005fa6 <memmove+0x12>
 8005fb4:	4402      	add	r2, r0
 8005fb6:	4601      	mov	r1, r0
 8005fb8:	428a      	cmp	r2, r1
 8005fba:	d100      	bne.n	8005fbe <memmove+0x2a>
 8005fbc:	bd10      	pop	{r4, pc}
 8005fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fc6:	e7f7      	b.n	8005fb8 <memmove+0x24>

08005fc8 <_sbrk_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d06      	ldr	r5, [pc, #24]	@ (8005fe4 <_sbrk_r+0x1c>)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	602b      	str	r3, [r5, #0]
 8005fd4:	f7fb f828 	bl	8001028 <_sbrk>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_sbrk_r+0x1a>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_sbrk_r+0x1a>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	20001cbc 	.word	0x20001cbc

08005fe8 <_realloc_r>:
 8005fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fec:	4680      	mov	r8, r0
 8005fee:	4615      	mov	r5, r2
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	b921      	cbnz	r1, 8005ffe <_realloc_r+0x16>
 8005ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	f7ff bc59 	b.w	80058b0 <_malloc_r>
 8005ffe:	b92a      	cbnz	r2, 800600c <_realloc_r+0x24>
 8006000:	f7ff fbea 	bl	80057d8 <_free_r>
 8006004:	2400      	movs	r4, #0
 8006006:	4620      	mov	r0, r4
 8006008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600c:	f000 f81a 	bl	8006044 <_malloc_usable_size_r>
 8006010:	4285      	cmp	r5, r0
 8006012:	4606      	mov	r6, r0
 8006014:	d802      	bhi.n	800601c <_realloc_r+0x34>
 8006016:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800601a:	d8f4      	bhi.n	8006006 <_realloc_r+0x1e>
 800601c:	4629      	mov	r1, r5
 800601e:	4640      	mov	r0, r8
 8006020:	f7ff fc46 	bl	80058b0 <_malloc_r>
 8006024:	4607      	mov	r7, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	d0ec      	beq.n	8006004 <_realloc_r+0x1c>
 800602a:	42b5      	cmp	r5, r6
 800602c:	462a      	mov	r2, r5
 800602e:	4621      	mov	r1, r4
 8006030:	bf28      	it	cs
 8006032:	4632      	movcs	r2, r6
 8006034:	f7ff fbc2 	bl	80057bc <memcpy>
 8006038:	4621      	mov	r1, r4
 800603a:	4640      	mov	r0, r8
 800603c:	f7ff fbcc 	bl	80057d8 <_free_r>
 8006040:	463c      	mov	r4, r7
 8006042:	e7e0      	b.n	8006006 <_realloc_r+0x1e>

08006044 <_malloc_usable_size_r>:
 8006044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006048:	1f18      	subs	r0, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	bfbc      	itt	lt
 800604e:	580b      	ldrlt	r3, [r1, r0]
 8006050:	18c0      	addlt	r0, r0, r3
 8006052:	4770      	bx	lr

08006054 <_init>:
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006056:	bf00      	nop
 8006058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800605a:	bc08      	pop	{r3}
 800605c:	469e      	mov	lr, r3
 800605e:	4770      	bx	lr

08006060 <_fini>:
 8006060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006062:	bf00      	nop
 8006064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006066:	bc08      	pop	{r3}
 8006068:	469e      	mov	lr, r3
 800606a:	4770      	bx	lr
